# [allow (clippy :: let_and_return , clippy :: suspicious_else_formatting , clippy :: redundant_field_names , dead_code , non_camel_case_types , non_snake_case , non_upper_case_globals , redundant_semicolons , unreachable_patterns , unused_braces , unused_imports , unused_parens , unused_qualifications , unused_unsafe , unused_variables)] pub mod types { pub mod dash_spv_masternode_processor { use crate as dash_spv_apple_bindings ; pub mod util { use crate as dash_spv_apple_bindings ; } pub mod models { use crate as dash_spv_apple_bindings ; pub mod llmq_indexed_hash { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`LLMQIndexedHash`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash { pub index : u32 , pub hash : * mut crate :: fermented :: generics :: Arr_u8_32 } impl ferment :: FFIConversionFrom < dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash > for dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash) -> dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash { index : ffi_ref . index , hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (ffi_ref . hash) } } } impl ferment :: FFIConversionTo < dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash > for dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash { unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash) -> * const dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash { ferment :: boxed (dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash { index : obj . index , hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj . hash) }) } } impl Drop for dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment :: unbox_any (ffi_ref . hash) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_ctor < > (index : u32 , hash : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash { ferment :: boxed (dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash { index , hash }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_destroy < > (ffi : * mut dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_get_index < > (obj : * const dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash) -> u32 { (* obj) . index } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_get_hash < > (obj : * const dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_set_index < > (obj : * const dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash) -> u32 { (* obj) . index } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_set_hash < > (obj : * const dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . hash } } pub mod masternode_entry { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_entry::new`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_new (version : u16 , provider_registration_transaction_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , confirmed_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , ip_address : * mut crate :: fermented :: generics :: Arr_u8_16 , port : u16 , key_id_voting : * mut crate :: fermented :: generics :: Arr_u8_20 , operator_public_key_data : * mut crate :: fermented :: generics :: Arr_u8_48 , operator_public_key_version : u16 , is_valid : u8 , mn_type : u16 , platform_http_port : u16 , platform_node_id : * mut crate :: fermented :: generics :: Arr_u8_20 , update_height : u32 , protocol_version : u32) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { let obj = dash_spv_masternode_processor :: models :: masternode_entry :: new (version , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (provider_registration_transaction_hash) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (confirmed_hash) , < crate :: fermented :: generics :: Arr_u8_16 as ferment :: FFIConversionFrom < [u8 ; 16] >> :: ffi_from (ip_address) , port , < crate :: fermented :: generics :: Arr_u8_20 as ferment :: FFIConversionFrom < [u8 ; 20] >> :: ffi_from (key_id_voting) , < crate :: fermented :: generics :: Arr_u8_48 as ferment :: FFIConversionFrom < [u8 ; 48] >> :: ffi_from (operator_public_key_data) , operator_public_key_version , is_valid , mn_type , platform_http_port , < crate :: fermented :: generics :: Arr_u8_20 as ferment :: FFIConversionFrom < [u8 ; 20] >> :: ffi_from (platform_node_id) , update_height , protocol_version) ; < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry as ferment :: FFIConversionTo < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`MasternodeEntry`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { pub provider_registration_transaction_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , pub confirmed_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , pub confirmed_hash_hashed_with_provider_registration_transaction_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , pub socket_address : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: socket_address :: dash_spv_masternode_processor_common_socket_address_SocketAddress , pub operator_public_key : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: operator_public_key :: dash_spv_crypto_keys_operator_public_key_OperatorPublicKey , pub previous_operator_public_keys : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_crypto_keys_operator_public_key_OperatorPublicKey , pub previous_entry_hashes : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_u8_arr_32 , pub previous_validity : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_bool , pub known_confirmed_at_height : * mut u32 , pub update_height : u32 , pub key_id_voting : * mut crate :: fermented :: generics :: Arr_u8_20 , pub is_valid : bool , pub mn_type : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: masternode_type :: dash_spv_masternode_processor_common_masternode_type_MasternodeType , pub platform_http_port : u16 , pub platform_node_id : * mut crate :: fermented :: generics :: Arr_u8_20 , pub entry_hash : * mut crate :: fermented :: generics :: Arr_u8_32 } impl ferment :: FFIConversionFrom < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > for dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry { provider_registration_transaction_hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (ffi_ref . provider_registration_transaction_hash) , confirmed_hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (ffi_ref . confirmed_hash) , confirmed_hash_hashed_with_provider_registration_transaction_hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from_opt (ffi_ref . confirmed_hash_hashed_with_provider_registration_transaction_hash) , socket_address : < crate :: fermented :: types :: dash_spv_masternode_processor :: common :: socket_address :: dash_spv_masternode_processor_common_socket_address_SocketAddress as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: common :: socket_address :: SocketAddress >> :: ffi_from (ffi_ref . socket_address) , operator_public_key : < crate :: fermented :: types :: dash_spv_crypto :: keys :: operator_public_key :: dash_spv_crypto_keys_operator_public_key_OperatorPublicKey as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: operator_public_key :: OperatorPublicKey >> :: ffi_from (ffi_ref . operator_public_key) , previous_operator_public_keys : < crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_crypto_keys_operator_public_key_OperatorPublicKey as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < dash_spv_masternode_processor :: common :: block :: Block , dash_spv_crypto :: keys :: operator_public_key :: OperatorPublicKey > >> :: ffi_from (ffi_ref . previous_operator_public_keys) , previous_entry_hashes : < crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_u8_arr_32 as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < dash_spv_masternode_processor :: common :: block :: Block , [u8 ; 32] > >> :: ffi_from (ffi_ref . previous_entry_hashes) , previous_validity : < crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_bool as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < dash_spv_masternode_processor :: common :: block :: Block , bool > >> :: ffi_from (ffi_ref . previous_validity) , known_confirmed_at_height : ferment :: from_opt_primitive (ffi_ref . known_confirmed_at_height) , update_height : ffi_ref . update_height , key_id_voting : < crate :: fermented :: generics :: Arr_u8_20 as ferment :: FFIConversionFrom < [u8 ; 20] >> :: ffi_from (ffi_ref . key_id_voting) , is_valid : ffi_ref . is_valid , mn_type : < crate :: fermented :: types :: dash_spv_masternode_processor :: common :: masternode_type :: dash_spv_masternode_processor_common_masternode_type_MasternodeType as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: common :: masternode_type :: MasternodeType >> :: ffi_from (ffi_ref . mn_type) , platform_http_port : ffi_ref . platform_http_port , platform_node_id : < crate :: fermented :: generics :: Arr_u8_20 as ferment :: FFIConversionFrom < [u8 ; 20] >> :: ffi_from (ffi_ref . platform_node_id) , entry_hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (ffi_ref . entry_hash) } } } impl ferment :: FFIConversionTo < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > for dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry) -> * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment :: boxed (dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { provider_registration_transaction_hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj . provider_registration_transaction_hash) , confirmed_hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj . confirmed_hash) , confirmed_hash_hashed_with_provider_registration_transaction_hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to_opt (obj . confirmed_hash_hashed_with_provider_registration_transaction_hash) , socket_address : < crate :: fermented :: types :: dash_spv_masternode_processor :: common :: socket_address :: dash_spv_masternode_processor_common_socket_address_SocketAddress as ferment :: FFIConversionTo < dash_spv_masternode_processor :: common :: socket_address :: SocketAddress >> :: ffi_to (obj . socket_address) , operator_public_key : < crate :: fermented :: types :: dash_spv_crypto :: keys :: operator_public_key :: dash_spv_crypto_keys_operator_public_key_OperatorPublicKey as ferment :: FFIConversionTo < dash_spv_crypto :: keys :: operator_public_key :: OperatorPublicKey >> :: ffi_to (obj . operator_public_key) , previous_operator_public_keys : < crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_crypto_keys_operator_public_key_OperatorPublicKey as ferment :: FFIConversionTo < std :: collections :: BTreeMap < dash_spv_masternode_processor :: common :: block :: Block , dash_spv_crypto :: keys :: operator_public_key :: OperatorPublicKey > >> :: ffi_to (obj . previous_operator_public_keys) , previous_entry_hashes : < crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_u8_arr_32 as ferment :: FFIConversionTo < std :: collections :: BTreeMap < dash_spv_masternode_processor :: common :: block :: Block , [u8 ; 32] > >> :: ffi_to (obj . previous_entry_hashes) , previous_validity : < crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_bool as ferment :: FFIConversionTo < std :: collections :: BTreeMap < dash_spv_masternode_processor :: common :: block :: Block , bool > >> :: ffi_to (obj . previous_validity) , known_confirmed_at_height : ferment :: to_opt_primitive (obj . known_confirmed_at_height) , update_height : obj . update_height , key_id_voting : < crate :: fermented :: generics :: Arr_u8_20 as ferment :: FFIConversionTo < [u8 ; 20] >> :: ffi_to (obj . key_id_voting) , is_valid : obj . is_valid , mn_type : < crate :: fermented :: types :: dash_spv_masternode_processor :: common :: masternode_type :: dash_spv_masternode_processor_common_masternode_type_MasternodeType as ferment :: FFIConversionTo < dash_spv_masternode_processor :: common :: masternode_type :: MasternodeType >> :: ffi_to (obj . mn_type) , platform_http_port : obj . platform_http_port , platform_node_id : < crate :: fermented :: generics :: Arr_u8_20 as ferment :: FFIConversionTo < [u8 ; 20] >> :: ffi_to (obj . platform_node_id) , entry_hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj . entry_hash) }) } } impl Drop for dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . provider_registration_transaction_hash) ; ferment :: unbox_any (ffi_ref . confirmed_hash) ; ferment :: unbox_any_opt (ffi_ref . confirmed_hash_hashed_with_provider_registration_transaction_hash) ; ferment :: unbox_any (ffi_ref . socket_address) ; ferment :: unbox_any (ffi_ref . operator_public_key) ; ferment :: unbox_any (ffi_ref . previous_operator_public_keys) ; ferment :: unbox_any (ffi_ref . previous_entry_hashes) ; ferment :: unbox_any (ffi_ref . previous_validity) ; ferment :: destroy_opt_primitive (ffi_ref . known_confirmed_at_height) ; ; ferment :: unbox_any (ffi_ref . key_id_voting) ; ; ferment :: unbox_any (ffi_ref . mn_type) ; ; ferment :: unbox_any (ffi_ref . platform_node_id) ; ferment :: unbox_any (ffi_ref . entry_hash) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_ctor < > (provider_registration_transaction_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , confirmed_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , confirmed_hash_hashed_with_provider_registration_transaction_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , socket_address : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: socket_address :: dash_spv_masternode_processor_common_socket_address_SocketAddress , operator_public_key : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: operator_public_key :: dash_spv_crypto_keys_operator_public_key_OperatorPublicKey , previous_operator_public_keys : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_crypto_keys_operator_public_key_OperatorPublicKey , previous_entry_hashes : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_u8_arr_32 , previous_validity : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_bool , known_confirmed_at_height : * mut u32 , update_height : u32 , key_id_voting : * mut crate :: fermented :: generics :: Arr_u8_20 , is_valid : bool , mn_type : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: masternode_type :: dash_spv_masternode_processor_common_masternode_type_MasternodeType , platform_http_port : u16 , platform_node_id : * mut crate :: fermented :: generics :: Arr_u8_20 , entry_hash : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment :: boxed (dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { provider_registration_transaction_hash , confirmed_hash , confirmed_hash_hashed_with_provider_registration_transaction_hash , socket_address , operator_public_key , previous_operator_public_keys , previous_entry_hashes , previous_validity , known_confirmed_at_height , update_height , key_id_voting , is_valid , mn_type , platform_http_port , platform_node_id , entry_hash }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_destroy < > (ffi : * mut dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_get_provider_registration_transaction_hash < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . provider_registration_transaction_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_get_confirmed_hash < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . confirmed_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_get_confirmed_hash_hashed_with_provider_registration_transaction_hash < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . confirmed_hash_hashed_with_provider_registration_transaction_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_get_socket_address < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: socket_address :: dash_spv_masternode_processor_common_socket_address_SocketAddress { (* obj) . socket_address } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_get_operator_public_key < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: operator_public_key :: dash_spv_crypto_keys_operator_public_key_OperatorPublicKey { (* obj) . operator_public_key } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_get_previous_operator_public_keys < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_crypto_keys_operator_public_key_OperatorPublicKey { (* obj) . previous_operator_public_keys } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_get_previous_entry_hashes < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_u8_arr_32 { (* obj) . previous_entry_hashes } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_get_previous_validity < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_bool { (* obj) . previous_validity } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_get_known_confirmed_at_height < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut u32 { (* obj) . known_confirmed_at_height } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_get_update_height < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> u32 { (* obj) . update_height } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_get_key_id_voting < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: generics :: Arr_u8_20 { (* obj) . key_id_voting } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_get_is_valid < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> bool { (* obj) . is_valid } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_get_mn_type < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: masternode_type :: dash_spv_masternode_processor_common_masternode_type_MasternodeType { (* obj) . mn_type } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_get_platform_http_port < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> u16 { (* obj) . platform_http_port } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_get_platform_node_id < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: generics :: Arr_u8_20 { (* obj) . platform_node_id } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_get_entry_hash < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . entry_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_set_provider_registration_transaction_hash < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . provider_registration_transaction_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_set_confirmed_hash < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . confirmed_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_set_confirmed_hash_hashed_with_provider_registration_transaction_hash < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . confirmed_hash_hashed_with_provider_registration_transaction_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_set_socket_address < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: socket_address :: dash_spv_masternode_processor_common_socket_address_SocketAddress { (* obj) . socket_address } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_set_operator_public_key < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: operator_public_key :: dash_spv_crypto_keys_operator_public_key_OperatorPublicKey { (* obj) . operator_public_key } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_set_previous_operator_public_keys < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_crypto_keys_operator_public_key_OperatorPublicKey { (* obj) . previous_operator_public_keys } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_set_previous_entry_hashes < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_u8_arr_32 { (* obj) . previous_entry_hashes } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_set_previous_validity < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_bool { (* obj) . previous_validity } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_set_known_confirmed_at_height < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut u32 { (* obj) . known_confirmed_at_height } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_set_update_height < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> u32 { (* obj) . update_height } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_set_key_id_voting < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: generics :: Arr_u8_20 { (* obj) . key_id_voting } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_set_is_valid < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> bool { (* obj) . is_valid } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_set_mn_type < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: masternode_type :: dash_spv_masternode_processor_common_masternode_type_MasternodeType { (* obj) . mn_type } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_set_platform_http_port < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> u16 { (* obj) . platform_http_port } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_set_platform_node_id < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: generics :: Arr_u8_20 { (* obj) . platform_node_id } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_set_entry_hash < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . entry_hash } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_entry::from_entity`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_from_entity (version : u16 , provider_registration_transaction_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , confirmed_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , ip_address : * mut crate :: fermented :: generics :: Arr_u8_16 , port : u16 , key_id_voting : * mut crate :: fermented :: generics :: Arr_u8_20 , operator_public_key_data : * mut crate :: fermented :: generics :: Arr_u8_48 , operator_public_key_version : u16 , is_valid : bool , mn_type : u16 , platform_http_port : u16 , platform_node_id : * mut crate :: fermented :: generics :: Arr_u8_20 , update_height : u32 , confirmed_hash_hashed_with_provider_registration_transaction_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , known_confirmed_at_height : u32 , entry_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , previous_entry_hashes : * mut crate :: fermented :: generics :: Vec_u8_68 , previous_operator_public_keys : * mut crate :: fermented :: generics :: Vec_u8_86 , previous_validity : * mut crate :: fermented :: generics :: Vec_u8_37) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { let obj = dash_spv_masternode_processor :: models :: masternode_entry :: from_entity (version , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (provider_registration_transaction_hash) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (confirmed_hash) , < crate :: fermented :: generics :: Arr_u8_16 as ferment :: FFIConversionFrom < [u8 ; 16] >> :: ffi_from (ip_address) , port , < crate :: fermented :: generics :: Arr_u8_20 as ferment :: FFIConversionFrom < [u8 ; 20] >> :: ffi_from (key_id_voting) , < crate :: fermented :: generics :: Arr_u8_48 as ferment :: FFIConversionFrom < [u8 ; 48] >> :: ffi_from (operator_public_key_data) , operator_public_key_version , is_valid , mn_type , platform_http_port , < crate :: fermented :: generics :: Arr_u8_20 as ferment :: FFIConversionFrom < [u8 ; 20] >> :: ffi_from (platform_node_id) , update_height , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (confirmed_hash_hashed_with_provider_registration_transaction_hash) , known_confirmed_at_height , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (entry_hash) , < crate :: fermented :: generics :: Vec_u8_68 as ferment :: FFIConversionFrom < Vec < [u8 ; 68] > >> :: ffi_from (previous_entry_hashes) , < crate :: fermented :: generics :: Vec_u8_86 as ferment :: FFIConversionFrom < Vec < [u8 ; 86] > >> :: ffi_from (previous_operator_public_keys) , < crate :: fermented :: generics :: Vec_u8_37 as ferment :: FFIConversionFrom < Vec < [u8 ; 37] > >> :: ffi_from (previous_validity)) ; < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry as ferment :: FFIConversionTo < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_entry::MasternodeEntry::entry_hash_at`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_entry_hash_at (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , block_height : u32) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry :: entry_hash_at (& ferment :: FFIConversionFrom :: ffi_from (self_) , block_height) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_entry::MasternodeEntry::operator_public_key_at`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_operator_public_key_at (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , block_height : u32) -> * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: operator_public_key :: dash_spv_crypto_keys_operator_public_key_OperatorPublicKey { let obj = dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry :: operator_public_key_at (& ferment :: FFIConversionFrom :: ffi_from (self_) , block_height) ; < crate :: fermented :: types :: dash_spv_crypto :: keys :: operator_public_key :: dash_spv_crypto_keys_operator_public_key_OperatorPublicKey as ferment :: FFIConversionTo < dash_spv_crypto :: keys :: operator_public_key :: OperatorPublicKey >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_entry::MasternodeEntry::hash_confirmed_hash`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_hash_confirmed_hash (confirmed_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , provider_registration_transaction_hash : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry :: hash_confirmed_hash (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (confirmed_hash) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (provider_registration_transaction_hash)) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_entry::MasternodeEntry::is_valid_at`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_is_valid_at (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , block_height : u32) -> bool { let obj = dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry :: is_valid_at (& ferment :: FFIConversionFrom :: ffi_from (self_) , block_height) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_entry::MasternodeEntry::unique_id`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_unique_id (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry :: unique_id (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_entry::MasternodeEntry::print_description`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_print_description (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) { let obj = dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry :: print_description (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_entry::MasternodeEntry::host`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_host (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry :: host (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_entry::MasternodeEntry::confirmed_hash_at`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_confirmed_hash_at (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , block_height : u32) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry :: confirmed_hash_at (& ferment :: FFIConversionFrom :: ffi_from (self_) , block_height) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_entry::MasternodeEntry::confirmed_hash_hashed_with_pro_reg_tx_hash_at`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_confirmed_hash_hashed_with_pro_reg_tx_hash_at (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , block_height : u32) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry :: confirmed_hash_hashed_with_pro_reg_tx_hash_at (& ferment :: FFIConversionFrom :: ffi_from (self_) , block_height) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_entry::MasternodeEntry::address_is_equal_to`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_address_is_equal_to (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , addr : * mut crate :: fermented :: generics :: Arr_u8_16) -> bool { let obj = dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry :: address_is_equal_to (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: generics :: Arr_u8_16 as ferment :: FFIConversionFrom < [u8 ; 16] >> :: ffi_from (addr)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_entry::MasternodeEntry::confirmed_hash_is_equal_to`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_confirmed_hash_is_equal_to (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , confirmed_hash : * mut crate :: fermented :: generics :: Arr_u8_32) -> bool { let obj = dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry :: confirmed_hash_is_equal_to (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (confirmed_hash)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_entry::MasternodeEntry::key_id_is_equal_to`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_key_id_is_equal_to (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , key_id : * mut crate :: fermented :: generics :: Arr_u8_20) -> bool { let obj = dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry :: key_id_is_equal_to (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: generics :: Arr_u8_20 as ferment :: FFIConversionFrom < [u8 ; 20] >> :: ffi_from (key_id)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_entry::MasternodeEntry::key_id_matches_with_secret_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_key_id_matches_with_secret_key (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , secret_key : * mut std :: os :: raw :: c_char , chain_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> bool { let obj = dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry :: key_id_matches_with_secret_key (& ferment :: FFIConversionFrom :: ffi_from (self_) , Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (secret_key))) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain_type)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_entry::MasternodeEntry::operator_pub_key_is_equal_to`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_operator_pub_key_is_equal_to (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , operator_public_key_id : * mut crate :: fermented :: generics :: Arr_u8_48) -> bool { let obj = dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry :: operator_pub_key_is_equal_to (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: generics :: Arr_u8_48 as ferment :: FFIConversionFrom < [u8 ; 48] >> :: ffi_from (operator_public_key_id)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_entry::MasternodeEntry::platform_node_id_is_equal_to`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_platform_node_id_is_equal_to (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , platform_node_id : * mut crate :: fermented :: generics :: Arr_u8_20) -> bool { let obj = dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry :: platform_node_id_is_equal_to (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: generics :: Arr_u8_20 as ferment :: FFIConversionFrom < [u8 ; 20] >> :: ffi_from (platform_node_id)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_entry::MasternodeEntry::type_is_equal_to`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_type_is_equal_to (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , mn_type : u16) -> bool { let obj = dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry :: type_is_equal_to (& ferment :: FFIConversionFrom :: ffi_from (self_) , mn_type) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_entry::MasternodeEntry::type_uint`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_type_uint (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> u16 { let obj = dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry :: type_uint (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_entry::MasternodeEntry::operator_public_key_address`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_operator_public_key_address (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , chain_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry :: operator_public_key_address (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain_type)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_entry::MasternodeEntry::voting_address`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_voting_address (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , chain_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry :: voting_address (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain_type)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_entry::MasternodeEntry::evo_node_address`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_evo_node_address (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , chain_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry :: evo_node_address (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain_type)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_entry::MasternodeEntry::is_equal_to_entry`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_is_equal_to_entry (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , other : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> bool { let obj = dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry :: is_equal_to_entry (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry >> :: ffi_from (other)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_entry::MasternodeEntry::entry_hashes_are_equal_to_hashes`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_entry_hashes_are_equal_to_hashes (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , hashes : * mut crate :: fermented :: generics :: Vec_u8_32) -> bool { let obj = dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry :: entry_hashes_are_equal_to_hashes (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: generics :: Vec_u8_32 as ferment :: FFIConversionFrom < Vec < [u8 ; 32] > >> :: ffi_from (hashes)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_entry::MasternodeEntry::entry_hashes_are_equal_to_hash`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_entry_hashes_are_equal_to_hash (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , hash : * mut crate :: fermented :: generics :: Arr_u8_32) -> bool { let obj = dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry :: entry_hashes_are_equal_to_hash (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (hash)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_entry::MasternodeEntry::merged_with_new_entry`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_merged_with_new_entry (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , entry : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , block_height : u32) { let obj = dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry :: merged_with_new_entry (& mut ferment :: FFIConversionFrom :: ffi_from (self_) , Box :: leak (Box :: new (< crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry >> :: ffi_from (entry))) , block_height) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_entry::MasternodeEntry::merge_previous_fields`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_merge_previous_fields (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , entry : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , block_height : u32) { let obj = dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry :: merge_previous_fields (& mut ferment :: FFIConversionFrom :: ffi_from (self_) , Box :: leak (Box :: new (< crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry >> :: ffi_from (entry))) , block_height) ; ; } } pub mod sync_state { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`CacheState`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_masternode_processor_models_sync_state_CacheState { QueueChanged { count : usize , max_amount : usize } , StoreChanged { count : usize , last_block_height : u32 } , StubCount { count : usize } } impl ferment :: FFIConversionFrom < dash_spv_masternode_processor :: models :: sync_state :: CacheState > for dash_spv_masternode_processor_models_sync_state_CacheState { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_models_sync_state_CacheState) -> dash_spv_masternode_processor :: models :: sync_state :: CacheState { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_masternode_processor_models_sync_state_CacheState :: QueueChanged { count , max_amount } => dash_spv_masternode_processor :: models :: sync_state :: CacheState :: QueueChanged { count : * count , max_amount : * max_amount } , dash_spv_masternode_processor_models_sync_state_CacheState :: StoreChanged { count , last_block_height } => dash_spv_masternode_processor :: models :: sync_state :: CacheState :: StoreChanged { count : * count , last_block_height : * last_block_height } , dash_spv_masternode_processor_models_sync_state_CacheState :: StubCount { count } => dash_spv_masternode_processor :: models :: sync_state :: CacheState :: StubCount { count : * count } } } } impl ferment :: FFIConversionTo < dash_spv_masternode_processor :: models :: sync_state :: CacheState > for dash_spv_masternode_processor_models_sync_state_CacheState { unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: models :: sync_state :: CacheState) -> * const dash_spv_masternode_processor_models_sync_state_CacheState { ferment :: boxed (match obj { dash_spv_masternode_processor :: models :: sync_state :: CacheState :: QueueChanged { count , max_amount } => dash_spv_masternode_processor_models_sync_state_CacheState :: QueueChanged { count : count , max_amount : max_amount } , dash_spv_masternode_processor :: models :: sync_state :: CacheState :: StoreChanged { count , last_block_height } => dash_spv_masternode_processor_models_sync_state_CacheState :: StoreChanged { count : count , last_block_height : last_block_height } , dash_spv_masternode_processor :: models :: sync_state :: CacheState :: StubCount { count } => dash_spv_masternode_processor_models_sync_state_CacheState :: StubCount { count : count } , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dash_spv_masternode_processor_models_sync_state_CacheState { fn drop (& mut self) { unsafe { match self { dash_spv_masternode_processor_models_sync_state_CacheState :: QueueChanged { count , max_amount } => { ; ; ; } , dash_spv_masternode_processor_models_sync_state_CacheState :: StoreChanged { count , last_block_height } => { ; ; ; } , dash_spv_masternode_processor_models_sync_state_CacheState :: StubCount { count } => { ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_sync_state_CacheState_QueueChanged_ctor (count : usize , max_amount : usize) -> * mut dash_spv_masternode_processor_models_sync_state_CacheState { ferment :: boxed (dash_spv_masternode_processor_models_sync_state_CacheState :: QueueChanged { count , max_amount }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_sync_state_CacheState_StoreChanged_ctor (count : usize , last_block_height : u32) -> * mut dash_spv_masternode_processor_models_sync_state_CacheState { ferment :: boxed (dash_spv_masternode_processor_models_sync_state_CacheState :: StoreChanged { count , last_block_height }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_sync_state_CacheState_StubCount_ctor (count : usize) -> * mut dash_spv_masternode_processor_models_sync_state_CacheState { ferment :: boxed (dash_spv_masternode_processor_models_sync_state_CacheState :: StubCount { count }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_sync_state_CacheState_destroy < > (ffi : * mut dash_spv_masternode_processor_models_sync_state_CacheState) { ferment :: unbox_any (ffi) ; } } pub mod masternode_list { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_list::MasternodeList::print_description`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_print_description (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList) { let obj = dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList :: print_description (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_list::MasternodeList::calculate_masternodes_merkle_root`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_calculate_masternodes_merkle_root (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList , block_height : u32) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList :: calculate_masternodes_merkle_root (& ferment :: FFIConversionFrom :: ffi_from (self_) , block_height) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_list::MasternodeList::calculate_masternodes_merkle_root_with_block_height_lookup`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_calculate_masternodes_merkle_root_with_block_height_lookup (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList , context : * const std :: os :: raw :: c_void , block_height_lookup : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_u32) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList :: calculate_masternodes_merkle_root_with_block_height_lookup (& ferment :: FFIConversionFrom :: ffi_from (self_) , context , move | o_0 , o_1 | unsafe { block_height_lookup . call (o_0 , o_1) }) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_list::MasternodeList::calculate_llmq_merkle_root`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_calculate_llmq_merkle_root (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList :: calculate_llmq_merkle_root (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_list::MasternodeList::hashes_for_merkle_root`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_hashes_for_merkle_root (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList , block_height : u32) -> * mut crate :: fermented :: generics :: Vec_u8_32 { let obj = dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList :: hashes_for_merkle_root (& ferment :: FFIConversionFrom :: ffi_from (self_) , block_height) ; < crate :: fermented :: generics :: Vec_u8_32 as ferment :: FFIConversionTo < Vec < [u8 ; 32] > >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_list::MasternodeList::hashes_for_merkle_root_with_block_height_lookup`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_hashes_for_merkle_root_with_block_height_lookup (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList , context : * const std :: os :: raw :: c_void , block_height_lookup : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_u32) -> * mut crate :: fermented :: generics :: Vec_u8_32 { let obj = dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList :: hashes_for_merkle_root_with_block_height_lookup (& ferment :: FFIConversionFrom :: ffi_from (self_) , context , move | o_0 , o_1 | unsafe { block_height_lookup . call (o_0 , o_1) }) ; < crate :: fermented :: generics :: Vec_u8_32 as ferment :: FFIConversionTo < Vec < [u8 ; 32] > >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_list::MasternodeList::hashes_for_quorum_merkle_root`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_hashes_for_quorum_merkle_root (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> * mut crate :: fermented :: generics :: Vec_u8_32 { let obj = dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList :: hashes_for_quorum_merkle_root (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: generics :: Vec_u8_32 as ferment :: FFIConversionTo < Vec < [u8 ; 32] > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_list::MasternodeList::masternode_by_pro_reg_tx_hash`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_masternode_by_pro_reg_tx_hash (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList , registration_hash : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { let obj = dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList :: masternode_by_pro_reg_tx_hash (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (registration_hash)) ; < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry as ferment :: FFIConversionTo < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_list::MasternodeList::platform_llmq_with_quorum_hash`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_platform_llmq_with_quorum_hash (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList , hash : * mut crate :: fermented :: generics :: Arr_u8_32 , llmq_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType) -> * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry { let obj = dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList :: platform_llmq_with_quorum_hash (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (hash) , < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_from (llmq_type)) ; < crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry as ferment :: FFIConversionTo < dash_spv_crypto :: llmq :: entry :: LLMQEntry >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_list::MasternodeList::lock_llmq_request_id`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_lock_llmq_request_id (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList , request_id : * mut crate :: fermented :: generics :: Arr_u8_32 , llmq_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType) -> * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry { let obj = dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList :: lock_llmq_request_id (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (request_id) , < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_from (llmq_type)) ; < crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry as ferment :: FFIConversionTo < dash_spv_crypto :: llmq :: entry :: LLMQEntry >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_list::MasternodeList::has_masternode`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_has_masternode (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList , provider_registration_transaction_hash : * mut crate :: fermented :: generics :: Arr_u8_32) -> bool { let obj = dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList :: has_masternode (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (provider_registration_transaction_hash)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_list::MasternodeList::has_masternode_at_location`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_has_masternode_at_location (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList , address : * mut crate :: fermented :: generics :: Arr_u8_16 , port : u16) -> bool { let obj = dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList :: has_masternode_at_location (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: generics :: Arr_u8_16 as ferment :: FFIConversionFrom < [u8 ; 16] >> :: ffi_from (address) , port) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_list::MasternodeList::masternode_count`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_masternode_count (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> usize { let obj = dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList :: masternode_count (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_list::MasternodeList::quorums_count`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_quorums_count (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> u64 { let obj = dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList :: quorums_count (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_list::MasternodeList::has_unverified_rotated_quorums`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_has_unverified_rotated_quorums (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList , chain_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> bool { let obj = dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList :: has_unverified_rotated_quorums (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain_type)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_list::MasternodeList::has_unverified_regular_quorums`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_has_unverified_regular_quorums (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList , chain_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> bool { let obj = dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList :: has_unverified_regular_quorums (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain_type)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_list::MasternodeList::ordered_quorums_for_is_lock`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_ordered_quorums_for_is_lock (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList , quorum_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType , request_id : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Vec_dash_spv_crypto_llmq_entry_LLMQEntry { let obj = dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList :: ordered_quorums_for_is_lock (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_from (quorum_type) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (request_id)) ; < crate :: fermented :: generics :: Vec_dash_spv_crypto_llmq_entry_LLMQEntry as ferment :: FFIConversionTo < Vec < dash_spv_crypto :: llmq :: entry :: LLMQEntry > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_list::MasternodeList::peer_addresses_with_connectivity_nonce`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_peer_addresses_with_connectivity_nonce (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList , nonce : u64 , max_count : usize) -> * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_common_socket_address_SocketAddress { let obj = dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList :: peer_addresses_with_connectivity_nonce (& ferment :: FFIConversionFrom :: ffi_from (self_) , nonce , max_count) ; < crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_common_socket_address_SocketAddress as ferment :: FFIConversionTo < Vec < dash_spv_masternode_processor :: common :: socket_address :: SocketAddress > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_list::MasternodeList::provider_tx_ordered_hashes`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_provider_tx_ordered_hashes (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> * mut crate :: fermented :: generics :: Vec_u8_32 { let obj = dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList :: provider_tx_ordered_hashes (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: generics :: Vec_u8_32 as ferment :: FFIConversionTo < Vec < [u8 ; 32] > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_list::MasternodeList::reversed_pro_reg_tx_hashes_cloned`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_reversed_pro_reg_tx_hashes_cloned (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> * mut crate :: fermented :: generics :: Vec_u8_32 { let obj = dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList :: reversed_pro_reg_tx_hashes_cloned (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: generics :: Vec_u8_32 as ferment :: FFIConversionTo < Vec < [u8 ; 32] > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_list::MasternodeList::compare_provider_tx_ordered_hashes`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_compare_provider_tx_ordered_hashes (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList , list : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> bool { let obj = dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList :: compare_provider_tx_ordered_hashes (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList >> :: ffi_from (list)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_list::MasternodeList::compare_masternodes`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_compare_masternodes (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList , list : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> bool { let obj = dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList :: compare_masternodes (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList >> :: ffi_from (list)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_list::from_entry_pool`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_from_entry_pool (block_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , block_height : u32 , mn_merkle_root : * mut crate :: fermented :: generics :: Arr_u8_32 , llmq_merkle_root : * mut crate :: fermented :: generics :: Arr_u8_32 , masternodes : * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , quorums : * mut crate :: fermented :: generics :: Vec_dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList { let obj = dash_spv_masternode_processor :: models :: masternode_list :: from_entry_pool (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash) , block_height , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (mn_merkle_root) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from_opt (llmq_merkle_root) , < crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry as ferment :: FFIConversionFrom < Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > >> :: ffi_from (masternodes) , < crate :: fermented :: generics :: Vec_dash_spv_crypto_llmq_entry_LLMQEntry as ferment :: FFIConversionFrom < Vec < dash_spv_crypto :: llmq :: entry :: LLMQEntry > >> :: ffi_from (quorums)) ; < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList as ferment :: FFIConversionTo < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::models::masternode_list::new`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_new (masternodes : * mut crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , quorums : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_dash_spv_crypto_llmq_entry_LLMQEntry , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , block_height : u32 , quorums_active : bool) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList { let obj = dash_spv_masternode_processor :: models :: masternode_list :: new (< crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > >> :: ffi_from (masternodes) , < crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_dash_spv_crypto_llmq_entry_LLMQEntry as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < dash_spv_crypto :: network :: llmq_type :: LLMQType , std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_crypto :: llmq :: entry :: LLMQEntry > > >> :: ffi_from (quorums) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash) , block_height , quorums_active) ; < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList as ferment :: FFIConversionTo < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`MasternodeList`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_models_masternode_list_MasternodeList { pub block_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , pub known_height : u32 , pub masternode_merkle_root : * mut crate :: fermented :: generics :: Arr_u8_32 , pub llmq_merkle_root : * mut crate :: fermented :: generics :: Arr_u8_32 , pub masternodes : * mut crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , pub quorums : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_dash_spv_crypto_llmq_entry_LLMQEntry } impl ferment :: FFIConversionFrom < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList > for dash_spv_masternode_processor_models_masternode_list_MasternodeList { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList { block_hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (ffi_ref . block_hash) , known_height : ffi_ref . known_height , masternode_merkle_root : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from_opt (ffi_ref . masternode_merkle_root) , llmq_merkle_root : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from_opt (ffi_ref . llmq_merkle_root) , masternodes : < crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > >> :: ffi_from (ffi_ref . masternodes) , quorums : < crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_dash_spv_crypto_llmq_entry_LLMQEntry as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < dash_spv_crypto :: network :: llmq_type :: LLMQType , std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_crypto :: llmq :: entry :: LLMQEntry > > >> :: ffi_from (ffi_ref . quorums) } } } impl ferment :: FFIConversionTo < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList > for dash_spv_masternode_processor_models_masternode_list_MasternodeList { unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList) -> * const dash_spv_masternode_processor_models_masternode_list_MasternodeList { ferment :: boxed (dash_spv_masternode_processor_models_masternode_list_MasternodeList { block_hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj . block_hash) , known_height : obj . known_height , masternode_merkle_root : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to_opt (obj . masternode_merkle_root) , llmq_merkle_root : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to_opt (obj . llmq_merkle_root) , masternodes : < crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry as ferment :: FFIConversionTo < std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > >> :: ffi_to (obj . masternodes) , quorums : < crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_dash_spv_crypto_llmq_entry_LLMQEntry as ferment :: FFIConversionTo < std :: collections :: BTreeMap < dash_spv_crypto :: network :: llmq_type :: LLMQType , std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_crypto :: llmq :: entry :: LLMQEntry > > >> :: ffi_to (obj . quorums) }) } } impl Drop for dash_spv_masternode_processor_models_masternode_list_MasternodeList { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . block_hash) ; ; ferment :: unbox_any_opt (ffi_ref . masternode_merkle_root) ; ferment :: unbox_any_opt (ffi_ref . llmq_merkle_root) ; ferment :: unbox_any (ffi_ref . masternodes) ; ferment :: unbox_any (ffi_ref . quorums) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_ctor < > (block_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , known_height : u32 , masternode_merkle_root : * mut crate :: fermented :: generics :: Arr_u8_32 , llmq_merkle_root : * mut crate :: fermented :: generics :: Arr_u8_32 , masternodes : * mut crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , quorums : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut dash_spv_masternode_processor_models_masternode_list_MasternodeList { ferment :: boxed (dash_spv_masternode_processor_models_masternode_list_MasternodeList { block_hash , known_height , masternode_merkle_root , llmq_merkle_root , masternodes , quorums }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_destroy < > (ffi : * mut dash_spv_masternode_processor_models_masternode_list_MasternodeList) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_get_block_hash < > (obj : * const dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . block_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_get_known_height < > (obj : * const dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> u32 { (* obj) . known_height } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_get_masternode_merkle_root < > (obj : * const dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . masternode_merkle_root } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_get_llmq_merkle_root < > (obj : * const dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . llmq_merkle_root } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_get_masternodes < > (obj : * const dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { (* obj) . masternodes } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_get_quorums < > (obj : * const dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_dash_spv_crypto_llmq_entry_LLMQEntry { (* obj) . quorums } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_set_block_hash < > (obj : * const dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . block_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_set_known_height < > (obj : * const dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> u32 { (* obj) . known_height } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_set_masternode_merkle_root < > (obj : * const dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . masternode_merkle_root } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_set_llmq_merkle_root < > (obj : * const dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . llmq_merkle_root } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_set_masternodes < > (obj : * const dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { (* obj) . masternodes } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_set_quorums < > (obj : * const dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_dash_spv_crypto_llmq_entry_LLMQEntry { (* obj) . quorums } } pub mod snapshot { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`LLMQSnapshot`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { pub member_list : * mut crate :: fermented :: generics :: Vec_u8 , pub skip_list : * mut crate :: fermented :: generics :: Vec_i32 , pub skip_list_mode : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode } impl ferment :: FFIConversionFrom < dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot > for dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) -> dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot { member_list : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (ffi_ref . member_list) , skip_list : < crate :: fermented :: generics :: Vec_i32 as ferment :: FFIConversionFrom < Vec < i32 > >> :: ffi_from (ffi_ref . skip_list) , skip_list_mode : < crate :: fermented :: types :: dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: LLMQSnapshotSkipMode >> :: ffi_from (ffi_ref . skip_list_mode) } } } impl ferment :: FFIConversionTo < dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot > for dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot) -> * const dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { ferment :: boxed (dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { member_list : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj . member_list) , skip_list : < crate :: fermented :: generics :: Vec_i32 as ferment :: FFIConversionTo < Vec < i32 > >> :: ffi_to (obj . skip_list) , skip_list_mode : < crate :: fermented :: types :: dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode as ferment :: FFIConversionTo < dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: LLMQSnapshotSkipMode >> :: ffi_to (obj . skip_list_mode) }) } } impl Drop for dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . member_list) ; ferment :: unbox_any (ffi_ref . skip_list) ; ferment :: unbox_any (ffi_ref . skip_list_mode) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_ctor < > (member_list : * mut crate :: fermented :: generics :: Vec_u8 , skip_list : * mut crate :: fermented :: generics :: Vec_i32 , skip_list_mode : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode) -> * mut dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { ferment :: boxed (dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { member_list , skip_list , skip_list_mode }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_destroy < > (ffi : * mut dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_get_member_list < > (obj : * const dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . member_list } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_get_skip_list < > (obj : * const dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) -> * mut crate :: fermented :: generics :: Vec_i32 { (* obj) . skip_list } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_get_skip_list_mode < > (obj : * const dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode { (* obj) . skip_list_mode } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_set_member_list < > (obj : * const dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . member_list } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_set_skip_list < > (obj : * const dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) -> * mut crate :: fermented :: generics :: Vec_i32 { (* obj) . skip_list } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_set_skip_list_mode < > (obj : * const dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode { (* obj) . skip_list_mode } } pub mod llmq_typed_hash { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`LLMQTypedHash`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash { pub llmq_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType , pub hash : * mut crate :: fermented :: types :: dash_spv_crypto :: crypto :: byte_util :: dash_spv_crypto_crypto_byte_util_UInt256 } impl ferment :: FFIConversionFrom < dash_spv_masternode_processor :: models :: llmq_typed_hash :: LLMQTypedHash > for dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash) -> dash_spv_masternode_processor :: models :: llmq_typed_hash :: LLMQTypedHash { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: models :: llmq_typed_hash :: LLMQTypedHash { llmq_type : < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_from (ffi_ref . llmq_type) , hash : < crate :: fermented :: types :: dash_spv_crypto :: crypto :: byte_util :: dash_spv_crypto_crypto_byte_util_UInt256 as ferment :: FFIConversionFrom < dash_spv_crypto :: crypto :: byte_util :: UInt256 >> :: ffi_from (ffi_ref . hash) } } } impl ferment :: FFIConversionTo < dash_spv_masternode_processor :: models :: llmq_typed_hash :: LLMQTypedHash > for dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash { unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: models :: llmq_typed_hash :: LLMQTypedHash) -> * const dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash { ferment :: boxed (dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash { llmq_type : < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_to (obj . llmq_type) , hash : < crate :: fermented :: types :: dash_spv_crypto :: crypto :: byte_util :: dash_spv_crypto_crypto_byte_util_UInt256 as ferment :: FFIConversionTo < dash_spv_crypto :: crypto :: byte_util :: UInt256 >> :: ffi_to (obj . hash) }) } } impl Drop for dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . llmq_type) ; ferment :: unbox_any (ffi_ref . hash) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash_ctor < > (llmq_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType , hash : * mut crate :: fermented :: types :: dash_spv_crypto :: crypto :: byte_util :: dash_spv_crypto_crypto_byte_util_UInt256) -> * mut dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash { ferment :: boxed (dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash { llmq_type , hash }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash_destroy < > (ffi : * mut dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash_get_llmq_type < > (obj : * const dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType { (* obj) . llmq_type } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash_get_hash < > (obj : * const dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash) -> * mut crate :: fermented :: types :: dash_spv_crypto :: crypto :: byte_util :: dash_spv_crypto_crypto_byte_util_UInt256 { (* obj) . hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash_set_llmq_type < > (obj : * const dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType { (* obj) . llmq_type } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash_set_hash < > (obj : * const dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash) -> * mut crate :: fermented :: types :: dash_spv_crypto :: crypto :: byte_util :: dash_spv_crypto_crypto_byte_util_UInt256 { (* obj) . hash } } } pub mod common { use crate as dash_spv_apple_bindings ; pub mod socket_address { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_masternode_processor::common::socket_address::SocketAddress::ipv4`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_socket_address_SocketAddress_ipv4 (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: socket_address :: dash_spv_masternode_processor_common_socket_address_SocketAddress) -> u32 { let obj = dash_spv_masternode_processor :: common :: socket_address :: SocketAddress :: ipv4 (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`SocketAddress`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_common_socket_address_SocketAddress { pub ip_address : * mut crate :: fermented :: generics :: Arr_u8_16 , pub port : u16 } impl ferment :: FFIConversionFrom < dash_spv_masternode_processor :: common :: socket_address :: SocketAddress > for dash_spv_masternode_processor_common_socket_address_SocketAddress { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_common_socket_address_SocketAddress) -> dash_spv_masternode_processor :: common :: socket_address :: SocketAddress { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: common :: socket_address :: SocketAddress { ip_address : < crate :: fermented :: generics :: Arr_u8_16 as ferment :: FFIConversionFrom < [u8 ; 16] >> :: ffi_from (ffi_ref . ip_address) , port : ffi_ref . port } } } impl ferment :: FFIConversionTo < dash_spv_masternode_processor :: common :: socket_address :: SocketAddress > for dash_spv_masternode_processor_common_socket_address_SocketAddress { unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: common :: socket_address :: SocketAddress) -> * const dash_spv_masternode_processor_common_socket_address_SocketAddress { ferment :: boxed (dash_spv_masternode_processor_common_socket_address_SocketAddress { ip_address : < crate :: fermented :: generics :: Arr_u8_16 as ferment :: FFIConversionTo < [u8 ; 16] >> :: ffi_to (obj . ip_address) , port : obj . port }) } } impl Drop for dash_spv_masternode_processor_common_socket_address_SocketAddress { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . ip_address) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_socket_address_SocketAddress_ctor < > (ip_address : * mut crate :: fermented :: generics :: Arr_u8_16 , port : u16) -> * mut dash_spv_masternode_processor_common_socket_address_SocketAddress { ferment :: boxed (dash_spv_masternode_processor_common_socket_address_SocketAddress { ip_address , port }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_socket_address_SocketAddress_destroy < > (ffi : * mut dash_spv_masternode_processor_common_socket_address_SocketAddress) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_socket_address_SocketAddress_get_ip_address < > (obj : * const dash_spv_masternode_processor_common_socket_address_SocketAddress) -> * mut crate :: fermented :: generics :: Arr_u8_16 { (* obj) . ip_address } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_socket_address_SocketAddress_get_port < > (obj : * const dash_spv_masternode_processor_common_socket_address_SocketAddress) -> u16 { (* obj) . port } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_socket_address_SocketAddress_set_ip_address < > (obj : * const dash_spv_masternode_processor_common_socket_address_SocketAddress) -> * mut crate :: fermented :: generics :: Arr_u8_16 { (* obj) . ip_address } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_socket_address_SocketAddress_set_port < > (obj : * const dash_spv_masternode_processor_common_socket_address_SocketAddress) -> u16 { (* obj) . port } } pub mod llmq_snapshot_skip_mode { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_masternode_processor::common::llmq_snapshot_skip_mode::LLMQSnapshotSkipMode::index`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode_index (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode) -> u32 { let obj = dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: LLMQSnapshotSkipMode :: index (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`LLMQSnapshotSkipMode`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode { NoSkipping = 0 , SkipFirst = 1 , SkipExcept = 2 , SkipAll = 3 } impl ferment :: FFIConversionFrom < dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: LLMQSnapshotSkipMode > for dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode) -> dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: LLMQSnapshotSkipMode { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode :: NoSkipping => dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: LLMQSnapshotSkipMode :: NoSkipping , dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode :: SkipFirst => dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: LLMQSnapshotSkipMode :: SkipFirst , dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode :: SkipExcept => dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: LLMQSnapshotSkipMode :: SkipExcept , dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode :: SkipAll => dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: LLMQSnapshotSkipMode :: SkipAll } } } impl ferment :: FFIConversionTo < dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: LLMQSnapshotSkipMode > for dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode { unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: LLMQSnapshotSkipMode) -> * const dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode { ferment :: boxed (match obj { dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: LLMQSnapshotSkipMode :: NoSkipping => dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode :: NoSkipping , dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: LLMQSnapshotSkipMode :: SkipFirst => dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode :: SkipFirst , dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: LLMQSnapshotSkipMode :: SkipExcept => dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode :: SkipExcept , dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: LLMQSnapshotSkipMode :: SkipAll => dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode :: SkipAll , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode { fn drop (& mut self) { unsafe { match self { dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode :: NoSkipping => { } , dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode :: SkipFirst => { } , dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode :: SkipExcept => { } , dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode :: SkipAll => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode_NoSkipping_ctor () -> * mut dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode { ferment :: boxed (dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode :: NoSkipping { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode_SkipFirst_ctor () -> * mut dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode { ferment :: boxed (dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode :: SkipFirst { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode_SkipExcept_ctor () -> * mut dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode { ferment :: boxed (dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode :: SkipExcept { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode_SkipAll_ctor () -> * mut dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode { ferment :: boxed (dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode :: SkipAll { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode_destroy < > (ffi : * mut dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode) { ferment :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::common::llmq_snapshot_skip_mode::from_index`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_from_index (index : u32) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode { let obj = dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: from_index (index) ; < crate :: fermented :: types :: dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode as ferment :: FFIConversionTo < dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: LLMQSnapshotSkipMode >> :: ffi_to (obj) } } pub mod block { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`MBlock`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_common_block_MBlock { pub height : u32 , pub hash : * mut crate :: fermented :: generics :: Arr_u8_32 , pub merkle_root : * mut crate :: fermented :: generics :: Arr_u8_32 } impl ferment :: FFIConversionFrom < dash_spv_masternode_processor :: common :: block :: MBlock > for dash_spv_masternode_processor_common_block_MBlock { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_common_block_MBlock) -> dash_spv_masternode_processor :: common :: block :: MBlock { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: common :: block :: MBlock { height : ffi_ref . height , hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (ffi_ref . hash) , merkle_root : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (ffi_ref . merkle_root) } } } impl ferment :: FFIConversionTo < dash_spv_masternode_processor :: common :: block :: MBlock > for dash_spv_masternode_processor_common_block_MBlock { unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: common :: block :: MBlock) -> * const dash_spv_masternode_processor_common_block_MBlock { ferment :: boxed (dash_spv_masternode_processor_common_block_MBlock { height : obj . height , hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj . hash) , merkle_root : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj . merkle_root) }) } } impl Drop for dash_spv_masternode_processor_common_block_MBlock { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment :: unbox_any (ffi_ref . hash) ; ferment :: unbox_any (ffi_ref . merkle_root) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_block_MBlock_ctor < > (height : u32 , hash : * mut crate :: fermented :: generics :: Arr_u8_32 , merkle_root : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut dash_spv_masternode_processor_common_block_MBlock { ferment :: boxed (dash_spv_masternode_processor_common_block_MBlock { height , hash , merkle_root }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_block_MBlock_destroy < > (ffi : * mut dash_spv_masternode_processor_common_block_MBlock) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_block_MBlock_get_height < > (obj : * const dash_spv_masternode_processor_common_block_MBlock) -> u32 { (* obj) . height } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_block_MBlock_get_hash < > (obj : * const dash_spv_masternode_processor_common_block_MBlock) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_block_MBlock_get_merkle_root < > (obj : * const dash_spv_masternode_processor_common_block_MBlock) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . merkle_root } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_block_MBlock_set_height < > (obj : * const dash_spv_masternode_processor_common_block_MBlock) -> u32 { (* obj) . height } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_block_MBlock_set_hash < > (obj : * const dash_spv_masternode_processor_common_block_MBlock) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_block_MBlock_set_merkle_root < > (obj : * const dash_spv_masternode_processor_common_block_MBlock) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . merkle_root } # [doc = "FFI-representation of the [`Block`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_common_block_Block { pub height : u32 , pub hash : * mut crate :: fermented :: generics :: Arr_u8_32 } impl ferment :: FFIConversionFrom < dash_spv_masternode_processor :: common :: block :: Block > for dash_spv_masternode_processor_common_block_Block { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_common_block_Block) -> dash_spv_masternode_processor :: common :: block :: Block { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: common :: block :: Block { height : ffi_ref . height , hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (ffi_ref . hash) } } } impl ferment :: FFIConversionTo < dash_spv_masternode_processor :: common :: block :: Block > for dash_spv_masternode_processor_common_block_Block { unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: common :: block :: Block) -> * const dash_spv_masternode_processor_common_block_Block { ferment :: boxed (dash_spv_masternode_processor_common_block_Block { height : obj . height , hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj . hash) }) } } impl Drop for dash_spv_masternode_processor_common_block_Block { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment :: unbox_any (ffi_ref . hash) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_block_Block_ctor < > (height : u32 , hash : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut dash_spv_masternode_processor_common_block_Block { ferment :: boxed (dash_spv_masternode_processor_common_block_Block { height , hash }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_block_Block_destroy < > (ffi : * mut dash_spv_masternode_processor_common_block_Block) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_block_Block_get_height < > (obj : * const dash_spv_masternode_processor_common_block_Block) -> u32 { (* obj) . height } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_block_Block_get_hash < > (obj : * const dash_spv_masternode_processor_common_block_Block) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_block_Block_set_height < > (obj : * const dash_spv_masternode_processor_common_block_Block) -> u32 { (* obj) . height } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_block_Block_set_hash < > (obj : * const dash_spv_masternode_processor_common_block_Block) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . hash } } pub mod masternode_type { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_masternode_processor::common::masternode_type::MasternodeType::voting_weight`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_masternode_type_MasternodeType_voting_weight (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: masternode_type :: dash_spv_masternode_processor_common_masternode_type_MasternodeType) -> i32 { let obj = dash_spv_masternode_processor :: common :: masternode_type :: MasternodeType :: voting_weight (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::common::masternode_type::MasternodeType::collateral_amount`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_masternode_type_MasternodeType_collateral_amount (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: masternode_type :: dash_spv_masternode_processor_common_masternode_type_MasternodeType) -> u64 { let obj = dash_spv_masternode_processor :: common :: masternode_type :: MasternodeType :: collateral_amount (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::common::masternode_type::MasternodeType::is_hpmn`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_masternode_type_MasternodeType_is_hpmn (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: masternode_type :: dash_spv_masternode_processor_common_masternode_type_MasternodeType) -> bool { let obj = dash_spv_masternode_processor :: common :: masternode_type :: MasternodeType :: is_hpmn (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::common::masternode_type::MasternodeType::index`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_masternode_type_MasternodeType_index (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: masternode_type :: dash_spv_masternode_processor_common_masternode_type_MasternodeType) -> u16 { let obj = dash_spv_masternode_processor :: common :: masternode_type :: MasternodeType :: index (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`MasternodeType`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_masternode_processor_common_masternode_type_MasternodeType { Regular = 0 , HighPerformance = 1 } impl ferment :: FFIConversionFrom < dash_spv_masternode_processor :: common :: masternode_type :: MasternodeType > for dash_spv_masternode_processor_common_masternode_type_MasternodeType { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_common_masternode_type_MasternodeType) -> dash_spv_masternode_processor :: common :: masternode_type :: MasternodeType { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_masternode_processor_common_masternode_type_MasternodeType :: Regular => dash_spv_masternode_processor :: common :: masternode_type :: MasternodeType :: Regular , dash_spv_masternode_processor_common_masternode_type_MasternodeType :: HighPerformance => dash_spv_masternode_processor :: common :: masternode_type :: MasternodeType :: HighPerformance } } } impl ferment :: FFIConversionTo < dash_spv_masternode_processor :: common :: masternode_type :: MasternodeType > for dash_spv_masternode_processor_common_masternode_type_MasternodeType { unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: common :: masternode_type :: MasternodeType) -> * const dash_spv_masternode_processor_common_masternode_type_MasternodeType { ferment :: boxed (match obj { dash_spv_masternode_processor :: common :: masternode_type :: MasternodeType :: Regular => dash_spv_masternode_processor_common_masternode_type_MasternodeType :: Regular , dash_spv_masternode_processor :: common :: masternode_type :: MasternodeType :: HighPerformance => dash_spv_masternode_processor_common_masternode_type_MasternodeType :: HighPerformance , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dash_spv_masternode_processor_common_masternode_type_MasternodeType { fn drop (& mut self) { unsafe { match self { dash_spv_masternode_processor_common_masternode_type_MasternodeType :: Regular => { } , dash_spv_masternode_processor_common_masternode_type_MasternodeType :: HighPerformance => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_masternode_type_MasternodeType_Regular_ctor () -> * mut dash_spv_masternode_processor_common_masternode_type_MasternodeType { ferment :: boxed (dash_spv_masternode_processor_common_masternode_type_MasternodeType :: Regular { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_masternode_type_MasternodeType_HighPerformance_ctor () -> * mut dash_spv_masternode_processor_common_masternode_type_MasternodeType { ferment :: boxed (dash_spv_masternode_processor_common_masternode_type_MasternodeType :: HighPerformance { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_masternode_type_MasternodeType_destroy < > (ffi : * mut dash_spv_masternode_processor_common_masternode_type_MasternodeType) { ferment :: unbox_any (ffi) ; } } } pub mod processing { use crate as dash_spv_apple_bindings ; pub mod processor_cache { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::active_llmq_description`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_active_llmq_description (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: active_llmq_description (& * self_) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::llmq_snapshots_description`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_llmq_snapshots_description (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: llmq_snapshots_description (& * self_) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::cl_signatures_description`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_cl_signatures_description (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: cl_signatures_description (& * self_) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::needed_masternode_lists_description`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_needed_masternode_lists_description (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: needed_masternode_lists_description (& * self_) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::list_awaiting_quorum_validation_description`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_list_awaiting_quorum_validation_description (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: list_awaiting_quorum_validation_description (& * self_) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::list_needing_quorum_validation_description`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_list_needing_quorum_validation_description (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: list_needing_quorum_validation_description (& * self_) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::stubs_description`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_stubs_description (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: stubs_description (& * self_) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::last_queried_block_hash_description`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_last_queried_block_hash_description (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: last_queried_block_hash_description (& * self_) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::lists_description`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_lists_description (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: lists_description (& * self_) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::last_queried_lists_description`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_last_queried_lists_description (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: last_queried_lists_description (& * self_) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::queue_description`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_queue_description (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: queue_description (& * self_) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::print_description`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_print_description (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: print_description (& * self_) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::clear_llmq_members`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_clear_llmq_members (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: clear_llmq_members (& * self_) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::clear_llmq_indexed_members`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_clear_llmq_indexed_members (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: clear_llmq_indexed_members (& * self_) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::clear_masternode_lists`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_clear_masternode_lists (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: clear_masternode_lists (& * self_) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::clear_masternode_list_stubs`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_clear_masternode_list_stubs (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: clear_masternode_list_stubs (& * self_) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::clear_needed_masternode_lists`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_clear_needed_masternode_lists (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: clear_needed_masternode_lists (& * self_) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::clear_llmq_snapshots`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_clear_llmq_snapshots (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: clear_llmq_snapshots (& * self_) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::clear_cl_signatures`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_clear_cl_signatures (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: clear_cl_signatures (& * self_) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::clear_list_awaiting_quorum_validation`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_clear_list_awaiting_quorum_validation (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: clear_list_awaiting_quorum_validation (& * self_) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::clear_list_needing_quorum_validation`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_clear_list_needing_quorum_validation (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: clear_list_needing_quorum_validation (& * self_) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::clear_cached_block_hash_heights`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_clear_cached_block_hash_heights (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: clear_cached_block_hash_heights (& * self_) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::clear_active_llmq`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_clear_active_llmq (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: clear_active_llmq (& * self_) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::clear_last_queried_block_hash`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_clear_last_queried_block_hash (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: clear_last_queried_block_hash (& * self_) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::clear_mn_list_retrieval_queue`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_clear_mn_list_retrieval_queue (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: clear_mn_list_retrieval_queue (& * self_) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::clear_qr_info_retrieval_queue`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_clear_qr_info_retrieval_queue (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: clear_qr_info_retrieval_queue (& * self_) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::clear`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_clear (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: clear (& * self_) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::clear_current_lists`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_clear_current_lists (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: clear_current_lists (& * self_) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::masternode_list_loaded`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_masternode_list_loaded (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , list : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> usize { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: masternode_list_loaded (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash) , < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList >> :: ffi_from (list)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::maybe_snapshot`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_maybe_snapshot (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: maybe_snapshot (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash)) ; < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot as ferment :: FFIConversionTo < dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::add_snapshot`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_add_snapshot (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , snapshot : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: add_snapshot (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash) , < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot >> :: ffi_from (snapshot)) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::remove_snapshot`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_remove_snapshot (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: remove_snapshot (& * self_ , Box :: leak (Box :: new (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash)))) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::add_cl_signature`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_add_cl_signature (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , cl_signature : * mut crate :: fermented :: generics :: Arr_u8_96) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: add_cl_signature (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash) , < crate :: fermented :: generics :: Arr_u8_96 as ferment :: FFIConversionFrom < [u8 ; 96] >> :: ffi_from (cl_signature)) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::maybe_cl_signature`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_maybe_cl_signature (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Arr_u8_96 { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: maybe_cl_signature (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash)) ; < crate :: fermented :: generics :: Arr_u8_96 as ferment :: FFIConversionTo < [u8 ; 96] >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::remove_from_awaiting_quorum_validation_list`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_remove_from_awaiting_quorum_validation_list (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: remove_from_awaiting_quorum_validation_list (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash)) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::has_in_awaiting_quorum_validation_list`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_has_in_awaiting_quorum_validation_list (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) -> bool { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: has_in_awaiting_quorum_validation_list (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::add_to_awaiting_quorum_validation_list`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_add_to_awaiting_quorum_validation_list (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , hash : * mut crate :: fermented :: generics :: Arr_u8_32) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: add_to_awaiting_quorum_validation_list (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (hash)) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::add_block_hash_for_list_needing_quorums_validated`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_add_block_hash_for_list_needing_quorums_validated (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: add_block_hash_for_list_needing_quorums_validated (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash)) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::remove_block_hash_for_list_needing_quorums_validated`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_remove_block_hash_for_list_needing_quorums_validated (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: remove_block_hash_for_list_needing_quorums_validated (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash)) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::has_list_at_block_hash_needing_quorums_validated`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_has_list_at_block_hash_needing_quorums_validated (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) -> bool { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: has_list_at_block_hash_needing_quorums_validated (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::add_masternode_list`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_add_masternode_list (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , list : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> usize { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: add_masternode_list (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash) , < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList >> :: ffi_from (list)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::masternode_list_by_block_hash`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_masternode_list_by_block_hash (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: masternode_list_by_block_hash (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash)) ; < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList as ferment :: FFIConversionTo < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::remove_masternode_list`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_remove_masternode_list (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: remove_masternode_list (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash)) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::remove_masternode_lists_before_height`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_remove_masternode_lists_before_height (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , height : u32) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: remove_masternode_lists_before_height (& * self_ , height) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::contains_block_hash_needing_masternode_list`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_contains_block_hash_needing_masternode_list (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) -> bool { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: contains_block_hash_needing_masternode_list (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::has_block_hashes_needing_masternode_list`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_has_block_hashes_needing_masternode_list (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> bool { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: has_block_hashes_needing_masternode_list (& * self_) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::all_needed_masternode_list`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_all_needed_masternode_list (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> * mut crate :: fermented :: generics :: std_collections_HashSet_u8_32 { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: all_needed_masternode_list (& * self_) ; < crate :: fermented :: generics :: std_collections_HashSet_u8_32 as ferment :: FFIConversionTo < std :: collections :: HashSet < [u8 ; 32] > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::add_needed_masternode_lists`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_add_needed_masternode_lists (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , lists : * mut crate :: fermented :: generics :: std_collections_HashSet_u8_32) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: add_needed_masternode_lists (& * self_ , < crate :: fermented :: generics :: std_collections_HashSet_u8_32 as ferment :: FFIConversionFrom < std :: collections :: HashSet < [u8 ; 32] > >> :: ffi_from (lists)) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::find_llmq_entry_public_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_find_llmq_entry_public_key (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , llmq_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType , llmq_hash : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Arr_u8_48 { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: find_llmq_entry_public_key (& * self_ , < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_from (llmq_type) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (llmq_hash)) ; < crate :: fermented :: generics :: Arr_u8_48 as ferment :: FFIConversionTo < [u8 ; 48] >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::recent_masternode_lists`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_recent_masternode_lists (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_masternode_list_MasternodeList { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: recent_masternode_lists (& * self_) ; < crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_masternode_list_MasternodeList as ferment :: FFIConversionTo < Vec < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::known_masternode_lists_block_hashes`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_known_masternode_lists_block_hashes (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> * mut crate :: fermented :: generics :: std_collections_HashSet_u8_32 { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: known_masternode_lists_block_hashes (& * self_) ; < crate :: fermented :: generics :: std_collections_HashSet_u8_32 as ferment :: FFIConversionTo < std :: collections :: HashSet < [u8 ; 32] > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::known_masternode_lists_count`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_known_masternode_lists_count (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> usize { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: known_masternode_lists_count (& * self_) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::stored_masternode_lists_count`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_stored_masternode_lists_count (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> usize { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: stored_masternode_lists_count (& * self_) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::has_masternode_list_at`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_has_masternode_list_at (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) -> bool { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: has_masternode_list_at (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::add_stub_for_masternode_list`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_add_stub_for_masternode_list (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: add_stub_for_masternode_list (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash)) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::remove_stub_for_masternode_list`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_remove_stub_for_masternode_list (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: remove_stub_for_masternode_list (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash)) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::has_stub_for_masternode_list`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_has_stub_for_masternode_list (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) -> bool { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: has_stub_for_masternode_list (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::block_height_for_hash`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_block_height_for_hash (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut u32 { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: block_height_for_hash (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash)) ; ferment :: to_opt_primitive (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::cache_block_height_for_hash`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_cache_block_height_for_hash (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , height : u32) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: cache_block_height_for_hash (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash) , height) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::remove_all_masternode_lists`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_remove_all_masternode_lists (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: remove_all_masternode_lists (& * self_) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::active_quorum_of_type`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_active_quorum_of_type (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , ty : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType , hash : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: active_quorum_of_type (& * self_ , < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_from (ty) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (hash)) ; < crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry as ferment :: FFIConversionTo < dash_spv_crypto :: llmq :: entry :: LLMQEntry >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::get_last_queried_block_hash`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_get_last_queried_block_hash (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: get_last_queried_block_hash (& * self_) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::set_last_queried_block_hash`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_set_last_queried_block_hash (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: set_last_queried_block_hash (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash)) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::get_last_queried_qr_masternode_list_at_tip`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_get_last_queried_qr_masternode_list_at_tip (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: get_last_queried_qr_masternode_list_at_tip (& * self_) ; < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList as ferment :: FFIConversionTo < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::has_last_queried_qr_masternode_list_at_tip`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_has_last_queried_qr_masternode_list_at_tip (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> bool { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: has_last_queried_qr_masternode_list_at_tip (& * self_) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::set_last_queried_qr_masternode_list_at_tip`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_set_last_queried_qr_masternode_list_at_tip (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , list_block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: set_last_queried_qr_masternode_list_at_tip (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (list_block_hash)) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::clean_last_queried_qr_masternode_list_at_tip`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_clean_last_queried_qr_masternode_list_at_tip (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: clean_last_queried_qr_masternode_list_at_tip (& * self_) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::get_last_queried_qr_masternode_list_at_h`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_get_last_queried_qr_masternode_list_at_h (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: get_last_queried_qr_masternode_list_at_h (& * self_) ; < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList as ferment :: FFIConversionTo < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::has_last_queried_qr_masternode_list_at_h`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_has_last_queried_qr_masternode_list_at_h (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> bool { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: has_last_queried_qr_masternode_list_at_h (& * self_) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::set_last_queried_qr_masternode_list_at_h`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_set_last_queried_qr_masternode_list_at_h (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , list_block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: set_last_queried_qr_masternode_list_at_h (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (list_block_hash)) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::clean_last_queried_qr_masternode_list_at_h`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_clean_last_queried_qr_masternode_list_at_h (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: clean_last_queried_qr_masternode_list_at_h (& * self_) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::get_last_queried_qr_masternode_list_at_h_c`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_get_last_queried_qr_masternode_list_at_h_c (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: get_last_queried_qr_masternode_list_at_h_c (& * self_) ; < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList as ferment :: FFIConversionTo < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::set_last_queried_qr_masternode_list_at_h_c`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_set_last_queried_qr_masternode_list_at_h_c (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , list_block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: set_last_queried_qr_masternode_list_at_h_c (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (list_block_hash)) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::clean_last_queried_qr_masternode_list_at_h_c`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_clean_last_queried_qr_masternode_list_at_h_c (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: clean_last_queried_qr_masternode_list_at_h_c (& * self_) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::get_last_queried_qr_masternode_list_at_h_2c`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_get_last_queried_qr_masternode_list_at_h_2c (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: get_last_queried_qr_masternode_list_at_h_2c (& * self_) ; < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList as ferment :: FFIConversionTo < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::set_last_queried_qr_masternode_list_at_h_2c`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_set_last_queried_qr_masternode_list_at_h_2c (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , list_block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: set_last_queried_qr_masternode_list_at_h_2c (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (list_block_hash)) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::clean_last_queried_qr_masternode_list_at_h_2c`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_clean_last_queried_qr_masternode_list_at_h_2c (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: clean_last_queried_qr_masternode_list_at_h_2c (& * self_) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::get_last_queried_qr_masternode_list_at_h_3c`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_get_last_queried_qr_masternode_list_at_h_3c (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: get_last_queried_qr_masternode_list_at_h_3c (& * self_) ; < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList as ferment :: FFIConversionTo < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::set_last_queried_qr_masternode_list_at_h_3c`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_set_last_queried_qr_masternode_list_at_h_3c (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , list_block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: set_last_queried_qr_masternode_list_at_h_3c (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (list_block_hash)) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::clean_last_queried_qr_masternode_list_at_h_3c`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_clean_last_queried_qr_masternode_list_at_h_3c (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: clean_last_queried_qr_masternode_list_at_h_3c (& * self_) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::get_last_queried_qr_masternode_list_at_h_4c`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_get_last_queried_qr_masternode_list_at_h_4c (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: get_last_queried_qr_masternode_list_at_h_4c (& * self_) ; < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList as ferment :: FFIConversionTo < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::set_last_queried_qr_masternode_list_at_h_4c`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_set_last_queried_qr_masternode_list_at_h_4c (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , list_block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: set_last_queried_qr_masternode_list_at_h_4c (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (list_block_hash)) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::clean_last_queried_qr_masternode_list_at_h_4c`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_clean_last_queried_qr_masternode_list_at_h_4c (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: clean_last_queried_qr_masternode_list_at_h_4c (& * self_) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::get_last_queried_mn_masternode_list`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_get_last_queried_mn_masternode_list (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: get_last_queried_mn_masternode_list (& * self_) ; < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList as ferment :: FFIConversionTo < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::set_last_queried_mn_masternode_list`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_set_last_queried_mn_masternode_list (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , list_block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: set_last_queried_mn_masternode_list (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (list_block_hash)) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::clean_last_queried_mn_masternode_list`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_clean_last_queried_mn_masternode_list (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: clean_last_queried_mn_masternode_list (& * self_) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::mn_list_retrieval_queue`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_mn_list_retrieval_queue (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> * mut crate :: fermented :: generics :: indexmap_IndexSet_u8_32 { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: mn_list_retrieval_queue (& * self_) ; < crate :: fermented :: generics :: indexmap_IndexSet_u8_32 as ferment :: FFIConversionTo < indexmap :: IndexSet < [u8 ; 32] > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::qr_info_retrieval_queue`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_qr_info_retrieval_queue (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> * mut crate :: fermented :: generics :: indexmap_IndexSet_u8_32 { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: qr_info_retrieval_queue (& * self_) ; < crate :: fermented :: generics :: indexmap_IndexSet_u8_32 as ferment :: FFIConversionTo < indexmap :: IndexSet < [u8 ; 32] > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::has_latest_block_in_mn_list_retrieval_queue_with_hash`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_has_latest_block_in_mn_list_retrieval_queue_with_hash (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) -> bool { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: has_latest_block_in_mn_list_retrieval_queue_with_hash (& * self_ , Box :: leak (Box :: new (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash)))) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::has_latest_block_in_qr_info_retrieval_queue_with_hash`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_has_latest_block_in_qr_info_retrieval_queue_with_hash (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) -> bool { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: has_latest_block_in_qr_info_retrieval_queue_with_hash (& * self_ , Box :: leak (Box :: new (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash)))) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::mn_list_retrieval_queue_get_max_amount`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_mn_list_retrieval_queue_get_max_amount (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> usize { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: mn_list_retrieval_queue_get_max_amount (& * self_) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::qr_info_retrieval_queue_get_max_amount`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_qr_info_retrieval_queue_get_max_amount (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> usize { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: qr_info_retrieval_queue_get_max_amount (& * self_) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::mn_list_retrieval_queue_count`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_mn_list_retrieval_queue_count (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> usize { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: mn_list_retrieval_queue_count (& * self_) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::qr_info_retrieval_queue_count`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_qr_info_retrieval_queue_count (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> usize { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: qr_info_retrieval_queue_count (& * self_) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor_cache::MasternodeProcessorCache::update_masternode_list_known_height`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_update_masternode_list_known_height (self_ : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , list_block_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , new_known_height : u32) { let obj = dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache :: update_masternode_list_known_height (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (list_block_hash) , new_known_height) ; ; } # [doc = "FFI-representation of the [`RetrievalQueue`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue { pub queue : * mut crate :: fermented :: generics :: indexmap_IndexSet_u8_32 , pub max_amount : usize } impl ferment :: FFIConversionFrom < dash_spv_masternode_processor :: processing :: processor_cache :: RetrievalQueue > for dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue) -> dash_spv_masternode_processor :: processing :: processor_cache :: RetrievalQueue { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: processing :: processor_cache :: RetrievalQueue { queue : < crate :: fermented :: generics :: indexmap_IndexSet_u8_32 as ferment :: FFIConversionFrom < indexmap :: IndexSet < [u8 ; 32] > >> :: ffi_from (ffi_ref . queue) , max_amount : ffi_ref . max_amount } } } impl ferment :: FFIConversionTo < dash_spv_masternode_processor :: processing :: processor_cache :: RetrievalQueue > for dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue { unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: processing :: processor_cache :: RetrievalQueue) -> * const dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue { ferment :: boxed (dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue { queue : < crate :: fermented :: generics :: indexmap_IndexSet_u8_32 as ferment :: FFIConversionTo < indexmap :: IndexSet < [u8 ; 32] > >> :: ffi_to (obj . queue) , max_amount : obj . max_amount }) } } impl Drop for dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . queue) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue_ctor < > (queue : * mut crate :: fermented :: generics :: indexmap_IndexSet_u8_32 , max_amount : usize) -> * mut dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue { ferment :: boxed (dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue { queue , max_amount }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue_destroy < > (ffi : * mut dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue_get_queue < > (obj : * const dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue) -> * mut crate :: fermented :: generics :: indexmap_IndexSet_u8_32 { (* obj) . queue } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue_get_max_amount < > (obj : * const dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue) -> usize { (* obj) . max_amount } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue_set_queue < > (obj : * const dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue) -> * mut crate :: fermented :: generics :: indexmap_IndexSet_u8_32 { (* obj) . queue } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue_set_max_amount < > (obj : * const dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue) -> usize { (* obj) . max_amount } } pub mod mn_listdiff_result { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::mn_listdiff_result::MNListDiffResult::is_valid`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_is_valid (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> bool { let obj = dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult :: is_valid (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::mn_listdiff_result::MNListDiffResult::validation_string`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_validation_string (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult :: validation_string (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::mn_listdiff_result::MNListDiffResult::short_description`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_short_description (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult :: short_description (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`MNListDiffResult`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { pub base_block_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , pub base_block_height : u32 , pub block_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , pub block_height : u32 , pub has_found_coinbase : bool , pub has_valid_coinbase : bool , pub has_valid_mn_list_root : bool , pub has_valid_llmq_list_root : bool , pub has_valid_quorums : bool , pub has_added_quorums : bool , pub has_added_rotated_quorums : bool , pub masternode_list : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList , pub added_masternodes : * mut crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , pub modified_masternodes : * mut crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , pub needed_masternode_lists : * mut crate :: fermented :: generics :: std_collections_HashSet_u8_32 , pub added_dapi_nodes : * mut crate :: fermented :: generics :: Vec_u8_16 , pub removed_dapi_nodes : * mut crate :: fermented :: generics :: Vec_u8_16 } impl ferment :: FFIConversionFrom < dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult > for dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult { base_block_hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (ffi_ref . base_block_hash) , base_block_height : ffi_ref . base_block_height , block_hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (ffi_ref . block_hash) , block_height : ffi_ref . block_height , has_found_coinbase : ffi_ref . has_found_coinbase , has_valid_coinbase : ffi_ref . has_valid_coinbase , has_valid_mn_list_root : ffi_ref . has_valid_mn_list_root , has_valid_llmq_list_root : ffi_ref . has_valid_llmq_list_root , has_valid_quorums : ffi_ref . has_valid_quorums , has_added_quorums : ffi_ref . has_added_quorums , has_added_rotated_quorums : ffi_ref . has_added_rotated_quorums , masternode_list : < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList >> :: ffi_from (ffi_ref . masternode_list) , added_masternodes : < crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > >> :: ffi_from (ffi_ref . added_masternodes) , modified_masternodes : < crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > >> :: ffi_from (ffi_ref . modified_masternodes) , needed_masternode_lists : < crate :: fermented :: generics :: std_collections_HashSet_u8_32 as ferment :: FFIConversionFrom < std :: collections :: HashSet < [u8 ; 32] > >> :: ffi_from (ffi_ref . needed_masternode_lists) , added_dapi_nodes : < crate :: fermented :: generics :: Vec_u8_16 as ferment :: FFIConversionFrom < Vec < [u8 ; 16] > >> :: ffi_from (ffi_ref . added_dapi_nodes) , removed_dapi_nodes : < crate :: fermented :: generics :: Vec_u8_16 as ferment :: FFIConversionFrom < Vec < [u8 ; 16] > >> :: ffi_from (ffi_ref . removed_dapi_nodes) } } } impl ferment :: FFIConversionTo < dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult > for dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult) -> * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { ferment :: boxed (dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { base_block_hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj . base_block_hash) , base_block_height : obj . base_block_height , block_hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj . block_hash) , block_height : obj . block_height , has_found_coinbase : obj . has_found_coinbase , has_valid_coinbase : obj . has_valid_coinbase , has_valid_mn_list_root : obj . has_valid_mn_list_root , has_valid_llmq_list_root : obj . has_valid_llmq_list_root , has_valid_quorums : obj . has_valid_quorums , has_added_quorums : obj . has_added_quorums , has_added_rotated_quorums : obj . has_added_rotated_quorums , masternode_list : < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList as ferment :: FFIConversionTo < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList >> :: ffi_to (obj . masternode_list) , added_masternodes : < crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry as ferment :: FFIConversionTo < std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > >> :: ffi_to (obj . added_masternodes) , modified_masternodes : < crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry as ferment :: FFIConversionTo < std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > >> :: ffi_to (obj . modified_masternodes) , needed_masternode_lists : < crate :: fermented :: generics :: std_collections_HashSet_u8_32 as ferment :: FFIConversionTo < std :: collections :: HashSet < [u8 ; 32] > >> :: ffi_to (obj . needed_masternode_lists) , added_dapi_nodes : < crate :: fermented :: generics :: Vec_u8_16 as ferment :: FFIConversionTo < Vec < [u8 ; 16] > >> :: ffi_to (obj . added_dapi_nodes) , removed_dapi_nodes : < crate :: fermented :: generics :: Vec_u8_16 as ferment :: FFIConversionTo < Vec < [u8 ; 16] > >> :: ffi_to (obj . removed_dapi_nodes) }) } } impl Drop for dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . base_block_hash) ; ; ferment :: unbox_any (ffi_ref . block_hash) ; ; ; ; ; ; ; ; ; ferment :: unbox_any (ffi_ref . masternode_list) ; ferment :: unbox_any (ffi_ref . added_masternodes) ; ferment :: unbox_any (ffi_ref . modified_masternodes) ; ferment :: unbox_any (ffi_ref . needed_masternode_lists) ; ferment :: unbox_any (ffi_ref . added_dapi_nodes) ; ferment :: unbox_any (ffi_ref . removed_dapi_nodes) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_ctor < > (base_block_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , base_block_height : u32 , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , block_height : u32 , has_found_coinbase : bool , has_valid_coinbase : bool , has_valid_mn_list_root : bool , has_valid_llmq_list_root : bool , has_valid_quorums : bool , has_added_quorums : bool , has_added_rotated_quorums : bool , masternode_list : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList , added_masternodes : * mut crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , modified_masternodes : * mut crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , needed_masternode_lists : * mut crate :: fermented :: generics :: std_collections_HashSet_u8_32 , added_dapi_nodes : * mut crate :: fermented :: generics :: Vec_u8_16 , removed_dapi_nodes : * mut crate :: fermented :: generics :: Vec_u8_16) -> * mut dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { ferment :: boxed (dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { base_block_hash , base_block_height , block_hash , block_height , has_found_coinbase , has_valid_coinbase , has_valid_mn_list_root , has_valid_llmq_list_root , has_valid_quorums , has_added_quorums , has_added_rotated_quorums , masternode_list , added_masternodes , modified_masternodes , needed_masternode_lists , added_dapi_nodes , removed_dapi_nodes }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_destroy < > (ffi : * mut dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_get_base_block_hash < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . base_block_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_get_base_block_height < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> u32 { (* obj) . base_block_height } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_get_block_hash < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . block_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_get_block_height < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> u32 { (* obj) . block_height } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_get_has_found_coinbase < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> bool { (* obj) . has_found_coinbase } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_get_has_valid_coinbase < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> bool { (* obj) . has_valid_coinbase } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_get_has_valid_mn_list_root < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> bool { (* obj) . has_valid_mn_list_root } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_get_has_valid_llmq_list_root < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> bool { (* obj) . has_valid_llmq_list_root } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_get_has_valid_quorums < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> bool { (* obj) . has_valid_quorums } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_get_has_added_quorums < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> bool { (* obj) . has_added_quorums } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_get_has_added_rotated_quorums < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> bool { (* obj) . has_added_rotated_quorums } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_get_masternode_list < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList { (* obj) . masternode_list } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_get_added_masternodes < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { (* obj) . added_masternodes } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_get_modified_masternodes < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { (* obj) . modified_masternodes } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_get_needed_masternode_lists < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> * mut crate :: fermented :: generics :: std_collections_HashSet_u8_32 { (* obj) . needed_masternode_lists } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_get_added_dapi_nodes < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> * mut crate :: fermented :: generics :: Vec_u8_16 { (* obj) . added_dapi_nodes } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_get_removed_dapi_nodes < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> * mut crate :: fermented :: generics :: Vec_u8_16 { (* obj) . removed_dapi_nodes } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_set_base_block_hash < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . base_block_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_set_base_block_height < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> u32 { (* obj) . base_block_height } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_set_block_hash < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . block_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_set_block_height < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> u32 { (* obj) . block_height } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_set_has_found_coinbase < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> bool { (* obj) . has_found_coinbase } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_set_has_valid_coinbase < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> bool { (* obj) . has_valid_coinbase } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_set_has_valid_mn_list_root < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> bool { (* obj) . has_valid_mn_list_root } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_set_has_valid_llmq_list_root < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> bool { (* obj) . has_valid_llmq_list_root } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_set_has_valid_quorums < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> bool { (* obj) . has_valid_quorums } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_set_has_added_quorums < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> bool { (* obj) . has_added_quorums } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_set_has_added_rotated_quorums < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> bool { (* obj) . has_added_rotated_quorums } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_set_masternode_list < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList { (* obj) . masternode_list } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_set_added_masternodes < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { (* obj) . added_masternodes } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_set_modified_masternodes < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { (* obj) . modified_masternodes } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_set_needed_masternode_lists < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> * mut crate :: fermented :: generics :: std_collections_HashSet_u8_32 { (* obj) . needed_masternode_lists } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_set_added_dapi_nodes < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> * mut crate :: fermented :: generics :: Vec_u8_16 { (* obj) . added_dapi_nodes } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_set_removed_dapi_nodes < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> * mut crate :: fermented :: generics :: Vec_u8_16 { (* obj) . removed_dapi_nodes } } pub mod core_provider { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`CoreProviderError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_masternode_processor_processing_core_provider_CoreProviderError { NullResult (* mut std :: os :: raw :: c_char) , ByteError (* mut dash_spv_apple_bindings :: custom :: byte :: byte_Error_FFI) , BadBlockHash (* mut crate :: fermented :: generics :: Arr_u8_32) , UnknownBlockHeightForHash (* mut crate :: fermented :: generics :: Arr_u8_32) , BlockHashNotFoundAt (u32) , NoSnapshot , HexError (* mut dash_spv_apple_bindings :: custom :: bitcoin_hashes :: hashes_hex_Error_FFI) , MissedMasternodeListAt (* mut crate :: fermented :: generics :: Arr_u8_32) , QuorumValidation (* mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: validation_error :: dash_spv_crypto_llmq_validation_error_LLMQValidationError) } impl ferment :: FFIConversionFrom < dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > for dash_spv_masternode_processor_processing_core_provider_CoreProviderError { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: NullResult (o_0) => dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError :: NullResult (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: ByteError (o_0) => dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError :: ByteError (< dash_spv_apple_bindings :: custom :: byte :: byte_Error_FFI as ferment :: FFIConversionFrom < byte :: Error >> :: ffi_from (* o_0)) , dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: BadBlockHash (o_0) => dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError :: BadBlockHash (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (* o_0)) , dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: UnknownBlockHeightForHash (o_0) => dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError :: UnknownBlockHeightForHash (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (* o_0)) , dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: BlockHashNotFoundAt (o_0) => dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError :: BlockHashNotFoundAt (* o_0) , dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: NoSnapshot => dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError :: NoSnapshot , dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: HexError (o_0) => dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError :: HexError (< dash_spv_apple_bindings :: custom :: bitcoin_hashes :: hashes_hex_Error_FFI as ferment :: FFIConversionFrom < hashes :: hex :: Error >> :: ffi_from (* o_0)) , dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: MissedMasternodeListAt (o_0) => dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError :: MissedMasternodeListAt (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (* o_0)) , dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: QuorumValidation (o_0) => dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError :: QuorumValidation (< crate :: fermented :: types :: dash_spv_crypto :: llmq :: validation_error :: dash_spv_crypto_llmq_validation_error_LLMQValidationError as ferment :: FFIConversionFrom < dash_spv_crypto :: llmq :: validation_error :: LLMQValidationError >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > for dash_spv_masternode_processor_processing_core_provider_CoreProviderError { unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError) -> * const dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed (match obj { dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError :: NullResult (o_0) => dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: NullResult (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError :: ByteError (o_0) => dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: ByteError (< dash_spv_apple_bindings :: custom :: byte :: byte_Error_FFI as ferment :: FFIConversionTo < byte :: Error >> :: ffi_to (o_0)) , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError :: BadBlockHash (o_0) => dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: BadBlockHash (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (o_0)) , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError :: UnknownBlockHeightForHash (o_0) => dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: UnknownBlockHeightForHash (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (o_0)) , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError :: BlockHashNotFoundAt (o_0) => dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: BlockHashNotFoundAt (o_0) , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError :: NoSnapshot => dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: NoSnapshot , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError :: HexError (o_0) => dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: HexError (< dash_spv_apple_bindings :: custom :: bitcoin_hashes :: hashes_hex_Error_FFI as ferment :: FFIConversionTo < hashes :: hex :: Error >> :: ffi_to (o_0)) , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError :: MissedMasternodeListAt (o_0) => dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: MissedMasternodeListAt (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (o_0)) , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError :: QuorumValidation (o_0) => dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: QuorumValidation (< crate :: fermented :: types :: dash_spv_crypto :: llmq :: validation_error :: dash_spv_crypto_llmq_validation_error_LLMQValidationError as ferment :: FFIConversionTo < dash_spv_crypto :: llmq :: validation_error :: LLMQValidationError >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dash_spv_masternode_processor_processing_core_provider_CoreProviderError { fn drop (& mut self) { unsafe { match self { dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: NullResult (o_0) => { ferment :: unbox_string (* o_0) ; } , dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: ByteError (o_0) => { ferment :: unbox_any (* o_0) ; } , dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: BadBlockHash (o_0) => { ferment :: unbox_any (* o_0) ; } , dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: UnknownBlockHeightForHash (o_0) => { ferment :: unbox_any (* o_0) ; } , dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: BlockHashNotFoundAt (o_0) => { ; } , dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: NoSnapshot => { } , dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: HexError (o_0) => { ferment :: unbox_any (* o_0) ; } , dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: MissedMasternodeListAt (o_0) => { ferment :: unbox_any (* o_0) ; } , dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: QuorumValidation (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_core_provider_CoreProviderError_NullResult_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed (dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: NullResult (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_core_provider_CoreProviderError_ByteError_ctor (o_o_0 : * mut dash_spv_apple_bindings :: custom :: byte :: byte_Error_FFI) -> * mut dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed (dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: ByteError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_core_provider_CoreProviderError_BadBlockHash_ctor (o_o_0 : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed (dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: BadBlockHash (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_core_provider_CoreProviderError_UnknownBlockHeightForHash_ctor (o_o_0 : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed (dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: UnknownBlockHeightForHash (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_core_provider_CoreProviderError_BlockHashNotFoundAt_ctor (o_o_0 : u32) -> * mut dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed (dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: BlockHashNotFoundAt (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_core_provider_CoreProviderError_NoSnapshot_ctor () -> * mut dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed (dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: NoSnapshot { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_core_provider_CoreProviderError_HexError_ctor (o_o_0 : * mut dash_spv_apple_bindings :: custom :: bitcoin_hashes :: hashes_hex_Error_FFI) -> * mut dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed (dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: HexError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_core_provider_CoreProviderError_MissedMasternodeListAt_ctor (o_o_0 : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed (dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: MissedMasternodeListAt (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_core_provider_CoreProviderError_QuorumValidation_ctor (o_o_0 : * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: validation_error :: dash_spv_crypto_llmq_validation_error_LLMQValidationError) -> * mut dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed (dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: QuorumValidation (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_core_provider_CoreProviderError_destroy < > (ffi : * mut dash_spv_masternode_processor_processing_core_provider_CoreProviderError) { ferment :: unbox_any (ffi) ; } } pub mod processor { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::current_masternode_list`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_current_masternode_list (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor , is_rotated_quorums_presented : bool) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: current_masternode_list (& * self_ , is_rotated_quorums_presented) ; < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList as ferment :: FFIConversionTo < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::has_current_masternode_list`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_has_current_masternode_list (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor , is_rotated_quorums_presented : bool) -> bool { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: has_current_masternode_list (& * self_ , is_rotated_quorums_presented) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::current_masternode_list_masternode_with_pro_reg_tx_hash`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_current_masternode_list_masternode_with_pro_reg_tx_hash (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor , is_rotated_quorums_presented : bool , hash : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: current_masternode_list_masternode_with_pro_reg_tx_hash (& * self_ , is_rotated_quorums_presented , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (hash)) ; < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry as ferment :: FFIConversionTo < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::current_masternode_list_masternode_count`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_current_masternode_list_masternode_count (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor , is_rotated_quorums_presented : bool) -> usize { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: current_masternode_list_masternode_count (& * self_ , is_rotated_quorums_presented) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::current_masternode_list_quorum_count`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_current_masternode_list_quorum_count (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor , is_rotated_quorums_presented : bool) -> usize { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: current_masternode_list_quorum_count (& * self_ , is_rotated_quorums_presented) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::add_to_mn_list_retrieval_queue`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_add_to_mn_list_retrieval_queue (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: add_to_mn_list_retrieval_queue (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash)) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::extend_mn_list_retrieval_queue`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_extend_mn_list_retrieval_queue (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor , block_hashes : * mut crate :: fermented :: generics :: Vec_u8_32) { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: extend_mn_list_retrieval_queue (& * self_ , < crate :: fermented :: generics :: Vec_u8_32 as ferment :: FFIConversionFrom < Vec < [u8 ; 32] > >> :: ffi_from (block_hashes)) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::remove_from_mn_list_retrieval_queue`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_remove_from_mn_list_retrieval_queue (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: remove_from_mn_list_retrieval_queue (& * self_ , Box :: leak (Box :: new (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash)))) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::update_mn_list_retrieval_queue`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_update_mn_list_retrieval_queue (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: processor_cache :: dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: update_mn_list_retrieval_queue (& * self_) ; < crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: processor_cache :: dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue as ferment :: FFIConversionTo < dash_spv_masternode_processor :: processing :: processor_cache :: RetrievalQueue >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::clean_mn_list_retrieval_queue`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_clean_mn_list_retrieval_queue (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor) { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: clean_mn_list_retrieval_queue (& * self_) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::add_to_qr_info_retrieval_queue`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_add_to_qr_info_retrieval_queue (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: add_to_qr_info_retrieval_queue (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash)) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::extend_qr_info_retrieval_queue`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_extend_qr_info_retrieval_queue (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor , block_hashes : * mut crate :: fermented :: generics :: Vec_u8_32) { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: extend_qr_info_retrieval_queue (& * self_ , < crate :: fermented :: generics :: Vec_u8_32 as ferment :: FFIConversionFrom < Vec < [u8 ; 32] > >> :: ffi_from (block_hashes)) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::remove_from_qr_info_retrieval_queue`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_remove_from_qr_info_retrieval_queue (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: remove_from_qr_info_retrieval_queue (& * self_ , Box :: leak (Box :: new (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash)))) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::update_qr_info_retrieval_queue`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_update_qr_info_retrieval_queue (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: processor_cache :: dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: update_qr_info_retrieval_queue (& * self_) ; < crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: processor_cache :: dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue as ferment :: FFIConversionTo < dash_spv_masternode_processor :: processing :: processor_cache :: RetrievalQueue >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::clean_qr_info_retrieval_queue`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_clean_qr_info_retrieval_queue (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor) { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: clean_qr_info_retrieval_queue (& * self_) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::merkle_root_for_block_hash`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_merkle_root_for_block_hash (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , peer : * const std :: os :: raw :: c_void) -> * mut crate :: fermented :: generics :: Result_ok_u8_arr_32_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: merkle_root_for_block_hash (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash) , peer) ; < crate :: fermented :: generics :: Result_ok_u8_arr_32_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError as ferment :: FFIConversionTo < Result < [u8 ; 32] , dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::mn_list_diff_result_from_file`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_mn_list_diff_result_from_file (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor , message : * mut crate :: fermented :: generics :: Slice_u8 , protocol_version : u32) -> * mut crate :: fermented :: generics :: Result_Tuple_Arr_u8_32_Arr_u8_32_bool_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: mn_list_diff_result_from_file (& * self_ , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (message))) , protocol_version) ; < crate :: fermented :: generics :: Result_Tuple_Arr_u8_32_Arr_u8_32_bool_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError as ferment :: FFIConversionTo < Result < ([u8 ; 32] , [u8 ; 32] , bool) , dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::mn_list_diff_result_from_message`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_mn_list_diff_result_from_message (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor , message : * mut crate :: fermented :: generics :: Slice_u8 , is_from_snapshot : bool , protocol_version : u32 , allow_invalid_merkle_roots : bool , peer : * const std :: os :: raw :: c_void) -> * mut crate :: fermented :: generics :: Result_Tuple_Arr_u8_32_Arr_u8_32_bool_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: mn_list_diff_result_from_message (& * self_ , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (message))) , is_from_snapshot , protocol_version , allow_invalid_merkle_roots , peer) ; < crate :: fermented :: generics :: Result_Tuple_Arr_u8_32_Arr_u8_32_bool_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError as ferment :: FFIConversionTo < Result < ([u8 ; 32] , [u8 ; 32] , bool) , dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::qr_info_result_from_message`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_qr_info_result_from_message (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor , message : * mut crate :: fermented :: generics :: Slice_u8 , is_from_snapshot : bool , protocol_version : u32 , is_rotated_quorums_presented : bool , allow_invalid_merkle_roots : bool , peer : * const std :: os :: raw :: c_void) -> * mut crate :: fermented :: generics :: Result_Tuple_Arr_u8_32_Arr_u8_32_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: qr_info_result_from_message (& * self_ , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (message))) , is_from_snapshot , protocol_version , is_rotated_quorums_presented , allow_invalid_merkle_roots , peer) ; < crate :: fermented :: generics :: Result_Tuple_Arr_u8_32_Arr_u8_32_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError as ferment :: FFIConversionTo < Result < ([u8 ; 32] , [u8 ; 32]) , dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::block_hash_for_height`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_block_hash_for_height (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor , height : u32) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: block_hash_for_height (& * self_ , height) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::height_for_block_hash`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_height_for_block_hash (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) -> u32 { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: height_for_block_hash (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::quorum_entry_for_lock_request_id`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_quorum_entry_for_lock_request_id (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor , request_id : * mut crate :: fermented :: generics :: Arr_u8_32 , llmq_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , block_height : u32 , expiration_offset : u32) -> * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: quorum_entry_for_lock_request_id (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (request_id) , < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_from (llmq_type) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash) , block_height , expiration_offset) ; < crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry as ferment :: FFIConversionTo < dash_spv_crypto :: llmq :: entry :: LLMQEntry >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::quorum_entry_having_quorum_hash`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_quorum_entry_having_quorum_hash (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor , llmq_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType , llmq_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , chain_lock_height : u32) -> * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: quorum_entry_having_quorum_hash (& * self_ , < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_from (llmq_type) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (llmq_hash) , chain_lock_height) ; < crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry as ferment :: FFIConversionTo < dash_spv_crypto :: llmq :: entry :: LLMQEntry >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::quorum_entry_for_chain_lock_request_id`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_quorum_entry_for_chain_lock_request_id (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor , request_id : * mut crate :: fermented :: generics :: Arr_u8_32 , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , block_height : u32) -> * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: quorum_entry_for_chain_lock_request_id (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (request_id) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash) , block_height) ; < crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry as ferment :: FFIConversionTo < dash_spv_crypto :: llmq :: entry :: LLMQEntry >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::quorum_entry_for_instant_send_request_id`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_quorum_entry_for_instant_send_request_id (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor , request_id : * mut crate :: fermented :: generics :: Arr_u8_32 , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , block_height : u32) -> * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: quorum_entry_for_instant_send_request_id (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (request_id) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash) , block_height) ; < crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry as ferment :: FFIConversionTo < dash_spv_crypto :: llmq :: entry :: LLMQEntry >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::quorum_entry_for_platform_having_quorum_hash`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_quorum_entry_for_platform_having_quorum_hash (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor , quorum_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , block_height : u32) -> * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: quorum_entry_for_platform_having_quorum_hash (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (quorum_hash) , block_height) ; < crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry as ferment :: FFIConversionTo < dash_spv_crypto :: llmq :: entry :: LLMQEntry >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::quorum_entry_for_platform_having_quorum_hash_with_block`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_quorum_entry_for_platform_having_quorum_hash_with_block (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor , quorum_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , block : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: block :: dash_spv_masternode_processor_common_block_Block) -> * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: quorum_entry_for_platform_having_quorum_hash_with_block (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (quorum_hash) , < crate :: fermented :: types :: dash_spv_masternode_processor :: common :: block :: dash_spv_masternode_processor_common_block_Block as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: common :: block :: Block >> :: ffi_from (block)) ; < crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry as ferment :: FFIConversionTo < dash_spv_crypto :: llmq :: entry :: LLMQEntry >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::load_masternode_list_at_block_hash`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_load_masternode_list_at_block_hash (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: load_masternode_list_at_block_hash (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash)) ; < crate :: fermented :: generics :: Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError as ferment :: FFIConversionTo < Result < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::masternode_list_for_block_hash`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_masternode_list_for_block_hash (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: masternode_list_for_block_hash (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash)) ; < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList as ferment :: FFIConversionTo < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::masternode_list_before_block_hash`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_masternode_list_before_block_hash (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: masternode_list_before_block_hash (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash)) ; < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList as ferment :: FFIConversionTo < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::closest_known_block_hash_for_block_hash`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_closest_known_block_hash_for_block_hash (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: closest_known_block_hash_for_block_hash (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash)) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::earliest_masternode_list_block_height`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_earliest_masternode_list_block_height (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor) -> u32 { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: earliest_masternode_list_block_height (& * self_) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::last_masternode_list_block_height`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_last_masternode_list_block_height (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor) -> u32 { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: last_masternode_list_block_height (& * self_) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::load_masternode_list`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_load_masternode_list (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor , masternodes : * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , quorums : * mut crate :: fermented :: generics :: Vec_dash_spv_crypto_llmq_entry_LLMQEntry , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , block_height : u32 , quorums_active : bool) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: load_masternode_list (& * self_ , < crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry as ferment :: FFIConversionFrom < Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > >> :: ffi_from (masternodes) , < crate :: fermented :: generics :: Vec_dash_spv_crypto_llmq_entry_LLMQEntry as ferment :: FFIConversionFrom < Vec < dash_spv_crypto :: llmq :: entry :: LLMQEntry > >> :: ffi_from (quorums) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash) , block_height , quorums_active) ; < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList as ferment :: FFIConversionTo < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::cache_query`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_cache_query (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor , hash : * mut crate :: fermented :: generics :: Arr_u8_32) { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: cache_query (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (hash)) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::calculate_outdated_height`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_calculate_outdated_height (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor) -> u32 { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: calculate_outdated_height (& * self_) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::get_recent_mn_list`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_get_recent_mn_list (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor , block : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: block :: dash_spv_masternode_processor_common_block_Block) { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: get_recent_mn_list (& * self_ , < crate :: fermented :: types :: dash_spv_masternode_processor :: common :: block :: dash_spv_masternode_processor_common_block_Block as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: common :: block :: Block >> :: ffi_from (block)) ; ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processor::MasternodeProcessor::get_recent_qr_info`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_get_recent_qr_info (self_ : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor , block : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: block :: dash_spv_masternode_processor_common_block_Block) { let obj = dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor :: get_recent_qr_info (& * self_ , < crate :: fermented :: types :: dash_spv_masternode_processor :: common :: block :: dash_spv_masternode_processor_common_block_Block as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: common :: block :: Block >> :: ffi_from (block)) ; ; } } pub mod processing_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`ProcessingError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_masternode_processor_processing_processing_error_ProcessingError { PersistInRetrieval (* mut crate :: fermented :: generics :: Arr_u8_32 , * mut crate :: fermented :: generics :: Arr_u8_32) , LocallyStored (u32 , * mut crate :: fermented :: generics :: Arr_u8_32) , ParseError (* mut std :: os :: raw :: c_char) , HasNoBaseBlockHash (* mut crate :: fermented :: generics :: Arr_u8_32) , UnknownBlockHash (* mut crate :: fermented :: generics :: Arr_u8_32) , InvalidResult (* mut std :: os :: raw :: c_char) , CoreProvider (* mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: core_provider :: dash_spv_masternode_processor_processing_core_provider_CoreProviderError) , MissingLists (* mut std :: os :: raw :: c_char) } impl ferment :: FFIConversionFrom < dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError > for dash_spv_masternode_processor_processing_processing_error_ProcessingError { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_processing_processing_error_ProcessingError) -> dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_masternode_processor_processing_processing_error_ProcessingError :: PersistInRetrieval (o_0 , o_1) => dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError :: PersistInRetrieval (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (* o_0) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (* o_1)) , dash_spv_masternode_processor_processing_processing_error_ProcessingError :: LocallyStored (o_0 , o_1) => dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError :: LocallyStored (* o_0 , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (* o_1)) , dash_spv_masternode_processor_processing_processing_error_ProcessingError :: ParseError (o_0) => dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError :: ParseError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dash_spv_masternode_processor_processing_processing_error_ProcessingError :: HasNoBaseBlockHash (o_0) => dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError :: HasNoBaseBlockHash (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (* o_0)) , dash_spv_masternode_processor_processing_processing_error_ProcessingError :: UnknownBlockHash (o_0) => dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError :: UnknownBlockHash (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (* o_0)) , dash_spv_masternode_processor_processing_processing_error_ProcessingError :: InvalidResult (o_0) => dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError :: InvalidResult (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dash_spv_masternode_processor_processing_processing_error_ProcessingError :: CoreProvider (o_0) => dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError :: CoreProvider (< crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: core_provider :: dash_spv_masternode_processor_processing_core_provider_CoreProviderError as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError >> :: ffi_from (* o_0)) , dash_spv_masternode_processor_processing_processing_error_ProcessingError :: MissingLists (o_0) => dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError :: MissingLists (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError > for dash_spv_masternode_processor_processing_processing_error_ProcessingError { unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError) -> * const dash_spv_masternode_processor_processing_processing_error_ProcessingError { ferment :: boxed (match obj { dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError :: PersistInRetrieval (o_0 , o_1) => dash_spv_masternode_processor_processing_processing_error_ProcessingError :: PersistInRetrieval (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (o_0) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (o_1)) , dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError :: LocallyStored (o_0 , o_1) => dash_spv_masternode_processor_processing_processing_error_ProcessingError :: LocallyStored (o_0 , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (o_1)) , dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError :: ParseError (o_0) => dash_spv_masternode_processor_processing_processing_error_ProcessingError :: ParseError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError :: HasNoBaseBlockHash (o_0) => dash_spv_masternode_processor_processing_processing_error_ProcessingError :: HasNoBaseBlockHash (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (o_0)) , dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError :: UnknownBlockHash (o_0) => dash_spv_masternode_processor_processing_processing_error_ProcessingError :: UnknownBlockHash (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (o_0)) , dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError :: InvalidResult (o_0) => dash_spv_masternode_processor_processing_processing_error_ProcessingError :: InvalidResult (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError :: CoreProvider (o_0) => dash_spv_masternode_processor_processing_processing_error_ProcessingError :: CoreProvider (< crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: core_provider :: dash_spv_masternode_processor_processing_core_provider_CoreProviderError as ferment :: FFIConversionTo < dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError >> :: ffi_to (o_0)) , dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError :: MissingLists (o_0) => dash_spv_masternode_processor_processing_processing_error_ProcessingError :: MissingLists (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dash_spv_masternode_processor_processing_processing_error_ProcessingError { fn drop (& mut self) { unsafe { match self { dash_spv_masternode_processor_processing_processing_error_ProcessingError :: PersistInRetrieval (o_0 , o_1) => { ferment :: unbox_any (* o_0) ; ; ferment :: unbox_any (* o_1) ; } , dash_spv_masternode_processor_processing_processing_error_ProcessingError :: LocallyStored (o_0 , o_1) => { ; ; ferment :: unbox_any (* o_1) ; } , dash_spv_masternode_processor_processing_processing_error_ProcessingError :: ParseError (o_0) => { ferment :: unbox_string (* o_0) ; } , dash_spv_masternode_processor_processing_processing_error_ProcessingError :: HasNoBaseBlockHash (o_0) => { ferment :: unbox_any (* o_0) ; } , dash_spv_masternode_processor_processing_processing_error_ProcessingError :: UnknownBlockHash (o_0) => { ferment :: unbox_any (* o_0) ; } , dash_spv_masternode_processor_processing_processing_error_ProcessingError :: InvalidResult (o_0) => { ferment :: unbox_string (* o_0) ; } , dash_spv_masternode_processor_processing_processing_error_ProcessingError :: CoreProvider (o_0) => { ferment :: unbox_any (* o_0) ; } , dash_spv_masternode_processor_processing_processing_error_ProcessingError :: MissingLists (o_0) => { ferment :: unbox_string (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processing_error_ProcessingError_PersistInRetrieval_ctor (o_o_0 : * mut crate :: fermented :: generics :: Arr_u8_32 , o_o_1 : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut dash_spv_masternode_processor_processing_processing_error_ProcessingError { ferment :: boxed (dash_spv_masternode_processor_processing_processing_error_ProcessingError :: PersistInRetrieval (o_o_0 , o_o_1)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processing_error_ProcessingError_LocallyStored_ctor (o_o_0 : u32 , o_o_1 : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut dash_spv_masternode_processor_processing_processing_error_ProcessingError { ferment :: boxed (dash_spv_masternode_processor_processing_processing_error_ProcessingError :: LocallyStored (o_o_0 , o_o_1)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processing_error_ProcessingError_ParseError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dash_spv_masternode_processor_processing_processing_error_ProcessingError { ferment :: boxed (dash_spv_masternode_processor_processing_processing_error_ProcessingError :: ParseError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processing_error_ProcessingError_HasNoBaseBlockHash_ctor (o_o_0 : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut dash_spv_masternode_processor_processing_processing_error_ProcessingError { ferment :: boxed (dash_spv_masternode_processor_processing_processing_error_ProcessingError :: HasNoBaseBlockHash (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processing_error_ProcessingError_UnknownBlockHash_ctor (o_o_0 : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut dash_spv_masternode_processor_processing_processing_error_ProcessingError { ferment :: boxed (dash_spv_masternode_processor_processing_processing_error_ProcessingError :: UnknownBlockHash (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processing_error_ProcessingError_InvalidResult_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dash_spv_masternode_processor_processing_processing_error_ProcessingError { ferment :: boxed (dash_spv_masternode_processor_processing_processing_error_ProcessingError :: InvalidResult (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processing_error_ProcessingError_CoreProvider_ctor (o_o_0 : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: core_provider :: dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> * mut dash_spv_masternode_processor_processing_processing_error_ProcessingError { ferment :: boxed (dash_spv_masternode_processor_processing_processing_error_ProcessingError :: CoreProvider (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processing_error_ProcessingError_MissingLists_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dash_spv_masternode_processor_processing_processing_error_ProcessingError { ferment :: boxed (dash_spv_masternode_processor_processing_processing_error_ProcessingError :: MissingLists (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processing_error_ProcessingError_destroy < > (ffi : * mut dash_spv_masternode_processor_processing_processing_error_ProcessingError) { ferment :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor::processing::processing_error::ProcessingError::string_value`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processing_error_ProcessingError_string_value (self_ : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: processing_error :: dash_spv_masternode_processor_processing_processing_error_ProcessingError) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError :: string_value (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } } pub mod qr_info_result { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`QRInfoResult`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult { pub result_at_tip : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , pub result_at_h : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , pub result_at_h_c : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , pub result_at_h_2c : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , pub result_at_h_3c : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , pub result_at_h_4c : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , pub quorum_snapshot_list : * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot , pub mn_list_diff_list : * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult } impl ferment :: FFIConversionFrom < dash_spv_masternode_processor :: processing :: qr_info_result :: QRInfoResult > for dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) -> dash_spv_masternode_processor :: processing :: qr_info_result :: QRInfoResult { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: processing :: qr_info_result :: QRInfoResult { result_at_tip : < crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult >> :: ffi_from (ffi_ref . result_at_tip) , result_at_h : < crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult >> :: ffi_from (ffi_ref . result_at_h) , result_at_h_c : < crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult >> :: ffi_from (ffi_ref . result_at_h_c) , result_at_h_2c : < crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult >> :: ffi_from (ffi_ref . result_at_h_2c) , result_at_h_3c : < crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult >> :: ffi_from (ffi_ref . result_at_h_3c) , result_at_h_4c : < crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult >> :: ffi_from_opt (ffi_ref . result_at_h_4c) , quorum_snapshot_list : < crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot as ferment :: FFIConversionFrom < Vec < dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot > >> :: ffi_from (ffi_ref . quorum_snapshot_list) , mn_list_diff_list : < crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult as ferment :: FFIConversionFrom < Vec < dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult > >> :: ffi_from (ffi_ref . mn_list_diff_list) } } } impl ferment :: FFIConversionTo < dash_spv_masternode_processor :: processing :: qr_info_result :: QRInfoResult > for dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult { unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: processing :: qr_info_result :: QRInfoResult) -> * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult { ferment :: boxed (dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult { result_at_tip : < crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult as ferment :: FFIConversionTo < dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult >> :: ffi_to (obj . result_at_tip) , result_at_h : < crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult as ferment :: FFIConversionTo < dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult >> :: ffi_to (obj . result_at_h) , result_at_h_c : < crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult as ferment :: FFIConversionTo < dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult >> :: ffi_to (obj . result_at_h_c) , result_at_h_2c : < crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult as ferment :: FFIConversionTo < dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult >> :: ffi_to (obj . result_at_h_2c) , result_at_h_3c : < crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult as ferment :: FFIConversionTo < dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult >> :: ffi_to (obj . result_at_h_3c) , result_at_h_4c : < crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult as ferment :: FFIConversionTo < dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult >> :: ffi_to_opt (obj . result_at_h_4c) , quorum_snapshot_list : < crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot as ferment :: FFIConversionTo < Vec < dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot > >> :: ffi_to (obj . quorum_snapshot_list) , mn_list_diff_list : < crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult as ferment :: FFIConversionTo < Vec < dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult > >> :: ffi_to (obj . mn_list_diff_list) }) } } impl Drop for dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . result_at_tip) ; ferment :: unbox_any (ffi_ref . result_at_h) ; ferment :: unbox_any (ffi_ref . result_at_h_c) ; ferment :: unbox_any (ffi_ref . result_at_h_2c) ; ferment :: unbox_any (ffi_ref . result_at_h_3c) ; ferment :: unbox_any_opt (ffi_ref . result_at_h_4c) ; ferment :: unbox_any (ffi_ref . quorum_snapshot_list) ; ferment :: unbox_any (ffi_ref . mn_list_diff_list) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_ctor < > (result_at_tip : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , result_at_h : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , result_at_h_c : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , result_at_h_2c : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , result_at_h_3c : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , result_at_h_4c : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , quorum_snapshot_list : * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot , mn_list_diff_list : * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> * mut dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult { ferment :: boxed (dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult { result_at_tip , result_at_h , result_at_h_c , result_at_h_2c , result_at_h_3c , result_at_h_4c , quorum_snapshot_list , mn_list_diff_list }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_destroy < > (ffi : * mut dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_get_result_at_tip < > (obj : * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { (* obj) . result_at_tip } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_get_result_at_h < > (obj : * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { (* obj) . result_at_h } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_get_result_at_h_c < > (obj : * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { (* obj) . result_at_h_c } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_get_result_at_h_2c < > (obj : * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { (* obj) . result_at_h_2c } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_get_result_at_h_3c < > (obj : * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { (* obj) . result_at_h_3c } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_get_result_at_h_4c < > (obj : * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { (* obj) . result_at_h_4c } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_get_quorum_snapshot_list < > (obj : * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) -> * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { (* obj) . quorum_snapshot_list } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_get_mn_list_diff_list < > (obj : * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) -> * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { (* obj) . mn_list_diff_list } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_set_result_at_tip < > (obj : * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { (* obj) . result_at_tip } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_set_result_at_h < > (obj : * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { (* obj) . result_at_h } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_set_result_at_h_c < > (obj : * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { (* obj) . result_at_h_c } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_set_result_at_h_2c < > (obj : * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { (* obj) . result_at_h_2c } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_set_result_at_h_3c < > (obj : * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { (* obj) . result_at_h_3c } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_set_result_at_h_4c < > (obj : * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { (* obj) . result_at_h_4c } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_set_quorum_snapshot_list < > (obj : * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) -> * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { (* obj) . quorum_snapshot_list } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_set_mn_list_diff_list < > (obj : * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) -> * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { (* obj) . mn_list_diff_list } } } pub mod tests { use crate as dash_spv_apple_bindings ; # [cfg (test)] pub mod indexes { use crate as dash_spv_apple_bindings ; } # [cfg (test)] pub mod keys { use crate as dash_spv_apple_bindings ; } # [cfg (test)] pub mod hashes { use crate as dash_spv_apple_bindings ; } # [cfg (test)] pub mod listdiff { use crate as dash_spv_apple_bindings ; } } } pub mod dpp { use crate as dash_spv_apple_bindings ; pub mod bls { use crate as dash_spv_apple_bindings ; } pub mod serialization { use crate as dash_spv_apple_bindings ; } pub mod withdrawal { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`Pooling`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_withdrawal_Pooling { Never = 0 , IfAvailable = 1 , Standard = 2 } impl ferment :: FFIConversionFrom < dpp :: withdrawal :: Pooling > for dpp_withdrawal_Pooling { unsafe fn ffi_from_const (ffi : * const dpp_withdrawal_Pooling) -> dpp :: withdrawal :: Pooling { let ffi_ref = & * ffi ; match ffi_ref { dpp_withdrawal_Pooling :: Never => dpp :: withdrawal :: Pooling :: Never , dpp_withdrawal_Pooling :: IfAvailable => dpp :: withdrawal :: Pooling :: IfAvailable , dpp_withdrawal_Pooling :: Standard => dpp :: withdrawal :: Pooling :: Standard } } } impl ferment :: FFIConversionTo < dpp :: withdrawal :: Pooling > for dpp_withdrawal_Pooling { unsafe fn ffi_to_const (obj : dpp :: withdrawal :: Pooling) -> * const dpp_withdrawal_Pooling { ferment :: boxed (match obj { dpp :: withdrawal :: Pooling :: Never => dpp_withdrawal_Pooling :: Never , dpp :: withdrawal :: Pooling :: IfAvailable => dpp_withdrawal_Pooling :: IfAvailable , dpp :: withdrawal :: Pooling :: Standard => dpp_withdrawal_Pooling :: Standard , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_withdrawal_Pooling { fn drop (& mut self) { unsafe { match self { dpp_withdrawal_Pooling :: Never => { } , dpp_withdrawal_Pooling :: IfAvailable => { } , dpp_withdrawal_Pooling :: Standard => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_withdrawal_Pooling_Never_ctor () -> * mut dpp_withdrawal_Pooling { ferment :: boxed (dpp_withdrawal_Pooling :: Never { }) } # [no_mangle] pub unsafe extern "C" fn dpp_withdrawal_Pooling_IfAvailable_ctor () -> * mut dpp_withdrawal_Pooling { ferment :: boxed (dpp_withdrawal_Pooling :: IfAvailable { }) } # [no_mangle] pub unsafe extern "C" fn dpp_withdrawal_Pooling_Standard_ctor () -> * mut dpp_withdrawal_Pooling { ferment :: boxed (dpp_withdrawal_Pooling :: Standard { }) } # [no_mangle] pub unsafe extern "C" fn dpp_withdrawal_Pooling_destroy < > (ffi : * mut dpp_withdrawal_Pooling) { ferment :: unbox_any (ffi) ; } # [cfg (feature = "system_contracts")] pub mod document_try_into_asset_unlock_base_transaction_info { use crate as dash_spv_apple_bindings ; } pub mod daily_withdrawal_limit { use crate as dash_spv_apple_bindings ; pub mod v0 { use crate as dash_spv_apple_bindings ; } } } pub mod identity { use crate as dash_spv_apple_bindings ; pub mod core_script { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`CoreScript`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_core_script_CoreScript (* mut dashcore :: blockdata :: script :: ScriptBuf) ; impl ferment :: FFIConversionFrom < dpp :: identity :: core_script :: CoreScript > for dpp_identity_core_script_CoreScript { unsafe fn ffi_from_const (ffi : * const dpp_identity_core_script_CoreScript) -> dpp :: identity :: core_script :: CoreScript { let ffi_ref = & * ffi ; dpp :: identity :: core_script :: CoreScript ((& * ffi_ref . 0) . clone ()) } } impl ferment :: FFIConversionTo < dpp :: identity :: core_script :: CoreScript > for dpp_identity_core_script_CoreScript { unsafe fn ffi_to_const (obj : dpp :: identity :: core_script :: CoreScript) -> * const dpp_identity_core_script_CoreScript { ferment :: boxed (dpp_identity_core_script_CoreScript (ferment :: boxed (obj . 0))) } } impl Drop for dpp_identity_core_script_CoreScript { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_core_script_CoreScript_ctor < > (o_0 : * mut dashcore :: blockdata :: script :: ScriptBuf) -> * mut dpp_identity_core_script_CoreScript { ferment :: boxed (dpp_identity_core_script_CoreScript (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_core_script_CoreScript_destroy < > (ffi : * mut dpp_identity_core_script_CoreScript) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_core_script_CoreScript_get_0 < > (obj : * const dpp_identity_core_script_CoreScript) -> * mut dashcore :: blockdata :: script :: ScriptBuf { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_identity_core_script_CoreScript_set_0 < > (obj : * const dpp_identity_core_script_CoreScript) -> * mut dashcore :: blockdata :: script :: ScriptBuf { (* obj) . 0 } } pub mod credits_converter { use crate as dash_spv_apple_bindings ; } pub mod identity_nonce { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`MergeIdentityNonceResult`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_identity_identity_nonce_MergeIdentityNonceResult { InvalidNonce , NonceTooFarInFuture , NonceTooFarInPast , NonceAlreadyPresentAtTip , NonceAlreadyPresentInPast (u64) , MergeIdentityNonceSuccess (* mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce) } impl ferment :: FFIConversionFrom < dpp :: identity :: identity_nonce :: MergeIdentityNonceResult > for dpp_identity_identity_nonce_MergeIdentityNonceResult { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_nonce_MergeIdentityNonceResult) -> dpp :: identity :: identity_nonce :: MergeIdentityNonceResult { let ffi_ref = & * ffi ; match ffi_ref { dpp_identity_identity_nonce_MergeIdentityNonceResult :: InvalidNonce => dpp :: identity :: identity_nonce :: MergeIdentityNonceResult :: InvalidNonce , dpp_identity_identity_nonce_MergeIdentityNonceResult :: NonceTooFarInFuture => dpp :: identity :: identity_nonce :: MergeIdentityNonceResult :: NonceTooFarInFuture , dpp_identity_identity_nonce_MergeIdentityNonceResult :: NonceTooFarInPast => dpp :: identity :: identity_nonce :: MergeIdentityNonceResult :: NonceTooFarInPast , dpp_identity_identity_nonce_MergeIdentityNonceResult :: NonceAlreadyPresentAtTip => dpp :: identity :: identity_nonce :: MergeIdentityNonceResult :: NonceAlreadyPresentAtTip , dpp_identity_identity_nonce_MergeIdentityNonceResult :: NonceAlreadyPresentInPast (o_0) => dpp :: identity :: identity_nonce :: MergeIdentityNonceResult :: NonceAlreadyPresentInPast (* o_0) , dpp_identity_identity_nonce_MergeIdentityNonceResult :: MergeIdentityNonceSuccess (o_0) => dpp :: identity :: identity_nonce :: MergeIdentityNonceResult :: MergeIdentityNonceSuccess (< crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce as ferment :: FFIConversionFrom < dpp :: prelude :: IdentityNonce >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: identity :: identity_nonce :: MergeIdentityNonceResult > for dpp_identity_identity_nonce_MergeIdentityNonceResult { unsafe fn ffi_to_const (obj : dpp :: identity :: identity_nonce :: MergeIdentityNonceResult) -> * const dpp_identity_identity_nonce_MergeIdentityNonceResult { ferment :: boxed (match obj { dpp :: identity :: identity_nonce :: MergeIdentityNonceResult :: InvalidNonce => dpp_identity_identity_nonce_MergeIdentityNonceResult :: InvalidNonce , dpp :: identity :: identity_nonce :: MergeIdentityNonceResult :: NonceTooFarInFuture => dpp_identity_identity_nonce_MergeIdentityNonceResult :: NonceTooFarInFuture , dpp :: identity :: identity_nonce :: MergeIdentityNonceResult :: NonceTooFarInPast => dpp_identity_identity_nonce_MergeIdentityNonceResult :: NonceTooFarInPast , dpp :: identity :: identity_nonce :: MergeIdentityNonceResult :: NonceAlreadyPresentAtTip => dpp_identity_identity_nonce_MergeIdentityNonceResult :: NonceAlreadyPresentAtTip , dpp :: identity :: identity_nonce :: MergeIdentityNonceResult :: NonceAlreadyPresentInPast (o_0) => dpp_identity_identity_nonce_MergeIdentityNonceResult :: NonceAlreadyPresentInPast (o_0) , dpp :: identity :: identity_nonce :: MergeIdentityNonceResult :: MergeIdentityNonceSuccess (o_0) => dpp_identity_identity_nonce_MergeIdentityNonceResult :: MergeIdentityNonceSuccess (< crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce as ferment :: FFIConversionTo < dpp :: prelude :: IdentityNonce >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_identity_identity_nonce_MergeIdentityNonceResult { fn drop (& mut self) { unsafe { match self { dpp_identity_identity_nonce_MergeIdentityNonceResult :: InvalidNonce => { } , dpp_identity_identity_nonce_MergeIdentityNonceResult :: NonceTooFarInFuture => { } , dpp_identity_identity_nonce_MergeIdentityNonceResult :: NonceTooFarInPast => { } , dpp_identity_identity_nonce_MergeIdentityNonceResult :: NonceAlreadyPresentAtTip => { } , dpp_identity_identity_nonce_MergeIdentityNonceResult :: NonceAlreadyPresentInPast (o_0) => { ; } , dpp_identity_identity_nonce_MergeIdentityNonceResult :: MergeIdentityNonceSuccess (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_nonce_MergeIdentityNonceResult_InvalidNonce_ctor () -> * mut dpp_identity_identity_nonce_MergeIdentityNonceResult { ferment :: boxed (dpp_identity_identity_nonce_MergeIdentityNonceResult :: InvalidNonce { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_nonce_MergeIdentityNonceResult_NonceTooFarInFuture_ctor () -> * mut dpp_identity_identity_nonce_MergeIdentityNonceResult { ferment :: boxed (dpp_identity_identity_nonce_MergeIdentityNonceResult :: NonceTooFarInFuture { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_nonce_MergeIdentityNonceResult_NonceTooFarInPast_ctor () -> * mut dpp_identity_identity_nonce_MergeIdentityNonceResult { ferment :: boxed (dpp_identity_identity_nonce_MergeIdentityNonceResult :: NonceTooFarInPast { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_nonce_MergeIdentityNonceResult_NonceAlreadyPresentAtTip_ctor () -> * mut dpp_identity_identity_nonce_MergeIdentityNonceResult { ferment :: boxed (dpp_identity_identity_nonce_MergeIdentityNonceResult :: NonceAlreadyPresentAtTip { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_nonce_MergeIdentityNonceResult_NonceAlreadyPresentInPast_ctor (o_o_0 : u64) -> * mut dpp_identity_identity_nonce_MergeIdentityNonceResult { ferment :: boxed (dpp_identity_identity_nonce_MergeIdentityNonceResult :: NonceAlreadyPresentInPast (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_nonce_MergeIdentityNonceResult_MergeIdentityNonceSuccess_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce) -> * mut dpp_identity_identity_nonce_MergeIdentityNonceResult { ferment :: boxed (dpp_identity_identity_nonce_MergeIdentityNonceResult :: MergeIdentityNonceSuccess (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_nonce_MergeIdentityNonceResult_destroy < > (ffi : * mut dpp_identity_identity_nonce_MergeIdentityNonceResult) { ferment :: unbox_any (ffi) ; } } pub mod accessors { use crate as dash_spv_apple_bindings ; } pub mod v0 { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`IdentityV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_v0_IdentityV0 { pub id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub public_keys : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey , pub balance : u64 , pub revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision } impl ferment :: FFIConversionFrom < dpp :: identity :: v0 :: IdentityV0 > for dpp_identity_v0_IdentityV0 { unsafe fn ffi_from_const (ffi : * const dpp_identity_v0_IdentityV0) -> dpp :: identity :: v0 :: IdentityV0 { let ffi_ref = & * ffi ; dpp :: identity :: v0 :: IdentityV0 { id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . id) , public_keys : < crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < dpp :: identity :: identity_public_key :: KeyID , dpp :: identity :: identity_public_key :: IdentityPublicKey > >> :: ffi_from (ffi_ref . public_keys) , balance : ffi_ref . balance , revision : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision as ferment :: FFIConversionFrom < dpp :: prelude :: Revision >> :: ffi_from (ffi_ref . revision) } } } impl ferment :: FFIConversionTo < dpp :: identity :: v0 :: IdentityV0 > for dpp_identity_v0_IdentityV0 { unsafe fn ffi_to_const (obj : dpp :: identity :: v0 :: IdentityV0) -> * const dpp_identity_v0_IdentityV0 { ferment :: boxed (dpp_identity_v0_IdentityV0 { id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . id) , public_keys : < crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey as ferment :: FFIConversionTo < std :: collections :: BTreeMap < dpp :: identity :: identity_public_key :: KeyID , dpp :: identity :: identity_public_key :: IdentityPublicKey > >> :: ffi_to (obj . public_keys) , balance : obj . balance , revision : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision as ferment :: FFIConversionTo < dpp :: prelude :: Revision >> :: ffi_to (obj . revision) }) } } impl Drop for dpp_identity_v0_IdentityV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . id) ; ferment :: unbox_any (ffi_ref . public_keys) ; ; ferment :: unbox_any (ffi_ref . revision) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_ctor < > (id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , public_keys : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey , balance : u64 , revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision) -> * mut dpp_identity_v0_IdentityV0 { ferment :: boxed (dpp_identity_v0_IdentityV0 { id , public_keys , balance , revision }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_destroy < > (ffi : * mut dpp_identity_v0_IdentityV0) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_get_id < > (obj : * const dpp_identity_v0_IdentityV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_get_public_keys < > (obj : * const dpp_identity_v0_IdentityV0) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { (* obj) . public_keys } # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_get_balance < > (obj : * const dpp_identity_v0_IdentityV0) -> u64 { (* obj) . balance } # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_get_revision < > (obj : * const dpp_identity_v0_IdentityV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_set_id < > (obj : * const dpp_identity_v0_IdentityV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_set_public_keys < > (obj : * const dpp_identity_v0_IdentityV0) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { (* obj) . public_keys } # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_set_balance < > (obj : * const dpp_identity_v0_IdentityV0) -> u64 { (* obj) . balance } # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_set_revision < > (obj : * const dpp_identity_v0_IdentityV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } pub mod conversion { use crate as dash_spv_apple_bindings ; } } pub mod conversion { use crate as dash_spv_apple_bindings ; # [cfg (feature = "identity-value-conversion")] pub mod platform_value { use crate as dash_spv_apple_bindings ; } # [cfg (feature = "identity-json-conversion")] pub mod json { use crate as dash_spv_apple_bindings ; } # [cfg (feature = "identity-cbor-conversion")] pub mod cbor { use crate as dash_spv_apple_bindings ; } } pub mod methods { use crate as dash_spv_apple_bindings ; pub mod create_basic_identity { use crate as dash_spv_apple_bindings ; } } pub mod errors { use crate as dash_spv_apple_bindings ; pub mod asset_lock_transaction_is_not_found_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`AssetLockTransactionIsNotFoundError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError { pub transaction_id : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid } impl ferment :: FFIConversionFrom < dpp :: identity :: errors :: asset_lock_transaction_is_not_found_error :: AssetLockTransactionIsNotFoundError > for dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError { unsafe fn ffi_from_const (ffi : * const dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError) -> dpp :: identity :: errors :: asset_lock_transaction_is_not_found_error :: AssetLockTransactionIsNotFoundError { let ffi_ref = & * ffi ; dpp :: identity :: errors :: asset_lock_transaction_is_not_found_error :: AssetLockTransactionIsNotFoundError { transaction_id : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid as ferment :: FFIConversionFrom < dashcore :: hash_types :: Txid >> :: ffi_from (ffi_ref . transaction_id) } } } impl ferment :: FFIConversionTo < dpp :: identity :: errors :: asset_lock_transaction_is_not_found_error :: AssetLockTransactionIsNotFoundError > for dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError { unsafe fn ffi_to_const (obj : dpp :: identity :: errors :: asset_lock_transaction_is_not_found_error :: AssetLockTransactionIsNotFoundError) -> * const dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError { ferment :: boxed (dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError { transaction_id : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid as ferment :: FFIConversionTo < dashcore :: hash_types :: Txid >> :: ffi_to (obj . transaction_id) }) } } impl Drop for dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . transaction_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError_ctor < > (transaction_id : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid) -> * mut dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError { ferment :: boxed (dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError { transaction_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError_destroy < > (ffi : * mut dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError_get_transaction_id < > (obj : * const dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid { (* obj) . transaction_id } # [no_mangle] pub unsafe extern "C" fn dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError_set_transaction_id < > (obj : * const dpp_identity_errors_asset_lock_transaction_is_not_found_error_AssetLockTransactionIsNotFoundError) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid { (* obj) . transaction_id } } pub mod unknown_asset_lock_proof_type_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`UnknownAssetLockProofTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError { pub asset_lock_type : * mut u8 } impl ferment :: FFIConversionFrom < dpp :: identity :: errors :: unknown_asset_lock_proof_type_error :: UnknownAssetLockProofTypeError > for dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError { unsafe fn ffi_from_const (ffi : * const dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError) -> dpp :: identity :: errors :: unknown_asset_lock_proof_type_error :: UnknownAssetLockProofTypeError { let ffi_ref = & * ffi ; dpp :: identity :: errors :: unknown_asset_lock_proof_type_error :: UnknownAssetLockProofTypeError { asset_lock_type : ferment :: from_opt_primitive (ffi_ref . asset_lock_type) } } } impl ferment :: FFIConversionTo < dpp :: identity :: errors :: unknown_asset_lock_proof_type_error :: UnknownAssetLockProofTypeError > for dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError { unsafe fn ffi_to_const (obj : dpp :: identity :: errors :: unknown_asset_lock_proof_type_error :: UnknownAssetLockProofTypeError) -> * const dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError { ferment :: boxed (dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError { asset_lock_type : ferment :: to_opt_primitive (obj . asset_lock_type) }) } } impl Drop for dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: destroy_opt_primitive (ffi_ref . asset_lock_type) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError_ctor < > (asset_lock_type : * mut u8) -> * mut dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError { ferment :: boxed (dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError { asset_lock_type }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError_destroy < > (ffi : * mut dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError_get_asset_lock_type < > (obj : * const dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError) -> * mut u8 { (* obj) . asset_lock_type } # [no_mangle] pub unsafe extern "C" fn dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError_set_asset_lock_type < > (obj : * const dpp_identity_errors_unknown_asset_lock_proof_type_error_UnknownAssetLockProofTypeError) -> * mut u8 { (* obj) . asset_lock_type } } pub mod asset_lock_output_not_found_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`AssetLockOutputNotFoundError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError { } impl ferment :: FFIConversionFrom < dpp :: identity :: errors :: asset_lock_output_not_found_error :: AssetLockOutputNotFoundError > for dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError { unsafe fn ffi_from_const (ffi : * const dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError) -> dpp :: identity :: errors :: asset_lock_output_not_found_error :: AssetLockOutputNotFoundError { let ffi_ref = & * ffi ; dpp :: identity :: errors :: asset_lock_output_not_found_error :: AssetLockOutputNotFoundError { } } } impl ferment :: FFIConversionTo < dpp :: identity :: errors :: asset_lock_output_not_found_error :: AssetLockOutputNotFoundError > for dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError { unsafe fn ffi_to_const (obj : dpp :: identity :: errors :: asset_lock_output_not_found_error :: AssetLockOutputNotFoundError) -> * const dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError { ferment :: boxed (dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError { }) } } impl Drop for dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError_ctor < > () -> * mut dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError { ferment :: boxed (dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError_destroy < > (ffi : * mut dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError) { ferment :: unbox_any (ffi) ; } } } pub mod identity { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`PartialIdentity`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_identity_PartialIdentity { pub id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub loaded_public_keys : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey , pub balance : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits , pub revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , pub not_found_public_keys : * mut crate :: fermented :: generics :: std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID } impl ferment :: FFIConversionFrom < dpp :: identity :: identity :: PartialIdentity > for dpp_identity_identity_PartialIdentity { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_PartialIdentity) -> dpp :: identity :: identity :: PartialIdentity { let ffi_ref = & * ffi ; dpp :: identity :: identity :: PartialIdentity { id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . id) , loaded_public_keys : < crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < dpp :: identity :: identity_public_key :: KeyID , dpp :: identity :: identity_public_key :: IdentityPublicKey > >> :: ffi_from (ffi_ref . loaded_public_keys) , balance : < crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits as ferment :: FFIConversionFrom < dpp :: balances :: credits :: Credits >> :: ffi_from_opt (ffi_ref . balance) , revision : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision as ferment :: FFIConversionFrom < dpp :: prelude :: Revision >> :: ffi_from_opt (ffi_ref . revision) , not_found_public_keys : < crate :: fermented :: generics :: std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionFrom < std :: collections :: BTreeSet < dpp :: identity :: identity_public_key :: KeyID > >> :: ffi_from (ffi_ref . not_found_public_keys) } } } impl ferment :: FFIConversionTo < dpp :: identity :: identity :: PartialIdentity > for dpp_identity_identity_PartialIdentity { unsafe fn ffi_to_const (obj : dpp :: identity :: identity :: PartialIdentity) -> * const dpp_identity_identity_PartialIdentity { ferment :: boxed (dpp_identity_identity_PartialIdentity { id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . id) , loaded_public_keys : < crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey as ferment :: FFIConversionTo < std :: collections :: BTreeMap < dpp :: identity :: identity_public_key :: KeyID , dpp :: identity :: identity_public_key :: IdentityPublicKey > >> :: ffi_to (obj . loaded_public_keys) , balance : < crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits as ferment :: FFIConversionTo < dpp :: balances :: credits :: Credits >> :: ffi_to_opt (obj . balance) , revision : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision as ferment :: FFIConversionTo < dpp :: prelude :: Revision >> :: ffi_to_opt (obj . revision) , not_found_public_keys : < crate :: fermented :: generics :: std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionTo < std :: collections :: BTreeSet < dpp :: identity :: identity_public_key :: KeyID > >> :: ffi_to (obj . not_found_public_keys) }) } } impl Drop for dpp_identity_identity_PartialIdentity { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . id) ; ferment :: unbox_any (ffi_ref . loaded_public_keys) ; ferment :: unbox_any_opt (ffi_ref . balance) ; ferment :: unbox_any_opt (ffi_ref . revision) ; ferment :: unbox_any (ffi_ref . not_found_public_keys) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_ctor < > (id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , loaded_public_keys : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey , balance : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits , revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , not_found_public_keys : * mut crate :: fermented :: generics :: std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID) -> * mut dpp_identity_identity_PartialIdentity { ferment :: boxed (dpp_identity_identity_PartialIdentity { id , loaded_public_keys , balance , revision , not_found_public_keys }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_destroy < > (ffi : * mut dpp_identity_identity_PartialIdentity) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_get_id < > (obj : * const dpp_identity_identity_PartialIdentity) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_get_loaded_public_keys < > (obj : * const dpp_identity_identity_PartialIdentity) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { (* obj) . loaded_public_keys } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_get_balance < > (obj : * const dpp_identity_identity_PartialIdentity) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . balance } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_get_revision < > (obj : * const dpp_identity_identity_PartialIdentity) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_get_not_found_public_keys < > (obj : * const dpp_identity_identity_PartialIdentity) -> * mut crate :: fermented :: generics :: std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID { (* obj) . not_found_public_keys } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_set_id < > (obj : * const dpp_identity_identity_PartialIdentity) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_set_loaded_public_keys < > (obj : * const dpp_identity_identity_PartialIdentity) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { (* obj) . loaded_public_keys } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_set_balance < > (obj : * const dpp_identity_identity_PartialIdentity) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . balance } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_set_revision < > (obj : * const dpp_identity_identity_PartialIdentity) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_PartialIdentity_set_not_found_public_keys < > (obj : * const dpp_identity_identity_PartialIdentity) -> * mut crate :: fermented :: generics :: std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID { (* obj) . not_found_public_keys } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`Identity`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_identity_identity_Identity { V0 (* mut crate :: fermented :: types :: dpp :: identity :: v0 :: dpp_identity_v0_IdentityV0) } impl ferment :: FFIConversionFrom < dpp :: identity :: identity :: Identity > for dpp_identity_identity_Identity { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_Identity) -> dpp :: identity :: identity :: Identity { let ffi_ref = & * ffi ; match ffi_ref { dpp_identity_identity_Identity :: V0 (o_0) => dpp :: identity :: identity :: Identity :: V0 (< crate :: fermented :: types :: dpp :: identity :: v0 :: dpp_identity_v0_IdentityV0 as ferment :: FFIConversionFrom < dpp :: identity :: v0 :: IdentityV0 >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: identity :: identity :: Identity > for dpp_identity_identity_Identity { unsafe fn ffi_to_const (obj : dpp :: identity :: identity :: Identity) -> * const dpp_identity_identity_Identity { ferment :: boxed (match obj { dpp :: identity :: identity :: Identity :: V0 (o_0) => dpp_identity_identity_Identity :: V0 (< crate :: fermented :: types :: dpp :: identity :: v0 :: dpp_identity_v0_IdentityV0 as ferment :: FFIConversionTo < dpp :: identity :: v0 :: IdentityV0 >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_identity_identity_Identity { fn drop (& mut self) { unsafe { match self { dpp_identity_identity_Identity :: V0 (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_Identity_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: identity :: v0 :: dpp_identity_v0_IdentityV0) -> * mut dpp_identity_identity_Identity { ferment :: boxed (dpp_identity_identity_Identity :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_Identity_destroy < > (ffi : * mut dpp_identity_identity_Identity) { ferment :: unbox_any (ffi) ; } } pub mod identity_public_key { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`KeyID`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_identity_public_key_KeyID (u32) ; impl ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: KeyID > for dpp_identity_identity_public_key_KeyID { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_KeyID) -> dpp :: identity :: identity_public_key :: KeyID { let ffi_ref = & * ffi ; ffi_ref . 0 } } impl ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: KeyID > for dpp_identity_identity_public_key_KeyID { unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: KeyID) -> * const dpp_identity_identity_public_key_KeyID { ferment :: boxed (dpp_identity_identity_public_key_KeyID (obj)) } } impl Drop for dpp_identity_identity_public_key_KeyID { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_KeyID_ctor < > (o_0 : u32) -> * mut dpp_identity_identity_public_key_KeyID { ferment :: boxed (dpp_identity_identity_public_key_KeyID (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_KeyID_destroy < > (ffi : * mut dpp_identity_identity_public_key_KeyID) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_KeyID_get_0 < > (obj : * const dpp_identity_identity_public_key_KeyID) -> u32 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_KeyID_set_0 < > (obj : * const dpp_identity_identity_public_key_KeyID) -> u32 { (* obj) . 0 } # [doc = "FFI-representation of the [`KeyCount`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_identity_public_key_KeyCount (* mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) ; impl ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: KeyCount > for dpp_identity_identity_public_key_KeyCount { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_KeyCount) -> dpp :: identity :: identity_public_key :: KeyCount { let ffi_ref = & * ffi ; < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_from (ffi_ref . 0) } } impl ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: KeyCount > for dpp_identity_identity_public_key_KeyCount { unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: KeyCount) -> * const dpp_identity_identity_public_key_KeyCount { ferment :: boxed (dpp_identity_identity_public_key_KeyCount (< crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_to (obj))) } } impl Drop for dpp_identity_identity_public_key_KeyCount { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_KeyCount_ctor < > (o_0 : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut dpp_identity_identity_public_key_KeyCount { ferment :: boxed (dpp_identity_identity_public_key_KeyCount (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_KeyCount_destroy < > (ffi : * mut dpp_identity_identity_public_key_KeyCount) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_KeyCount_get_0 < > (obj : * const dpp_identity_identity_public_key_KeyCount) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_KeyCount_set_0 < > (obj : * const dpp_identity_identity_public_key_KeyCount) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . 0 } pub mod security_level { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`SecurityLevel`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_identity_identity_public_key_security_level_SecurityLevel { MASTER = 0 , CRITICAL = 1 , HIGH = 2 , MEDIUM = 3 } impl ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel > for dpp_identity_identity_public_key_security_level_SecurityLevel { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_security_level_SecurityLevel) -> dpp :: identity :: identity_public_key :: security_level :: SecurityLevel { let ffi_ref = & * ffi ; match ffi_ref { dpp_identity_identity_public_key_security_level_SecurityLevel :: MASTER => dpp :: identity :: identity_public_key :: security_level :: SecurityLevel :: MASTER , dpp_identity_identity_public_key_security_level_SecurityLevel :: CRITICAL => dpp :: identity :: identity_public_key :: security_level :: SecurityLevel :: CRITICAL , dpp_identity_identity_public_key_security_level_SecurityLevel :: HIGH => dpp :: identity :: identity_public_key :: security_level :: SecurityLevel :: HIGH , dpp_identity_identity_public_key_security_level_SecurityLevel :: MEDIUM => dpp :: identity :: identity_public_key :: security_level :: SecurityLevel :: MEDIUM } } } impl ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel > for dpp_identity_identity_public_key_security_level_SecurityLevel { unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: security_level :: SecurityLevel) -> * const dpp_identity_identity_public_key_security_level_SecurityLevel { ferment :: boxed (match obj { dpp :: identity :: identity_public_key :: security_level :: SecurityLevel :: MASTER => dpp_identity_identity_public_key_security_level_SecurityLevel :: MASTER , dpp :: identity :: identity_public_key :: security_level :: SecurityLevel :: CRITICAL => dpp_identity_identity_public_key_security_level_SecurityLevel :: CRITICAL , dpp :: identity :: identity_public_key :: security_level :: SecurityLevel :: HIGH => dpp_identity_identity_public_key_security_level_SecurityLevel :: HIGH , dpp :: identity :: identity_public_key :: security_level :: SecurityLevel :: MEDIUM => dpp_identity_identity_public_key_security_level_SecurityLevel :: MEDIUM , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_identity_identity_public_key_security_level_SecurityLevel { fn drop (& mut self) { unsafe { match self { dpp_identity_identity_public_key_security_level_SecurityLevel :: MASTER => { } , dpp_identity_identity_public_key_security_level_SecurityLevel :: CRITICAL => { } , dpp_identity_identity_public_key_security_level_SecurityLevel :: HIGH => { } , dpp_identity_identity_public_key_security_level_SecurityLevel :: MEDIUM => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_security_level_SecurityLevel_MASTER_ctor () -> * mut dpp_identity_identity_public_key_security_level_SecurityLevel { ferment :: boxed (dpp_identity_identity_public_key_security_level_SecurityLevel :: MASTER { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_security_level_SecurityLevel_CRITICAL_ctor () -> * mut dpp_identity_identity_public_key_security_level_SecurityLevel { ferment :: boxed (dpp_identity_identity_public_key_security_level_SecurityLevel :: CRITICAL { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_security_level_SecurityLevel_HIGH_ctor () -> * mut dpp_identity_identity_public_key_security_level_SecurityLevel { ferment :: boxed (dpp_identity_identity_public_key_security_level_SecurityLevel :: HIGH { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_security_level_SecurityLevel_MEDIUM_ctor () -> * mut dpp_identity_identity_public_key_security_level_SecurityLevel { ferment :: boxed (dpp_identity_identity_public_key_security_level_SecurityLevel :: MEDIUM { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_security_level_SecurityLevel_destroy < > (ffi : * mut dpp_identity_identity_public_key_security_level_SecurityLevel) { ferment :: unbox_any (ffi) ; } } pub mod conversion { use crate as dash_spv_apple_bindings ; # [cfg (feature = "json-object")] pub mod json { use crate as dash_spv_apple_bindings ; } # [cfg (feature = "platform-value")] pub mod platform_value { use crate as dash_spv_apple_bindings ; } } # [doc = "FFI-representation of the [`TimestampMillis`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_identity_public_key_TimestampMillis (u64) ; impl ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: TimestampMillis > for dpp_identity_identity_public_key_TimestampMillis { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_TimestampMillis) -> dpp :: identity :: identity_public_key :: TimestampMillis { let ffi_ref = & * ffi ; ffi_ref . 0 } } impl ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: TimestampMillis > for dpp_identity_identity_public_key_TimestampMillis { unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: TimestampMillis) -> * const dpp_identity_identity_public_key_TimestampMillis { ferment :: boxed (dpp_identity_identity_public_key_TimestampMillis (obj)) } } impl Drop for dpp_identity_identity_public_key_TimestampMillis { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_TimestampMillis_ctor < > (o_0 : u64) -> * mut dpp_identity_identity_public_key_TimestampMillis { ferment :: boxed (dpp_identity_identity_public_key_TimestampMillis (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_TimestampMillis_destroy < > (ffi : * mut dpp_identity_identity_public_key_TimestampMillis) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_TimestampMillis_get_0 < > (obj : * const dpp_identity_identity_public_key_TimestampMillis) -> u64 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_TimestampMillis_set_0 < > (obj : * const dpp_identity_identity_public_key_TimestampMillis) -> u64 { (* obj) . 0 } pub mod purpose { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`Purpose`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_identity_identity_public_key_purpose_Purpose { AUTHENTICATION = 0 , ENCRYPTION = 1 , DECRYPTION = 2 , TRANSFER = 3 , SYSTEM = 4 , VOTING = 5 , OWNER = 6 } impl ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: purpose :: Purpose > for dpp_identity_identity_public_key_purpose_Purpose { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_purpose_Purpose) -> dpp :: identity :: identity_public_key :: purpose :: Purpose { let ffi_ref = & * ffi ; match ffi_ref { dpp_identity_identity_public_key_purpose_Purpose :: AUTHENTICATION => dpp :: identity :: identity_public_key :: purpose :: Purpose :: AUTHENTICATION , dpp_identity_identity_public_key_purpose_Purpose :: ENCRYPTION => dpp :: identity :: identity_public_key :: purpose :: Purpose :: ENCRYPTION , dpp_identity_identity_public_key_purpose_Purpose :: DECRYPTION => dpp :: identity :: identity_public_key :: purpose :: Purpose :: DECRYPTION , dpp_identity_identity_public_key_purpose_Purpose :: TRANSFER => dpp :: identity :: identity_public_key :: purpose :: Purpose :: TRANSFER , dpp_identity_identity_public_key_purpose_Purpose :: SYSTEM => dpp :: identity :: identity_public_key :: purpose :: Purpose :: SYSTEM , dpp_identity_identity_public_key_purpose_Purpose :: VOTING => dpp :: identity :: identity_public_key :: purpose :: Purpose :: VOTING , dpp_identity_identity_public_key_purpose_Purpose :: OWNER => dpp :: identity :: identity_public_key :: purpose :: Purpose :: OWNER } } } impl ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: purpose :: Purpose > for dpp_identity_identity_public_key_purpose_Purpose { unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: purpose :: Purpose) -> * const dpp_identity_identity_public_key_purpose_Purpose { ferment :: boxed (match obj { dpp :: identity :: identity_public_key :: purpose :: Purpose :: AUTHENTICATION => dpp_identity_identity_public_key_purpose_Purpose :: AUTHENTICATION , dpp :: identity :: identity_public_key :: purpose :: Purpose :: ENCRYPTION => dpp_identity_identity_public_key_purpose_Purpose :: ENCRYPTION , dpp :: identity :: identity_public_key :: purpose :: Purpose :: DECRYPTION => dpp_identity_identity_public_key_purpose_Purpose :: DECRYPTION , dpp :: identity :: identity_public_key :: purpose :: Purpose :: TRANSFER => dpp_identity_identity_public_key_purpose_Purpose :: TRANSFER , dpp :: identity :: identity_public_key :: purpose :: Purpose :: SYSTEM => dpp_identity_identity_public_key_purpose_Purpose :: SYSTEM , dpp :: identity :: identity_public_key :: purpose :: Purpose :: VOTING => dpp_identity_identity_public_key_purpose_Purpose :: VOTING , dpp :: identity :: identity_public_key :: purpose :: Purpose :: OWNER => dpp_identity_identity_public_key_purpose_Purpose :: OWNER , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_identity_identity_public_key_purpose_Purpose { fn drop (& mut self) { unsafe { match self { dpp_identity_identity_public_key_purpose_Purpose :: AUTHENTICATION => { } , dpp_identity_identity_public_key_purpose_Purpose :: ENCRYPTION => { } , dpp_identity_identity_public_key_purpose_Purpose :: DECRYPTION => { } , dpp_identity_identity_public_key_purpose_Purpose :: TRANSFER => { } , dpp_identity_identity_public_key_purpose_Purpose :: SYSTEM => { } , dpp_identity_identity_public_key_purpose_Purpose :: VOTING => { } , dpp_identity_identity_public_key_purpose_Purpose :: OWNER => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_purpose_Purpose_AUTHENTICATION_ctor () -> * mut dpp_identity_identity_public_key_purpose_Purpose { ferment :: boxed (dpp_identity_identity_public_key_purpose_Purpose :: AUTHENTICATION { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_purpose_Purpose_ENCRYPTION_ctor () -> * mut dpp_identity_identity_public_key_purpose_Purpose { ferment :: boxed (dpp_identity_identity_public_key_purpose_Purpose :: ENCRYPTION { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_purpose_Purpose_DECRYPTION_ctor () -> * mut dpp_identity_identity_public_key_purpose_Purpose { ferment :: boxed (dpp_identity_identity_public_key_purpose_Purpose :: DECRYPTION { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_purpose_Purpose_TRANSFER_ctor () -> * mut dpp_identity_identity_public_key_purpose_Purpose { ferment :: boxed (dpp_identity_identity_public_key_purpose_Purpose :: TRANSFER { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_purpose_Purpose_SYSTEM_ctor () -> * mut dpp_identity_identity_public_key_purpose_Purpose { ferment :: boxed (dpp_identity_identity_public_key_purpose_Purpose :: SYSTEM { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_purpose_Purpose_VOTING_ctor () -> * mut dpp_identity_identity_public_key_purpose_Purpose { ferment :: boxed (dpp_identity_identity_public_key_purpose_Purpose :: VOTING { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_purpose_Purpose_OWNER_ctor () -> * mut dpp_identity_identity_public_key_purpose_Purpose { ferment :: boxed (dpp_identity_identity_public_key_purpose_Purpose :: OWNER { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_purpose_Purpose_destroy < > (ffi : * mut dpp_identity_identity_public_key_purpose_Purpose) { ferment :: unbox_any (ffi) ; } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`IdentityPublicKey`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_identity_identity_public_key_IdentityPublicKey { V0 (* mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: v0 :: dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) } impl ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: IdentityPublicKey > for dpp_identity_identity_public_key_IdentityPublicKey { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_IdentityPublicKey) -> dpp :: identity :: identity_public_key :: IdentityPublicKey { let ffi_ref = & * ffi ; match ffi_ref { dpp_identity_identity_public_key_IdentityPublicKey :: V0 (o_0) => dpp :: identity :: identity_public_key :: IdentityPublicKey :: V0 (< crate :: fermented :: types :: dpp :: identity :: identity_public_key :: v0 :: dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: v0 :: IdentityPublicKeyV0 >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: IdentityPublicKey > for dpp_identity_identity_public_key_IdentityPublicKey { unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: IdentityPublicKey) -> * const dpp_identity_identity_public_key_IdentityPublicKey { ferment :: boxed (match obj { dpp :: identity :: identity_public_key :: IdentityPublicKey :: V0 (o_0) => dpp_identity_identity_public_key_IdentityPublicKey :: V0 (< crate :: fermented :: types :: dpp :: identity :: identity_public_key :: v0 :: dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: v0 :: IdentityPublicKeyV0 >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_identity_identity_public_key_IdentityPublicKey { fn drop (& mut self) { unsafe { match self { dpp_identity_identity_public_key_IdentityPublicKey :: V0 (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_IdentityPublicKey_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: v0 :: dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut dpp_identity_identity_public_key_IdentityPublicKey { ferment :: boxed (dpp_identity_identity_public_key_IdentityPublicKey :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_IdentityPublicKey_destroy < > (ffi : * mut dpp_identity_identity_public_key_IdentityPublicKey) { ferment :: unbox_any (ffi) ; } pub mod contract_bounds { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`ContractBounds`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_identity_identity_public_key_contract_bounds_ContractBounds { SingleContract { id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } , SingleContractDocumentType { id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_type_name : * mut std :: os :: raw :: c_char } } impl ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds > for dpp_identity_identity_public_key_contract_bounds_ContractBounds { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_contract_bounds_ContractBounds) -> dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds { let ffi_ref = & * ffi ; match ffi_ref { dpp_identity_identity_public_key_contract_bounds_ContractBounds :: SingleContract { id } => dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds :: SingleContract { id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (* id) } , dpp_identity_identity_public_key_contract_bounds_ContractBounds :: SingleContractDocumentType { id , document_type_name } => dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds :: SingleContractDocumentType { id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (* id) , document_type_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* document_type_name) } } } } impl ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds > for dpp_identity_identity_public_key_contract_bounds_ContractBounds { unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds) -> * const dpp_identity_identity_public_key_contract_bounds_ContractBounds { ferment :: boxed (match obj { dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds :: SingleContract { id } => dpp_identity_identity_public_key_contract_bounds_ContractBounds :: SingleContract { id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (id) } , dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds :: SingleContractDocumentType { id , document_type_name } => dpp_identity_identity_public_key_contract_bounds_ContractBounds :: SingleContractDocumentType { id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (id) , document_type_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (document_type_name) } , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_identity_identity_public_key_contract_bounds_ContractBounds { fn drop (& mut self) { unsafe { match self { dpp_identity_identity_public_key_contract_bounds_ContractBounds :: SingleContract { id } => { ferment :: unbox_any (* id) ; } , dpp_identity_identity_public_key_contract_bounds_ContractBounds :: SingleContractDocumentType { id , document_type_name } => { ferment :: unbox_any (* id) ; ; ferment :: unbox_string (* document_type_name) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_contract_bounds_ContractBounds_SingleContract_ctor (id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_identity_identity_public_key_contract_bounds_ContractBounds { ferment :: boxed (dpp_identity_identity_public_key_contract_bounds_ContractBounds :: SingleContract { id }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_contract_bounds_ContractBounds_SingleContractDocumentType_ctor (id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_type_name : * mut std :: os :: raw :: c_char) -> * mut dpp_identity_identity_public_key_contract_bounds_ContractBounds { ferment :: boxed (dpp_identity_identity_public_key_contract_bounds_ContractBounds :: SingleContractDocumentType { id , document_type_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_contract_bounds_ContractBounds_destroy < > (ffi : * mut dpp_identity_identity_public_key_contract_bounds_ContractBounds) { ferment :: unbox_any (ffi) ; } } pub mod v0 { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`IdentityPublicKeyV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 { pub id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , pub security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , pub contract_bounds : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: contract_bounds :: dpp_identity_identity_public_key_contract_bounds_ContractBounds , pub key_type : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType , pub read_only : bool , pub data : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData , pub disabled_at : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis } impl ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: v0 :: IdentityPublicKeyV0 > for dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> dpp :: identity :: identity_public_key :: v0 :: IdentityPublicKeyV0 { let ffi_ref = & * ffi ; dpp :: identity :: identity_public_key :: v0 :: IdentityPublicKeyV0 { id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_from (ffi_ref . id) , purpose : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: purpose :: Purpose >> :: ffi_from (ffi_ref . purpose) , security_level : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel >> :: ffi_from (ffi_ref . security_level) , contract_bounds : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: contract_bounds :: dpp_identity_identity_public_key_contract_bounds_ContractBounds as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds >> :: ffi_from_opt (ffi_ref . contract_bounds) , key_type : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: key_type :: KeyType >> :: ffi_from (ffi_ref . key_type) , read_only : ffi_ref . read_only , data : < crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData as ferment :: FFIConversionFrom < platform_value :: types :: binary_data :: BinaryData >> :: ffi_from (ffi_ref . data) , disabled_at : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: TimestampMillis >> :: ffi_from_opt (ffi_ref . disabled_at) } } } impl ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: v0 :: IdentityPublicKeyV0 > for dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 { unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: v0 :: IdentityPublicKeyV0) -> * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 { ferment :: boxed (dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 { id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_to (obj . id) , purpose : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: purpose :: Purpose >> :: ffi_to (obj . purpose) , security_level : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel >> :: ffi_to (obj . security_level) , contract_bounds : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: contract_bounds :: dpp_identity_identity_public_key_contract_bounds_ContractBounds as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds >> :: ffi_to_opt (obj . contract_bounds) , key_type : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: key_type :: KeyType >> :: ffi_to (obj . key_type) , read_only : obj . read_only , data : < crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData as ferment :: FFIConversionTo < platform_value :: types :: binary_data :: BinaryData >> :: ffi_to (obj . data) , disabled_at : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: TimestampMillis >> :: ffi_to_opt (obj . disabled_at) }) } } impl Drop for dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . id) ; ferment :: unbox_any (ffi_ref . purpose) ; ferment :: unbox_any (ffi_ref . security_level) ; ferment :: unbox_any_opt (ffi_ref . contract_bounds) ; ferment :: unbox_any (ffi_ref . key_type) ; ; ferment :: unbox_any (ffi_ref . data) ; ferment :: unbox_any_opt (ffi_ref . disabled_at) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_ctor < > (id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , contract_bounds : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: contract_bounds :: dpp_identity_identity_public_key_contract_bounds_ContractBounds , key_type : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType , read_only : bool , data : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData , disabled_at : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis) -> * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 { ferment :: boxed (dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 { id , purpose , security_level , contract_bounds , key_type , read_only , data , disabled_at }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_destroy < > (ffi : * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_get_id < > (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_get_purpose < > (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose { (* obj) . purpose } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_get_security_level < > (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . security_level } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_get_contract_bounds < > (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: contract_bounds :: dpp_identity_identity_public_key_contract_bounds_ContractBounds { (* obj) . contract_bounds } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_get_key_type < > (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType { (* obj) . key_type } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_get_read_only < > (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> bool { (* obj) . read_only } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_get_data < > (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . data } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_get_disabled_at < > (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis { (* obj) . disabled_at } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_set_id < > (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_set_purpose < > (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose { (* obj) . purpose } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_set_security_level < > (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . security_level } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_set_contract_bounds < > (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: contract_bounds :: dpp_identity_identity_public_key_contract_bounds_ContractBounds { (* obj) . contract_bounds } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_set_key_type < > (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType { (* obj) . key_type } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_set_read_only < > (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> bool { (* obj) . read_only } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_set_data < > (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . data } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_set_disabled_at < > (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis { (* obj) . disabled_at } pub mod methods { use crate as dash_spv_apple_bindings ; } pub mod conversion { use crate as dash_spv_apple_bindings ; } } pub mod methods { use crate as dash_spv_apple_bindings ; pub mod hash { use crate as dash_spv_apple_bindings ; } } pub mod accessors { use crate as dash_spv_apple_bindings ; } pub mod key_type { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`KeyType`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_identity_identity_public_key_key_type_KeyType { ECDSA_SECP256K1 = 0 , BLS12_381 = 1 , ECDSA_HASH160 = 2 , BIP13_SCRIPT_HASH = 3 , EDDSA_25519_HASH160 = 4 } impl ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: key_type :: KeyType > for dpp_identity_identity_public_key_key_type_KeyType { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_key_type_KeyType) -> dpp :: identity :: identity_public_key :: key_type :: KeyType { let ffi_ref = & * ffi ; match ffi_ref { dpp_identity_identity_public_key_key_type_KeyType :: ECDSA_SECP256K1 => dpp :: identity :: identity_public_key :: key_type :: KeyType :: ECDSA_SECP256K1 , dpp_identity_identity_public_key_key_type_KeyType :: BLS12_381 => dpp :: identity :: identity_public_key :: key_type :: KeyType :: BLS12_381 , dpp_identity_identity_public_key_key_type_KeyType :: ECDSA_HASH160 => dpp :: identity :: identity_public_key :: key_type :: KeyType :: ECDSA_HASH160 , dpp_identity_identity_public_key_key_type_KeyType :: BIP13_SCRIPT_HASH => dpp :: identity :: identity_public_key :: key_type :: KeyType :: BIP13_SCRIPT_HASH , dpp_identity_identity_public_key_key_type_KeyType :: EDDSA_25519_HASH160 => dpp :: identity :: identity_public_key :: key_type :: KeyType :: EDDSA_25519_HASH160 } } } impl ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: key_type :: KeyType > for dpp_identity_identity_public_key_key_type_KeyType { unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: key_type :: KeyType) -> * const dpp_identity_identity_public_key_key_type_KeyType { ferment :: boxed (match obj { dpp :: identity :: identity_public_key :: key_type :: KeyType :: ECDSA_SECP256K1 => dpp_identity_identity_public_key_key_type_KeyType :: ECDSA_SECP256K1 , dpp :: identity :: identity_public_key :: key_type :: KeyType :: BLS12_381 => dpp_identity_identity_public_key_key_type_KeyType :: BLS12_381 , dpp :: identity :: identity_public_key :: key_type :: KeyType :: ECDSA_HASH160 => dpp_identity_identity_public_key_key_type_KeyType :: ECDSA_HASH160 , dpp :: identity :: identity_public_key :: key_type :: KeyType :: BIP13_SCRIPT_HASH => dpp_identity_identity_public_key_key_type_KeyType :: BIP13_SCRIPT_HASH , dpp :: identity :: identity_public_key :: key_type :: KeyType :: EDDSA_25519_HASH160 => dpp_identity_identity_public_key_key_type_KeyType :: EDDSA_25519_HASH160 , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_identity_identity_public_key_key_type_KeyType { fn drop (& mut self) { unsafe { match self { dpp_identity_identity_public_key_key_type_KeyType :: ECDSA_SECP256K1 => { } , dpp_identity_identity_public_key_key_type_KeyType :: BLS12_381 => { } , dpp_identity_identity_public_key_key_type_KeyType :: ECDSA_HASH160 => { } , dpp_identity_identity_public_key_key_type_KeyType :: BIP13_SCRIPT_HASH => { } , dpp_identity_identity_public_key_key_type_KeyType :: EDDSA_25519_HASH160 => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_key_type_KeyType_ECDSA_SECP256K1_ctor () -> * mut dpp_identity_identity_public_key_key_type_KeyType { ferment :: boxed (dpp_identity_identity_public_key_key_type_KeyType :: ECDSA_SECP256K1 { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_key_type_KeyType_BLS12_381_ctor () -> * mut dpp_identity_identity_public_key_key_type_KeyType { ferment :: boxed (dpp_identity_identity_public_key_key_type_KeyType :: BLS12_381 { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_key_type_KeyType_ECDSA_HASH160_ctor () -> * mut dpp_identity_identity_public_key_key_type_KeyType { ferment :: boxed (dpp_identity_identity_public_key_key_type_KeyType :: ECDSA_HASH160 { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_key_type_KeyType_BIP13_SCRIPT_HASH_ctor () -> * mut dpp_identity_identity_public_key_key_type_KeyType { ferment :: boxed (dpp_identity_identity_public_key_key_type_KeyType :: BIP13_SCRIPT_HASH { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_key_type_KeyType_EDDSA_25519_HASH160_ctor () -> * mut dpp_identity_identity_public_key_key_type_KeyType { ferment :: boxed (dpp_identity_identity_public_key_key_type_KeyType :: EDDSA_25519_HASH160 { }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_key_type_KeyType_destroy < > (ffi : * mut dpp_identity_identity_public_key_key_type_KeyType) { ferment :: unbox_any (ffi) ; } } } pub mod state_transition { use crate as dash_spv_apple_bindings ; pub mod asset_lock_proof { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`AssetLockProof`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_identity_state_transition_asset_lock_proof_AssetLockProof { Instant (* mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: instant :: instant_asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof) , Chain (* mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: chain :: chain_asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof) } impl ferment :: FFIConversionFrom < dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof > for dpp_identity_state_transition_asset_lock_proof_AssetLockProof { unsafe fn ffi_from_const (ffi : * const dpp_identity_state_transition_asset_lock_proof_AssetLockProof) -> dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof { let ffi_ref = & * ffi ; match ffi_ref { dpp_identity_state_transition_asset_lock_proof_AssetLockProof :: Instant (o_0) => dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof :: Instant (< crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: instant :: instant_asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof as ferment :: FFIConversionFrom < dpp :: identity :: state_transition :: asset_lock_proof :: instant :: instant_asset_lock_proof :: InstantAssetLockProof >> :: ffi_from (* o_0)) , dpp_identity_state_transition_asset_lock_proof_AssetLockProof :: Chain (o_0) => dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof :: Chain (< crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: chain :: chain_asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof as ferment :: FFIConversionFrom < dpp :: identity :: state_transition :: asset_lock_proof :: chain :: chain_asset_lock_proof :: ChainAssetLockProof >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof > for dpp_identity_state_transition_asset_lock_proof_AssetLockProof { unsafe fn ffi_to_const (obj : dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof) -> * const dpp_identity_state_transition_asset_lock_proof_AssetLockProof { ferment :: boxed (match obj { dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof :: Instant (o_0) => dpp_identity_state_transition_asset_lock_proof_AssetLockProof :: Instant (< crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: instant :: instant_asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof as ferment :: FFIConversionTo < dpp :: identity :: state_transition :: asset_lock_proof :: instant :: instant_asset_lock_proof :: InstantAssetLockProof >> :: ffi_to (o_0)) , dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof :: Chain (o_0) => dpp_identity_state_transition_asset_lock_proof_AssetLockProof :: Chain (< crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: chain :: chain_asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof as ferment :: FFIConversionTo < dpp :: identity :: state_transition :: asset_lock_proof :: chain :: chain_asset_lock_proof :: ChainAssetLockProof >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_identity_state_transition_asset_lock_proof_AssetLockProof { fn drop (& mut self) { unsafe { match self { dpp_identity_state_transition_asset_lock_proof_AssetLockProof :: Instant (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_identity_state_transition_asset_lock_proof_AssetLockProof :: Chain (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_AssetLockProof_Instant_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: instant :: instant_asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof) -> * mut dpp_identity_state_transition_asset_lock_proof_AssetLockProof { ferment :: boxed (dpp_identity_state_transition_asset_lock_proof_AssetLockProof :: Instant (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_AssetLockProof_Chain_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: chain :: chain_asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof) -> * mut dpp_identity_state_transition_asset_lock_proof_AssetLockProof { ferment :: boxed (dpp_identity_state_transition_asset_lock_proof_AssetLockProof :: Chain (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_AssetLockProof_destroy < > (ffi : * mut dpp_identity_state_transition_asset_lock_proof_AssetLockProof) { ferment :: unbox_any (ffi) ; } pub mod instant { use crate as dash_spv_apple_bindings ; pub mod methods { use crate as dash_spv_apple_bindings ; pub mod validate_structure { use crate as dash_spv_apple_bindings ; } } pub mod instant_asset_lock_proof { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InstantAssetLockProof`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof { pub instant_lock : * mut crate :: fermented :: types :: dashcore :: ephemerealdata :: instant_lock :: dashcore_ephemerealdata_instant_lock_InstantLock , pub transaction : * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: dashcore_blockdata_transaction_Transaction , pub output_index : u32 } impl ferment :: FFIConversionFrom < dpp :: identity :: state_transition :: asset_lock_proof :: instant :: instant_asset_lock_proof :: InstantAssetLockProof > for dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof { unsafe fn ffi_from_const (ffi : * const dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof) -> dpp :: identity :: state_transition :: asset_lock_proof :: instant :: instant_asset_lock_proof :: InstantAssetLockProof { let ffi_ref = & * ffi ; dpp :: identity :: state_transition :: asset_lock_proof :: instant :: instant_asset_lock_proof :: InstantAssetLockProof { instant_lock : < crate :: fermented :: types :: dashcore :: ephemerealdata :: instant_lock :: dashcore_ephemerealdata_instant_lock_InstantLock as ferment :: FFIConversionFrom < dashcore :: ephemerealdata :: instant_lock :: InstantLock >> :: ffi_from (ffi_ref . instant_lock) , transaction : < crate :: fermented :: types :: dashcore :: blockdata :: transaction :: dashcore_blockdata_transaction_Transaction as ferment :: FFIConversionFrom < dashcore :: blockdata :: transaction :: Transaction >> :: ffi_from (ffi_ref . transaction) , output_index : ffi_ref . output_index } } } impl ferment :: FFIConversionTo < dpp :: identity :: state_transition :: asset_lock_proof :: instant :: instant_asset_lock_proof :: InstantAssetLockProof > for dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof { unsafe fn ffi_to_const (obj : dpp :: identity :: state_transition :: asset_lock_proof :: instant :: instant_asset_lock_proof :: InstantAssetLockProof) -> * const dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof { ferment :: boxed (dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof { instant_lock : < crate :: fermented :: types :: dashcore :: ephemerealdata :: instant_lock :: dashcore_ephemerealdata_instant_lock_InstantLock as ferment :: FFIConversionTo < dashcore :: ephemerealdata :: instant_lock :: InstantLock >> :: ffi_to (obj . instant_lock) , transaction : < crate :: fermented :: types :: dashcore :: blockdata :: transaction :: dashcore_blockdata_transaction_Transaction as ferment :: FFIConversionTo < dashcore :: blockdata :: transaction :: Transaction >> :: ffi_to (obj . transaction) , output_index : obj . output_index }) } } impl Drop for dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . instant_lock) ; ferment :: unbox_any (ffi_ref . transaction) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof_ctor < > (instant_lock : * mut crate :: fermented :: types :: dashcore :: ephemerealdata :: instant_lock :: dashcore_ephemerealdata_instant_lock_InstantLock , transaction : * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: dashcore_blockdata_transaction_Transaction , output_index : u32) -> * mut dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof { ferment :: boxed (dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof { instant_lock , transaction , output_index }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof_destroy < > (ffi : * mut dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof_get_instant_lock < > (obj : * const dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof) -> * mut crate :: fermented :: types :: dashcore :: ephemerealdata :: instant_lock :: dashcore_ephemerealdata_instant_lock_InstantLock { (* obj) . instant_lock } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof_get_transaction < > (obj : * const dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof) -> * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: dashcore_blockdata_transaction_Transaction { (* obj) . transaction } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof_get_output_index < > (obj : * const dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof) -> u32 { (* obj) . output_index } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof_set_instant_lock < > (obj : * const dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof) -> * mut crate :: fermented :: types :: dashcore :: ephemerealdata :: instant_lock :: dashcore_ephemerealdata_instant_lock_InstantLock { (* obj) . instant_lock } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof_set_transaction < > (obj : * const dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof) -> * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: dashcore_blockdata_transaction_Transaction { (* obj) . transaction } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof_set_output_index < > (obj : * const dpp_identity_state_transition_asset_lock_proof_instant_instant_asset_lock_proof_InstantAssetLockProof) -> u32 { (* obj) . output_index } } } pub mod validate_asset_lock_transaction_structure { use crate as dash_spv_apple_bindings ; } pub mod chain { use crate as dash_spv_apple_bindings ; pub mod chain_asset_lock_proof { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`ChainAssetLockProof`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof { pub core_chain_locked_height : u32 , pub out_point : * mut dashcore :: transaction :: outpoint :: OutPoint } impl ferment :: FFIConversionFrom < dpp :: identity :: state_transition :: asset_lock_proof :: chain :: chain_asset_lock_proof :: ChainAssetLockProof > for dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof { unsafe fn ffi_from_const (ffi : * const dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof) -> dpp :: identity :: state_transition :: asset_lock_proof :: chain :: chain_asset_lock_proof :: ChainAssetLockProof { let ffi_ref = & * ffi ; dpp :: identity :: state_transition :: asset_lock_proof :: chain :: chain_asset_lock_proof :: ChainAssetLockProof { core_chain_locked_height : ffi_ref . core_chain_locked_height , out_point : (& * ffi_ref . out_point) . clone () } } } impl ferment :: FFIConversionTo < dpp :: identity :: state_transition :: asset_lock_proof :: chain :: chain_asset_lock_proof :: ChainAssetLockProof > for dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof { unsafe fn ffi_to_const (obj : dpp :: identity :: state_transition :: asset_lock_proof :: chain :: chain_asset_lock_proof :: ChainAssetLockProof) -> * const dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof { ferment :: boxed (dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof { core_chain_locked_height : obj . core_chain_locked_height , out_point : ferment :: boxed (obj . out_point) }) } } impl Drop for dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment :: unbox_any (ffi_ref . out_point) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof_ctor < > (core_chain_locked_height : u32 , out_point : * mut dashcore :: transaction :: outpoint :: OutPoint) -> * mut dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof { ferment :: boxed (dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof { core_chain_locked_height , out_point }) } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof_destroy < > (ffi : * mut dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof_get_core_chain_locked_height < > (obj : * const dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof) -> u32 { (* obj) . core_chain_locked_height } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof_get_out_point < > (obj : * const dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof) -> * mut dashcore :: transaction :: outpoint :: OutPoint { (* obj) . out_point } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof_set_core_chain_locked_height < > (obj : * const dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof) -> u32 { (* obj) . core_chain_locked_height } # [no_mangle] pub unsafe extern "C" fn dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof_set_out_point < > (obj : * const dpp_identity_state_transition_asset_lock_proof_chain_chain_asset_lock_proof_ChainAssetLockProof) -> * mut dashcore :: transaction :: outpoint :: OutPoint { (* obj) . out_point } } } } } pub mod fields { use crate as dash_spv_apple_bindings ; } } pub mod block { use crate as dash_spv_apple_bindings ; pub mod extended_block_info { use crate as dash_spv_apple_bindings ; pub mod v0 { use crate as dash_spv_apple_bindings ; } } pub mod epoch { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`EpochIndex`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_block_epoch_EpochIndex (u16) ; impl ferment :: FFIConversionFrom < dpp :: block :: epoch :: EpochIndex > for dpp_block_epoch_EpochIndex { unsafe fn ffi_from_const (ffi : * const dpp_block_epoch_EpochIndex) -> dpp :: block :: epoch :: EpochIndex { let ffi_ref = & * ffi ; ffi_ref . 0 } } impl ferment :: FFIConversionTo < dpp :: block :: epoch :: EpochIndex > for dpp_block_epoch_EpochIndex { unsafe fn ffi_to_const (obj : dpp :: block :: epoch :: EpochIndex) -> * const dpp_block_epoch_EpochIndex { ferment :: boxed (dpp_block_epoch_EpochIndex (obj)) } } impl Drop for dpp_block_epoch_EpochIndex { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_block_epoch_EpochIndex_ctor < > (o_0 : u16) -> * mut dpp_block_epoch_EpochIndex { ferment :: boxed (dpp_block_epoch_EpochIndex (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_block_epoch_EpochIndex_destroy < > (ffi : * mut dpp_block_epoch_EpochIndex) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_block_epoch_EpochIndex_get_0 < > (obj : * const dpp_block_epoch_EpochIndex) -> u16 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_block_epoch_EpochIndex_set_0 < > (obj : * const dpp_block_epoch_EpochIndex) -> u16 { (* obj) . 0 } # [doc = "FFI-representation of the [`Epoch`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_block_epoch_Epoch { pub index : * mut crate :: fermented :: types :: dpp :: block :: epoch :: dpp_block_epoch_EpochIndex , pub key : * mut crate :: fermented :: generics :: Arr_u8_2 } impl ferment :: FFIConversionFrom < dpp :: block :: epoch :: Epoch > for dpp_block_epoch_Epoch { unsafe fn ffi_from_const (ffi : * const dpp_block_epoch_Epoch) -> dpp :: block :: epoch :: Epoch { let ffi_ref = & * ffi ; dpp :: block :: epoch :: Epoch { index : < crate :: fermented :: types :: dpp :: block :: epoch :: dpp_block_epoch_EpochIndex as ferment :: FFIConversionFrom < dpp :: block :: epoch :: EpochIndex >> :: ffi_from (ffi_ref . index) , key : < crate :: fermented :: generics :: Arr_u8_2 as ferment :: FFIConversionFrom < [u8 ; 2] >> :: ffi_from (ffi_ref . key) } } } impl ferment :: FFIConversionTo < dpp :: block :: epoch :: Epoch > for dpp_block_epoch_Epoch { unsafe fn ffi_to_const (obj : dpp :: block :: epoch :: Epoch) -> * const dpp_block_epoch_Epoch { ferment :: boxed (dpp_block_epoch_Epoch { index : < crate :: fermented :: types :: dpp :: block :: epoch :: dpp_block_epoch_EpochIndex as ferment :: FFIConversionTo < dpp :: block :: epoch :: EpochIndex >> :: ffi_to (obj . index) , key : < crate :: fermented :: generics :: Arr_u8_2 as ferment :: FFIConversionTo < [u8 ; 2] >> :: ffi_to (obj . key) }) } } impl Drop for dpp_block_epoch_Epoch { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . index) ; ferment :: unbox_any (ffi_ref . key) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_block_epoch_Epoch_ctor < > (index : * mut crate :: fermented :: types :: dpp :: block :: epoch :: dpp_block_epoch_EpochIndex , key : * mut crate :: fermented :: generics :: Arr_u8_2) -> * mut dpp_block_epoch_Epoch { ferment :: boxed (dpp_block_epoch_Epoch { index , key }) } # [no_mangle] pub unsafe extern "C" fn dpp_block_epoch_Epoch_destroy < > (ffi : * mut dpp_block_epoch_Epoch) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_block_epoch_Epoch_get_index < > (obj : * const dpp_block_epoch_Epoch) -> * mut crate :: fermented :: types :: dpp :: block :: epoch :: dpp_block_epoch_EpochIndex { (* obj) . index } # [no_mangle] pub unsafe extern "C" fn dpp_block_epoch_Epoch_get_key < > (obj : * const dpp_block_epoch_Epoch) -> * mut crate :: fermented :: generics :: Arr_u8_2 { (* obj) . key } # [no_mangle] pub unsafe extern "C" fn dpp_block_epoch_Epoch_set_index < > (obj : * const dpp_block_epoch_Epoch) -> * mut crate :: fermented :: types :: dpp :: block :: epoch :: dpp_block_epoch_EpochIndex { (* obj) . index } # [no_mangle] pub unsafe extern "C" fn dpp_block_epoch_Epoch_set_key < > (obj : * const dpp_block_epoch_Epoch) -> * mut crate :: fermented :: generics :: Arr_u8_2 { (* obj) . key } } pub mod extended_epoch_info { use crate as dash_spv_apple_bindings ; } pub mod block_info { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`BlockInfo`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_block_block_info_BlockInfo { pub time_ms : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis , pub height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight , pub core_height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight , pub epoch : * mut crate :: fermented :: types :: dpp :: block :: epoch :: dpp_block_epoch_Epoch } impl ferment :: FFIConversionFrom < dpp :: block :: block_info :: BlockInfo > for dpp_block_block_info_BlockInfo { unsafe fn ffi_from_const (ffi : * const dpp_block_block_info_BlockInfo) -> dpp :: block :: block_info :: BlockInfo { let ffi_ref = & * ffi ; dpp :: block :: block_info :: BlockInfo { time_ms : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis as ferment :: FFIConversionFrom < dpp :: prelude :: TimestampMillis >> :: ffi_from (ffi_ref . time_ms) , height : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight as ferment :: FFIConversionFrom < dpp :: prelude :: BlockHeight >> :: ffi_from (ffi_ref . height) , core_height : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight as ferment :: FFIConversionFrom < dpp :: prelude :: CoreBlockHeight >> :: ffi_from (ffi_ref . core_height) , epoch : < crate :: fermented :: types :: dpp :: block :: epoch :: dpp_block_epoch_Epoch as ferment :: FFIConversionFrom < dpp :: block :: epoch :: Epoch >> :: ffi_from (ffi_ref . epoch) } } } impl ferment :: FFIConversionTo < dpp :: block :: block_info :: BlockInfo > for dpp_block_block_info_BlockInfo { unsafe fn ffi_to_const (obj : dpp :: block :: block_info :: BlockInfo) -> * const dpp_block_block_info_BlockInfo { ferment :: boxed (dpp_block_block_info_BlockInfo { time_ms : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis as ferment :: FFIConversionTo < dpp :: prelude :: TimestampMillis >> :: ffi_to (obj . time_ms) , height : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight as ferment :: FFIConversionTo < dpp :: prelude :: BlockHeight >> :: ffi_to (obj . height) , core_height : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight as ferment :: FFIConversionTo < dpp :: prelude :: CoreBlockHeight >> :: ffi_to (obj . core_height) , epoch : < crate :: fermented :: types :: dpp :: block :: epoch :: dpp_block_epoch_Epoch as ferment :: FFIConversionTo < dpp :: block :: epoch :: Epoch >> :: ffi_to (obj . epoch) }) } } impl Drop for dpp_block_block_info_BlockInfo { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . time_ms) ; ferment :: unbox_any (ffi_ref . height) ; ferment :: unbox_any (ffi_ref . core_height) ; ferment :: unbox_any (ffi_ref . epoch) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_block_block_info_BlockInfo_ctor < > (time_ms : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis , height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight , core_height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight , epoch : * mut crate :: fermented :: types :: dpp :: block :: epoch :: dpp_block_epoch_Epoch) -> * mut dpp_block_block_info_BlockInfo { ferment :: boxed (dpp_block_block_info_BlockInfo { time_ms , height , core_height , epoch }) } # [no_mangle] pub unsafe extern "C" fn dpp_block_block_info_BlockInfo_destroy < > (ffi : * mut dpp_block_block_info_BlockInfo) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_block_block_info_BlockInfo_get_time_ms < > (obj : * const dpp_block_block_info_BlockInfo) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis { (* obj) . time_ms } # [no_mangle] pub unsafe extern "C" fn dpp_block_block_info_BlockInfo_get_height < > (obj : * const dpp_block_block_info_BlockInfo) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight { (* obj) . height } # [no_mangle] pub unsafe extern "C" fn dpp_block_block_info_BlockInfo_get_core_height < > (obj : * const dpp_block_block_info_BlockInfo) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight { (* obj) . core_height } # [no_mangle] pub unsafe extern "C" fn dpp_block_block_info_BlockInfo_get_epoch < > (obj : * const dpp_block_block_info_BlockInfo) -> * mut crate :: fermented :: types :: dpp :: block :: epoch :: dpp_block_epoch_Epoch { (* obj) . epoch } # [no_mangle] pub unsafe extern "C" fn dpp_block_block_info_BlockInfo_set_time_ms < > (obj : * const dpp_block_block_info_BlockInfo) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis { (* obj) . time_ms } # [no_mangle] pub unsafe extern "C" fn dpp_block_block_info_BlockInfo_set_height < > (obj : * const dpp_block_block_info_BlockInfo) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight { (* obj) . height } # [no_mangle] pub unsafe extern "C" fn dpp_block_block_info_BlockInfo_set_core_height < > (obj : * const dpp_block_block_info_BlockInfo) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight { (* obj) . core_height } # [no_mangle] pub unsafe extern "C" fn dpp_block_block_info_BlockInfo_set_epoch < > (obj : * const dpp_block_block_info_BlockInfo) -> * mut crate :: fermented :: types :: dpp :: block :: epoch :: dpp_block_epoch_Epoch { (* obj) . epoch } } } pub mod core_subsidy { use crate as dash_spv_apple_bindings ; pub mod epoch_core_reward_credits_for_distribution { use crate as dash_spv_apple_bindings ; pub mod v0 { use crate as dash_spv_apple_bindings ; } } } pub mod balances { use crate as dash_spv_apple_bindings ; pub mod credits { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`SignedCredits`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_balances_credits_SignedCredits (i64) ; impl ferment :: FFIConversionFrom < dpp :: balances :: credits :: SignedCredits > for dpp_balances_credits_SignedCredits { unsafe fn ffi_from_const (ffi : * const dpp_balances_credits_SignedCredits) -> dpp :: balances :: credits :: SignedCredits { let ffi_ref = & * ffi ; ffi_ref . 0 } } impl ferment :: FFIConversionTo < dpp :: balances :: credits :: SignedCredits > for dpp_balances_credits_SignedCredits { unsafe fn ffi_to_const (obj : dpp :: balances :: credits :: SignedCredits) -> * const dpp_balances_credits_SignedCredits { ferment :: boxed (dpp_balances_credits_SignedCredits (obj)) } } impl Drop for dpp_balances_credits_SignedCredits { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_balances_credits_SignedCredits_ctor < > (o_0 : i64) -> * mut dpp_balances_credits_SignedCredits { ferment :: boxed (dpp_balances_credits_SignedCredits (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_balances_credits_SignedCredits_destroy < > (ffi : * mut dpp_balances_credits_SignedCredits) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_balances_credits_SignedCredits_get_0 < > (obj : * const dpp_balances_credits_SignedCredits) -> i64 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_balances_credits_SignedCredits_set_0 < > (obj : * const dpp_balances_credits_SignedCredits) -> i64 { (* obj) . 0 } # [doc = "FFI-representation of the [`Credits`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_balances_credits_Credits (u64) ; impl ferment :: FFIConversionFrom < dpp :: balances :: credits :: Credits > for dpp_balances_credits_Credits { unsafe fn ffi_from_const (ffi : * const dpp_balances_credits_Credits) -> dpp :: balances :: credits :: Credits { let ffi_ref = & * ffi ; ffi_ref . 0 } } impl ferment :: FFIConversionTo < dpp :: balances :: credits :: Credits > for dpp_balances_credits_Credits { unsafe fn ffi_to_const (obj : dpp :: balances :: credits :: Credits) -> * const dpp_balances_credits_Credits { ferment :: boxed (dpp_balances_credits_Credits (obj)) } } impl Drop for dpp_balances_credits_Credits { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_balances_credits_Credits_ctor < > (o_0 : u64) -> * mut dpp_balances_credits_Credits { ferment :: boxed (dpp_balances_credits_Credits (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_balances_credits_Credits_destroy < > (ffi : * mut dpp_balances_credits_Credits) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_balances_credits_Credits_get_0 < > (obj : * const dpp_balances_credits_Credits) -> u64 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_balances_credits_Credits_set_0 < > (obj : * const dpp_balances_credits_Credits) -> u64 { (* obj) . 0 } } } pub mod data_contract { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`JsonSchema`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_JsonSchema (* mut dash_spv_apple_bindings :: custom :: serde_json :: serde_json_JsonValue) ; impl ferment :: FFIConversionFrom < dpp :: data_contract :: JsonSchema > for dpp_data_contract_JsonSchema { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_JsonSchema) -> dpp :: data_contract :: JsonSchema { let ffi_ref = & * ffi ; < dash_spv_apple_bindings :: custom :: serde_json :: serde_json_JsonValue as ferment :: FFIConversionFrom < serde_json :: Value >> :: ffi_from (ffi_ref . 0) } } impl ferment :: FFIConversionTo < dpp :: data_contract :: JsonSchema > for dpp_data_contract_JsonSchema { unsafe fn ffi_to_const (obj : dpp :: data_contract :: JsonSchema) -> * const dpp_data_contract_JsonSchema { ferment :: boxed (dpp_data_contract_JsonSchema (< dash_spv_apple_bindings :: custom :: serde_json :: serde_json_JsonValue as ferment :: FFIConversionTo < serde_json :: Value >> :: ffi_to (obj))) } } impl Drop for dpp_data_contract_JsonSchema { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_JsonSchema_ctor < > (o_0 : * mut dash_spv_apple_bindings :: custom :: serde_json :: serde_json_JsonValue) -> * mut dpp_data_contract_JsonSchema { ferment :: boxed (dpp_data_contract_JsonSchema (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_JsonSchema_destroy < > (ffi : * mut dpp_data_contract_JsonSchema) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_JsonSchema_get_0 < > (obj : * const dpp_data_contract_JsonSchema) -> * mut dash_spv_apple_bindings :: custom :: serde_json :: serde_json_JsonValue { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_JsonSchema_set_0 < > (obj : * const dpp_data_contract_JsonSchema) -> * mut dash_spv_apple_bindings :: custom :: serde_json :: serde_json_JsonValue { (* obj) . 0 } pub mod storage_requirements { use crate as dash_spv_apple_bindings ; pub mod keys_for_document_type { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`StorageKeyRequirements`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { Unique = 0 , Multiple = 1 , MultipleReferenceToLatest = 2 } impl ferment :: FFIConversionFrom < dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements > for dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements) -> dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: Unique => dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements :: Unique , dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: Multiple => dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements :: Multiple , dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: MultipleReferenceToLatest => dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements :: MultipleReferenceToLatest } } } impl ferment :: FFIConversionTo < dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements > for dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { unsafe fn ffi_to_const (obj : dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements) -> * const dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { ferment :: boxed (match obj { dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements :: Unique => dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: Unique , dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements :: Multiple => dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: Multiple , dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements :: MultipleReferenceToLatest => dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: MultipleReferenceToLatest , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { fn drop (& mut self) { unsafe { match self { dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: Unique => { } , dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: Multiple => { } , dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: MultipleReferenceToLatest => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements_Unique_ctor () -> * mut dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { ferment :: boxed (dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: Unique { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements_Multiple_ctor () -> * mut dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { ferment :: boxed (dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: Multiple { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements_MultipleReferenceToLatest_ctor () -> * mut dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { ferment :: boxed (dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements :: MultipleReferenceToLatest { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements_destroy < > (ffi : * mut dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements) { ferment :: unbox_any (ffi) ; } } } pub mod config { use crate as dash_spv_apple_bindings ; pub mod v0 { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DataContractConfigV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_config_v0_DataContractConfigV0 { pub can_be_deleted : bool , pub readonly : bool , pub keeps_history : bool , pub documents_keep_history_contract_default : bool , pub documents_mutable_contract_default : bool , pub documents_can_be_deleted_contract_default : bool , pub requires_identity_encryption_bounded_key : * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements , pub requires_identity_decryption_bounded_key : * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements } impl ferment :: FFIConversionFrom < dpp :: data_contract :: config :: v0 :: DataContractConfigV0 > for dpp_data_contract_config_v0_DataContractConfigV0 { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_config_v0_DataContractConfigV0) -> dpp :: data_contract :: config :: v0 :: DataContractConfigV0 { let ffi_ref = & * ffi ; dpp :: data_contract :: config :: v0 :: DataContractConfigV0 { can_be_deleted : ffi_ref . can_be_deleted , readonly : ffi_ref . readonly , keeps_history : ffi_ref . keeps_history , documents_keep_history_contract_default : ffi_ref . documents_keep_history_contract_default , documents_mutable_contract_default : ffi_ref . documents_mutable_contract_default , documents_can_be_deleted_contract_default : ffi_ref . documents_can_be_deleted_contract_default , requires_identity_encryption_bounded_key : < crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements as ferment :: FFIConversionFrom < dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements >> :: ffi_from_opt (ffi_ref . requires_identity_encryption_bounded_key) , requires_identity_decryption_bounded_key : < crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements as ferment :: FFIConversionFrom < dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements >> :: ffi_from_opt (ffi_ref . requires_identity_decryption_bounded_key) } } } impl ferment :: FFIConversionTo < dpp :: data_contract :: config :: v0 :: DataContractConfigV0 > for dpp_data_contract_config_v0_DataContractConfigV0 { unsafe fn ffi_to_const (obj : dpp :: data_contract :: config :: v0 :: DataContractConfigV0) -> * const dpp_data_contract_config_v0_DataContractConfigV0 { ferment :: boxed (dpp_data_contract_config_v0_DataContractConfigV0 { can_be_deleted : obj . can_be_deleted , readonly : obj . readonly , keeps_history : obj . keeps_history , documents_keep_history_contract_default : obj . documents_keep_history_contract_default , documents_mutable_contract_default : obj . documents_mutable_contract_default , documents_can_be_deleted_contract_default : obj . documents_can_be_deleted_contract_default , requires_identity_encryption_bounded_key : < crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements as ferment :: FFIConversionTo < dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements >> :: ffi_to_opt (obj . requires_identity_encryption_bounded_key) , requires_identity_decryption_bounded_key : < crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements as ferment :: FFIConversionTo < dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements >> :: ffi_to_opt (obj . requires_identity_decryption_bounded_key) }) } } impl Drop for dpp_data_contract_config_v0_DataContractConfigV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ; ; ; ; ferment :: unbox_any_opt (ffi_ref . requires_identity_encryption_bounded_key) ; ferment :: unbox_any_opt (ffi_ref . requires_identity_decryption_bounded_key) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_ctor < > (can_be_deleted : bool , readonly : bool , keeps_history : bool , documents_keep_history_contract_default : bool , documents_mutable_contract_default : bool , documents_can_be_deleted_contract_default : bool , requires_identity_encryption_bounded_key : * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements , requires_identity_decryption_bounded_key : * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements) -> * mut dpp_data_contract_config_v0_DataContractConfigV0 { ferment :: boxed (dpp_data_contract_config_v0_DataContractConfigV0 { can_be_deleted , readonly , keeps_history , documents_keep_history_contract_default , documents_mutable_contract_default , documents_can_be_deleted_contract_default , requires_identity_encryption_bounded_key , requires_identity_decryption_bounded_key }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_destroy < > (ffi : * mut dpp_data_contract_config_v0_DataContractConfigV0) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_get_can_be_deleted < > (obj : * const dpp_data_contract_config_v0_DataContractConfigV0) -> bool { (* obj) . can_be_deleted } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_get_readonly < > (obj : * const dpp_data_contract_config_v0_DataContractConfigV0) -> bool { (* obj) . readonly } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_get_keeps_history < > (obj : * const dpp_data_contract_config_v0_DataContractConfigV0) -> bool { (* obj) . keeps_history } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_get_documents_keep_history_contract_default < > (obj : * const dpp_data_contract_config_v0_DataContractConfigV0) -> bool { (* obj) . documents_keep_history_contract_default } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_get_documents_mutable_contract_default < > (obj : * const dpp_data_contract_config_v0_DataContractConfigV0) -> bool { (* obj) . documents_mutable_contract_default } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_get_documents_can_be_deleted_contract_default < > (obj : * const dpp_data_contract_config_v0_DataContractConfigV0) -> bool { (* obj) . documents_can_be_deleted_contract_default } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_get_requires_identity_encryption_bounded_key < > (obj : * const dpp_data_contract_config_v0_DataContractConfigV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { (* obj) . requires_identity_encryption_bounded_key } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_get_requires_identity_decryption_bounded_key < > (obj : * const dpp_data_contract_config_v0_DataContractConfigV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { (* obj) . requires_identity_decryption_bounded_key } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_set_can_be_deleted < > (obj : * const dpp_data_contract_config_v0_DataContractConfigV0) -> bool { (* obj) . can_be_deleted } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_set_readonly < > (obj : * const dpp_data_contract_config_v0_DataContractConfigV0) -> bool { (* obj) . readonly } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_set_keeps_history < > (obj : * const dpp_data_contract_config_v0_DataContractConfigV0) -> bool { (* obj) . keeps_history } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_set_documents_keep_history_contract_default < > (obj : * const dpp_data_contract_config_v0_DataContractConfigV0) -> bool { (* obj) . documents_keep_history_contract_default } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_set_documents_mutable_contract_default < > (obj : * const dpp_data_contract_config_v0_DataContractConfigV0) -> bool { (* obj) . documents_mutable_contract_default } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_set_documents_can_be_deleted_contract_default < > (obj : * const dpp_data_contract_config_v0_DataContractConfigV0) -> bool { (* obj) . documents_can_be_deleted_contract_default } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_set_requires_identity_encryption_bounded_key < > (obj : * const dpp_data_contract_config_v0_DataContractConfigV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { (* obj) . requires_identity_encryption_bounded_key } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_v0_DataContractConfigV0_set_requires_identity_decryption_bounded_key < > (obj : * const dpp_data_contract_config_v0_DataContractConfigV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { (* obj) . requires_identity_decryption_bounded_key } } pub mod fields { use crate as dash_spv_apple_bindings ; } pub mod methods { use crate as dash_spv_apple_bindings ; pub mod validate_update { use crate as dash_spv_apple_bindings ; } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`DataContractConfig`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_data_contract_config_DataContractConfig { V0 (* mut crate :: fermented :: types :: dpp :: data_contract :: config :: v0 :: dpp_data_contract_config_v0_DataContractConfigV0) } impl ferment :: FFIConversionFrom < dpp :: data_contract :: config :: DataContractConfig > for dpp_data_contract_config_DataContractConfig { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_config_DataContractConfig) -> dpp :: data_contract :: config :: DataContractConfig { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_config_DataContractConfig :: V0 (o_0) => dpp :: data_contract :: config :: DataContractConfig :: V0 (< crate :: fermented :: types :: dpp :: data_contract :: config :: v0 :: dpp_data_contract_config_v0_DataContractConfigV0 as ferment :: FFIConversionFrom < dpp :: data_contract :: config :: v0 :: DataContractConfigV0 >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: data_contract :: config :: DataContractConfig > for dpp_data_contract_config_DataContractConfig { unsafe fn ffi_to_const (obj : dpp :: data_contract :: config :: DataContractConfig) -> * const dpp_data_contract_config_DataContractConfig { ferment :: boxed (match obj { dpp :: data_contract :: config :: DataContractConfig :: V0 (o_0) => dpp_data_contract_config_DataContractConfig :: V0 (< crate :: fermented :: types :: dpp :: data_contract :: config :: v0 :: dpp_data_contract_config_v0_DataContractConfigV0 as ferment :: FFIConversionTo < dpp :: data_contract :: config :: v0 :: DataContractConfigV0 >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_data_contract_config_DataContractConfig { fn drop (& mut self) { unsafe { match self { dpp_data_contract_config_DataContractConfig :: V0 (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_DataContractConfig_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: config :: v0 :: dpp_data_contract_config_v0_DataContractConfigV0) -> * mut dpp_data_contract_config_DataContractConfig { ferment :: boxed (dpp_data_contract_config_DataContractConfig :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_config_DataContractConfig_destroy < > (ffi : * mut dpp_data_contract_config_DataContractConfig) { ferment :: unbox_any (ffi) ; } } pub mod serialized_version { use crate as dash_spv_apple_bindings ; pub mod v0 { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DataContractInSerializationFormatV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 { pub id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub config : * mut crate :: fermented :: types :: dpp :: data_contract :: config :: dpp_data_contract_config_DataContractConfig , pub version : u32 , pub owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub schema_defs : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value , pub document_schemas : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value } impl ferment :: FFIConversionFrom < dpp :: data_contract :: serialized_version :: v0 :: DataContractInSerializationFormatV0 > for dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) -> dpp :: data_contract :: serialized_version :: v0 :: DataContractInSerializationFormatV0 { let ffi_ref = & * ffi ; dpp :: data_contract :: serialized_version :: v0 :: DataContractInSerializationFormatV0 { id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . id) , config : < crate :: fermented :: types :: dpp :: data_contract :: config :: dpp_data_contract_config_DataContractConfig as ferment :: FFIConversionFrom < dpp :: data_contract :: config :: DataContractConfig >> :: ffi_from (ffi_ref . config) , version : ffi_ref . version , owner_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . owner_id) , schema_defs : < crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < dpp :: data_contract :: DefinitionName , platform_value :: Value > >> :: ffi_from_opt (ffi_ref . schema_defs) , document_schemas : < crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < dpp :: data_contract :: DocumentName , platform_value :: Value > >> :: ffi_from (ffi_ref . document_schemas) } } } impl ferment :: FFIConversionTo < dpp :: data_contract :: serialized_version :: v0 :: DataContractInSerializationFormatV0 > for dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 { unsafe fn ffi_to_const (obj : dpp :: data_contract :: serialized_version :: v0 :: DataContractInSerializationFormatV0) -> * const dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 { ferment :: boxed (dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 { id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . id) , config : < crate :: fermented :: types :: dpp :: data_contract :: config :: dpp_data_contract_config_DataContractConfig as ferment :: FFIConversionTo < dpp :: data_contract :: config :: DataContractConfig >> :: ffi_to (obj . config) , version : obj . version , owner_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . owner_id) , schema_defs : < crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value as ferment :: FFIConversionTo < std :: collections :: BTreeMap < dpp :: data_contract :: DefinitionName , platform_value :: Value > >> :: ffi_to_opt (obj . schema_defs) , document_schemas : < crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value as ferment :: FFIConversionTo < std :: collections :: BTreeMap < dpp :: data_contract :: DocumentName , platform_value :: Value > >> :: ffi_to (obj . document_schemas) }) } } impl Drop for dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . id) ; ferment :: unbox_any (ffi_ref . config) ; ; ferment :: unbox_any (ffi_ref . owner_id) ; ferment :: unbox_any_opt (ffi_ref . schema_defs) ; ferment :: unbox_any (ffi_ref . document_schemas) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_ctor < > (id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , config : * mut crate :: fermented :: types :: dpp :: data_contract :: config :: dpp_data_contract_config_DataContractConfig , version : u32 , owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , schema_defs : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value , document_schemas : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value) -> * mut dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 { ferment :: boxed (dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 { id , config , version , owner_id , schema_defs , document_schemas }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_destroy < > (ffi : * mut dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_get_id < > (obj : * const dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_get_config < > (obj : * const dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: config :: dpp_data_contract_config_DataContractConfig { (* obj) . config } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_get_version < > (obj : * const dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) -> u32 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_get_owner_id < > (obj : * const dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . owner_id } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_get_schema_defs < > (obj : * const dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value { (* obj) . schema_defs } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_get_document_schemas < > (obj : * const dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value { (* obj) . document_schemas } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_set_id < > (obj : * const dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_set_config < > (obj : * const dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: config :: dpp_data_contract_config_DataContractConfig { (* obj) . config } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_set_version < > (obj : * const dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) -> u32 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_set_owner_id < > (obj : * const dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . owner_id } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_set_schema_defs < > (obj : * const dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value { (* obj) . schema_defs } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0_set_document_schemas < > (obj : * const dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value { (* obj) . document_schemas } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`DataContractInSerializationFormat`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_data_contract_serialized_version_DataContractInSerializationFormat { V0 (* mut crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: v0 :: dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) } impl ferment :: FFIConversionFrom < dpp :: data_contract :: serialized_version :: DataContractInSerializationFormat > for dpp_data_contract_serialized_version_DataContractInSerializationFormat { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_serialized_version_DataContractInSerializationFormat) -> dpp :: data_contract :: serialized_version :: DataContractInSerializationFormat { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_serialized_version_DataContractInSerializationFormat :: V0 (o_0) => dpp :: data_contract :: serialized_version :: DataContractInSerializationFormat :: V0 (< crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: v0 :: dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 as ferment :: FFIConversionFrom < dpp :: data_contract :: serialized_version :: v0 :: DataContractInSerializationFormatV0 >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: data_contract :: serialized_version :: DataContractInSerializationFormat > for dpp_data_contract_serialized_version_DataContractInSerializationFormat { unsafe fn ffi_to_const (obj : dpp :: data_contract :: serialized_version :: DataContractInSerializationFormat) -> * const dpp_data_contract_serialized_version_DataContractInSerializationFormat { ferment :: boxed (match obj { dpp :: data_contract :: serialized_version :: DataContractInSerializationFormat :: V0 (o_0) => dpp_data_contract_serialized_version_DataContractInSerializationFormat :: V0 (< crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: v0 :: dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0 as ferment :: FFIConversionTo < dpp :: data_contract :: serialized_version :: v0 :: DataContractInSerializationFormatV0 >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_data_contract_serialized_version_DataContractInSerializationFormat { fn drop (& mut self) { unsafe { match self { dpp_data_contract_serialized_version_DataContractInSerializationFormat :: V0 (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_DataContractInSerializationFormat_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: v0 :: dpp_data_contract_serialized_version_v0_DataContractInSerializationFormatV0) -> * mut dpp_data_contract_serialized_version_DataContractInSerializationFormat { ferment :: boxed (dpp_data_contract_serialized_version_DataContractInSerializationFormat :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_serialized_version_DataContractInSerializationFormat_destroy < > (ffi : * mut dpp_data_contract_serialized_version_DataContractInSerializationFormat) { ferment :: unbox_any (ffi) ; } } pub mod accessors { use crate as dash_spv_apple_bindings ; } # [cfg (feature = "factories")] pub mod factory { use crate as dash_spv_apple_bindings ; pub mod v0 { use crate as dash_spv_apple_bindings ; } } pub mod v0 { use crate as dash_spv_apple_bindings ; pub mod serialization { use crate as dash_spv_apple_bindings ; pub mod bincode { use crate as dash_spv_apple_bindings ; } } pub mod methods { use crate as dash_spv_apple_bindings ; pub mod schema { use crate as dash_spv_apple_bindings ; } } pub mod conversion { use crate as dash_spv_apple_bindings ; } pub mod data_contract { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DataContractV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_v0_data_contract_DataContractV0 { pub id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub version : u32 , pub owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub document_types : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType , pub metadata : * mut crate :: fermented :: types :: dpp :: metadata :: dpp_metadata_Metadata , pub config : * mut crate :: fermented :: types :: dpp :: data_contract :: config :: dpp_data_contract_config_DataContractConfig , pub schema_defs : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value } impl ferment :: FFIConversionFrom < dpp :: data_contract :: v0 :: data_contract :: DataContractV0 > for dpp_data_contract_v0_data_contract_DataContractV0 { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_v0_data_contract_DataContractV0) -> dpp :: data_contract :: v0 :: data_contract :: DataContractV0 { let ffi_ref = & * ffi ; dpp :: data_contract :: v0 :: data_contract :: DataContractV0 { id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . id) , version : ffi_ref . version , owner_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . owner_id) , document_types : < crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < dpp :: data_contract :: DocumentName , dpp :: data_contract :: document_type :: DocumentType > >> :: ffi_from (ffi_ref . document_types) , metadata : < crate :: fermented :: types :: dpp :: metadata :: dpp_metadata_Metadata as ferment :: FFIConversionFrom < dpp :: metadata :: Metadata >> :: ffi_from_opt (ffi_ref . metadata) , config : < crate :: fermented :: types :: dpp :: data_contract :: config :: dpp_data_contract_config_DataContractConfig as ferment :: FFIConversionFrom < dpp :: data_contract :: config :: DataContractConfig >> :: ffi_from (ffi_ref . config) , schema_defs : < crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < dpp :: data_contract :: DefinitionName , platform_value :: Value > >> :: ffi_from_opt (ffi_ref . schema_defs) } } } impl ferment :: FFIConversionTo < dpp :: data_contract :: v0 :: data_contract :: DataContractV0 > for dpp_data_contract_v0_data_contract_DataContractV0 { unsafe fn ffi_to_const (obj : dpp :: data_contract :: v0 :: data_contract :: DataContractV0) -> * const dpp_data_contract_v0_data_contract_DataContractV0 { ferment :: boxed (dpp_data_contract_v0_data_contract_DataContractV0 { id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . id) , version : obj . version , owner_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . owner_id) , document_types : < crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType as ferment :: FFIConversionTo < std :: collections :: BTreeMap < dpp :: data_contract :: DocumentName , dpp :: data_contract :: document_type :: DocumentType > >> :: ffi_to (obj . document_types) , metadata : < crate :: fermented :: types :: dpp :: metadata :: dpp_metadata_Metadata as ferment :: FFIConversionTo < dpp :: metadata :: Metadata >> :: ffi_to_opt (obj . metadata) , config : < crate :: fermented :: types :: dpp :: data_contract :: config :: dpp_data_contract_config_DataContractConfig as ferment :: FFIConversionTo < dpp :: data_contract :: config :: DataContractConfig >> :: ffi_to (obj . config) , schema_defs : < crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value as ferment :: FFIConversionTo < std :: collections :: BTreeMap < dpp :: data_contract :: DefinitionName , platform_value :: Value > >> :: ffi_to_opt (obj . schema_defs) }) } } impl Drop for dpp_data_contract_v0_data_contract_DataContractV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . id) ; ; ferment :: unbox_any (ffi_ref . owner_id) ; ferment :: unbox_any (ffi_ref . document_types) ; ferment :: unbox_any_opt (ffi_ref . metadata) ; ferment :: unbox_any (ffi_ref . config) ; ferment :: unbox_any_opt (ffi_ref . schema_defs) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_ctor < > (id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , version : u32 , owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_types : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType , metadata : * mut crate :: fermented :: types :: dpp :: metadata :: dpp_metadata_Metadata , config : * mut crate :: fermented :: types :: dpp :: data_contract :: config :: dpp_data_contract_config_DataContractConfig , schema_defs : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value) -> * mut dpp_data_contract_v0_data_contract_DataContractV0 { ferment :: boxed (dpp_data_contract_v0_data_contract_DataContractV0 { id , version , owner_id , document_types , metadata , config , schema_defs }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_destroy < > (ffi : * mut dpp_data_contract_v0_data_contract_DataContractV0) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_get_id < > (obj : * const dpp_data_contract_v0_data_contract_DataContractV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_get_version < > (obj : * const dpp_data_contract_v0_data_contract_DataContractV0) -> u32 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_get_owner_id < > (obj : * const dpp_data_contract_v0_data_contract_DataContractV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . owner_id } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_get_document_types < > (obj : * const dpp_data_contract_v0_data_contract_DataContractV0) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType { (* obj) . document_types } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_get_metadata < > (obj : * const dpp_data_contract_v0_data_contract_DataContractV0) -> * mut crate :: fermented :: types :: dpp :: metadata :: dpp_metadata_Metadata { (* obj) . metadata } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_get_config < > (obj : * const dpp_data_contract_v0_data_contract_DataContractV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: config :: dpp_data_contract_config_DataContractConfig { (* obj) . config } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_get_schema_defs < > (obj : * const dpp_data_contract_v0_data_contract_DataContractV0) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value { (* obj) . schema_defs } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_set_id < > (obj : * const dpp_data_contract_v0_data_contract_DataContractV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_set_version < > (obj : * const dpp_data_contract_v0_data_contract_DataContractV0) -> u32 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_set_owner_id < > (obj : * const dpp_data_contract_v0_data_contract_DataContractV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . owner_id } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_set_document_types < > (obj : * const dpp_data_contract_v0_data_contract_DataContractV0) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType { (* obj) . document_types } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_set_metadata < > (obj : * const dpp_data_contract_v0_data_contract_DataContractV0) -> * mut crate :: fermented :: types :: dpp :: metadata :: dpp_metadata_Metadata { (* obj) . metadata } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_set_config < > (obj : * const dpp_data_contract_v0_data_contract_DataContractV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: config :: dpp_data_contract_config_DataContractConfig { (* obj) . config } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_v0_data_contract_DataContractV0_set_schema_defs < > (obj : * const dpp_data_contract_v0_data_contract_DataContractV0) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value { (* obj) . schema_defs } } } pub mod errors { use crate as dash_spv_apple_bindings ; pub mod contract { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`DataContractError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_data_contract_errors_contract_DataContractError { DecodingContractError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: decoding_error :: dpp_errors_consensus_basic_decode_decoding_error_DecodingError) , DecodingDocumentError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: decoding_error :: dpp_errors_consensus_basic_decode_decoding_error_DecodingError) , InvalidDocumentTypeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError) , DocumentTypesAreMissingError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: document_types_are_missing_error :: dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError) , MissingRequiredKey (* mut std :: os :: raw :: c_char) , FieldRequirementUnmet (* mut std :: os :: raw :: c_char) , RegexError (* mut std :: os :: raw :: c_char) , KeyWrongType (* mut std :: os :: raw :: c_char) , ValueWrongType (* mut std :: os :: raw :: c_char) , InvalidURI (* mut std :: os :: raw :: c_char) , KeyWrongBounds (* mut std :: os :: raw :: c_char) , KeyValueMustExist (* mut std :: os :: raw :: c_char) , ValueDecodingError (* mut std :: os :: raw :: c_char) , EncodingDataStructureNotSupported (* mut std :: os :: raw :: c_char) , InvalidContractStructure (* mut std :: os :: raw :: c_char) , DocumentTypeNotFound (* mut std :: os :: raw :: c_char) , DocumentTypeFieldNotFound (* mut std :: os :: raw :: c_char) , ReferenceDefinitionNotFound (* mut std :: os :: raw :: c_char) , DocumentOwnerIdMissing (* mut std :: os :: raw :: c_char) , DocumentIdMissing (* mut std :: os :: raw :: c_char) , Unsupported (* mut std :: os :: raw :: c_char) , CorruptedSerialization (* mut std :: os :: raw :: c_char) , JsonSchema (* mut crate :: fermented :: types :: dpp :: data_contract :: errors :: json_schema_error :: dpp_data_contract_errors_json_schema_error_JsonSchemaError) } impl ferment :: FFIConversionFrom < dpp :: data_contract :: errors :: contract :: DataContractError > for dpp_data_contract_errors_contract_DataContractError { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_errors_contract_DataContractError) -> dpp :: data_contract :: errors :: contract :: DataContractError { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_errors_contract_DataContractError :: DecodingContractError (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: DecodingContractError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: decoding_error :: dpp_errors_consensus_basic_decode_decoding_error_DecodingError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: decode :: decoding_error :: DecodingError >> :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: DecodingDocumentError (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: DecodingDocumentError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: decoding_error :: dpp_errors_consensus_basic_decode_decoding_error_DecodingError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: decode :: decoding_error :: DecodingError >> :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: InvalidDocumentTypeError (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: InvalidDocumentTypeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: InvalidDocumentTypeError >> :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: DocumentTypesAreMissingError (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: DocumentTypesAreMissingError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: document_types_are_missing_error :: dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: document_types_are_missing_error :: DocumentTypesAreMissingError >> :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: MissingRequiredKey (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: MissingRequiredKey (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: FieldRequirementUnmet (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: FieldRequirementUnmet (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: RegexError (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: RegexError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: KeyWrongType (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: KeyWrongType (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: ValueWrongType (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: ValueWrongType (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: InvalidURI (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: InvalidURI (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: KeyWrongBounds (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: KeyWrongBounds (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: KeyValueMustExist (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: KeyValueMustExist (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: ValueDecodingError (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: ValueDecodingError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: EncodingDataStructureNotSupported (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: EncodingDataStructureNotSupported (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: InvalidContractStructure (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: InvalidContractStructure (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: DocumentTypeNotFound (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: DocumentTypeNotFound (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: DocumentTypeFieldNotFound (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: DocumentTypeFieldNotFound (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: ReferenceDefinitionNotFound (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: ReferenceDefinitionNotFound (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: DocumentOwnerIdMissing (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: DocumentOwnerIdMissing (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: DocumentIdMissing (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: DocumentIdMissing (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: Unsupported (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: Unsupported (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: CorruptedSerialization (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: CorruptedSerialization (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_data_contract_errors_contract_DataContractError :: JsonSchema (o_0) => dpp :: data_contract :: errors :: contract :: DataContractError :: JsonSchema (< crate :: fermented :: types :: dpp :: data_contract :: errors :: json_schema_error :: dpp_data_contract_errors_json_schema_error_JsonSchemaError as ferment :: FFIConversionFrom < dpp :: data_contract :: errors :: json_schema_error :: JsonSchemaError >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: data_contract :: errors :: contract :: DataContractError > for dpp_data_contract_errors_contract_DataContractError { unsafe fn ffi_to_const (obj : dpp :: data_contract :: errors :: contract :: DataContractError) -> * const dpp_data_contract_errors_contract_DataContractError { ferment :: boxed (match obj { dpp :: data_contract :: errors :: contract :: DataContractError :: DecodingContractError (o_0) => dpp_data_contract_errors_contract_DataContractError :: DecodingContractError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: decoding_error :: dpp_errors_consensus_basic_decode_decoding_error_DecodingError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: decode :: decoding_error :: DecodingError >> :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: DecodingDocumentError (o_0) => dpp_data_contract_errors_contract_DataContractError :: DecodingDocumentError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: decoding_error :: dpp_errors_consensus_basic_decode_decoding_error_DecodingError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: decode :: decoding_error :: DecodingError >> :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: InvalidDocumentTypeError (o_0) => dpp_data_contract_errors_contract_DataContractError :: InvalidDocumentTypeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: InvalidDocumentTypeError >> :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: DocumentTypesAreMissingError (o_0) => dpp_data_contract_errors_contract_DataContractError :: DocumentTypesAreMissingError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: document_types_are_missing_error :: dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: document_types_are_missing_error :: DocumentTypesAreMissingError >> :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: MissingRequiredKey (o_0) => dpp_data_contract_errors_contract_DataContractError :: MissingRequiredKey (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: FieldRequirementUnmet (o_0) => dpp_data_contract_errors_contract_DataContractError :: FieldRequirementUnmet (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: RegexError (o_0) => dpp_data_contract_errors_contract_DataContractError :: RegexError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: KeyWrongType (o_0) => dpp_data_contract_errors_contract_DataContractError :: KeyWrongType (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: ValueWrongType (o_0) => dpp_data_contract_errors_contract_DataContractError :: ValueWrongType (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: InvalidURI (o_0) => dpp_data_contract_errors_contract_DataContractError :: InvalidURI (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: KeyWrongBounds (o_0) => dpp_data_contract_errors_contract_DataContractError :: KeyWrongBounds (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: KeyValueMustExist (o_0) => dpp_data_contract_errors_contract_DataContractError :: KeyValueMustExist (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: ValueDecodingError (o_0) => dpp_data_contract_errors_contract_DataContractError :: ValueDecodingError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: EncodingDataStructureNotSupported (o_0) => dpp_data_contract_errors_contract_DataContractError :: EncodingDataStructureNotSupported (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: InvalidContractStructure (o_0) => dpp_data_contract_errors_contract_DataContractError :: InvalidContractStructure (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: DocumentTypeNotFound (o_0) => dpp_data_contract_errors_contract_DataContractError :: DocumentTypeNotFound (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: DocumentTypeFieldNotFound (o_0) => dpp_data_contract_errors_contract_DataContractError :: DocumentTypeFieldNotFound (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: ReferenceDefinitionNotFound (o_0) => dpp_data_contract_errors_contract_DataContractError :: ReferenceDefinitionNotFound (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: DocumentOwnerIdMissing (o_0) => dpp_data_contract_errors_contract_DataContractError :: DocumentOwnerIdMissing (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: DocumentIdMissing (o_0) => dpp_data_contract_errors_contract_DataContractError :: DocumentIdMissing (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: Unsupported (o_0) => dpp_data_contract_errors_contract_DataContractError :: Unsupported (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: CorruptedSerialization (o_0) => dpp_data_contract_errors_contract_DataContractError :: CorruptedSerialization (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: data_contract :: errors :: contract :: DataContractError :: JsonSchema (o_0) => dpp_data_contract_errors_contract_DataContractError :: JsonSchema (< crate :: fermented :: types :: dpp :: data_contract :: errors :: json_schema_error :: dpp_data_contract_errors_json_schema_error_JsonSchemaError as ferment :: FFIConversionTo < dpp :: data_contract :: errors :: json_schema_error :: JsonSchemaError >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_data_contract_errors_contract_DataContractError { fn drop (& mut self) { unsafe { match self { dpp_data_contract_errors_contract_DataContractError :: DecodingContractError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: DecodingDocumentError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: InvalidDocumentTypeError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: DocumentTypesAreMissingError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: MissingRequiredKey (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: FieldRequirementUnmet (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: RegexError (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: KeyWrongType (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: ValueWrongType (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: InvalidURI (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: KeyWrongBounds (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: KeyValueMustExist (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: ValueDecodingError (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: EncodingDataStructureNotSupported (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: InvalidContractStructure (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: DocumentTypeNotFound (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: DocumentTypeFieldNotFound (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: ReferenceDefinitionNotFound (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: DocumentOwnerIdMissing (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: DocumentIdMissing (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: Unsupported (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: CorruptedSerialization (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_data_contract_errors_contract_DataContractError :: JsonSchema (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_DecodingContractError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: decoding_error :: dpp_errors_consensus_basic_decode_decoding_error_DecodingError) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment :: boxed (dpp_data_contract_errors_contract_DataContractError :: DecodingContractError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_DecodingDocumentError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: decoding_error :: dpp_errors_consensus_basic_decode_decoding_error_DecodingError) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment :: boxed (dpp_data_contract_errors_contract_DataContractError :: DecodingDocumentError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_InvalidDocumentTypeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment :: boxed (dpp_data_contract_errors_contract_DataContractError :: InvalidDocumentTypeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_DocumentTypesAreMissingError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: document_types_are_missing_error :: dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment :: boxed (dpp_data_contract_errors_contract_DataContractError :: DocumentTypesAreMissingError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_MissingRequiredKey_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment :: boxed (dpp_data_contract_errors_contract_DataContractError :: MissingRequiredKey (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_FieldRequirementUnmet_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment :: boxed (dpp_data_contract_errors_contract_DataContractError :: FieldRequirementUnmet (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_RegexError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment :: boxed (dpp_data_contract_errors_contract_DataContractError :: RegexError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_KeyWrongType_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment :: boxed (dpp_data_contract_errors_contract_DataContractError :: KeyWrongType (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_ValueWrongType_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment :: boxed (dpp_data_contract_errors_contract_DataContractError :: ValueWrongType (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_InvalidURI_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment :: boxed (dpp_data_contract_errors_contract_DataContractError :: InvalidURI (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_KeyWrongBounds_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment :: boxed (dpp_data_contract_errors_contract_DataContractError :: KeyWrongBounds (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_KeyValueMustExist_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment :: boxed (dpp_data_contract_errors_contract_DataContractError :: KeyValueMustExist (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_ValueDecodingError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment :: boxed (dpp_data_contract_errors_contract_DataContractError :: ValueDecodingError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_EncodingDataStructureNotSupported_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment :: boxed (dpp_data_contract_errors_contract_DataContractError :: EncodingDataStructureNotSupported (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_InvalidContractStructure_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment :: boxed (dpp_data_contract_errors_contract_DataContractError :: InvalidContractStructure (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_DocumentTypeNotFound_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment :: boxed (dpp_data_contract_errors_contract_DataContractError :: DocumentTypeNotFound (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_DocumentTypeFieldNotFound_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment :: boxed (dpp_data_contract_errors_contract_DataContractError :: DocumentTypeFieldNotFound (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_ReferenceDefinitionNotFound_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment :: boxed (dpp_data_contract_errors_contract_DataContractError :: ReferenceDefinitionNotFound (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_DocumentOwnerIdMissing_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment :: boxed (dpp_data_contract_errors_contract_DataContractError :: DocumentOwnerIdMissing (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_DocumentIdMissing_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment :: boxed (dpp_data_contract_errors_contract_DataContractError :: DocumentIdMissing (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_Unsupported_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment :: boxed (dpp_data_contract_errors_contract_DataContractError :: Unsupported (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_CorruptedSerialization_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment :: boxed (dpp_data_contract_errors_contract_DataContractError :: CorruptedSerialization (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_JsonSchema_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: errors :: json_schema_error :: dpp_data_contract_errors_json_schema_error_JsonSchemaError) -> * mut dpp_data_contract_errors_contract_DataContractError { ferment :: boxed (dpp_data_contract_errors_contract_DataContractError :: JsonSchema (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_contract_DataContractError_destroy < > (ffi : * mut dpp_data_contract_errors_contract_DataContractError) { ferment :: unbox_any (ffi) ; } } pub mod data_contract_not_present_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DataContractNotPresentError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment :: FFIConversionFrom < dpp :: data_contract :: errors :: data_contract_not_present_error :: DataContractNotPresentError > for dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError) -> dpp :: data_contract :: errors :: data_contract_not_present_error :: DataContractNotPresentError { let ffi_ref = & * ffi ; dpp :: data_contract :: errors :: data_contract_not_present_error :: DataContractNotPresentError { data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . data_contract_id) } } } impl ferment :: FFIConversionTo < dpp :: data_contract :: errors :: data_contract_not_present_error :: DataContractNotPresentError > for dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError { unsafe fn ffi_to_const (obj : dpp :: data_contract :: errors :: data_contract_not_present_error :: DataContractNotPresentError) -> * const dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError { ferment :: boxed (dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError { data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . data_contract_id) }) } } impl Drop for dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . data_contract_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError_ctor < > (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError { ferment :: boxed (dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError { data_contract_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError_destroy < > (ffi : * mut dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError_get_data_contract_id < > (obj : * const dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError_set_data_contract_id < > (obj : * const dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } } pub mod identity_not_present_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`IdentityNotPresentError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError { pub id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment :: FFIConversionFrom < dpp :: data_contract :: errors :: identity_not_present_error :: IdentityNotPresentError > for dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError) -> dpp :: data_contract :: errors :: identity_not_present_error :: IdentityNotPresentError { let ffi_ref = & * ffi ; dpp :: data_contract :: errors :: identity_not_present_error :: IdentityNotPresentError { id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . id) } } } impl ferment :: FFIConversionTo < dpp :: data_contract :: errors :: identity_not_present_error :: IdentityNotPresentError > for dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError { unsafe fn ffi_to_const (obj : dpp :: data_contract :: errors :: identity_not_present_error :: IdentityNotPresentError) -> * const dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError { ferment :: boxed (dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError { id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . id) }) } } impl Drop for dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError_ctor < > (id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError { ferment :: boxed (dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError { id }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError_destroy < > (ffi : * mut dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError_get_id < > (obj : * const dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError_set_id < > (obj : * const dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . id } } pub mod json_schema_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`JsonSchemaError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_data_contract_errors_json_schema_error_JsonSchemaError { CreateSchemaError (* mut std :: os :: raw :: c_char) , SchemaCompatibilityValidationError (* mut std :: os :: raw :: c_char) } impl ferment :: FFIConversionFrom < dpp :: data_contract :: errors :: json_schema_error :: JsonSchemaError > for dpp_data_contract_errors_json_schema_error_JsonSchemaError { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_errors_json_schema_error_JsonSchemaError) -> dpp :: data_contract :: errors :: json_schema_error :: JsonSchemaError { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_errors_json_schema_error_JsonSchemaError :: CreateSchemaError (o_0) => dpp :: data_contract :: errors :: json_schema_error :: JsonSchemaError :: CreateSchemaError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_data_contract_errors_json_schema_error_JsonSchemaError :: SchemaCompatibilityValidationError (o_0) => dpp :: data_contract :: errors :: json_schema_error :: JsonSchemaError :: SchemaCompatibilityValidationError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: data_contract :: errors :: json_schema_error :: JsonSchemaError > for dpp_data_contract_errors_json_schema_error_JsonSchemaError { unsafe fn ffi_to_const (obj : dpp :: data_contract :: errors :: json_schema_error :: JsonSchemaError) -> * const dpp_data_contract_errors_json_schema_error_JsonSchemaError { ferment :: boxed (match obj { dpp :: data_contract :: errors :: json_schema_error :: JsonSchemaError :: CreateSchemaError (o_0) => dpp_data_contract_errors_json_schema_error_JsonSchemaError :: CreateSchemaError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: data_contract :: errors :: json_schema_error :: JsonSchemaError :: SchemaCompatibilityValidationError (o_0) => dpp_data_contract_errors_json_schema_error_JsonSchemaError :: SchemaCompatibilityValidationError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_data_contract_errors_json_schema_error_JsonSchemaError { fn drop (& mut self) { unsafe { match self { dpp_data_contract_errors_json_schema_error_JsonSchemaError :: CreateSchemaError (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_data_contract_errors_json_schema_error_JsonSchemaError :: SchemaCompatibilityValidationError (o_0) => { ferment :: unbox_string (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_json_schema_error_JsonSchemaError_CreateSchemaError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_json_schema_error_JsonSchemaError { ferment :: boxed (dpp_data_contract_errors_json_schema_error_JsonSchemaError :: CreateSchemaError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_json_schema_error_JsonSchemaError_SchemaCompatibilityValidationError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_errors_json_schema_error_JsonSchemaError { ferment :: boxed (dpp_data_contract_errors_json_schema_error_JsonSchemaError :: SchemaCompatibilityValidationError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_json_schema_error_JsonSchemaError_destroy < > (ffi : * mut dpp_data_contract_errors_json_schema_error_JsonSchemaError) { ferment :: unbox_any (ffi) ; } } pub mod invalid_document_type_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidDocumentTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError { pub doc_type : * mut std :: os :: raw :: c_char , pub data_contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract } impl ferment :: FFIConversionFrom < dpp :: data_contract :: errors :: invalid_document_type_error :: InvalidDocumentTypeError > for dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError) -> dpp :: data_contract :: errors :: invalid_document_type_error :: InvalidDocumentTypeError { let ffi_ref = & * ffi ; dpp :: data_contract :: errors :: invalid_document_type_error :: InvalidDocumentTypeError { doc_type : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . doc_type) , data_contract : < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (ffi_ref . data_contract) } } } impl ferment :: FFIConversionTo < dpp :: data_contract :: errors :: invalid_document_type_error :: InvalidDocumentTypeError > for dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError { unsafe fn ffi_to_const (obj : dpp :: data_contract :: errors :: invalid_document_type_error :: InvalidDocumentTypeError) -> * const dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError { ferment :: boxed (dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError { doc_type : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . doc_type) , data_contract : < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionTo < dpp :: data_contract :: DataContract >> :: ffi_to (obj . data_contract) }) } } impl Drop for dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . doc_type) ; ferment :: unbox_any (ffi_ref . data_contract) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError_ctor < > (doc_type : * mut std :: os :: raw :: c_char , data_contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract) -> * mut dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError { ferment :: boxed (dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError { doc_type , data_contract }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError_destroy < > (ffi : * mut dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError_get_doc_type < > (obj : * const dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError) -> * mut std :: os :: raw :: c_char { (* obj) . doc_type } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError_get_data_contract < > (obj : * const dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError) -> * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract { (* obj) . data_contract } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError_set_doc_type < > (obj : * const dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError) -> * mut std :: os :: raw :: c_char { (* obj) . doc_type } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError_set_data_contract < > (obj : * const dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError) -> * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract { (* obj) . data_contract } } } # [cfg (any (feature = "state-transitions" , feature = "factories"))] pub mod created_data_contract { use crate as dash_spv_apple_bindings ; pub mod fields { use crate as dash_spv_apple_bindings ; } } # [doc = "FFI-representation of the [`DocumentName`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_DocumentName (* mut std :: os :: raw :: c_char) ; impl ferment :: FFIConversionFrom < dpp :: data_contract :: DocumentName > for dpp_data_contract_DocumentName { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_DocumentName) -> dpp :: data_contract :: DocumentName { let ffi_ref = & * ffi ; < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . 0) } } impl ferment :: FFIConversionTo < dpp :: data_contract :: DocumentName > for dpp_data_contract_DocumentName { unsafe fn ffi_to_const (obj : dpp :: data_contract :: DocumentName) -> * const dpp_data_contract_DocumentName { ferment :: boxed (dpp_data_contract_DocumentName (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj))) } } impl Drop for dpp_data_contract_DocumentName { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_DocumentName_ctor < > (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_DocumentName { ferment :: boxed (dpp_data_contract_DocumentName (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_DocumentName_destroy < > (ffi : * mut dpp_data_contract_DocumentName) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_DocumentName_get_0 < > (obj : * const dpp_data_contract_DocumentName) -> * mut std :: os :: raw :: c_char { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_DocumentName_set_0 < > (obj : * const dpp_data_contract_DocumentName) -> * mut std :: os :: raw :: c_char { (* obj) . 0 } pub mod conversion { use crate as dash_spv_apple_bindings ; # [cfg (feature = "data-contract-value-conversion")] pub mod value { use crate as dash_spv_apple_bindings ; } # [cfg (feature = "data-contract-json-conversion")] pub mod json { use crate as dash_spv_apple_bindings ; } # [cfg (feature = "data-contract-cbor-conversion")] pub mod cbor { use crate as dash_spv_apple_bindings ; } } pub mod methods { use crate as dash_spv_apple_bindings ; # [cfg (feature = "validation")] pub mod validate_update { use crate as dash_spv_apple_bindings ; pub mod v0 { use crate as dash_spv_apple_bindings ; # [cfg (test)] pub mod tests { use crate as dash_spv_apple_bindings ; } } } # [cfg (feature = "validation")] pub mod validate_document { use crate as dash_spv_apple_bindings ; } pub mod schema { use crate as dash_spv_apple_bindings ; } } pub mod extra { use crate as dash_spv_apple_bindings ; # [cfg (test)] pub mod drive_api_tests { use crate as dash_spv_apple_bindings ; } } # [doc = "FFI-representation of the [`DefinitionName`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_DefinitionName (* mut std :: os :: raw :: c_char) ; impl ferment :: FFIConversionFrom < dpp :: data_contract :: DefinitionName > for dpp_data_contract_DefinitionName { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_DefinitionName) -> dpp :: data_contract :: DefinitionName { let ffi_ref = & * ffi ; < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . 0) } } impl ferment :: FFIConversionTo < dpp :: data_contract :: DefinitionName > for dpp_data_contract_DefinitionName { unsafe fn ffi_to_const (obj : dpp :: data_contract :: DefinitionName) -> * const dpp_data_contract_DefinitionName { ferment :: boxed (dpp_data_contract_DefinitionName (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj))) } } impl Drop for dpp_data_contract_DefinitionName { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_DefinitionName_ctor < > (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_DefinitionName { ferment :: boxed (dpp_data_contract_DefinitionName (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_DefinitionName_destroy < > (ffi : * mut dpp_data_contract_DefinitionName) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_DefinitionName_get_0 < > (obj : * const dpp_data_contract_DefinitionName) -> * mut std :: os :: raw :: c_char { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_DefinitionName_set_0 < > (obj : * const dpp_data_contract_DefinitionName) -> * mut std :: os :: raw :: c_char { (* obj) . 0 } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`DataContract`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_data_contract_DataContract { V0 (* mut crate :: fermented :: types :: dpp :: data_contract :: v0 :: data_contract :: dpp_data_contract_v0_data_contract_DataContractV0) } impl ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract > for dpp_data_contract_DataContract { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_DataContract) -> dpp :: data_contract :: DataContract { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_DataContract :: V0 (o_0) => dpp :: data_contract :: DataContract :: V0 (< crate :: fermented :: types :: dpp :: data_contract :: v0 :: data_contract :: dpp_data_contract_v0_data_contract_DataContractV0 as ferment :: FFIConversionFrom < dpp :: data_contract :: v0 :: data_contract :: DataContractV0 >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: data_contract :: DataContract > for dpp_data_contract_DataContract { unsafe fn ffi_to_const (obj : dpp :: data_contract :: DataContract) -> * const dpp_data_contract_DataContract { ferment :: boxed (match obj { dpp :: data_contract :: DataContract :: V0 (o_0) => dpp_data_contract_DataContract :: V0 (< crate :: fermented :: types :: dpp :: data_contract :: v0 :: data_contract :: dpp_data_contract_v0_data_contract_DataContractV0 as ferment :: FFIConversionTo < dpp :: data_contract :: v0 :: data_contract :: DataContractV0 >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_data_contract_DataContract { fn drop (& mut self) { unsafe { match self { dpp_data_contract_DataContract :: V0 (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_DataContract_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: v0 :: data_contract :: dpp_data_contract_v0_data_contract_DataContractV0) -> * mut dpp_data_contract_DataContract { ferment :: boxed (dpp_data_contract_DataContract :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_DataContract_destroy < > (ffi : * mut dpp_data_contract_DataContract) { ferment :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`PropertyPath`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_PropertyPath (* mut std :: os :: raw :: c_char) ; impl ferment :: FFIConversionFrom < dpp :: data_contract :: PropertyPath > for dpp_data_contract_PropertyPath { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_PropertyPath) -> dpp :: data_contract :: PropertyPath { let ffi_ref = & * ffi ; < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . 0) } } impl ferment :: FFIConversionTo < dpp :: data_contract :: PropertyPath > for dpp_data_contract_PropertyPath { unsafe fn ffi_to_const (obj : dpp :: data_contract :: PropertyPath) -> * const dpp_data_contract_PropertyPath { ferment :: boxed (dpp_data_contract_PropertyPath (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj))) } } impl Drop for dpp_data_contract_PropertyPath { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_PropertyPath_ctor < > (o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_data_contract_PropertyPath { ferment :: boxed (dpp_data_contract_PropertyPath (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_PropertyPath_destroy < > (ffi : * mut dpp_data_contract_PropertyPath) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_PropertyPath_get_0 < > (obj : * const dpp_data_contract_PropertyPath) -> * mut std :: os :: raw :: c_char { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_PropertyPath_set_0 < > (obj : * const dpp_data_contract_PropertyPath) -> * mut std :: os :: raw :: c_char { (* obj) . 0 } pub mod document_type { use crate as dash_spv_apple_bindings ; pub mod schema { use crate as dash_spv_apple_bindings ; pub mod enrich_with_base_schema { use crate as dash_spv_apple_bindings ; } # [cfg (feature = "validation")] pub mod validate_schema_compatibility { use crate as dash_spv_apple_bindings ; } pub mod find_identifier_and_binary_paths { use crate as dash_spv_apple_bindings ; } # [cfg (feature = "validation")] pub mod validate_max_depth { use crate as dash_spv_apple_bindings ; pub mod v0 { use crate as dash_spv_apple_bindings ; } } # [cfg (feature = "validation")] pub mod recursive_schema_validator { use crate as dash_spv_apple_bindings ; pub mod traversal_validator { use crate as dash_spv_apple_bindings ; } } } pub mod accessors { use crate as dash_spv_apple_bindings ; } pub mod v0 { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DocumentTypeV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_document_type_v0_DocumentTypeV0 { pub name : * mut std :: os :: raw :: c_char , pub schema : * mut crate :: fermented :: types :: platform_value :: platform_value_Value , pub indices : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index , pub index_structure : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexLevel , pub flattened_properties : * mut crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty , pub properties : * mut crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty , pub identifier_paths : * mut crate :: fermented :: generics :: std_collections_BTreeSet_String , pub binary_paths : * mut crate :: fermented :: generics :: std_collections_BTreeSet_String , pub required_fields : * mut crate :: fermented :: generics :: std_collections_BTreeSet_String , pub transient_fields : * mut crate :: fermented :: generics :: std_collections_BTreeSet_String , pub documents_keep_history : bool , pub documents_mutable : bool , pub documents_can_be_deleted : bool , pub documents_transferable : * mut crate :: fermented :: types :: dpp :: document :: transfer :: dpp_document_transfer_Transferable , pub trade_mode : * mut crate :: fermented :: types :: dpp :: nft :: dpp_nft_TradeMode , pub creation_restriction_mode : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: restricted_creation :: dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode , pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub requires_identity_encryption_bounded_key : * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements , pub requires_identity_decryption_bounded_key : * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements , pub security_level_requirement : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel } impl ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: v0 :: DocumentTypeV0 > for dpp_data_contract_document_type_v0_DocumentTypeV0 { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> dpp :: data_contract :: document_type :: v0 :: DocumentTypeV0 { let ffi_ref = & * ffi ; dpp :: data_contract :: document_type :: v0 :: DocumentTypeV0 { name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . name) , schema : < crate :: fermented :: types :: platform_value :: platform_value_Value as ferment :: FFIConversionFrom < platform_value :: Value >> :: ffi_from (ffi_ref . schema) , indices : < crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index :: Index > >> :: ffi_from (ffi_ref . indices) , index_structure : < crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexLevel as ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: index_level :: IndexLevel >> :: ffi_from (ffi_ref . index_structure) , flattened_properties : < crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty as ferment :: FFIConversionFrom < indexmap :: IndexMap < String , dpp :: data_contract :: document_type :: property :: DocumentProperty > >> :: ffi_from (ffi_ref . flattened_properties) , properties : < crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty as ferment :: FFIConversionFrom < indexmap :: IndexMap < String , dpp :: data_contract :: document_type :: property :: DocumentProperty > >> :: ffi_from (ffi_ref . properties) , identifier_paths : < crate :: fermented :: generics :: std_collections_BTreeSet_String as ferment :: FFIConversionFrom < std :: collections :: BTreeSet < String > >> :: ffi_from (ffi_ref . identifier_paths) , binary_paths : < crate :: fermented :: generics :: std_collections_BTreeSet_String as ferment :: FFIConversionFrom < std :: collections :: BTreeSet < String > >> :: ffi_from (ffi_ref . binary_paths) , required_fields : < crate :: fermented :: generics :: std_collections_BTreeSet_String as ferment :: FFIConversionFrom < std :: collections :: BTreeSet < String > >> :: ffi_from (ffi_ref . required_fields) , transient_fields : < crate :: fermented :: generics :: std_collections_BTreeSet_String as ferment :: FFIConversionFrom < std :: collections :: BTreeSet < String > >> :: ffi_from (ffi_ref . transient_fields) , documents_keep_history : ffi_ref . documents_keep_history , documents_mutable : ffi_ref . documents_mutable , documents_can_be_deleted : ffi_ref . documents_can_be_deleted , documents_transferable : < crate :: fermented :: types :: dpp :: document :: transfer :: dpp_document_transfer_Transferable as ferment :: FFIConversionFrom < dpp :: document :: transfer :: Transferable >> :: ffi_from (ffi_ref . documents_transferable) , trade_mode : < crate :: fermented :: types :: dpp :: nft :: dpp_nft_TradeMode as ferment :: FFIConversionFrom < dpp :: nft :: TradeMode >> :: ffi_from (ffi_ref . trade_mode) , creation_restriction_mode : < crate :: fermented :: types :: dpp :: data_contract :: document_type :: restricted_creation :: dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode as ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: restricted_creation :: CreationRestrictionMode >> :: ffi_from (ffi_ref . creation_restriction_mode) , data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . data_contract_id) , requires_identity_encryption_bounded_key : < crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements as ferment :: FFIConversionFrom < dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements >> :: ffi_from_opt (ffi_ref . requires_identity_encryption_bounded_key) , requires_identity_decryption_bounded_key : < crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements as ferment :: FFIConversionFrom < dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements >> :: ffi_from_opt (ffi_ref . requires_identity_decryption_bounded_key) , security_level_requirement : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel >> :: ffi_from (ffi_ref . security_level_requirement) } } } impl ferment :: FFIConversionTo < dpp :: data_contract :: document_type :: v0 :: DocumentTypeV0 > for dpp_data_contract_document_type_v0_DocumentTypeV0 { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: v0 :: DocumentTypeV0) -> * const dpp_data_contract_document_type_v0_DocumentTypeV0 { ferment :: boxed (dpp_data_contract_document_type_v0_DocumentTypeV0 { name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . name) , schema : < crate :: fermented :: types :: platform_value :: platform_value_Value as ferment :: FFIConversionTo < platform_value :: Value >> :: ffi_to (obj . schema) , indices : < crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index as ferment :: FFIConversionTo < std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index :: Index > >> :: ffi_to (obj . indices) , index_structure : < crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexLevel as ferment :: FFIConversionTo < dpp :: data_contract :: document_type :: index_level :: IndexLevel >> :: ffi_to (obj . index_structure) , flattened_properties : < crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty as ferment :: FFIConversionTo < indexmap :: IndexMap < String , dpp :: data_contract :: document_type :: property :: DocumentProperty > >> :: ffi_to (obj . flattened_properties) , properties : < crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty as ferment :: FFIConversionTo < indexmap :: IndexMap < String , dpp :: data_contract :: document_type :: property :: DocumentProperty > >> :: ffi_to (obj . properties) , identifier_paths : < crate :: fermented :: generics :: std_collections_BTreeSet_String as ferment :: FFIConversionTo < std :: collections :: BTreeSet < String > >> :: ffi_to (obj . identifier_paths) , binary_paths : < crate :: fermented :: generics :: std_collections_BTreeSet_String as ferment :: FFIConversionTo < std :: collections :: BTreeSet < String > >> :: ffi_to (obj . binary_paths) , required_fields : < crate :: fermented :: generics :: std_collections_BTreeSet_String as ferment :: FFIConversionTo < std :: collections :: BTreeSet < String > >> :: ffi_to (obj . required_fields) , transient_fields : < crate :: fermented :: generics :: std_collections_BTreeSet_String as ferment :: FFIConversionTo < std :: collections :: BTreeSet < String > >> :: ffi_to (obj . transient_fields) , documents_keep_history : obj . documents_keep_history , documents_mutable : obj . documents_mutable , documents_can_be_deleted : obj . documents_can_be_deleted , documents_transferable : < crate :: fermented :: types :: dpp :: document :: transfer :: dpp_document_transfer_Transferable as ferment :: FFIConversionTo < dpp :: document :: transfer :: Transferable >> :: ffi_to (obj . documents_transferable) , trade_mode : < crate :: fermented :: types :: dpp :: nft :: dpp_nft_TradeMode as ferment :: FFIConversionTo < dpp :: nft :: TradeMode >> :: ffi_to (obj . trade_mode) , creation_restriction_mode : < crate :: fermented :: types :: dpp :: data_contract :: document_type :: restricted_creation :: dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode as ferment :: FFIConversionTo < dpp :: data_contract :: document_type :: restricted_creation :: CreationRestrictionMode >> :: ffi_to (obj . creation_restriction_mode) , data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . data_contract_id) , requires_identity_encryption_bounded_key : < crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements as ferment :: FFIConversionTo < dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements >> :: ffi_to_opt (obj . requires_identity_encryption_bounded_key) , requires_identity_decryption_bounded_key : < crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements as ferment :: FFIConversionTo < dpp :: data_contract :: storage_requirements :: keys_for_document_type :: StorageKeyRequirements >> :: ffi_to_opt (obj . requires_identity_decryption_bounded_key) , security_level_requirement : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel >> :: ffi_to (obj . security_level_requirement) }) } } impl Drop for dpp_data_contract_document_type_v0_DocumentTypeV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . name) ; ferment :: unbox_any (ffi_ref . schema) ; ferment :: unbox_any (ffi_ref . indices) ; ferment :: unbox_any (ffi_ref . index_structure) ; ferment :: unbox_any (ffi_ref . flattened_properties) ; ferment :: unbox_any (ffi_ref . properties) ; ferment :: unbox_any (ffi_ref . identifier_paths) ; ferment :: unbox_any (ffi_ref . binary_paths) ; ferment :: unbox_any (ffi_ref . required_fields) ; ferment :: unbox_any (ffi_ref . transient_fields) ; ; ; ; ferment :: unbox_any (ffi_ref . documents_transferable) ; ferment :: unbox_any (ffi_ref . trade_mode) ; ferment :: unbox_any (ffi_ref . creation_restriction_mode) ; ferment :: unbox_any (ffi_ref . data_contract_id) ; ferment :: unbox_any_opt (ffi_ref . requires_identity_encryption_bounded_key) ; ferment :: unbox_any_opt (ffi_ref . requires_identity_decryption_bounded_key) ; ferment :: unbox_any (ffi_ref . security_level_requirement) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_ctor < > (name : * mut std :: os :: raw :: c_char , schema : * mut crate :: fermented :: types :: platform_value :: platform_value_Value , indices : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index , index_structure : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexLevel , flattened_properties : * mut crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty , properties : * mut crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty , identifier_paths : * mut crate :: fermented :: generics :: std_collections_BTreeSet_String , binary_paths : * mut crate :: fermented :: generics :: std_collections_BTreeSet_String , required_fields : * mut crate :: fermented :: generics :: std_collections_BTreeSet_String , transient_fields : * mut crate :: fermented :: generics :: std_collections_BTreeSet_String , documents_keep_history : bool , documents_mutable : bool , documents_can_be_deleted : bool , documents_transferable : * mut crate :: fermented :: types :: dpp :: document :: transfer :: dpp_document_transfer_Transferable , trade_mode : * mut crate :: fermented :: types :: dpp :: nft :: dpp_nft_TradeMode , creation_restriction_mode : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: restricted_creation :: dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode , data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , requires_identity_encryption_bounded_key : * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements , requires_identity_decryption_bounded_key : * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements , security_level_requirement : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel) -> * mut dpp_data_contract_document_type_v0_DocumentTypeV0 { ferment :: boxed (dpp_data_contract_document_type_v0_DocumentTypeV0 { name , schema , indices , index_structure , flattened_properties , properties , identifier_paths , binary_paths , required_fields , transient_fields , documents_keep_history , documents_mutable , documents_can_be_deleted , documents_transferable , trade_mode , creation_restriction_mode , data_contract_id , requires_identity_encryption_bounded_key , requires_identity_decryption_bounded_key , security_level_requirement }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_destroy < > (ffi : * mut dpp_data_contract_document_type_v0_DocumentTypeV0) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_name < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut std :: os :: raw :: c_char { (* obj) . name } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_schema < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: types :: platform_value :: platform_value_Value { (* obj) . schema } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_indices < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index { (* obj) . indices } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_index_structure < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexLevel { (* obj) . index_structure } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_flattened_properties < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty { (* obj) . flattened_properties } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_properties < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty { (* obj) . properties } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_identifier_paths < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: generics :: std_collections_BTreeSet_String { (* obj) . identifier_paths } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_binary_paths < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: generics :: std_collections_BTreeSet_String { (* obj) . binary_paths } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_required_fields < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: generics :: std_collections_BTreeSet_String { (* obj) . required_fields } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_transient_fields < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: generics :: std_collections_BTreeSet_String { (* obj) . transient_fields } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_documents_keep_history < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> bool { (* obj) . documents_keep_history } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_documents_mutable < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> bool { (* obj) . documents_mutable } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_documents_can_be_deleted < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> bool { (* obj) . documents_can_be_deleted } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_documents_transferable < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: types :: dpp :: document :: transfer :: dpp_document_transfer_Transferable { (* obj) . documents_transferable } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_trade_mode < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: types :: dpp :: nft :: dpp_nft_TradeMode { (* obj) . trade_mode } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_creation_restriction_mode < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: restricted_creation :: dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode { (* obj) . creation_restriction_mode } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_data_contract_id < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_requires_identity_encryption_bounded_key < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { (* obj) . requires_identity_encryption_bounded_key } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_requires_identity_decryption_bounded_key < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { (* obj) . requires_identity_decryption_bounded_key } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_get_security_level_requirement < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . security_level_requirement } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_name < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut std :: os :: raw :: c_char { (* obj) . name } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_schema < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: types :: platform_value :: platform_value_Value { (* obj) . schema } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_indices < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index { (* obj) . indices } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_index_structure < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexLevel { (* obj) . index_structure } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_flattened_properties < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty { (* obj) . flattened_properties } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_properties < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty { (* obj) . properties } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_identifier_paths < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: generics :: std_collections_BTreeSet_String { (* obj) . identifier_paths } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_binary_paths < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: generics :: std_collections_BTreeSet_String { (* obj) . binary_paths } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_required_fields < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: generics :: std_collections_BTreeSet_String { (* obj) . required_fields } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_transient_fields < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: generics :: std_collections_BTreeSet_String { (* obj) . transient_fields } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_documents_keep_history < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> bool { (* obj) . documents_keep_history } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_documents_mutable < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> bool { (* obj) . documents_mutable } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_documents_can_be_deleted < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> bool { (* obj) . documents_can_be_deleted } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_documents_transferable < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: types :: dpp :: document :: transfer :: dpp_document_transfer_Transferable { (* obj) . documents_transferable } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_trade_mode < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: types :: dpp :: nft :: dpp_nft_TradeMode { (* obj) . trade_mode } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_creation_restriction_mode < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: restricted_creation :: dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode { (* obj) . creation_restriction_mode } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_data_contract_id < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_requires_identity_encryption_bounded_key < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { (* obj) . requires_identity_encryption_bounded_key } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_requires_identity_decryption_bounded_key < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: storage_requirements :: keys_for_document_type :: dpp_data_contract_storage_requirements_keys_for_document_type_StorageKeyRequirements { (* obj) . requires_identity_decryption_bounded_key } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_DocumentTypeV0_set_security_level_requirement < > (obj : * const dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . security_level_requirement } # [cfg (feature = "validation")] pub mod validator { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`StatelessJsonSchemaLazyValidator`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator (* mut dpp :: validation :: json_schema_validator :: dpp_validation_JsonSchemaValidator) ; impl ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: v0 :: validator :: StatelessJsonSchemaLazyValidator > for dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator) -> dpp :: data_contract :: document_type :: v0 :: validator :: StatelessJsonSchemaLazyValidator { let ffi_ref = & * ffi ; dpp :: data_contract :: document_type :: v0 :: validator :: StatelessJsonSchemaLazyValidator (< dpp :: validation :: json_schema_validator :: dpp_validation_JsonSchemaValidator as ferment :: FFIConversionFrom < dpp :: validation :: json_schema_validator :: JsonSchemaValidator >> :: ffi_from (ffi_ref . 0)) } } impl ferment :: FFIConversionTo < dpp :: data_contract :: document_type :: v0 :: validator :: StatelessJsonSchemaLazyValidator > for dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: v0 :: validator :: StatelessJsonSchemaLazyValidator) -> * const dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator { ferment :: boxed (dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator (< dpp :: validation :: json_schema_validator :: dpp_validation_JsonSchemaValidator as ferment :: FFIConversionTo < dpp :: validation :: json_schema_validator :: JsonSchemaValidator >> :: ffi_to (obj . 0))) } } impl Drop for dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator_ctor < > (o_0 : * mut dpp :: validation :: json_schema_validator :: dpp_validation_JsonSchemaValidator) -> * mut dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator { ferment :: boxed (dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator_destroy < > (ffi : * mut dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator_get_0 < > (obj : * const dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator) -> * mut dpp :: validation :: json_schema_validator :: dpp_validation_JsonSchemaValidator { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator_set_0 < > (obj : * const dpp_data_contract_document_type_v0_validator_StatelessJsonSchemaLazyValidator) -> * mut dpp :: validation :: json_schema_validator :: dpp_validation_JsonSchemaValidator { (* obj) . 0 } } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`DocumentTypeRef`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_data_contract_document_type_DocumentTypeRef { V0 (* mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: v0 :: dpp_data_contract_document_type_v0_DocumentTypeV0) } impl < 'a , > ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: DocumentTypeRef < 'a > > for dpp_data_contract_document_type_DocumentTypeRef { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_DocumentTypeRef) -> dpp :: data_contract :: document_type :: DocumentTypeRef < 'a > { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_document_type_DocumentTypeRef :: V0 (o_0) => dpp :: data_contract :: document_type :: DocumentTypeRef :: V0 (Box :: leak (Box :: new (< crate :: fermented :: types :: dpp :: data_contract :: document_type :: v0 :: dpp_data_contract_document_type_v0_DocumentTypeV0 as ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: v0 :: DocumentTypeV0 >> :: ffi_from (* o_0)))) } } } impl < 'a , > ferment :: FFIConversionTo < dpp :: data_contract :: document_type :: DocumentTypeRef < 'a > > for dpp_data_contract_document_type_DocumentTypeRef { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: DocumentTypeRef < 'a >) -> * const dpp_data_contract_document_type_DocumentTypeRef { ferment :: boxed (match obj { dpp :: data_contract :: document_type :: DocumentTypeRef :: V0 (o_0) => dpp_data_contract_document_type_DocumentTypeRef :: V0 (< crate :: fermented :: types :: dpp :: data_contract :: document_type :: v0 :: dpp_data_contract_document_type_v0_DocumentTypeV0 as ferment :: FFIConversionTo < dpp :: data_contract :: document_type :: v0 :: DocumentTypeV0 >> :: ffi_to (o_0 . clone ())) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_data_contract_document_type_DocumentTypeRef { fn drop (& mut self) { unsafe { match self { dpp_data_contract_document_type_DocumentTypeRef :: V0 (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_DocumentTypeRef_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: v0 :: dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut dpp_data_contract_document_type_DocumentTypeRef { ferment :: boxed (dpp_data_contract_document_type_DocumentTypeRef :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_DocumentTypeRef_destroy < 'a > (ffi : * mut dpp_data_contract_document_type_DocumentTypeRef) { ferment :: unbox_any (ffi) ; } pub mod class_methods { use crate as dash_spv_apple_bindings ; pub mod create_document_types_from_document_schemas { use crate as dash_spv_apple_bindings ; pub mod v0 { use crate as dash_spv_apple_bindings ; } } pub mod try_from_schema { use crate as dash_spv_apple_bindings ; pub mod v0 { use crate as dash_spv_apple_bindings ; # [cfg (test)] pub mod tests { use crate as dash_spv_apple_bindings ; } } } } pub mod index { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`ContestedIndexFieldMatch`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_data_contract_document_type_index_ContestedIndexFieldMatch { Regex (* mut dash_spv_apple_bindings :: custom :: regex :: regex_Regex) , PositiveIntegerMatch (* mut [u8 ; 16]) } impl ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: index :: ContestedIndexFieldMatch > for dpp_data_contract_document_type_index_ContestedIndexFieldMatch { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_index_ContestedIndexFieldMatch) -> dpp :: data_contract :: document_type :: index :: ContestedIndexFieldMatch { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_document_type_index_ContestedIndexFieldMatch :: Regex (o_0) => dpp :: data_contract :: document_type :: index :: ContestedIndexFieldMatch :: Regex (< dash_spv_apple_bindings :: custom :: regex :: regex_Regex as ferment :: FFIConversionFrom < regex :: Regex >> :: ffi_from (* o_0)) , dpp_data_contract_document_type_index_ContestedIndexFieldMatch :: PositiveIntegerMatch (o_0) => dpp :: data_contract :: document_type :: index :: ContestedIndexFieldMatch :: PositiveIntegerMatch (< [u8 ; 16] as ferment :: FFIConversionFrom < u128 >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: data_contract :: document_type :: index :: ContestedIndexFieldMatch > for dpp_data_contract_document_type_index_ContestedIndexFieldMatch { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: index :: ContestedIndexFieldMatch) -> * const dpp_data_contract_document_type_index_ContestedIndexFieldMatch { ferment :: boxed (match obj { dpp :: data_contract :: document_type :: index :: ContestedIndexFieldMatch :: Regex (o_0) => dpp_data_contract_document_type_index_ContestedIndexFieldMatch :: Regex (< dash_spv_apple_bindings :: custom :: regex :: regex_Regex as ferment :: FFIConversionTo < regex :: Regex >> :: ffi_to (o_0)) , dpp :: data_contract :: document_type :: index :: ContestedIndexFieldMatch :: PositiveIntegerMatch (o_0) => dpp_data_contract_document_type_index_ContestedIndexFieldMatch :: PositiveIntegerMatch (< [u8 ; 16] as ferment :: FFIConversionTo < u128 >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_data_contract_document_type_index_ContestedIndexFieldMatch { fn drop (& mut self) { unsafe { match self { dpp_data_contract_document_type_index_ContestedIndexFieldMatch :: Regex (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_data_contract_document_type_index_ContestedIndexFieldMatch :: PositiveIntegerMatch (o_0) => { ferment :: unbox_any_opt (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_ContestedIndexFieldMatch_Regex_ctor (o_o_0 : * mut dash_spv_apple_bindings :: custom :: regex :: regex_Regex) -> * mut dpp_data_contract_document_type_index_ContestedIndexFieldMatch { ferment :: boxed (dpp_data_contract_document_type_index_ContestedIndexFieldMatch :: Regex (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_ContestedIndexFieldMatch_PositiveIntegerMatch_ctor (o_o_0 : * mut [u8 ; 16]) -> * mut dpp_data_contract_document_type_index_ContestedIndexFieldMatch { ferment :: boxed (dpp_data_contract_document_type_index_ContestedIndexFieldMatch :: PositiveIntegerMatch (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_ContestedIndexFieldMatch_destroy < > (ffi : * mut dpp_data_contract_document_type_index_ContestedIndexFieldMatch) { ferment :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`IndexProperty`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_document_type_index_IndexProperty { pub name : * mut std :: os :: raw :: c_char , pub ascending : bool } impl ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: index :: IndexProperty > for dpp_data_contract_document_type_index_IndexProperty { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_index_IndexProperty) -> dpp :: data_contract :: document_type :: index :: IndexProperty { let ffi_ref = & * ffi ; dpp :: data_contract :: document_type :: index :: IndexProperty { name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . name) , ascending : ffi_ref . ascending } } } impl ferment :: FFIConversionTo < dpp :: data_contract :: document_type :: index :: IndexProperty > for dpp_data_contract_document_type_index_IndexProperty { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: index :: IndexProperty) -> * const dpp_data_contract_document_type_index_IndexProperty { ferment :: boxed (dpp_data_contract_document_type_index_IndexProperty { name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . name) , ascending : obj . ascending }) } } impl Drop for dpp_data_contract_document_type_index_IndexProperty { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . name) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_IndexProperty_ctor < > (name : * mut std :: os :: raw :: c_char , ascending : bool) -> * mut dpp_data_contract_document_type_index_IndexProperty { ferment :: boxed (dpp_data_contract_document_type_index_IndexProperty { name , ascending }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_IndexProperty_destroy < > (ffi : * mut dpp_data_contract_document_type_index_IndexProperty) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_IndexProperty_get_name < > (obj : * const dpp_data_contract_document_type_index_IndexProperty) -> * mut std :: os :: raw :: c_char { (* obj) . name } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_IndexProperty_get_ascending < > (obj : * const dpp_data_contract_document_type_index_IndexProperty) -> bool { (* obj) . ascending } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_IndexProperty_set_name < > (obj : * const dpp_data_contract_document_type_index_IndexProperty) -> * mut std :: os :: raw :: c_char { (* obj) . name } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_IndexProperty_set_ascending < > (obj : * const dpp_data_contract_document_type_index_IndexProperty) -> bool { (* obj) . ascending } # [doc = "FFI-representation of the [`ContestedIndexInformation`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_document_type_index_ContestedIndexInformation { pub field_matches : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch , pub resolution : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_ContestedIndexResolution } impl ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: index :: ContestedIndexInformation > for dpp_data_contract_document_type_index_ContestedIndexInformation { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_index_ContestedIndexInformation) -> dpp :: data_contract :: document_type :: index :: ContestedIndexInformation { let ffi_ref = & * ffi ; dpp :: data_contract :: document_type :: index :: ContestedIndexInformation { field_matches : < crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index :: ContestedIndexFieldMatch > >> :: ffi_from (ffi_ref . field_matches) , resolution : < crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_ContestedIndexResolution as ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: index :: ContestedIndexResolution >> :: ffi_from (ffi_ref . resolution) } } } impl ferment :: FFIConversionTo < dpp :: data_contract :: document_type :: index :: ContestedIndexInformation > for dpp_data_contract_document_type_index_ContestedIndexInformation { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: index :: ContestedIndexInformation) -> * const dpp_data_contract_document_type_index_ContestedIndexInformation { ferment :: boxed (dpp_data_contract_document_type_index_ContestedIndexInformation { field_matches : < crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch as ferment :: FFIConversionTo < std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index :: ContestedIndexFieldMatch > >> :: ffi_to (obj . field_matches) , resolution : < crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_ContestedIndexResolution as ferment :: FFIConversionTo < dpp :: data_contract :: document_type :: index :: ContestedIndexResolution >> :: ffi_to (obj . resolution) }) } } impl Drop for dpp_data_contract_document_type_index_ContestedIndexInformation { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . field_matches) ; ferment :: unbox_any (ffi_ref . resolution) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_ContestedIndexInformation_ctor < > (field_matches : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch , resolution : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_ContestedIndexResolution) -> * mut dpp_data_contract_document_type_index_ContestedIndexInformation { ferment :: boxed (dpp_data_contract_document_type_index_ContestedIndexInformation { field_matches , resolution }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_ContestedIndexInformation_destroy < > (ffi : * mut dpp_data_contract_document_type_index_ContestedIndexInformation) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_ContestedIndexInformation_get_field_matches < > (obj : * const dpp_data_contract_document_type_index_ContestedIndexInformation) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch { (* obj) . field_matches } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_ContestedIndexInformation_get_resolution < > (obj : * const dpp_data_contract_document_type_index_ContestedIndexInformation) -> * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_ContestedIndexResolution { (* obj) . resolution } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_ContestedIndexInformation_set_field_matches < > (obj : * const dpp_data_contract_document_type_index_ContestedIndexInformation) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch { (* obj) . field_matches } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_ContestedIndexInformation_set_resolution < > (obj : * const dpp_data_contract_document_type_index_ContestedIndexInformation) -> * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_ContestedIndexResolution { (* obj) . resolution } # [doc = "FFI-representation of the [`Index`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_document_type_index_Index { pub name : * mut std :: os :: raw :: c_char , pub properties : * mut crate :: fermented :: generics :: Vec_dpp_data_contract_document_type_index_IndexProperty , pub unique : bool , pub null_searchable : bool , pub contested_index : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_ContestedIndexInformation } impl ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: index :: Index > for dpp_data_contract_document_type_index_Index { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_index_Index) -> dpp :: data_contract :: document_type :: index :: Index { let ffi_ref = & * ffi ; dpp :: data_contract :: document_type :: index :: Index { name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . name) , properties : < crate :: fermented :: generics :: Vec_dpp_data_contract_document_type_index_IndexProperty as ferment :: FFIConversionFrom < Vec < dpp :: data_contract :: document_type :: index :: IndexProperty > >> :: ffi_from (ffi_ref . properties) , unique : ffi_ref . unique , null_searchable : ffi_ref . null_searchable , contested_index : < crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_ContestedIndexInformation as ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: index :: ContestedIndexInformation >> :: ffi_from_opt (ffi_ref . contested_index) } } } impl ferment :: FFIConversionTo < dpp :: data_contract :: document_type :: index :: Index > for dpp_data_contract_document_type_index_Index { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: index :: Index) -> * const dpp_data_contract_document_type_index_Index { ferment :: boxed (dpp_data_contract_document_type_index_Index { name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . name) , properties : < crate :: fermented :: generics :: Vec_dpp_data_contract_document_type_index_IndexProperty as ferment :: FFIConversionTo < Vec < dpp :: data_contract :: document_type :: index :: IndexProperty > >> :: ffi_to (obj . properties) , unique : obj . unique , null_searchable : obj . null_searchable , contested_index : < crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_ContestedIndexInformation as ferment :: FFIConversionTo < dpp :: data_contract :: document_type :: index :: ContestedIndexInformation >> :: ffi_to_opt (obj . contested_index) }) } } impl Drop for dpp_data_contract_document_type_index_Index { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . name) ; ferment :: unbox_any (ffi_ref . properties) ; ; ; ferment :: unbox_any_opt (ffi_ref . contested_index) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_Index_ctor < > (name : * mut std :: os :: raw :: c_char , properties : * mut crate :: fermented :: generics :: Vec_dpp_data_contract_document_type_index_IndexProperty , unique : bool , null_searchable : bool , contested_index : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_ContestedIndexInformation) -> * mut dpp_data_contract_document_type_index_Index { ferment :: boxed (dpp_data_contract_document_type_index_Index { name , properties , unique , null_searchable , contested_index }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_Index_destroy < > (ffi : * mut dpp_data_contract_document_type_index_Index) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_Index_get_name < > (obj : * const dpp_data_contract_document_type_index_Index) -> * mut std :: os :: raw :: c_char { (* obj) . name } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_Index_get_properties < > (obj : * const dpp_data_contract_document_type_index_Index) -> * mut crate :: fermented :: generics :: Vec_dpp_data_contract_document_type_index_IndexProperty { (* obj) . properties } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_Index_get_unique < > (obj : * const dpp_data_contract_document_type_index_Index) -> bool { (* obj) . unique } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_Index_get_null_searchable < > (obj : * const dpp_data_contract_document_type_index_Index) -> bool { (* obj) . null_searchable } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_Index_get_contested_index < > (obj : * const dpp_data_contract_document_type_index_Index) -> * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_ContestedIndexInformation { (* obj) . contested_index } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_Index_set_name < > (obj : * const dpp_data_contract_document_type_index_Index) -> * mut std :: os :: raw :: c_char { (* obj) . name } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_Index_set_properties < > (obj : * const dpp_data_contract_document_type_index_Index) -> * mut crate :: fermented :: generics :: Vec_dpp_data_contract_document_type_index_IndexProperty { (* obj) . properties } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_Index_set_unique < > (obj : * const dpp_data_contract_document_type_index_Index) -> bool { (* obj) . unique } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_Index_set_null_searchable < > (obj : * const dpp_data_contract_document_type_index_Index) -> bool { (* obj) . null_searchable } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_Index_set_contested_index < > (obj : * const dpp_data_contract_document_type_index_Index) -> * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_ContestedIndexInformation { (* obj) . contested_index } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`OrderBy`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_data_contract_document_type_index_OrderBy { Asc , Desc } impl ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: index :: OrderBy > for dpp_data_contract_document_type_index_OrderBy { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_index_OrderBy) -> dpp :: data_contract :: document_type :: index :: OrderBy { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_document_type_index_OrderBy :: Asc => dpp :: data_contract :: document_type :: index :: OrderBy :: Asc , dpp_data_contract_document_type_index_OrderBy :: Desc => dpp :: data_contract :: document_type :: index :: OrderBy :: Desc } } } impl ferment :: FFIConversionTo < dpp :: data_contract :: document_type :: index :: OrderBy > for dpp_data_contract_document_type_index_OrderBy { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: index :: OrderBy) -> * const dpp_data_contract_document_type_index_OrderBy { ferment :: boxed (match obj { dpp :: data_contract :: document_type :: index :: OrderBy :: Asc => dpp_data_contract_document_type_index_OrderBy :: Asc , dpp :: data_contract :: document_type :: index :: OrderBy :: Desc => dpp_data_contract_document_type_index_OrderBy :: Desc , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_data_contract_document_type_index_OrderBy { fn drop (& mut self) { unsafe { match self { dpp_data_contract_document_type_index_OrderBy :: Asc => { } , dpp_data_contract_document_type_index_OrderBy :: Desc => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_OrderBy_Asc_ctor () -> * mut dpp_data_contract_document_type_index_OrderBy { ferment :: boxed (dpp_data_contract_document_type_index_OrderBy :: Asc { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_OrderBy_Desc_ctor () -> * mut dpp_data_contract_document_type_index_OrderBy { ferment :: boxed (dpp_data_contract_document_type_index_OrderBy :: Desc { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_OrderBy_destroy < > (ffi : * mut dpp_data_contract_document_type_index_OrderBy) { ferment :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`ContestedIndexResolution`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_data_contract_document_type_index_ContestedIndexResolution { MasternodeVote = 0 } impl ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: index :: ContestedIndexResolution > for dpp_data_contract_document_type_index_ContestedIndexResolution { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_index_ContestedIndexResolution) -> dpp :: data_contract :: document_type :: index :: ContestedIndexResolution { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_document_type_index_ContestedIndexResolution :: MasternodeVote => dpp :: data_contract :: document_type :: index :: ContestedIndexResolution :: MasternodeVote } } } impl ferment :: FFIConversionTo < dpp :: data_contract :: document_type :: index :: ContestedIndexResolution > for dpp_data_contract_document_type_index_ContestedIndexResolution { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: index :: ContestedIndexResolution) -> * const dpp_data_contract_document_type_index_ContestedIndexResolution { ferment :: boxed (match obj { dpp :: data_contract :: document_type :: index :: ContestedIndexResolution :: MasternodeVote => dpp_data_contract_document_type_index_ContestedIndexResolution :: MasternodeVote , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_data_contract_document_type_index_ContestedIndexResolution { fn drop (& mut self) { unsafe { match self { dpp_data_contract_document_type_index_ContestedIndexResolution :: MasternodeVote => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_ContestedIndexResolution_MasternodeVote_ctor () -> * mut dpp_data_contract_document_type_index_ContestedIndexResolution { ferment :: boxed (dpp_data_contract_document_type_index_ContestedIndexResolution :: MasternodeVote { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_ContestedIndexResolution_destroy < > (ffi : * mut dpp_data_contract_document_type_index_ContestedIndexResolution) { ferment :: unbox_any (ffi) ; } } pub mod restricted_creation { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`CreationRestrictionMode`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode { NoRestrictions , OwnerOnly , NoCreationAllowed } impl ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: restricted_creation :: CreationRestrictionMode > for dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode) -> dpp :: data_contract :: document_type :: restricted_creation :: CreationRestrictionMode { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode :: NoRestrictions => dpp :: data_contract :: document_type :: restricted_creation :: CreationRestrictionMode :: NoRestrictions , dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode :: OwnerOnly => dpp :: data_contract :: document_type :: restricted_creation :: CreationRestrictionMode :: OwnerOnly , dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode :: NoCreationAllowed => dpp :: data_contract :: document_type :: restricted_creation :: CreationRestrictionMode :: NoCreationAllowed } } } impl ferment :: FFIConversionTo < dpp :: data_contract :: document_type :: restricted_creation :: CreationRestrictionMode > for dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: restricted_creation :: CreationRestrictionMode) -> * const dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode { ferment :: boxed (match obj { dpp :: data_contract :: document_type :: restricted_creation :: CreationRestrictionMode :: NoRestrictions => dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode :: NoRestrictions , dpp :: data_contract :: document_type :: restricted_creation :: CreationRestrictionMode :: OwnerOnly => dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode :: OwnerOnly , dpp :: data_contract :: document_type :: restricted_creation :: CreationRestrictionMode :: NoCreationAllowed => dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode :: NoCreationAllowed , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode { fn drop (& mut self) { unsafe { match self { dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode :: NoRestrictions => { } , dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode :: OwnerOnly => { } , dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode :: NoCreationAllowed => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode_NoRestrictions_ctor () -> * mut dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode { ferment :: boxed (dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode :: NoRestrictions { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode_OwnerOnly_ctor () -> * mut dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode { ferment :: boxed (dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode :: OwnerOnly { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode_NoCreationAllowed_ctor () -> * mut dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode { ferment :: boxed (dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode :: NoCreationAllowed { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode_destroy < > (ffi : * mut dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode) { ferment :: unbox_any (ffi) ; } } pub mod index_level { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`IndexLevel`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_document_type_index_level_IndexLevel { pub sub_index_levels : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel , pub has_index_with_type : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexLevelTypeInfo , pub level_identifier : u64 } impl ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: index_level :: IndexLevel > for dpp_data_contract_document_type_index_level_IndexLevel { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_index_level_IndexLevel) -> dpp :: data_contract :: document_type :: index_level :: IndexLevel { let ffi_ref = & * ffi ; dpp :: data_contract :: document_type :: index_level :: IndexLevel { sub_index_levels : < crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index_level :: IndexLevel > >> :: ffi_from (ffi_ref . sub_index_levels) , has_index_with_type : < crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexLevelTypeInfo as ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: index_level :: IndexLevelTypeInfo >> :: ffi_from_opt (ffi_ref . has_index_with_type) , level_identifier : ffi_ref . level_identifier } } } impl ferment :: FFIConversionTo < dpp :: data_contract :: document_type :: index_level :: IndexLevel > for dpp_data_contract_document_type_index_level_IndexLevel { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: index_level :: IndexLevel) -> * const dpp_data_contract_document_type_index_level_IndexLevel { ferment :: boxed (dpp_data_contract_document_type_index_level_IndexLevel { sub_index_levels : < crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel as ferment :: FFIConversionTo < std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index_level :: IndexLevel > >> :: ffi_to (obj . sub_index_levels) , has_index_with_type : < crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexLevelTypeInfo as ferment :: FFIConversionTo < dpp :: data_contract :: document_type :: index_level :: IndexLevelTypeInfo >> :: ffi_to_opt (obj . has_index_with_type) , level_identifier : obj . level_identifier }) } } impl Drop for dpp_data_contract_document_type_index_level_IndexLevel { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . sub_index_levels) ; ferment :: unbox_any_opt (ffi_ref . has_index_with_type) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevel_ctor < > (sub_index_levels : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel , has_index_with_type : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexLevelTypeInfo , level_identifier : u64) -> * mut dpp_data_contract_document_type_index_level_IndexLevel { ferment :: boxed (dpp_data_contract_document_type_index_level_IndexLevel { sub_index_levels , has_index_with_type , level_identifier }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevel_destroy < > (ffi : * mut dpp_data_contract_document_type_index_level_IndexLevel) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevel_get_sub_index_levels < > (obj : * const dpp_data_contract_document_type_index_level_IndexLevel) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel { (* obj) . sub_index_levels } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevel_get_has_index_with_type < > (obj : * const dpp_data_contract_document_type_index_level_IndexLevel) -> * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexLevelTypeInfo { (* obj) . has_index_with_type } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevel_get_level_identifier < > (obj : * const dpp_data_contract_document_type_index_level_IndexLevel) -> u64 { (* obj) . level_identifier } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevel_set_sub_index_levels < > (obj : * const dpp_data_contract_document_type_index_level_IndexLevel) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel { (* obj) . sub_index_levels } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevel_set_has_index_with_type < > (obj : * const dpp_data_contract_document_type_index_level_IndexLevel) -> * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexLevelTypeInfo { (* obj) . has_index_with_type } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevel_set_level_identifier < > (obj : * const dpp_data_contract_document_type_index_level_IndexLevel) -> u64 { (* obj) . level_identifier } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`IndexType`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_data_contract_document_type_index_level_IndexType { NonUniqueIndex , UniqueIndex , ContestedResourceIndex } impl ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: index_level :: IndexType > for dpp_data_contract_document_type_index_level_IndexType { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_index_level_IndexType) -> dpp :: data_contract :: document_type :: index_level :: IndexType { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_document_type_index_level_IndexType :: NonUniqueIndex => dpp :: data_contract :: document_type :: index_level :: IndexType :: NonUniqueIndex , dpp_data_contract_document_type_index_level_IndexType :: UniqueIndex => dpp :: data_contract :: document_type :: index_level :: IndexType :: UniqueIndex , dpp_data_contract_document_type_index_level_IndexType :: ContestedResourceIndex => dpp :: data_contract :: document_type :: index_level :: IndexType :: ContestedResourceIndex } } } impl ferment :: FFIConversionTo < dpp :: data_contract :: document_type :: index_level :: IndexType > for dpp_data_contract_document_type_index_level_IndexType { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: index_level :: IndexType) -> * const dpp_data_contract_document_type_index_level_IndexType { ferment :: boxed (match obj { dpp :: data_contract :: document_type :: index_level :: IndexType :: NonUniqueIndex => dpp_data_contract_document_type_index_level_IndexType :: NonUniqueIndex , dpp :: data_contract :: document_type :: index_level :: IndexType :: UniqueIndex => dpp_data_contract_document_type_index_level_IndexType :: UniqueIndex , dpp :: data_contract :: document_type :: index_level :: IndexType :: ContestedResourceIndex => dpp_data_contract_document_type_index_level_IndexType :: ContestedResourceIndex , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_data_contract_document_type_index_level_IndexType { fn drop (& mut self) { unsafe { match self { dpp_data_contract_document_type_index_level_IndexType :: NonUniqueIndex => { } , dpp_data_contract_document_type_index_level_IndexType :: UniqueIndex => { } , dpp_data_contract_document_type_index_level_IndexType :: ContestedResourceIndex => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexType_NonUniqueIndex_ctor () -> * mut dpp_data_contract_document_type_index_level_IndexType { ferment :: boxed (dpp_data_contract_document_type_index_level_IndexType :: NonUniqueIndex { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexType_UniqueIndex_ctor () -> * mut dpp_data_contract_document_type_index_level_IndexType { ferment :: boxed (dpp_data_contract_document_type_index_level_IndexType :: UniqueIndex { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexType_ContestedResourceIndex_ctor () -> * mut dpp_data_contract_document_type_index_level_IndexType { ferment :: boxed (dpp_data_contract_document_type_index_level_IndexType :: ContestedResourceIndex { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexType_destroy < > (ffi : * mut dpp_data_contract_document_type_index_level_IndexType) { ferment :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`IndexLevelTypeInfo`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_document_type_index_level_IndexLevelTypeInfo { pub should_insert_with_all_null : bool , pub index_type : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexType } impl ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: index_level :: IndexLevelTypeInfo > for dpp_data_contract_document_type_index_level_IndexLevelTypeInfo { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_index_level_IndexLevelTypeInfo) -> dpp :: data_contract :: document_type :: index_level :: IndexLevelTypeInfo { let ffi_ref = & * ffi ; dpp :: data_contract :: document_type :: index_level :: IndexLevelTypeInfo { should_insert_with_all_null : ffi_ref . should_insert_with_all_null , index_type : < crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexType as ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: index_level :: IndexType >> :: ffi_from (ffi_ref . index_type) } } } impl ferment :: FFIConversionTo < dpp :: data_contract :: document_type :: index_level :: IndexLevelTypeInfo > for dpp_data_contract_document_type_index_level_IndexLevelTypeInfo { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: index_level :: IndexLevelTypeInfo) -> * const dpp_data_contract_document_type_index_level_IndexLevelTypeInfo { ferment :: boxed (dpp_data_contract_document_type_index_level_IndexLevelTypeInfo { should_insert_with_all_null : obj . should_insert_with_all_null , index_type : < crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexType as ferment :: FFIConversionTo < dpp :: data_contract :: document_type :: index_level :: IndexType >> :: ffi_to (obj . index_type) }) } } impl Drop for dpp_data_contract_document_type_index_level_IndexLevelTypeInfo { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment :: unbox_any (ffi_ref . index_type) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevelTypeInfo_ctor < > (should_insert_with_all_null : bool , index_type : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexType) -> * mut dpp_data_contract_document_type_index_level_IndexLevelTypeInfo { ferment :: boxed (dpp_data_contract_document_type_index_level_IndexLevelTypeInfo { should_insert_with_all_null , index_type }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevelTypeInfo_destroy < > (ffi : * mut dpp_data_contract_document_type_index_level_IndexLevelTypeInfo) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevelTypeInfo_get_should_insert_with_all_null < > (obj : * const dpp_data_contract_document_type_index_level_IndexLevelTypeInfo) -> bool { (* obj) . should_insert_with_all_null } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevelTypeInfo_get_index_type < > (obj : * const dpp_data_contract_document_type_index_level_IndexLevelTypeInfo) -> * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexType { (* obj) . index_type } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevelTypeInfo_set_should_insert_with_all_null < > (obj : * const dpp_data_contract_document_type_index_level_IndexLevelTypeInfo) -> bool { (* obj) . should_insert_with_all_null } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_index_level_IndexLevelTypeInfo_set_index_type < > (obj : * const dpp_data_contract_document_type_index_level_IndexLevelTypeInfo) -> * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexType { (* obj) . index_type } } pub mod methods { use crate as dash_spv_apple_bindings ; pub mod contested_vote_poll_for_document { use crate as dash_spv_apple_bindings ; } pub mod prefunded_voting_balances_for_document { use crate as dash_spv_apple_bindings ; } # [cfg (feature = "validation")] pub mod validate_update { use crate as dash_spv_apple_bindings ; pub mod v0 { use crate as dash_spv_apple_bindings ; # [cfg (test)] pub mod tests { use crate as dash_spv_apple_bindings ; } } } pub mod max_size { use crate as dash_spv_apple_bindings ; } pub mod create_document_from_data { use crate as dash_spv_apple_bindings ; } pub mod create_document_with_prevalidated_properties { use crate as dash_spv_apple_bindings ; } pub mod serialize_value_for_key { use crate as dash_spv_apple_bindings ; } pub mod estimated_size { use crate as dash_spv_apple_bindings ; } pub mod deserialize_value_for_key { use crate as dash_spv_apple_bindings ; } pub mod index_for_types { use crate as dash_spv_apple_bindings ; } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`DocumentType`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_data_contract_document_type_DocumentType { V0 (* mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: v0 :: dpp_data_contract_document_type_v0_DocumentTypeV0) } impl ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: DocumentType > for dpp_data_contract_document_type_DocumentType { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_DocumentType) -> dpp :: data_contract :: document_type :: DocumentType { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_document_type_DocumentType :: V0 (o_0) => dpp :: data_contract :: document_type :: DocumentType :: V0 (< crate :: fermented :: types :: dpp :: data_contract :: document_type :: v0 :: dpp_data_contract_document_type_v0_DocumentTypeV0 as ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: v0 :: DocumentTypeV0 >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: data_contract :: document_type :: DocumentType > for dpp_data_contract_document_type_DocumentType { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: DocumentType) -> * const dpp_data_contract_document_type_DocumentType { ferment :: boxed (match obj { dpp :: data_contract :: document_type :: DocumentType :: V0 (o_0) => dpp_data_contract_document_type_DocumentType :: V0 (< crate :: fermented :: types :: dpp :: data_contract :: document_type :: v0 :: dpp_data_contract_document_type_v0_DocumentTypeV0 as ferment :: FFIConversionTo < dpp :: data_contract :: document_type :: v0 :: DocumentTypeV0 >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_data_contract_document_type_DocumentType { fn drop (& mut self) { unsafe { match self { dpp_data_contract_document_type_DocumentType :: V0 (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_DocumentType_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: v0 :: dpp_data_contract_document_type_v0_DocumentTypeV0) -> * mut dpp_data_contract_document_type_DocumentType { ferment :: boxed (dpp_data_contract_document_type_DocumentType :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_DocumentType_destroy < > (ffi : * mut dpp_data_contract_document_type_DocumentType) { ferment :: unbox_any (ffi) ; } pub mod property { use crate as dash_spv_apple_bindings ; pub mod array { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`ArrayItemType`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_data_contract_document_type_property_array_ArrayItemType { Integer , Number , String (* mut usize , * mut usize) , ByteArray (* mut usize , * mut usize) , Identifier , Boolean , Date } impl ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: property :: array :: ArrayItemType > for dpp_data_contract_document_type_property_array_ArrayItemType { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_property_array_ArrayItemType) -> dpp :: data_contract :: document_type :: property :: array :: ArrayItemType { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_document_type_property_array_ArrayItemType :: Integer => dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: Integer , dpp_data_contract_document_type_property_array_ArrayItemType :: Number => dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: Number , dpp_data_contract_document_type_property_array_ArrayItemType :: String (o_0 , o_1) => dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: String (ferment :: from_opt_primitive (* o_0) , ferment :: from_opt_primitive (* o_1)) , dpp_data_contract_document_type_property_array_ArrayItemType :: ByteArray (o_0 , o_1) => dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: ByteArray (ferment :: from_opt_primitive (* o_0) , ferment :: from_opt_primitive (* o_1)) , dpp_data_contract_document_type_property_array_ArrayItemType :: Identifier => dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: Identifier , dpp_data_contract_document_type_property_array_ArrayItemType :: Boolean => dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: Boolean , dpp_data_contract_document_type_property_array_ArrayItemType :: Date => dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: Date } } } impl ferment :: FFIConversionTo < dpp :: data_contract :: document_type :: property :: array :: ArrayItemType > for dpp_data_contract_document_type_property_array_ArrayItemType { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: property :: array :: ArrayItemType) -> * const dpp_data_contract_document_type_property_array_ArrayItemType { ferment :: boxed (match obj { dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: Integer => dpp_data_contract_document_type_property_array_ArrayItemType :: Integer , dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: Number => dpp_data_contract_document_type_property_array_ArrayItemType :: Number , dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: String (o_0 , o_1) => dpp_data_contract_document_type_property_array_ArrayItemType :: String (ferment :: to_opt_primitive (o_0) , ferment :: to_opt_primitive (o_1)) , dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: ByteArray (o_0 , o_1) => dpp_data_contract_document_type_property_array_ArrayItemType :: ByteArray (ferment :: to_opt_primitive (o_0) , ferment :: to_opt_primitive (o_1)) , dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: Identifier => dpp_data_contract_document_type_property_array_ArrayItemType :: Identifier , dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: Boolean => dpp_data_contract_document_type_property_array_ArrayItemType :: Boolean , dpp :: data_contract :: document_type :: property :: array :: ArrayItemType :: Date => dpp_data_contract_document_type_property_array_ArrayItemType :: Date , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_data_contract_document_type_property_array_ArrayItemType { fn drop (& mut self) { unsafe { match self { dpp_data_contract_document_type_property_array_ArrayItemType :: Integer => { } , dpp_data_contract_document_type_property_array_ArrayItemType :: Number => { } , dpp_data_contract_document_type_property_array_ArrayItemType :: String (o_0 , o_1) => { ferment :: destroy_opt_primitive (* o_0) ; ; ferment :: destroy_opt_primitive (* o_1) ; } , dpp_data_contract_document_type_property_array_ArrayItemType :: ByteArray (o_0 , o_1) => { ferment :: destroy_opt_primitive (* o_0) ; ; ferment :: destroy_opt_primitive (* o_1) ; } , dpp_data_contract_document_type_property_array_ArrayItemType :: Identifier => { } , dpp_data_contract_document_type_property_array_ArrayItemType :: Boolean => { } , dpp_data_contract_document_type_property_array_ArrayItemType :: Date => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_array_ArrayItemType_Integer_ctor () -> * mut dpp_data_contract_document_type_property_array_ArrayItemType { ferment :: boxed (dpp_data_contract_document_type_property_array_ArrayItemType :: Integer { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_array_ArrayItemType_Number_ctor () -> * mut dpp_data_contract_document_type_property_array_ArrayItemType { ferment :: boxed (dpp_data_contract_document_type_property_array_ArrayItemType :: Number { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_array_ArrayItemType_String_ctor (o_o_0 : * mut usize , o_o_1 : * mut usize) -> * mut dpp_data_contract_document_type_property_array_ArrayItemType { ferment :: boxed (dpp_data_contract_document_type_property_array_ArrayItemType :: String (o_o_0 , o_o_1)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_array_ArrayItemType_ByteArray_ctor (o_o_0 : * mut usize , o_o_1 : * mut usize) -> * mut dpp_data_contract_document_type_property_array_ArrayItemType { ferment :: boxed (dpp_data_contract_document_type_property_array_ArrayItemType :: ByteArray (o_o_0 , o_o_1)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_array_ArrayItemType_Identifier_ctor () -> * mut dpp_data_contract_document_type_property_array_ArrayItemType { ferment :: boxed (dpp_data_contract_document_type_property_array_ArrayItemType :: Identifier { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_array_ArrayItemType_Boolean_ctor () -> * mut dpp_data_contract_document_type_property_array_ArrayItemType { ferment :: boxed (dpp_data_contract_document_type_property_array_ArrayItemType :: Boolean { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_array_ArrayItemType_Date_ctor () -> * mut dpp_data_contract_document_type_property_array_ArrayItemType { ferment :: boxed (dpp_data_contract_document_type_property_array_ArrayItemType :: Date { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_array_ArrayItemType_destroy < > (ffi : * mut dpp_data_contract_document_type_property_array_ArrayItemType) { ferment :: unbox_any (ffi) ; } } # [doc = "FFI-representation of the [`StringPropertySizes`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_document_type_property_StringPropertySizes { pub min_length : * mut u16 , pub max_length : * mut u16 } impl ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: property :: StringPropertySizes > for dpp_data_contract_document_type_property_StringPropertySizes { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_property_StringPropertySizes) -> dpp :: data_contract :: document_type :: property :: StringPropertySizes { let ffi_ref = & * ffi ; dpp :: data_contract :: document_type :: property :: StringPropertySizes { min_length : ferment :: from_opt_primitive (ffi_ref . min_length) , max_length : ferment :: from_opt_primitive (ffi_ref . max_length) } } } impl ferment :: FFIConversionTo < dpp :: data_contract :: document_type :: property :: StringPropertySizes > for dpp_data_contract_document_type_property_StringPropertySizes { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: property :: StringPropertySizes) -> * const dpp_data_contract_document_type_property_StringPropertySizes { ferment :: boxed (dpp_data_contract_document_type_property_StringPropertySizes { min_length : ferment :: to_opt_primitive (obj . min_length) , max_length : ferment :: to_opt_primitive (obj . max_length) }) } } impl Drop for dpp_data_contract_document_type_property_StringPropertySizes { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: destroy_opt_primitive (ffi_ref . min_length) ; ferment :: destroy_opt_primitive (ffi_ref . max_length) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_StringPropertySizes_ctor < > (min_length : * mut u16 , max_length : * mut u16) -> * mut dpp_data_contract_document_type_property_StringPropertySizes { ferment :: boxed (dpp_data_contract_document_type_property_StringPropertySizes { min_length , max_length }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_StringPropertySizes_destroy < > (ffi : * mut dpp_data_contract_document_type_property_StringPropertySizes) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_StringPropertySizes_get_min_length < > (obj : * const dpp_data_contract_document_type_property_StringPropertySizes) -> * mut u16 { (* obj) . min_length } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_StringPropertySizes_get_max_length < > (obj : * const dpp_data_contract_document_type_property_StringPropertySizes) -> * mut u16 { (* obj) . max_length } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_StringPropertySizes_set_min_length < > (obj : * const dpp_data_contract_document_type_property_StringPropertySizes) -> * mut u16 { (* obj) . min_length } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_StringPropertySizes_set_max_length < > (obj : * const dpp_data_contract_document_type_property_StringPropertySizes) -> * mut u16 { (* obj) . max_length } # [doc = "FFI-representation of the [`DocumentProperty`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_document_type_property_DocumentProperty { pub property_type : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: dpp_data_contract_document_type_property_DocumentPropertyType , pub required : bool , pub transient : bool } impl ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: property :: DocumentProperty > for dpp_data_contract_document_type_property_DocumentProperty { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_property_DocumentProperty) -> dpp :: data_contract :: document_type :: property :: DocumentProperty { let ffi_ref = & * ffi ; dpp :: data_contract :: document_type :: property :: DocumentProperty { property_type : < crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: dpp_data_contract_document_type_property_DocumentPropertyType as ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: property :: DocumentPropertyType >> :: ffi_from (ffi_ref . property_type) , required : ffi_ref . required , transient : ffi_ref . transient } } } impl ferment :: FFIConversionTo < dpp :: data_contract :: document_type :: property :: DocumentProperty > for dpp_data_contract_document_type_property_DocumentProperty { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: property :: DocumentProperty) -> * const dpp_data_contract_document_type_property_DocumentProperty { ferment :: boxed (dpp_data_contract_document_type_property_DocumentProperty { property_type : < crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: dpp_data_contract_document_type_property_DocumentPropertyType as ferment :: FFIConversionTo < dpp :: data_contract :: document_type :: property :: DocumentPropertyType >> :: ffi_to (obj . property_type) , required : obj . required , transient : obj . transient }) } } impl Drop for dpp_data_contract_document_type_property_DocumentProperty { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . property_type) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentProperty_ctor < > (property_type : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: dpp_data_contract_document_type_property_DocumentPropertyType , required : bool , transient : bool) -> * mut dpp_data_contract_document_type_property_DocumentProperty { ferment :: boxed (dpp_data_contract_document_type_property_DocumentProperty { property_type , required , transient }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentProperty_destroy < > (ffi : * mut dpp_data_contract_document_type_property_DocumentProperty) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentProperty_get_property_type < > (obj : * const dpp_data_contract_document_type_property_DocumentProperty) -> * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: dpp_data_contract_document_type_property_DocumentPropertyType { (* obj) . property_type } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentProperty_get_required < > (obj : * const dpp_data_contract_document_type_property_DocumentProperty) -> bool { (* obj) . required } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentProperty_get_transient < > (obj : * const dpp_data_contract_document_type_property_DocumentProperty) -> bool { (* obj) . transient } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentProperty_set_property_type < > (obj : * const dpp_data_contract_document_type_property_DocumentProperty) -> * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: dpp_data_contract_document_type_property_DocumentPropertyType { (* obj) . property_type } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentProperty_set_required < > (obj : * const dpp_data_contract_document_type_property_DocumentProperty) -> bool { (* obj) . required } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentProperty_set_transient < > (obj : * const dpp_data_contract_document_type_property_DocumentProperty) -> bool { (* obj) . transient } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`DocumentPropertyType`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_data_contract_document_type_property_DocumentPropertyType { U128 , I128 , U64 , I64 , U32 , I32 , U16 , I16 , U8 , I8 , F64 , String (* mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: dpp_data_contract_document_type_property_StringPropertySizes) , ByteArray (* mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: dpp_data_contract_document_type_property_ByteArrayPropertySizes) , Identifier , Boolean , Date , Object (* mut crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty) , Array (* mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: array :: dpp_data_contract_document_type_property_array_ArrayItemType) , VariableTypeArray (* mut crate :: fermented :: generics :: Vec_dpp_data_contract_document_type_property_array_ArrayItemType) } impl ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: property :: DocumentPropertyType > for dpp_data_contract_document_type_property_DocumentPropertyType { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_property_DocumentPropertyType) -> dpp :: data_contract :: document_type :: property :: DocumentPropertyType { let ffi_ref = & * ffi ; match ffi_ref { dpp_data_contract_document_type_property_DocumentPropertyType :: U128 => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: U128 , dpp_data_contract_document_type_property_DocumentPropertyType :: I128 => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: I128 , dpp_data_contract_document_type_property_DocumentPropertyType :: U64 => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: U64 , dpp_data_contract_document_type_property_DocumentPropertyType :: I64 => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: I64 , dpp_data_contract_document_type_property_DocumentPropertyType :: U32 => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: U32 , dpp_data_contract_document_type_property_DocumentPropertyType :: I32 => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: I32 , dpp_data_contract_document_type_property_DocumentPropertyType :: U16 => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: U16 , dpp_data_contract_document_type_property_DocumentPropertyType :: I16 => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: I16 , dpp_data_contract_document_type_property_DocumentPropertyType :: U8 => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: U8 , dpp_data_contract_document_type_property_DocumentPropertyType :: I8 => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: I8 , dpp_data_contract_document_type_property_DocumentPropertyType :: F64 => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: F64 , dpp_data_contract_document_type_property_DocumentPropertyType :: String (o_0) => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: String (< crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: dpp_data_contract_document_type_property_StringPropertySizes as ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: property :: StringPropertySizes >> :: ffi_from (* o_0)) , dpp_data_contract_document_type_property_DocumentPropertyType :: ByteArray (o_0) => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: ByteArray (< crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: dpp_data_contract_document_type_property_ByteArrayPropertySizes as ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: property :: ByteArrayPropertySizes >> :: ffi_from (* o_0)) , dpp_data_contract_document_type_property_DocumentPropertyType :: Identifier => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Identifier , dpp_data_contract_document_type_property_DocumentPropertyType :: Boolean => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Boolean , dpp_data_contract_document_type_property_DocumentPropertyType :: Date => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Date , dpp_data_contract_document_type_property_DocumentPropertyType :: Object (o_0) => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Object (< crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty as ferment :: FFIConversionFrom < indexmap :: IndexMap < String , dpp :: data_contract :: document_type :: property :: DocumentProperty > >> :: ffi_from (* o_0)) , dpp_data_contract_document_type_property_DocumentPropertyType :: Array (o_0) => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Array (< crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: array :: dpp_data_contract_document_type_property_array_ArrayItemType as ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: property :: array :: ArrayItemType >> :: ffi_from (* o_0)) , dpp_data_contract_document_type_property_DocumentPropertyType :: VariableTypeArray (o_0) => dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: VariableTypeArray (< crate :: fermented :: generics :: Vec_dpp_data_contract_document_type_property_array_ArrayItemType as ferment :: FFIConversionFrom < Vec < dpp :: data_contract :: document_type :: property :: array :: ArrayItemType > >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: data_contract :: document_type :: property :: DocumentPropertyType > for dpp_data_contract_document_type_property_DocumentPropertyType { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: property :: DocumentPropertyType) -> * const dpp_data_contract_document_type_property_DocumentPropertyType { ferment :: boxed (match obj { dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: U128 => dpp_data_contract_document_type_property_DocumentPropertyType :: U128 , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: I128 => dpp_data_contract_document_type_property_DocumentPropertyType :: I128 , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: U64 => dpp_data_contract_document_type_property_DocumentPropertyType :: U64 , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: I64 => dpp_data_contract_document_type_property_DocumentPropertyType :: I64 , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: U32 => dpp_data_contract_document_type_property_DocumentPropertyType :: U32 , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: I32 => dpp_data_contract_document_type_property_DocumentPropertyType :: I32 , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: U16 => dpp_data_contract_document_type_property_DocumentPropertyType :: U16 , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: I16 => dpp_data_contract_document_type_property_DocumentPropertyType :: I16 , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: U8 => dpp_data_contract_document_type_property_DocumentPropertyType :: U8 , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: I8 => dpp_data_contract_document_type_property_DocumentPropertyType :: I8 , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: F64 => dpp_data_contract_document_type_property_DocumentPropertyType :: F64 , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: String (o_0) => dpp_data_contract_document_type_property_DocumentPropertyType :: String (< crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: dpp_data_contract_document_type_property_StringPropertySizes as ferment :: FFIConversionTo < dpp :: data_contract :: document_type :: property :: StringPropertySizes >> :: ffi_to (o_0)) , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: ByteArray (o_0) => dpp_data_contract_document_type_property_DocumentPropertyType :: ByteArray (< crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: dpp_data_contract_document_type_property_ByteArrayPropertySizes as ferment :: FFIConversionTo < dpp :: data_contract :: document_type :: property :: ByteArrayPropertySizes >> :: ffi_to (o_0)) , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Identifier => dpp_data_contract_document_type_property_DocumentPropertyType :: Identifier , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Boolean => dpp_data_contract_document_type_property_DocumentPropertyType :: Boolean , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Date => dpp_data_contract_document_type_property_DocumentPropertyType :: Date , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Object (o_0) => dpp_data_contract_document_type_property_DocumentPropertyType :: Object (< crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty as ferment :: FFIConversionTo < indexmap :: IndexMap < String , dpp :: data_contract :: document_type :: property :: DocumentProperty > >> :: ffi_to (o_0)) , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: Array (o_0) => dpp_data_contract_document_type_property_DocumentPropertyType :: Array (< crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: array :: dpp_data_contract_document_type_property_array_ArrayItemType as ferment :: FFIConversionTo < dpp :: data_contract :: document_type :: property :: array :: ArrayItemType >> :: ffi_to (o_0)) , dpp :: data_contract :: document_type :: property :: DocumentPropertyType :: VariableTypeArray (o_0) => dpp_data_contract_document_type_property_DocumentPropertyType :: VariableTypeArray (< crate :: fermented :: generics :: Vec_dpp_data_contract_document_type_property_array_ArrayItemType as ferment :: FFIConversionTo < Vec < dpp :: data_contract :: document_type :: property :: array :: ArrayItemType > >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_data_contract_document_type_property_DocumentPropertyType { fn drop (& mut self) { unsafe { match self { dpp_data_contract_document_type_property_DocumentPropertyType :: U128 => { } , dpp_data_contract_document_type_property_DocumentPropertyType :: I128 => { } , dpp_data_contract_document_type_property_DocumentPropertyType :: U64 => { } , dpp_data_contract_document_type_property_DocumentPropertyType :: I64 => { } , dpp_data_contract_document_type_property_DocumentPropertyType :: U32 => { } , dpp_data_contract_document_type_property_DocumentPropertyType :: I32 => { } , dpp_data_contract_document_type_property_DocumentPropertyType :: U16 => { } , dpp_data_contract_document_type_property_DocumentPropertyType :: I16 => { } , dpp_data_contract_document_type_property_DocumentPropertyType :: U8 => { } , dpp_data_contract_document_type_property_DocumentPropertyType :: I8 => { } , dpp_data_contract_document_type_property_DocumentPropertyType :: F64 => { } , dpp_data_contract_document_type_property_DocumentPropertyType :: String (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_data_contract_document_type_property_DocumentPropertyType :: ByteArray (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_data_contract_document_type_property_DocumentPropertyType :: Identifier => { } , dpp_data_contract_document_type_property_DocumentPropertyType :: Boolean => { } , dpp_data_contract_document_type_property_DocumentPropertyType :: Date => { } , dpp_data_contract_document_type_property_DocumentPropertyType :: Object (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_data_contract_document_type_property_DocumentPropertyType :: Array (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_data_contract_document_type_property_DocumentPropertyType :: VariableTypeArray (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_U128_ctor () -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: U128 { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_I128_ctor () -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: I128 { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_U64_ctor () -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: U64 { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_I64_ctor () -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: I64 { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_U32_ctor () -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: U32 { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_I32_ctor () -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: I32 { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_U16_ctor () -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: U16 { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_I16_ctor () -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: I16 { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_U8_ctor () -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: U8 { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_I8_ctor () -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: I8 { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_F64_ctor () -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: F64 { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_String_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: dpp_data_contract_document_type_property_StringPropertySizes) -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: String (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_ByteArray_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: dpp_data_contract_document_type_property_ByteArrayPropertySizes) -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: ByteArray (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_Identifier_ctor () -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: Identifier { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_Boolean_ctor () -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: Boolean { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_Date_ctor () -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: Date { }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_Object_ctor (o_o_0 : * mut crate :: fermented :: generics :: indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty) -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: Object (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_Array_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: array :: dpp_data_contract_document_type_property_array_ArrayItemType) -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: Array (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_VariableTypeArray_ctor (o_o_0 : * mut crate :: fermented :: generics :: Vec_dpp_data_contract_document_type_property_array_ArrayItemType) -> * mut dpp_data_contract_document_type_property_DocumentPropertyType { ferment :: boxed (dpp_data_contract_document_type_property_DocumentPropertyType :: VariableTypeArray (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_DocumentPropertyType_destroy < > (ffi : * mut dpp_data_contract_document_type_property_DocumentPropertyType) { ferment :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`ByteArrayPropertySizes`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_data_contract_document_type_property_ByteArrayPropertySizes { pub min_size : * mut u16 , pub max_size : * mut u16 } impl ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: property :: ByteArrayPropertySizes > for dpp_data_contract_document_type_property_ByteArrayPropertySizes { unsafe fn ffi_from_const (ffi : * const dpp_data_contract_document_type_property_ByteArrayPropertySizes) -> dpp :: data_contract :: document_type :: property :: ByteArrayPropertySizes { let ffi_ref = & * ffi ; dpp :: data_contract :: document_type :: property :: ByteArrayPropertySizes { min_size : ferment :: from_opt_primitive (ffi_ref . min_size) , max_size : ferment :: from_opt_primitive (ffi_ref . max_size) } } } impl ferment :: FFIConversionTo < dpp :: data_contract :: document_type :: property :: ByteArrayPropertySizes > for dpp_data_contract_document_type_property_ByteArrayPropertySizes { unsafe fn ffi_to_const (obj : dpp :: data_contract :: document_type :: property :: ByteArrayPropertySizes) -> * const dpp_data_contract_document_type_property_ByteArrayPropertySizes { ferment :: boxed (dpp_data_contract_document_type_property_ByteArrayPropertySizes { min_size : ferment :: to_opt_primitive (obj . min_size) , max_size : ferment :: to_opt_primitive (obj . max_size) }) } } impl Drop for dpp_data_contract_document_type_property_ByteArrayPropertySizes { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: destroy_opt_primitive (ffi_ref . min_size) ; ferment :: destroy_opt_primitive (ffi_ref . max_size) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_ByteArrayPropertySizes_ctor < > (min_size : * mut u16 , max_size : * mut u16) -> * mut dpp_data_contract_document_type_property_ByteArrayPropertySizes { ferment :: boxed (dpp_data_contract_document_type_property_ByteArrayPropertySizes { min_size , max_size }) } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_ByteArrayPropertySizes_destroy < > (ffi : * mut dpp_data_contract_document_type_property_ByteArrayPropertySizes) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_ByteArrayPropertySizes_get_min_size < > (obj : * const dpp_data_contract_document_type_property_ByteArrayPropertySizes) -> * mut u16 { (* obj) . min_size } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_ByteArrayPropertySizes_get_max_size < > (obj : * const dpp_data_contract_document_type_property_ByteArrayPropertySizes) -> * mut u16 { (* obj) . max_size } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_ByteArrayPropertySizes_set_min_size < > (obj : * const dpp_data_contract_document_type_property_ByteArrayPropertySizes) -> * mut u16 { (* obj) . min_size } # [no_mangle] pub unsafe extern "C" fn dpp_data_contract_document_type_property_ByteArrayPropertySizes_set_max_size < > (obj : * const dpp_data_contract_document_type_property_ByteArrayPropertySizes) -> * mut u16 { (* obj) . max_size } } } } pub mod prelude { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`TimestampIncluded`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_prelude_TimestampIncluded (bool) ; impl ferment :: FFIConversionFrom < dpp :: prelude :: TimestampIncluded > for dpp_prelude_TimestampIncluded { unsafe fn ffi_from_const (ffi : * const dpp_prelude_TimestampIncluded) -> dpp :: prelude :: TimestampIncluded { let ffi_ref = & * ffi ; ffi_ref . 0 } } impl ferment :: FFIConversionTo < dpp :: prelude :: TimestampIncluded > for dpp_prelude_TimestampIncluded { unsafe fn ffi_to_const (obj : dpp :: prelude :: TimestampIncluded) -> * const dpp_prelude_TimestampIncluded { ferment :: boxed (dpp_prelude_TimestampIncluded (obj)) } } impl Drop for dpp_prelude_TimestampIncluded { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_TimestampIncluded_ctor < > (o_0 : bool) -> * mut dpp_prelude_TimestampIncluded { ferment :: boxed (dpp_prelude_TimestampIncluded (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_TimestampIncluded_destroy < > (ffi : * mut dpp_prelude_TimestampIncluded) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_TimestampIncluded_get_0 < > (obj : * const dpp_prelude_TimestampIncluded) -> bool { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_TimestampIncluded_set_0 < > (obj : * const dpp_prelude_TimestampIncluded) -> bool { (* obj) . 0 } # [doc = "FFI-representation of the [`Revision`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_prelude_Revision (u64) ; impl ferment :: FFIConversionFrom < dpp :: prelude :: Revision > for dpp_prelude_Revision { unsafe fn ffi_from_const (ffi : * const dpp_prelude_Revision) -> dpp :: prelude :: Revision { let ffi_ref = & * ffi ; ffi_ref . 0 } } impl ferment :: FFIConversionTo < dpp :: prelude :: Revision > for dpp_prelude_Revision { unsafe fn ffi_to_const (obj : dpp :: prelude :: Revision) -> * const dpp_prelude_Revision { ferment :: boxed (dpp_prelude_Revision (obj)) } } impl Drop for dpp_prelude_Revision { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_Revision_ctor < > (o_0 : u64) -> * mut dpp_prelude_Revision { ferment :: boxed (dpp_prelude_Revision (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_Revision_destroy < > (ffi : * mut dpp_prelude_Revision) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_Revision_get_0 < > (obj : * const dpp_prelude_Revision) -> u64 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_Revision_set_0 < > (obj : * const dpp_prelude_Revision) -> u64 { (* obj) . 0 } # [doc = "FFI-representation of the [`CoreBlockHeight`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_prelude_CoreBlockHeight (u32) ; impl ferment :: FFIConversionFrom < dpp :: prelude :: CoreBlockHeight > for dpp_prelude_CoreBlockHeight { unsafe fn ffi_from_const (ffi : * const dpp_prelude_CoreBlockHeight) -> dpp :: prelude :: CoreBlockHeight { let ffi_ref = & * ffi ; ffi_ref . 0 } } impl ferment :: FFIConversionTo < dpp :: prelude :: CoreBlockHeight > for dpp_prelude_CoreBlockHeight { unsafe fn ffi_to_const (obj : dpp :: prelude :: CoreBlockHeight) -> * const dpp_prelude_CoreBlockHeight { ferment :: boxed (dpp_prelude_CoreBlockHeight (obj)) } } impl Drop for dpp_prelude_CoreBlockHeight { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_CoreBlockHeight_ctor < > (o_0 : u32) -> * mut dpp_prelude_CoreBlockHeight { ferment :: boxed (dpp_prelude_CoreBlockHeight (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_CoreBlockHeight_destroy < > (ffi : * mut dpp_prelude_CoreBlockHeight) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_CoreBlockHeight_get_0 < > (obj : * const dpp_prelude_CoreBlockHeight) -> u32 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_CoreBlockHeight_set_0 < > (obj : * const dpp_prelude_CoreBlockHeight) -> u32 { (* obj) . 0 } # [doc = "FFI-representation of the [`IdentityNonce`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_prelude_IdentityNonce (u64) ; impl ferment :: FFIConversionFrom < dpp :: prelude :: IdentityNonce > for dpp_prelude_IdentityNonce { unsafe fn ffi_from_const (ffi : * const dpp_prelude_IdentityNonce) -> dpp :: prelude :: IdentityNonce { let ffi_ref = & * ffi ; ffi_ref . 0 } } impl ferment :: FFIConversionTo < dpp :: prelude :: IdentityNonce > for dpp_prelude_IdentityNonce { unsafe fn ffi_to_const (obj : dpp :: prelude :: IdentityNonce) -> * const dpp_prelude_IdentityNonce { ferment :: boxed (dpp_prelude_IdentityNonce (obj)) } } impl Drop for dpp_prelude_IdentityNonce { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_IdentityNonce_ctor < > (o_0 : u64) -> * mut dpp_prelude_IdentityNonce { ferment :: boxed (dpp_prelude_IdentityNonce (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_IdentityNonce_destroy < > (ffi : * mut dpp_prelude_IdentityNonce) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_IdentityNonce_get_0 < > (obj : * const dpp_prelude_IdentityNonce) -> u64 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_IdentityNonce_set_0 < > (obj : * const dpp_prelude_IdentityNonce) -> u64 { (* obj) . 0 } # [doc = "FFI-representation of the [`TimestampMillis`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_prelude_TimestampMillis (u64) ; impl ferment :: FFIConversionFrom < dpp :: prelude :: TimestampMillis > for dpp_prelude_TimestampMillis { unsafe fn ffi_from_const (ffi : * const dpp_prelude_TimestampMillis) -> dpp :: prelude :: TimestampMillis { let ffi_ref = & * ffi ; ffi_ref . 0 } } impl ferment :: FFIConversionTo < dpp :: prelude :: TimestampMillis > for dpp_prelude_TimestampMillis { unsafe fn ffi_to_const (obj : dpp :: prelude :: TimestampMillis) -> * const dpp_prelude_TimestampMillis { ferment :: boxed (dpp_prelude_TimestampMillis (obj)) } } impl Drop for dpp_prelude_TimestampMillis { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_TimestampMillis_ctor < > (o_0 : u64) -> * mut dpp_prelude_TimestampMillis { ferment :: boxed (dpp_prelude_TimestampMillis (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_TimestampMillis_destroy < > (ffi : * mut dpp_prelude_TimestampMillis) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_TimestampMillis_get_0 < > (obj : * const dpp_prelude_TimestampMillis) -> u64 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_TimestampMillis_set_0 < > (obj : * const dpp_prelude_TimestampMillis) -> u64 { (* obj) . 0 } # [doc = "FFI-representation of the [`UserFeeIncrease`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_prelude_UserFeeIncrease (u16) ; impl ferment :: FFIConversionFrom < dpp :: prelude :: UserFeeIncrease > for dpp_prelude_UserFeeIncrease { unsafe fn ffi_from_const (ffi : * const dpp_prelude_UserFeeIncrease) -> dpp :: prelude :: UserFeeIncrease { let ffi_ref = & * ffi ; ffi_ref . 0 } } impl ferment :: FFIConversionTo < dpp :: prelude :: UserFeeIncrease > for dpp_prelude_UserFeeIncrease { unsafe fn ffi_to_const (obj : dpp :: prelude :: UserFeeIncrease) -> * const dpp_prelude_UserFeeIncrease { ferment :: boxed (dpp_prelude_UserFeeIncrease (obj)) } } impl Drop for dpp_prelude_UserFeeIncrease { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_UserFeeIncrease_ctor < > (o_0 : u16) -> * mut dpp_prelude_UserFeeIncrease { ferment :: boxed (dpp_prelude_UserFeeIncrease (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_UserFeeIncrease_destroy < > (ffi : * mut dpp_prelude_UserFeeIncrease) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_UserFeeIncrease_get_0 < > (obj : * const dpp_prelude_UserFeeIncrease) -> u16 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_UserFeeIncrease_set_0 < > (obj : * const dpp_prelude_UserFeeIncrease) -> u16 { (* obj) . 0 } # [doc = "FFI-representation of the [`BlockHeight`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_prelude_BlockHeight (u64) ; impl ferment :: FFIConversionFrom < dpp :: prelude :: BlockHeight > for dpp_prelude_BlockHeight { unsafe fn ffi_from_const (ffi : * const dpp_prelude_BlockHeight) -> dpp :: prelude :: BlockHeight { let ffi_ref = & * ffi ; ffi_ref . 0 } } impl ferment :: FFIConversionTo < dpp :: prelude :: BlockHeight > for dpp_prelude_BlockHeight { unsafe fn ffi_to_const (obj : dpp :: prelude :: BlockHeight) -> * const dpp_prelude_BlockHeight { ferment :: boxed (dpp_prelude_BlockHeight (obj)) } } impl Drop for dpp_prelude_BlockHeight { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_BlockHeight_ctor < > (o_0 : u64) -> * mut dpp_prelude_BlockHeight { ferment :: boxed (dpp_prelude_BlockHeight (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_BlockHeight_destroy < > (ffi : * mut dpp_prelude_BlockHeight) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_BlockHeight_get_0 < > (obj : * const dpp_prelude_BlockHeight) -> u64 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_prelude_BlockHeight_set_0 < > (obj : * const dpp_prelude_BlockHeight) -> u64 { (* obj) . 0 } } pub mod voting { use crate as dash_spv_apple_bindings ; pub mod vote_polls { use crate as dash_spv_apple_bindings ; pub mod contested_document_resource_vote_poll { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`ContestedDocumentResourceVotePoll`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll { pub contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub document_type_name : * mut std :: os :: raw :: c_char , pub index_name : * mut std :: os :: raw :: c_char , pub index_values : * mut crate :: fermented :: generics :: Vec_platform_value_Value } impl ferment :: FFIConversionFrom < dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: ContestedDocumentResourceVotePoll > for dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll { unsafe fn ffi_from_const (ffi : * const dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll) -> dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: ContestedDocumentResourceVotePoll { let ffi_ref = & * ffi ; dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: ContestedDocumentResourceVotePoll { contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . contract_id) , document_type_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . document_type_name) , index_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . index_name) , index_values : < crate :: fermented :: generics :: Vec_platform_value_Value as ferment :: FFIConversionFrom < Vec < platform_value :: Value > >> :: ffi_from (ffi_ref . index_values) } } } impl ferment :: FFIConversionTo < dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: ContestedDocumentResourceVotePoll > for dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll { unsafe fn ffi_to_const (obj : dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: ContestedDocumentResourceVotePoll) -> * const dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll { ferment :: boxed (dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll { contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . contract_id) , document_type_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . document_type_name) , index_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . index_name) , index_values : < crate :: fermented :: generics :: Vec_platform_value_Value as ferment :: FFIConversionTo < Vec < platform_value :: Value > >> :: ffi_to (obj . index_values) }) } } impl Drop for dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . contract_id) ; ferment :: unbox_string (ffi_ref . document_type_name) ; ferment :: unbox_string (ffi_ref . index_name) ; ferment :: unbox_any (ffi_ref . index_values) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll_ctor < > (contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_type_name : * mut std :: os :: raw :: c_char , index_name : * mut std :: os :: raw :: c_char , index_values : * mut crate :: fermented :: generics :: Vec_platform_value_Value) -> * mut dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll { ferment :: boxed (dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll { contract_id , document_type_name , index_name , index_values }) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll_destroy < > (ffi : * mut dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll_get_contract_id < > (obj : * const dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll_get_document_type_name < > (obj : * const dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll) -> * mut std :: os :: raw :: c_char { (* obj) . document_type_name } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll_get_index_name < > (obj : * const dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll_get_index_values < > (obj : * const dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll) -> * mut crate :: fermented :: generics :: Vec_platform_value_Value { (* obj) . index_values } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll_set_contract_id < > (obj : * const dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll_set_document_type_name < > (obj : * const dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll) -> * mut std :: os :: raw :: c_char { (* obj) . document_type_name } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll_set_index_name < > (obj : * const dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll_set_index_values < > (obj : * const dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll) -> * mut crate :: fermented :: generics :: Vec_platform_value_Value { (* obj) . index_values } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`VotePoll`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_voting_vote_polls_VotePoll { ContestedDocumentResourceVotePoll (* mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll) } impl ferment :: FFIConversionFrom < dpp :: voting :: vote_polls :: VotePoll > for dpp_voting_vote_polls_VotePoll { unsafe fn ffi_from_const (ffi : * const dpp_voting_vote_polls_VotePoll) -> dpp :: voting :: vote_polls :: VotePoll { let ffi_ref = & * ffi ; match ffi_ref { dpp_voting_vote_polls_VotePoll :: ContestedDocumentResourceVotePoll (o_0) => dpp :: voting :: vote_polls :: VotePoll :: ContestedDocumentResourceVotePoll (< crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll as ferment :: FFIConversionFrom < dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: ContestedDocumentResourceVotePoll >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: voting :: vote_polls :: VotePoll > for dpp_voting_vote_polls_VotePoll { unsafe fn ffi_to_const (obj : dpp :: voting :: vote_polls :: VotePoll) -> * const dpp_voting_vote_polls_VotePoll { ferment :: boxed (match obj { dpp :: voting :: vote_polls :: VotePoll :: ContestedDocumentResourceVotePoll (o_0) => dpp_voting_vote_polls_VotePoll :: ContestedDocumentResourceVotePoll (< crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll as ferment :: FFIConversionTo < dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: ContestedDocumentResourceVotePoll >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_voting_vote_polls_VotePoll { fn drop (& mut self) { unsafe { match self { dpp_voting_vote_polls_VotePoll :: ContestedDocumentResourceVotePoll (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_polls_VotePoll_ContestedDocumentResourceVotePoll_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll) -> * mut dpp_voting_vote_polls_VotePoll { ferment :: boxed (dpp_voting_vote_polls_VotePoll :: ContestedDocumentResourceVotePoll (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_polls_VotePoll_destroy < > (ffi : * mut dpp_voting_vote_polls_VotePoll) { ferment :: unbox_any (ffi) ; } } pub mod vote_info_storage { use crate as dash_spv_apple_bindings ; pub mod contested_document_vote_poll_stored_info { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`ContestedDocumentVotePollStatus`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus { NotStarted , Awarded (* mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) , Locked , Started (* mut crate :: fermented :: types :: dpp :: block :: block_info :: dpp_block_block_info_BlockInfo) } impl ferment :: FFIConversionFrom < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStatus > for dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus { unsafe fn ffi_from_const (ffi : * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus) -> dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStatus { let ffi_ref = & * ffi ; match ffi_ref { dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus :: NotStarted => dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStatus :: NotStarted , dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus :: Awarded (o_0) => dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStatus :: Awarded (< crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (* o_0)) , dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus :: Locked => dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStatus :: Locked , dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus :: Started (o_0) => dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStatus :: Started (< crate :: fermented :: types :: dpp :: block :: block_info :: dpp_block_block_info_BlockInfo as ferment :: FFIConversionFrom < dpp :: block :: block_info :: BlockInfo >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStatus > for dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus { unsafe fn ffi_to_const (obj : dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStatus) -> * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus { ferment :: boxed (match obj { dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStatus :: NotStarted => dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus :: NotStarted , dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStatus :: Awarded (o_0) => dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus :: Awarded (< crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (o_0)) , dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStatus :: Locked => dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus :: Locked , dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStatus :: Started (o_0) => dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus :: Started (< crate :: fermented :: types :: dpp :: block :: block_info :: dpp_block_block_info_BlockInfo as ferment :: FFIConversionTo < dpp :: block :: block_info :: BlockInfo >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus { fn drop (& mut self) { unsafe { match self { dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus :: NotStarted => { } , dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus :: Awarded (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus :: Locked => { } , dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus :: Started (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus_NotStarted_ctor () -> * mut dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus { ferment :: boxed (dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus :: NotStarted { }) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus_Awarded_ctor (o_o_0 : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus { ferment :: boxed (dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus :: Awarded (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus_Locked_ctor () -> * mut dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus { ferment :: boxed (dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus :: Locked { }) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus_Started_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: block :: block_info :: dpp_block_block_info_BlockInfo) -> * mut dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus { ferment :: boxed (dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus :: Started (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus_destroy < > (ffi : * mut dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus) { ferment :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`ContestedDocumentVotePollStoredInfo`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo { V0 (* mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0) } impl ferment :: FFIConversionFrom < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStoredInfo > for dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo { unsafe fn ffi_from_const (ffi : * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo) -> dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStoredInfo { let ffi_ref = & * ffi ; match ffi_ref { dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo :: V0 (o_0) => dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStoredInfo :: V0 (< crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0 as ferment :: FFIConversionFrom < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoV0 >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStoredInfo > for dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo { unsafe fn ffi_to_const (obj : dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStoredInfo) -> * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo { ferment :: boxed (match obj { dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStoredInfo :: V0 (o_0) => dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo :: V0 (< crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0 as ferment :: FFIConversionTo < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoV0 >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo { fn drop (& mut self) { unsafe { match self { dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo :: V0 (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0) -> * mut dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo { ferment :: boxed (dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo_destroy < > (ffi : * mut dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo) { ferment :: unbox_any (ffi) ; } pub mod v0 { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`ContestedDocumentVotePollStoredInfoVoteEventV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { pub resource_vote_choices : * mut crate :: fermented :: generics :: Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo , pub start_block : * mut crate :: fermented :: types :: dpp :: block :: block_info :: dpp_block_block_info_BlockInfo , pub finalization_block : * mut crate :: fermented :: types :: dpp :: block :: block_info :: dpp_block_block_info_BlockInfo , pub winner : * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo } impl ferment :: FFIConversionFrom < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoVoteEventV0 > for dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { unsafe fn ffi_from_const (ffi : * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0) -> dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoVoteEventV0 { let ffi_ref = & * ffi ; dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoVoteEventV0 { resource_vote_choices : < crate :: fermented :: generics :: Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo as ferment :: FFIConversionFrom < Vec < dpp :: voting :: contender_structs :: FinalizedResourceVoteChoicesWithVoterInfo > >> :: ffi_from (ffi_ref . resource_vote_choices) , start_block : < crate :: fermented :: types :: dpp :: block :: block_info :: dpp_block_block_info_BlockInfo as ferment :: FFIConversionFrom < dpp :: block :: block_info :: BlockInfo >> :: ffi_from (ffi_ref . start_block) , finalization_block : < crate :: fermented :: types :: dpp :: block :: block_info :: dpp_block_block_info_BlockInfo as ferment :: FFIConversionFrom < dpp :: block :: block_info :: BlockInfo >> :: ffi_from (ffi_ref . finalization_block) , winner : < crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo as ferment :: FFIConversionFrom < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: ContestedDocumentVotePollWinnerInfo >> :: ffi_from (ffi_ref . winner) } } } impl ferment :: FFIConversionTo < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoVoteEventV0 > for dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { unsafe fn ffi_to_const (obj : dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoVoteEventV0) -> * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { ferment :: boxed (dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { resource_vote_choices : < crate :: fermented :: generics :: Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo as ferment :: FFIConversionTo < Vec < dpp :: voting :: contender_structs :: FinalizedResourceVoteChoicesWithVoterInfo > >> :: ffi_to (obj . resource_vote_choices) , start_block : < crate :: fermented :: types :: dpp :: block :: block_info :: dpp_block_block_info_BlockInfo as ferment :: FFIConversionTo < dpp :: block :: block_info :: BlockInfo >> :: ffi_to (obj . start_block) , finalization_block : < crate :: fermented :: types :: dpp :: block :: block_info :: dpp_block_block_info_BlockInfo as ferment :: FFIConversionTo < dpp :: block :: block_info :: BlockInfo >> :: ffi_to (obj . finalization_block) , winner : < crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo as ferment :: FFIConversionTo < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: ContestedDocumentVotePollWinnerInfo >> :: ffi_to (obj . winner) }) } } impl Drop for dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . resource_vote_choices) ; ferment :: unbox_any (ffi_ref . start_block) ; ferment :: unbox_any (ffi_ref . finalization_block) ; ferment :: unbox_any (ffi_ref . winner) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0_ctor < > (resource_vote_choices : * mut crate :: fermented :: generics :: Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo , start_block : * mut crate :: fermented :: types :: dpp :: block :: block_info :: dpp_block_block_info_BlockInfo , finalization_block : * mut crate :: fermented :: types :: dpp :: block :: block_info :: dpp_block_block_info_BlockInfo , winner : * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo) -> * mut dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { ferment :: boxed (dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { resource_vote_choices , start_block , finalization_block , winner }) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0_destroy < > (ffi : * mut dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0_get_resource_vote_choices < > (obj : * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0) -> * mut crate :: fermented :: generics :: Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { (* obj) . resource_vote_choices } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0_get_start_block < > (obj : * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0) -> * mut crate :: fermented :: types :: dpp :: block :: block_info :: dpp_block_block_info_BlockInfo { (* obj) . start_block } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0_get_finalization_block < > (obj : * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0) -> * mut crate :: fermented :: types :: dpp :: block :: block_info :: dpp_block_block_info_BlockInfo { (* obj) . finalization_block } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0_get_winner < > (obj : * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo { (* obj) . winner } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0_set_resource_vote_choices < > (obj : * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0) -> * mut crate :: fermented :: generics :: Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { (* obj) . resource_vote_choices } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0_set_start_block < > (obj : * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0) -> * mut crate :: fermented :: types :: dpp :: block :: block_info :: dpp_block_block_info_BlockInfo { (* obj) . start_block } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0_set_finalization_block < > (obj : * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0) -> * mut crate :: fermented :: types :: dpp :: block :: block_info :: dpp_block_block_info_BlockInfo { (* obj) . finalization_block } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0_set_winner < > (obj : * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo { (* obj) . winner } # [doc = "FFI-representation of the [`ContestedDocumentVotePollStoredInfoV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0 { pub finalized_events : * mut crate :: fermented :: generics :: Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 , pub vote_poll_status : * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus , pub locked_count : u16 } impl ferment :: FFIConversionFrom < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoV0 > for dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0 { unsafe fn ffi_from_const (ffi : * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0) -> dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoV0 { let ffi_ref = & * ffi ; dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoV0 { finalized_events : < crate :: fermented :: generics :: Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 as ferment :: FFIConversionFrom < Vec < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoVoteEventV0 > >> :: ffi_from (ffi_ref . finalized_events) , vote_poll_status : < crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus as ferment :: FFIConversionFrom < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStatus >> :: ffi_from (ffi_ref . vote_poll_status) , locked_count : ffi_ref . locked_count } } } impl ferment :: FFIConversionTo < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoV0 > for dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0 { unsafe fn ffi_to_const (obj : dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoV0) -> * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0 { ferment :: boxed (dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0 { finalized_events : < crate :: fermented :: generics :: Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 as ferment :: FFIConversionTo < Vec < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoVoteEventV0 > >> :: ffi_to (obj . finalized_events) , vote_poll_status : < crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus as ferment :: FFIConversionTo < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStatus >> :: ffi_to (obj . vote_poll_status) , locked_count : obj . locked_count }) } } impl Drop for dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . finalized_events) ; ferment :: unbox_any (ffi_ref . vote_poll_status) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0_ctor < > (finalized_events : * mut crate :: fermented :: generics :: Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 , vote_poll_status : * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus , locked_count : u16) -> * mut dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0 { ferment :: boxed (dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0 { finalized_events , vote_poll_status , locked_count }) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0_destroy < > (ffi : * mut dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0_get_finalized_events < > (obj : * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0) -> * mut crate :: fermented :: generics :: Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { (* obj) . finalized_events } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0_get_vote_poll_status < > (obj : * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus { (* obj) . vote_poll_status } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0_get_locked_count < > (obj : * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0) -> u16 { (* obj) . locked_count } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0_set_finalized_events < > (obj : * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0) -> * mut crate :: fermented :: generics :: Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { (* obj) . finalized_events } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0_set_vote_poll_status < > (obj : * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus { (* obj) . vote_poll_status } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0_set_locked_count < > (obj : * const dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoV0) -> u16 { (* obj) . locked_count } } } pub mod contested_document_vote_poll_winner_info { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`ContestedDocumentVotePollWinnerInfo`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo { NoWinner , WonByIdentity (* mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) , Locked } impl ferment :: FFIConversionFrom < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: ContestedDocumentVotePollWinnerInfo > for dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo { unsafe fn ffi_from_const (ffi : * const dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo) -> dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: ContestedDocumentVotePollWinnerInfo { let ffi_ref = & * ffi ; match ffi_ref { dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo :: NoWinner => dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: ContestedDocumentVotePollWinnerInfo :: NoWinner , dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo :: WonByIdentity (o_0) => dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: ContestedDocumentVotePollWinnerInfo :: WonByIdentity (< crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (* o_0)) , dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo :: Locked => dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: ContestedDocumentVotePollWinnerInfo :: Locked } } } impl ferment :: FFIConversionTo < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: ContestedDocumentVotePollWinnerInfo > for dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo { unsafe fn ffi_to_const (obj : dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: ContestedDocumentVotePollWinnerInfo) -> * const dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo { ferment :: boxed (match obj { dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: ContestedDocumentVotePollWinnerInfo :: NoWinner => dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo :: NoWinner , dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: ContestedDocumentVotePollWinnerInfo :: WonByIdentity (o_0) => dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo :: WonByIdentity (< crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (o_0)) , dpp :: voting :: vote_info_storage :: contested_document_vote_poll_winner_info :: ContestedDocumentVotePollWinnerInfo :: Locked => dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo :: Locked , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo { fn drop (& mut self) { unsafe { match self { dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo :: NoWinner => { } , dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo :: WonByIdentity (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo :: Locked => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo_NoWinner_ctor () -> * mut dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo { ferment :: boxed (dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo :: NoWinner { }) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo_WonByIdentity_ctor (o_o_0 : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo { ferment :: boxed (dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo :: WonByIdentity (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo_Locked_ctor () -> * mut dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo { ferment :: boxed (dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo :: Locked { }) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo_destroy < > (ffi : * mut dpp_voting_vote_info_storage_contested_document_vote_poll_winner_info_ContestedDocumentVotePollWinnerInfo) { ferment :: unbox_any (ffi) ; } } } pub mod vote_choices { use crate as dash_spv_apple_bindings ; pub mod resource_vote_choice { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`ResourceVoteChoice`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice { TowardsIdentity (* mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) , Abstain , Lock } impl ferment :: FFIConversionFrom < dpp :: voting :: vote_choices :: resource_vote_choice :: ResourceVoteChoice > for dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice { unsafe fn ffi_from_const (ffi : * const dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice) -> dpp :: voting :: vote_choices :: resource_vote_choice :: ResourceVoteChoice { let ffi_ref = & * ffi ; match ffi_ref { dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice :: TowardsIdentity (o_0) => dpp :: voting :: vote_choices :: resource_vote_choice :: ResourceVoteChoice :: TowardsIdentity (< crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (* o_0)) , dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice :: Abstain => dpp :: voting :: vote_choices :: resource_vote_choice :: ResourceVoteChoice :: Abstain , dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice :: Lock => dpp :: voting :: vote_choices :: resource_vote_choice :: ResourceVoteChoice :: Lock } } } impl ferment :: FFIConversionTo < dpp :: voting :: vote_choices :: resource_vote_choice :: ResourceVoteChoice > for dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice { unsafe fn ffi_to_const (obj : dpp :: voting :: vote_choices :: resource_vote_choice :: ResourceVoteChoice) -> * const dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice { ferment :: boxed (match obj { dpp :: voting :: vote_choices :: resource_vote_choice :: ResourceVoteChoice :: TowardsIdentity (o_0) => dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice :: TowardsIdentity (< crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (o_0)) , dpp :: voting :: vote_choices :: resource_vote_choice :: ResourceVoteChoice :: Abstain => dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice :: Abstain , dpp :: voting :: vote_choices :: resource_vote_choice :: ResourceVoteChoice :: Lock => dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice :: Lock , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice { fn drop (& mut self) { unsafe { match self { dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice :: TowardsIdentity (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice :: Abstain => { } , dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice :: Lock => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice_TowardsIdentity_ctor (o_o_0 : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice { ferment :: boxed (dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice :: TowardsIdentity (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice_Abstain_ctor () -> * mut dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice { ferment :: boxed (dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice :: Abstain { }) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice_Lock_ctor () -> * mut dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice { ferment :: boxed (dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice :: Lock { }) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice_destroy < > (ffi : * mut dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice) { ferment :: unbox_any (ffi) ; } } } pub mod contender_structs { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`FinalizedResourceVoteChoicesWithVoterInfo`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { pub resource_vote_choice : * mut crate :: fermented :: types :: dpp :: voting :: vote_choices :: resource_vote_choice :: dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice , pub voters : * mut crate :: fermented :: generics :: Vec_Tuple_platform_value_types_identifier_Identifier_u8 } impl ferment :: FFIConversionFrom < dpp :: voting :: contender_structs :: FinalizedResourceVoteChoicesWithVoterInfo > for dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { unsafe fn ffi_from_const (ffi : * const dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo) -> dpp :: voting :: contender_structs :: FinalizedResourceVoteChoicesWithVoterInfo { let ffi_ref = & * ffi ; dpp :: voting :: contender_structs :: FinalizedResourceVoteChoicesWithVoterInfo { resource_vote_choice : < crate :: fermented :: types :: dpp :: voting :: vote_choices :: resource_vote_choice :: dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice as ferment :: FFIConversionFrom < dpp :: voting :: vote_choices :: resource_vote_choice :: ResourceVoteChoice >> :: ffi_from (ffi_ref . resource_vote_choice) , voters : < crate :: fermented :: generics :: Vec_Tuple_platform_value_types_identifier_Identifier_u8 as ferment :: FFIConversionFrom < Vec < (platform_value :: types :: identifier :: Identifier , u8) > >> :: ffi_from (ffi_ref . voters) } } } impl ferment :: FFIConversionTo < dpp :: voting :: contender_structs :: FinalizedResourceVoteChoicesWithVoterInfo > for dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { unsafe fn ffi_to_const (obj : dpp :: voting :: contender_structs :: FinalizedResourceVoteChoicesWithVoterInfo) -> * const dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { ferment :: boxed (dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { resource_vote_choice : < crate :: fermented :: types :: dpp :: voting :: vote_choices :: resource_vote_choice :: dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice as ferment :: FFIConversionTo < dpp :: voting :: vote_choices :: resource_vote_choice :: ResourceVoteChoice >> :: ffi_to (obj . resource_vote_choice) , voters : < crate :: fermented :: generics :: Vec_Tuple_platform_value_types_identifier_Identifier_u8 as ferment :: FFIConversionTo < Vec < (platform_value :: types :: identifier :: Identifier , u8) > >> :: ffi_to (obj . voters) }) } } impl Drop for dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . resource_vote_choice) ; ferment :: unbox_any (ffi_ref . voters) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo_ctor < > (resource_vote_choice : * mut crate :: fermented :: types :: dpp :: voting :: vote_choices :: resource_vote_choice :: dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice , voters : * mut crate :: fermented :: generics :: Vec_Tuple_platform_value_types_identifier_Identifier_u8) -> * mut dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { ferment :: boxed (dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { resource_vote_choice , voters }) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo_destroy < > (ffi : * mut dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo_get_resource_vote_choice < > (obj : * const dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_choices :: resource_vote_choice :: dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice { (* obj) . resource_vote_choice } # [no_mangle] pub unsafe extern "C" fn dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo_get_voters < > (obj : * const dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo) -> * mut crate :: fermented :: generics :: Vec_Tuple_platform_value_types_identifier_Identifier_u8 { (* obj) . voters } # [no_mangle] pub unsafe extern "C" fn dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo_set_resource_vote_choice < > (obj : * const dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_choices :: resource_vote_choice :: dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice { (* obj) . resource_vote_choice } # [no_mangle] pub unsafe extern "C" fn dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo_set_voters < > (obj : * const dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo) -> * mut crate :: fermented :: generics :: Vec_Tuple_platform_value_types_identifier_Identifier_u8 { (* obj) . voters } pub mod contender { use crate as dash_spv_apple_bindings ; } } pub mod votes { use crate as dash_spv_apple_bindings ; pub mod resource_vote { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`ResourceVote`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_voting_votes_resource_vote_ResourceVote { V0 (* mut crate :: fermented :: types :: dpp :: voting :: votes :: resource_vote :: v0 :: dpp_voting_votes_resource_vote_v0_ResourceVoteV0) } impl ferment :: FFIConversionFrom < dpp :: voting :: votes :: resource_vote :: ResourceVote > for dpp_voting_votes_resource_vote_ResourceVote { unsafe fn ffi_from_const (ffi : * const dpp_voting_votes_resource_vote_ResourceVote) -> dpp :: voting :: votes :: resource_vote :: ResourceVote { let ffi_ref = & * ffi ; match ffi_ref { dpp_voting_votes_resource_vote_ResourceVote :: V0 (o_0) => dpp :: voting :: votes :: resource_vote :: ResourceVote :: V0 (< crate :: fermented :: types :: dpp :: voting :: votes :: resource_vote :: v0 :: dpp_voting_votes_resource_vote_v0_ResourceVoteV0 as ferment :: FFIConversionFrom < dpp :: voting :: votes :: resource_vote :: v0 :: ResourceVoteV0 >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: voting :: votes :: resource_vote :: ResourceVote > for dpp_voting_votes_resource_vote_ResourceVote { unsafe fn ffi_to_const (obj : dpp :: voting :: votes :: resource_vote :: ResourceVote) -> * const dpp_voting_votes_resource_vote_ResourceVote { ferment :: boxed (match obj { dpp :: voting :: votes :: resource_vote :: ResourceVote :: V0 (o_0) => dpp_voting_votes_resource_vote_ResourceVote :: V0 (< crate :: fermented :: types :: dpp :: voting :: votes :: resource_vote :: v0 :: dpp_voting_votes_resource_vote_v0_ResourceVoteV0 as ferment :: FFIConversionTo < dpp :: voting :: votes :: resource_vote :: v0 :: ResourceVoteV0 >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_voting_votes_resource_vote_ResourceVote { fn drop (& mut self) { unsafe { match self { dpp_voting_votes_resource_vote_ResourceVote :: V0 (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_voting_votes_resource_vote_ResourceVote_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: voting :: votes :: resource_vote :: v0 :: dpp_voting_votes_resource_vote_v0_ResourceVoteV0) -> * mut dpp_voting_votes_resource_vote_ResourceVote { ferment :: boxed (dpp_voting_votes_resource_vote_ResourceVote :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_votes_resource_vote_ResourceVote_destroy < > (ffi : * mut dpp_voting_votes_resource_vote_ResourceVote) { ferment :: unbox_any (ffi) ; } pub mod accessors { use crate as dash_spv_apple_bindings ; } pub mod v0 { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`ResourceVoteV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_voting_votes_resource_vote_v0_ResourceVoteV0 { pub vote_poll : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll , pub resource_vote_choice : * mut crate :: fermented :: types :: dpp :: voting :: vote_choices :: resource_vote_choice :: dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice } impl ferment :: FFIConversionFrom < dpp :: voting :: votes :: resource_vote :: v0 :: ResourceVoteV0 > for dpp_voting_votes_resource_vote_v0_ResourceVoteV0 { unsafe fn ffi_from_const (ffi : * const dpp_voting_votes_resource_vote_v0_ResourceVoteV0) -> dpp :: voting :: votes :: resource_vote :: v0 :: ResourceVoteV0 { let ffi_ref = & * ffi ; dpp :: voting :: votes :: resource_vote :: v0 :: ResourceVoteV0 { vote_poll : < crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll as ferment :: FFIConversionFrom < dpp :: voting :: vote_polls :: VotePoll >> :: ffi_from (ffi_ref . vote_poll) , resource_vote_choice : < crate :: fermented :: types :: dpp :: voting :: vote_choices :: resource_vote_choice :: dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice as ferment :: FFIConversionFrom < dpp :: voting :: vote_choices :: resource_vote_choice :: ResourceVoteChoice >> :: ffi_from (ffi_ref . resource_vote_choice) } } } impl ferment :: FFIConversionTo < dpp :: voting :: votes :: resource_vote :: v0 :: ResourceVoteV0 > for dpp_voting_votes_resource_vote_v0_ResourceVoteV0 { unsafe fn ffi_to_const (obj : dpp :: voting :: votes :: resource_vote :: v0 :: ResourceVoteV0) -> * const dpp_voting_votes_resource_vote_v0_ResourceVoteV0 { ferment :: boxed (dpp_voting_votes_resource_vote_v0_ResourceVoteV0 { vote_poll : < crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll as ferment :: FFIConversionTo < dpp :: voting :: vote_polls :: VotePoll >> :: ffi_to (obj . vote_poll) , resource_vote_choice : < crate :: fermented :: types :: dpp :: voting :: vote_choices :: resource_vote_choice :: dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice as ferment :: FFIConversionTo < dpp :: voting :: vote_choices :: resource_vote_choice :: ResourceVoteChoice >> :: ffi_to (obj . resource_vote_choice) }) } } impl Drop for dpp_voting_votes_resource_vote_v0_ResourceVoteV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . vote_poll) ; ferment :: unbox_any (ffi_ref . resource_vote_choice) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_voting_votes_resource_vote_v0_ResourceVoteV0_ctor < > (vote_poll : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll , resource_vote_choice : * mut crate :: fermented :: types :: dpp :: voting :: vote_choices :: resource_vote_choice :: dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice) -> * mut dpp_voting_votes_resource_vote_v0_ResourceVoteV0 { ferment :: boxed (dpp_voting_votes_resource_vote_v0_ResourceVoteV0 { vote_poll , resource_vote_choice }) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_votes_resource_vote_v0_ResourceVoteV0_destroy < > (ffi : * mut dpp_voting_votes_resource_vote_v0_ResourceVoteV0) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_voting_votes_resource_vote_v0_ResourceVoteV0_get_vote_poll < > (obj : * const dpp_voting_votes_resource_vote_v0_ResourceVoteV0) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll { (* obj) . vote_poll } # [no_mangle] pub unsafe extern "C" fn dpp_voting_votes_resource_vote_v0_ResourceVoteV0_get_resource_vote_choice < > (obj : * const dpp_voting_votes_resource_vote_v0_ResourceVoteV0) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_choices :: resource_vote_choice :: dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice { (* obj) . resource_vote_choice } # [no_mangle] pub unsafe extern "C" fn dpp_voting_votes_resource_vote_v0_ResourceVoteV0_set_vote_poll < > (obj : * const dpp_voting_votes_resource_vote_v0_ResourceVoteV0) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll { (* obj) . vote_poll } # [no_mangle] pub unsafe extern "C" fn dpp_voting_votes_resource_vote_v0_ResourceVoteV0_set_resource_vote_choice < > (obj : * const dpp_voting_votes_resource_vote_v0_ResourceVoteV0) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_choices :: resource_vote_choice :: dpp_voting_vote_choices_resource_vote_choice_ResourceVoteChoice { (* obj) . resource_vote_choice } } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`Vote`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_voting_votes_Vote { ResourceVote (* mut crate :: fermented :: types :: dpp :: voting :: votes :: resource_vote :: dpp_voting_votes_resource_vote_ResourceVote) } impl ferment :: FFIConversionFrom < dpp :: voting :: votes :: Vote > for dpp_voting_votes_Vote { unsafe fn ffi_from_const (ffi : * const dpp_voting_votes_Vote) -> dpp :: voting :: votes :: Vote { let ffi_ref = & * ffi ; match ffi_ref { dpp_voting_votes_Vote :: ResourceVote (o_0) => dpp :: voting :: votes :: Vote :: ResourceVote (< crate :: fermented :: types :: dpp :: voting :: votes :: resource_vote :: dpp_voting_votes_resource_vote_ResourceVote as ferment :: FFIConversionFrom < dpp :: voting :: votes :: resource_vote :: ResourceVote >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: voting :: votes :: Vote > for dpp_voting_votes_Vote { unsafe fn ffi_to_const (obj : dpp :: voting :: votes :: Vote) -> * const dpp_voting_votes_Vote { ferment :: boxed (match obj { dpp :: voting :: votes :: Vote :: ResourceVote (o_0) => dpp_voting_votes_Vote :: ResourceVote (< crate :: fermented :: types :: dpp :: voting :: votes :: resource_vote :: dpp_voting_votes_resource_vote_ResourceVote as ferment :: FFIConversionTo < dpp :: voting :: votes :: resource_vote :: ResourceVote >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_voting_votes_Vote { fn drop (& mut self) { unsafe { match self { dpp_voting_votes_Vote :: ResourceVote (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_voting_votes_Vote_ResourceVote_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: voting :: votes :: resource_vote :: dpp_voting_votes_resource_vote_ResourceVote) -> * mut dpp_voting_votes_Vote { ferment :: boxed (dpp_voting_votes_Vote :: ResourceVote (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_voting_votes_Vote_destroy < > (ffi : * mut dpp_voting_votes_Vote) { ferment :: unbox_any (ffi) ; } } } pub mod asset_lock { use crate as dash_spv_apple_bindings ; pub mod reduced_asset_lock_value { use crate as dash_spv_apple_bindings ; } } pub mod nft { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`TradeMode`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_nft_TradeMode { None = 0 , DirectPurchase = 1 } impl ferment :: FFIConversionFrom < dpp :: nft :: TradeMode > for dpp_nft_TradeMode { unsafe fn ffi_from_const (ffi : * const dpp_nft_TradeMode) -> dpp :: nft :: TradeMode { let ffi_ref = & * ffi ; match ffi_ref { dpp_nft_TradeMode :: None => dpp :: nft :: TradeMode :: None , dpp_nft_TradeMode :: DirectPurchase => dpp :: nft :: TradeMode :: DirectPurchase } } } impl ferment :: FFIConversionTo < dpp :: nft :: TradeMode > for dpp_nft_TradeMode { unsafe fn ffi_to_const (obj : dpp :: nft :: TradeMode) -> * const dpp_nft_TradeMode { ferment :: boxed (match obj { dpp :: nft :: TradeMode :: None => dpp_nft_TradeMode :: None , dpp :: nft :: TradeMode :: DirectPurchase => dpp_nft_TradeMode :: DirectPurchase , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_nft_TradeMode { fn drop (& mut self) { unsafe { match self { dpp_nft_TradeMode :: None => { } , dpp_nft_TradeMode :: DirectPurchase => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_nft_TradeMode_None_ctor () -> * mut dpp_nft_TradeMode { ferment :: boxed (dpp_nft_TradeMode :: None { }) } # [no_mangle] pub unsafe extern "C" fn dpp_nft_TradeMode_DirectPurchase_ctor () -> * mut dpp_nft_TradeMode { ferment :: boxed (dpp_nft_TradeMode :: DirectPurchase { }) } # [no_mangle] pub unsafe extern "C" fn dpp_nft_TradeMode_destroy < > (ffi : * mut dpp_nft_TradeMode) { ferment :: unbox_any (ffi) ; } } pub mod document { use crate as dash_spv_apple_bindings ; pub mod fields { use crate as dash_spv_apple_bindings ; } pub mod transfer { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`Transferable`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_document_transfer_Transferable { Never = 0 , Always = 1 } impl ferment :: FFIConversionFrom < dpp :: document :: transfer :: Transferable > for dpp_document_transfer_Transferable { unsafe fn ffi_from_const (ffi : * const dpp_document_transfer_Transferable) -> dpp :: document :: transfer :: Transferable { let ffi_ref = & * ffi ; match ffi_ref { dpp_document_transfer_Transferable :: Never => dpp :: document :: transfer :: Transferable :: Never , dpp_document_transfer_Transferable :: Always => dpp :: document :: transfer :: Transferable :: Always } } } impl ferment :: FFIConversionTo < dpp :: document :: transfer :: Transferable > for dpp_document_transfer_Transferable { unsafe fn ffi_to_const (obj : dpp :: document :: transfer :: Transferable) -> * const dpp_document_transfer_Transferable { ferment :: boxed (match obj { dpp :: document :: transfer :: Transferable :: Never => dpp_document_transfer_Transferable :: Never , dpp :: document :: transfer :: Transferable :: Always => dpp_document_transfer_Transferable :: Always , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_document_transfer_Transferable { fn drop (& mut self) { unsafe { match self { dpp_document_transfer_Transferable :: Never => { } , dpp_document_transfer_Transferable :: Always => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_document_transfer_Transferable_Never_ctor () -> * mut dpp_document_transfer_Transferable { ferment :: boxed (dpp_document_transfer_Transferable :: Never { }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_transfer_Transferable_Always_ctor () -> * mut dpp_document_transfer_Transferable { ferment :: boxed (dpp_document_transfer_Transferable :: Always { }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_transfer_Transferable_destroy < > (ffi : * mut dpp_document_transfer_Transferable) { ferment :: unbox_any (ffi) ; } } pub mod accessors { use crate as dash_spv_apple_bindings ; } pub mod v0 { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DocumentV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_document_v0_DocumentV0 { pub id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub properties : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_platform_value_Value , pub revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , pub created_at : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis , pub updated_at : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis , pub transferred_at : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis , pub created_at_block_height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight , pub updated_at_block_height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight , pub transferred_at_block_height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight , pub created_at_core_block_height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight , pub updated_at_core_block_height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight , pub transferred_at_core_block_height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight } impl ferment :: FFIConversionFrom < dpp :: document :: v0 :: DocumentV0 > for dpp_document_v0_DocumentV0 { unsafe fn ffi_from_const (ffi : * const dpp_document_v0_DocumentV0) -> dpp :: document :: v0 :: DocumentV0 { let ffi_ref = & * ffi ; dpp :: document :: v0 :: DocumentV0 { id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . id) , owner_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . owner_id) , properties : < crate :: fermented :: generics :: std_collections_Map_keys_String_values_platform_value_Value as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < String , platform_value :: Value > >> :: ffi_from (ffi_ref . properties) , revision : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision as ferment :: FFIConversionFrom < dpp :: prelude :: Revision >> :: ffi_from_opt (ffi_ref . revision) , created_at : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: TimestampMillis >> :: ffi_from_opt (ffi_ref . created_at) , updated_at : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: TimestampMillis >> :: ffi_from_opt (ffi_ref . updated_at) , transferred_at : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: TimestampMillis >> :: ffi_from_opt (ffi_ref . transferred_at) , created_at_block_height : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight as ferment :: FFIConversionFrom < dpp :: prelude :: BlockHeight >> :: ffi_from_opt (ffi_ref . created_at_block_height) , updated_at_block_height : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight as ferment :: FFIConversionFrom < dpp :: prelude :: BlockHeight >> :: ffi_from_opt (ffi_ref . updated_at_block_height) , transferred_at_block_height : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight as ferment :: FFIConversionFrom < dpp :: prelude :: BlockHeight >> :: ffi_from_opt (ffi_ref . transferred_at_block_height) , created_at_core_block_height : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight as ferment :: FFIConversionFrom < dpp :: prelude :: CoreBlockHeight >> :: ffi_from_opt (ffi_ref . created_at_core_block_height) , updated_at_core_block_height : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight as ferment :: FFIConversionFrom < dpp :: prelude :: CoreBlockHeight >> :: ffi_from_opt (ffi_ref . updated_at_core_block_height) , transferred_at_core_block_height : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight as ferment :: FFIConversionFrom < dpp :: prelude :: CoreBlockHeight >> :: ffi_from_opt (ffi_ref . transferred_at_core_block_height) } } } impl ferment :: FFIConversionTo < dpp :: document :: v0 :: DocumentV0 > for dpp_document_v0_DocumentV0 { unsafe fn ffi_to_const (obj : dpp :: document :: v0 :: DocumentV0) -> * const dpp_document_v0_DocumentV0 { ferment :: boxed (dpp_document_v0_DocumentV0 { id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . id) , owner_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . owner_id) , properties : < crate :: fermented :: generics :: std_collections_Map_keys_String_values_platform_value_Value as ferment :: FFIConversionTo < std :: collections :: BTreeMap < String , platform_value :: Value > >> :: ffi_to (obj . properties) , revision : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision as ferment :: FFIConversionTo < dpp :: prelude :: Revision >> :: ffi_to_opt (obj . revision) , created_at : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: TimestampMillis >> :: ffi_to_opt (obj . created_at) , updated_at : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: TimestampMillis >> :: ffi_to_opt (obj . updated_at) , transferred_at : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: TimestampMillis >> :: ffi_to_opt (obj . transferred_at) , created_at_block_height : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight as ferment :: FFIConversionTo < dpp :: prelude :: BlockHeight >> :: ffi_to_opt (obj . created_at_block_height) , updated_at_block_height : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight as ferment :: FFIConversionTo < dpp :: prelude :: BlockHeight >> :: ffi_to_opt (obj . updated_at_block_height) , transferred_at_block_height : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight as ferment :: FFIConversionTo < dpp :: prelude :: BlockHeight >> :: ffi_to_opt (obj . transferred_at_block_height) , created_at_core_block_height : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight as ferment :: FFIConversionTo < dpp :: prelude :: CoreBlockHeight >> :: ffi_to_opt (obj . created_at_core_block_height) , updated_at_core_block_height : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight as ferment :: FFIConversionTo < dpp :: prelude :: CoreBlockHeight >> :: ffi_to_opt (obj . updated_at_core_block_height) , transferred_at_core_block_height : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight as ferment :: FFIConversionTo < dpp :: prelude :: CoreBlockHeight >> :: ffi_to_opt (obj . transferred_at_core_block_height) }) } } impl Drop for dpp_document_v0_DocumentV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . id) ; ferment :: unbox_any (ffi_ref . owner_id) ; ferment :: unbox_any (ffi_ref . properties) ; ferment :: unbox_any_opt (ffi_ref . revision) ; ferment :: unbox_any_opt (ffi_ref . created_at) ; ferment :: unbox_any_opt (ffi_ref . updated_at) ; ferment :: unbox_any_opt (ffi_ref . transferred_at) ; ferment :: unbox_any_opt (ffi_ref . created_at_block_height) ; ferment :: unbox_any_opt (ffi_ref . updated_at_block_height) ; ferment :: unbox_any_opt (ffi_ref . transferred_at_block_height) ; ferment :: unbox_any_opt (ffi_ref . created_at_core_block_height) ; ferment :: unbox_any_opt (ffi_ref . updated_at_core_block_height) ; ferment :: unbox_any_opt (ffi_ref . transferred_at_core_block_height) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_ctor < > (id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , properties : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_platform_value_Value , revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , created_at : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis , updated_at : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis , transferred_at : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis , created_at_block_height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight , updated_at_block_height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight , transferred_at_block_height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight , created_at_core_block_height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight , updated_at_core_block_height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight , transferred_at_core_block_height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight) -> * mut dpp_document_v0_DocumentV0 { ferment :: boxed (dpp_document_v0_DocumentV0 { id , owner_id , properties , revision , created_at , updated_at , transferred_at , created_at_block_height , updated_at_block_height , transferred_at_block_height , created_at_core_block_height , updated_at_core_block_height , transferred_at_core_block_height }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_destroy < > (ffi : * mut dpp_document_v0_DocumentV0) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_get_id < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_get_owner_id < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . owner_id } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_get_properties < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_platform_value_Value { (* obj) . properties } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_get_revision < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_get_created_at < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis { (* obj) . created_at } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_get_updated_at < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis { (* obj) . updated_at } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_get_transferred_at < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis { (* obj) . transferred_at } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_get_created_at_block_height < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight { (* obj) . created_at_block_height } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_get_updated_at_block_height < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight { (* obj) . updated_at_block_height } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_get_transferred_at_block_height < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight { (* obj) . transferred_at_block_height } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_get_created_at_core_block_height < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight { (* obj) . created_at_core_block_height } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_get_updated_at_core_block_height < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight { (* obj) . updated_at_core_block_height } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_get_transferred_at_core_block_height < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight { (* obj) . transferred_at_core_block_height } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_set_id < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_set_owner_id < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . owner_id } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_set_properties < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_platform_value_Value { (* obj) . properties } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_set_revision < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_set_created_at < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis { (* obj) . created_at } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_set_updated_at < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis { (* obj) . updated_at } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_set_transferred_at < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis { (* obj) . transferred_at } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_set_created_at_block_height < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight { (* obj) . created_at_block_height } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_set_updated_at_block_height < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight { (* obj) . updated_at_block_height } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_set_transferred_at_block_height < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight { (* obj) . transferred_at_block_height } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_set_created_at_core_block_height < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight { (* obj) . created_at_core_block_height } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_set_updated_at_core_block_height < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight { (* obj) . updated_at_core_block_height } # [no_mangle] pub unsafe extern "C" fn dpp_document_v0_DocumentV0_set_transferred_at_core_block_height < > (obj : * const dpp_document_v0_DocumentV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight { (* obj) . transferred_at_core_block_height } } # [cfg (feature = "factories")] pub mod specialized_document_factory { use crate as dash_spv_apple_bindings ; } pub mod errors { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`DocumentError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_document_errors_DocumentError { # [cfg (feature = "state-transitions")] DocumentAlreadyExistsError { document_transition : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition } , # [cfg (feature = "state-transitions")] DocumentNotProvidedError { document_transition : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition } , InvalidActionError (u8) , InvalidActionNameError { actions : * mut crate :: fermented :: generics :: Vec_String } , # [cfg (feature = "state-transitions")] InvalidDocumentActionError { document_transition : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition } , InvalidDocumentError { errors : * mut crate :: fermented :: generics :: Vec_dpp_errors_consensus_consensus_error_ConsensusError , raw_document : * mut crate :: fermented :: types :: platform_value :: platform_value_Value } , InvalidInitialRevisionError { document : * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document } , RevisionAbsentError { document : * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document } , TryingToReplaceImmutableDocument { document : * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document } , TryingToDeleteIndelibleDocument { document : * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document } , MismatchOwnerIdsError { documents : * mut crate :: fermented :: generics :: Vec_dpp_document_Document } , DocumentNoRevisionError { document : * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document } , NoDocumentsSuppliedError } impl ferment :: FFIConversionFrom < dpp :: document :: errors :: DocumentError > for dpp_document_errors_DocumentError { unsafe fn ffi_from_const (ffi : * const dpp_document_errors_DocumentError) -> dpp :: document :: errors :: DocumentError { let ffi_ref = & * ffi ; match ffi_ref { # [cfg (feature = "state-transitions")] dpp_document_errors_DocumentError :: DocumentAlreadyExistsError { document_transition } => dpp :: document :: errors :: DocumentError :: DocumentAlreadyExistsError { document_transition : < crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition >> :: ffi_from (* document_transition) } , # [cfg (feature = "state-transitions")] dpp_document_errors_DocumentError :: DocumentNotProvidedError { document_transition } => dpp :: document :: errors :: DocumentError :: DocumentNotProvidedError { document_transition : < crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition >> :: ffi_from (* document_transition) } , dpp_document_errors_DocumentError :: InvalidActionError (o_0) => dpp :: document :: errors :: DocumentError :: InvalidActionError (* o_0) , dpp_document_errors_DocumentError :: InvalidActionNameError { actions } => dpp :: document :: errors :: DocumentError :: InvalidActionNameError { actions : < crate :: fermented :: generics :: Vec_String as ferment :: FFIConversionFrom < Vec < String > >> :: ffi_from (* actions) } , # [cfg (feature = "state-transitions")] dpp_document_errors_DocumentError :: InvalidDocumentActionError { document_transition } => dpp :: document :: errors :: DocumentError :: InvalidDocumentActionError { document_transition : < crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition >> :: ffi_from (* document_transition) } , dpp_document_errors_DocumentError :: InvalidDocumentError { errors , raw_document } => dpp :: document :: errors :: DocumentError :: InvalidDocumentError { errors : < crate :: fermented :: generics :: Vec_dpp_errors_consensus_consensus_error_ConsensusError as ferment :: FFIConversionFrom < Vec < dpp :: errors :: consensus :: consensus_error :: ConsensusError > >> :: ffi_from (* errors) , raw_document : < crate :: fermented :: types :: platform_value :: platform_value_Value as ferment :: FFIConversionFrom < platform_value :: Value >> :: ffi_from (* raw_document) } , dpp_document_errors_DocumentError :: InvalidInitialRevisionError { document } => dpp :: document :: errors :: DocumentError :: InvalidInitialRevisionError { document : Box :: new (< crate :: fermented :: types :: dpp :: document :: dpp_document_Document as ferment :: FFIConversionFrom < dpp :: document :: Document >> :: ffi_from (* document)) } , dpp_document_errors_DocumentError :: RevisionAbsentError { document } => dpp :: document :: errors :: DocumentError :: RevisionAbsentError { document : Box :: new (< crate :: fermented :: types :: dpp :: document :: dpp_document_Document as ferment :: FFIConversionFrom < dpp :: document :: Document >> :: ffi_from (* document)) } , dpp_document_errors_DocumentError :: TryingToReplaceImmutableDocument { document } => dpp :: document :: errors :: DocumentError :: TryingToReplaceImmutableDocument { document : Box :: new (< crate :: fermented :: types :: dpp :: document :: dpp_document_Document as ferment :: FFIConversionFrom < dpp :: document :: Document >> :: ffi_from (* document)) } , dpp_document_errors_DocumentError :: TryingToDeleteIndelibleDocument { document } => dpp :: document :: errors :: DocumentError :: TryingToDeleteIndelibleDocument { document : Box :: new (< crate :: fermented :: types :: dpp :: document :: dpp_document_Document as ferment :: FFIConversionFrom < dpp :: document :: Document >> :: ffi_from (* document)) } , dpp_document_errors_DocumentError :: MismatchOwnerIdsError { documents } => dpp :: document :: errors :: DocumentError :: MismatchOwnerIdsError { documents : < crate :: fermented :: generics :: Vec_dpp_document_Document as ferment :: FFIConversionFrom < Vec < dpp :: document :: Document > >> :: ffi_from (* documents) } , dpp_document_errors_DocumentError :: DocumentNoRevisionError { document } => dpp :: document :: errors :: DocumentError :: DocumentNoRevisionError { document : Box :: new (< crate :: fermented :: types :: dpp :: document :: dpp_document_Document as ferment :: FFIConversionFrom < dpp :: document :: Document >> :: ffi_from (* document)) } , dpp_document_errors_DocumentError :: NoDocumentsSuppliedError => dpp :: document :: errors :: DocumentError :: NoDocumentsSuppliedError } } } impl ferment :: FFIConversionTo < dpp :: document :: errors :: DocumentError > for dpp_document_errors_DocumentError { unsafe fn ffi_to_const (obj : dpp :: document :: errors :: DocumentError) -> * const dpp_document_errors_DocumentError { ferment :: boxed (match obj { # [cfg (feature = "state-transitions")] dpp :: document :: errors :: DocumentError :: DocumentAlreadyExistsError { document_transition } => dpp_document_errors_DocumentError :: DocumentAlreadyExistsError { document_transition : < crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition >> :: ffi_to (document_transition) } , # [cfg (feature = "state-transitions")] dpp :: document :: errors :: DocumentError :: DocumentNotProvidedError { document_transition } => dpp_document_errors_DocumentError :: DocumentNotProvidedError { document_transition : < crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition >> :: ffi_to (document_transition) } , dpp :: document :: errors :: DocumentError :: InvalidActionError (o_0) => dpp_document_errors_DocumentError :: InvalidActionError (o_0) , dpp :: document :: errors :: DocumentError :: InvalidActionNameError { actions } => dpp_document_errors_DocumentError :: InvalidActionNameError { actions : < crate :: fermented :: generics :: Vec_String as ferment :: FFIConversionTo < Vec < String > >> :: ffi_to (actions) } , # [cfg (feature = "state-transitions")] dpp :: document :: errors :: DocumentError :: InvalidDocumentActionError { document_transition } => dpp_document_errors_DocumentError :: InvalidDocumentActionError { document_transition : < crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition >> :: ffi_to (document_transition) } , dpp :: document :: errors :: DocumentError :: InvalidDocumentError { errors , raw_document } => dpp_document_errors_DocumentError :: InvalidDocumentError { errors : < crate :: fermented :: generics :: Vec_dpp_errors_consensus_consensus_error_ConsensusError as ferment :: FFIConversionTo < Vec < dpp :: errors :: consensus :: consensus_error :: ConsensusError > >> :: ffi_to (errors) , raw_document : < crate :: fermented :: types :: platform_value :: platform_value_Value as ferment :: FFIConversionTo < platform_value :: Value >> :: ffi_to (raw_document) } , dpp :: document :: errors :: DocumentError :: InvalidInitialRevisionError { document } => dpp_document_errors_DocumentError :: InvalidInitialRevisionError { document : < crate :: fermented :: types :: dpp :: document :: dpp_document_Document as ferment :: FFIConversionTo < dpp :: document :: Document >> :: ffi_to (* document) } , dpp :: document :: errors :: DocumentError :: RevisionAbsentError { document } => dpp_document_errors_DocumentError :: RevisionAbsentError { document : < crate :: fermented :: types :: dpp :: document :: dpp_document_Document as ferment :: FFIConversionTo < dpp :: document :: Document >> :: ffi_to (* document) } , dpp :: document :: errors :: DocumentError :: TryingToReplaceImmutableDocument { document } => dpp_document_errors_DocumentError :: TryingToReplaceImmutableDocument { document : < crate :: fermented :: types :: dpp :: document :: dpp_document_Document as ferment :: FFIConversionTo < dpp :: document :: Document >> :: ffi_to (* document) } , dpp :: document :: errors :: DocumentError :: TryingToDeleteIndelibleDocument { document } => dpp_document_errors_DocumentError :: TryingToDeleteIndelibleDocument { document : < crate :: fermented :: types :: dpp :: document :: dpp_document_Document as ferment :: FFIConversionTo < dpp :: document :: Document >> :: ffi_to (* document) } , dpp :: document :: errors :: DocumentError :: MismatchOwnerIdsError { documents } => dpp_document_errors_DocumentError :: MismatchOwnerIdsError { documents : < crate :: fermented :: generics :: Vec_dpp_document_Document as ferment :: FFIConversionTo < Vec < dpp :: document :: Document > >> :: ffi_to (documents) } , dpp :: document :: errors :: DocumentError :: DocumentNoRevisionError { document } => dpp_document_errors_DocumentError :: DocumentNoRevisionError { document : < crate :: fermented :: types :: dpp :: document :: dpp_document_Document as ferment :: FFIConversionTo < dpp :: document :: Document >> :: ffi_to (* document) } , dpp :: document :: errors :: DocumentError :: NoDocumentsSuppliedError => dpp_document_errors_DocumentError :: NoDocumentsSuppliedError , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_document_errors_DocumentError { fn drop (& mut self) { unsafe { match self { # [cfg (feature = "state-transitions")] dpp_document_errors_DocumentError :: DocumentAlreadyExistsError { document_transition } => { ferment :: unbox_any (* document_transition) ; } , # [cfg (feature = "state-transitions")] dpp_document_errors_DocumentError :: DocumentNotProvidedError { document_transition } => { ferment :: unbox_any (* document_transition) ; } , dpp_document_errors_DocumentError :: InvalidActionError (o_0) => { ; } , dpp_document_errors_DocumentError :: InvalidActionNameError { actions } => { ferment :: unbox_any (* actions) ; } , # [cfg (feature = "state-transitions")] dpp_document_errors_DocumentError :: InvalidDocumentActionError { document_transition } => { ferment :: unbox_any (* document_transition) ; } , dpp_document_errors_DocumentError :: InvalidDocumentError { errors , raw_document } => { ferment :: unbox_any (* errors) ; ; ferment :: unbox_any (* raw_document) ; } , dpp_document_errors_DocumentError :: InvalidInitialRevisionError { document } => { ferment :: unbox_any (* document) ; } , dpp_document_errors_DocumentError :: RevisionAbsentError { document } => { ferment :: unbox_any (* document) ; } , dpp_document_errors_DocumentError :: TryingToReplaceImmutableDocument { document } => { ferment :: unbox_any (* document) ; } , dpp_document_errors_DocumentError :: TryingToDeleteIndelibleDocument { document } => { ferment :: unbox_any (* document) ; } , dpp_document_errors_DocumentError :: MismatchOwnerIdsError { documents } => { ferment :: unbox_any (* documents) ; } , dpp_document_errors_DocumentError :: DocumentNoRevisionError { document } => { ferment :: unbox_any (* document) ; } , dpp_document_errors_DocumentError :: NoDocumentsSuppliedError => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [cfg (feature = "state-transitions")] # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_DocumentAlreadyExistsError_ctor (document_transition : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition) -> * mut dpp_document_errors_DocumentError { ferment :: boxed (dpp_document_errors_DocumentError :: DocumentAlreadyExistsError { document_transition }) } # [cfg (feature = "state-transitions")] # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_DocumentNotProvidedError_ctor (document_transition : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition) -> * mut dpp_document_errors_DocumentError { ferment :: boxed (dpp_document_errors_DocumentError :: DocumentNotProvidedError { document_transition }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_InvalidActionError_ctor (o_o_0 : u8) -> * mut dpp_document_errors_DocumentError { ferment :: boxed (dpp_document_errors_DocumentError :: InvalidActionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_InvalidActionNameError_ctor (actions : * mut crate :: fermented :: generics :: Vec_String) -> * mut dpp_document_errors_DocumentError { ferment :: boxed (dpp_document_errors_DocumentError :: InvalidActionNameError { actions }) } # [cfg (feature = "state-transitions")] # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_InvalidDocumentActionError_ctor (document_transition : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition) -> * mut dpp_document_errors_DocumentError { ferment :: boxed (dpp_document_errors_DocumentError :: InvalidDocumentActionError { document_transition }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_InvalidDocumentError_ctor (errors : * mut crate :: fermented :: generics :: Vec_dpp_errors_consensus_consensus_error_ConsensusError , raw_document : * mut crate :: fermented :: types :: platform_value :: platform_value_Value) -> * mut dpp_document_errors_DocumentError { ferment :: boxed (dpp_document_errors_DocumentError :: InvalidDocumentError { errors , raw_document }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_InvalidInitialRevisionError_ctor (document : * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document) -> * mut dpp_document_errors_DocumentError { ferment :: boxed (dpp_document_errors_DocumentError :: InvalidInitialRevisionError { document }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_RevisionAbsentError_ctor (document : * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document) -> * mut dpp_document_errors_DocumentError { ferment :: boxed (dpp_document_errors_DocumentError :: RevisionAbsentError { document }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_TryingToReplaceImmutableDocument_ctor (document : * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document) -> * mut dpp_document_errors_DocumentError { ferment :: boxed (dpp_document_errors_DocumentError :: TryingToReplaceImmutableDocument { document }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_TryingToDeleteIndelibleDocument_ctor (document : * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document) -> * mut dpp_document_errors_DocumentError { ferment :: boxed (dpp_document_errors_DocumentError :: TryingToDeleteIndelibleDocument { document }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_MismatchOwnerIdsError_ctor (documents : * mut crate :: fermented :: generics :: Vec_dpp_document_Document) -> * mut dpp_document_errors_DocumentError { ferment :: boxed (dpp_document_errors_DocumentError :: MismatchOwnerIdsError { documents }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_DocumentNoRevisionError_ctor (document : * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document) -> * mut dpp_document_errors_DocumentError { ferment :: boxed (dpp_document_errors_DocumentError :: DocumentNoRevisionError { document }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_NoDocumentsSuppliedError_ctor () -> * mut dpp_document_errors_DocumentError { ferment :: boxed (dpp_document_errors_DocumentError :: NoDocumentsSuppliedError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_document_errors_DocumentError_destroy < > (ffi : * mut dpp_document_errors_DocumentError) { ferment :: unbox_any (ffi) ; } } pub mod serialization_traits { use crate as dash_spv_apple_bindings ; # [cfg (feature = "document-json-conversion")] pub mod json_conversion { use crate as dash_spv_apple_bindings ; } pub mod platform_serialization_conversion { use crate as dash_spv_apple_bindings ; pub mod deserialize { use crate as dash_spv_apple_bindings ; } pub mod serialize { use crate as dash_spv_apple_bindings ; } } # [cfg (feature = "document-value-conversion")] pub mod platform_value_conversion { use crate as dash_spv_apple_bindings ; } # [cfg (feature = "document-cbor-conversion")] pub mod cbor_conversion { use crate as dash_spv_apple_bindings ; } } # [cfg (feature = "factories")] pub mod document_factory { use crate as dash_spv_apple_bindings ; pub mod v0 { use crate as dash_spv_apple_bindings ; } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`Document`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_document_Document { V0 (* mut crate :: fermented :: types :: dpp :: document :: v0 :: dpp_document_v0_DocumentV0) } impl ferment :: FFIConversionFrom < dpp :: document :: Document > for dpp_document_Document { unsafe fn ffi_from_const (ffi : * const dpp_document_Document) -> dpp :: document :: Document { let ffi_ref = & * ffi ; match ffi_ref { dpp_document_Document :: V0 (o_0) => dpp :: document :: Document :: V0 (< crate :: fermented :: types :: dpp :: document :: v0 :: dpp_document_v0_DocumentV0 as ferment :: FFIConversionFrom < dpp :: document :: v0 :: DocumentV0 >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: document :: Document > for dpp_document_Document { unsafe fn ffi_to_const (obj : dpp :: document :: Document) -> * const dpp_document_Document { ferment :: boxed (match obj { dpp :: document :: Document :: V0 (o_0) => dpp_document_Document :: V0 (< crate :: fermented :: types :: dpp :: document :: v0 :: dpp_document_v0_DocumentV0 as ferment :: FFIConversionTo < dpp :: document :: v0 :: DocumentV0 >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_document_Document { fn drop (& mut self) { unsafe { match self { dpp_document_Document :: V0 (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_document_Document_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: document :: v0 :: dpp_document_v0_DocumentV0) -> * mut dpp_document_Document { ferment :: boxed (dpp_document_Document :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_document_Document_destroy < > (ffi : * mut dpp_document_Document) { ferment :: unbox_any (ffi) ; } # [cfg (feature = "extended-document")] pub mod extended_document { use crate as dash_spv_apple_bindings ; pub mod v0 { use crate as dash_spv_apple_bindings ; } pub mod fields { use crate as dash_spv_apple_bindings ; } } pub mod document_methods { use crate as dash_spv_apple_bindings ; pub mod hash { use crate as dash_spv_apple_bindings ; } pub mod get_raw_for_contract { use crate as dash_spv_apple_bindings ; } pub mod get_raw_for_document_type { use crate as dash_spv_apple_bindings ; } pub mod is_equal_ignoring_timestamps { use crate as dash_spv_apple_bindings ; } } } pub mod fee { use crate as dash_spv_apple_bindings ; pub mod epoch { use crate as dash_spv_apple_bindings ; # [cfg (feature = "fee-distribution")] pub mod distribution { use crate as dash_spv_apple_bindings ; # [cfg (test)] pub mod tests { use crate as dash_spv_apple_bindings ; } } } # [cfg (feature = "fee-distribution")] pub mod fee_result { use crate as dash_spv_apple_bindings ; pub mod refunds { use crate as dash_spv_apple_bindings ; # [cfg (test)] pub mod tests { use crate as dash_spv_apple_bindings ; } } } pub mod default_costs { use crate as dash_spv_apple_bindings ; } } pub mod metadata { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`Metadata`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_metadata_Metadata { pub block_height : u64 , pub core_chain_locked_height : u64 , pub time_ms : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis , pub protocol_version : * mut crate :: fermented :: types :: dpp :: util :: deserializer :: dpp_util_deserializer_ProtocolVersion } impl ferment :: FFIConversionFrom < dpp :: metadata :: Metadata > for dpp_metadata_Metadata { unsafe fn ffi_from_const (ffi : * const dpp_metadata_Metadata) -> dpp :: metadata :: Metadata { let ffi_ref = & * ffi ; dpp :: metadata :: Metadata { block_height : ffi_ref . block_height , core_chain_locked_height : ffi_ref . core_chain_locked_height , time_ms : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis as ferment :: FFIConversionFrom < dpp :: prelude :: TimestampMillis >> :: ffi_from (ffi_ref . time_ms) , protocol_version : < crate :: fermented :: types :: dpp :: util :: deserializer :: dpp_util_deserializer_ProtocolVersion as ferment :: FFIConversionFrom < dpp :: util :: deserializer :: ProtocolVersion >> :: ffi_from (ffi_ref . protocol_version) } } } impl ferment :: FFIConversionTo < dpp :: metadata :: Metadata > for dpp_metadata_Metadata { unsafe fn ffi_to_const (obj : dpp :: metadata :: Metadata) -> * const dpp_metadata_Metadata { ferment :: boxed (dpp_metadata_Metadata { block_height : obj . block_height , core_chain_locked_height : obj . core_chain_locked_height , time_ms : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis as ferment :: FFIConversionTo < dpp :: prelude :: TimestampMillis >> :: ffi_to (obj . time_ms) , protocol_version : < crate :: fermented :: types :: dpp :: util :: deserializer :: dpp_util_deserializer_ProtocolVersion as ferment :: FFIConversionTo < dpp :: util :: deserializer :: ProtocolVersion >> :: ffi_to (obj . protocol_version) }) } } impl Drop for dpp_metadata_Metadata { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ferment :: unbox_any (ffi_ref . time_ms) ; ferment :: unbox_any (ffi_ref . protocol_version) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_metadata_Metadata_ctor < > (block_height : u64 , core_chain_locked_height : u64 , time_ms : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis , protocol_version : * mut crate :: fermented :: types :: dpp :: util :: deserializer :: dpp_util_deserializer_ProtocolVersion) -> * mut dpp_metadata_Metadata { ferment :: boxed (dpp_metadata_Metadata { block_height , core_chain_locked_height , time_ms , protocol_version }) } # [no_mangle] pub unsafe extern "C" fn dpp_metadata_Metadata_destroy < > (ffi : * mut dpp_metadata_Metadata) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_metadata_Metadata_get_block_height < > (obj : * const dpp_metadata_Metadata) -> u64 { (* obj) . block_height } # [no_mangle] pub unsafe extern "C" fn dpp_metadata_Metadata_get_core_chain_locked_height < > (obj : * const dpp_metadata_Metadata) -> u64 { (* obj) . core_chain_locked_height } # [no_mangle] pub unsafe extern "C" fn dpp_metadata_Metadata_get_time_ms < > (obj : * const dpp_metadata_Metadata) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis { (* obj) . time_ms } # [no_mangle] pub unsafe extern "C" fn dpp_metadata_Metadata_get_protocol_version < > (obj : * const dpp_metadata_Metadata) -> * mut crate :: fermented :: types :: dpp :: util :: deserializer :: dpp_util_deserializer_ProtocolVersion { (* obj) . protocol_version } # [no_mangle] pub unsafe extern "C" fn dpp_metadata_Metadata_set_block_height < > (obj : * const dpp_metadata_Metadata) -> u64 { (* obj) . block_height } # [no_mangle] pub unsafe extern "C" fn dpp_metadata_Metadata_set_core_chain_locked_height < > (obj : * const dpp_metadata_Metadata) -> u64 { (* obj) . core_chain_locked_height } # [no_mangle] pub unsafe extern "C" fn dpp_metadata_Metadata_set_time_ms < > (obj : * const dpp_metadata_Metadata) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis { (* obj) . time_ms } # [no_mangle] pub unsafe extern "C" fn dpp_metadata_Metadata_set_protocol_version < > (obj : * const dpp_metadata_Metadata) -> * mut crate :: fermented :: types :: dpp :: util :: deserializer :: dpp_util_deserializer_ProtocolVersion { (* obj) . protocol_version } } # [cfg (feature = "core-types")] pub mod core_types { use crate as dash_spv_apple_bindings ; pub mod validator_set { use crate as dash_spv_apple_bindings ; pub mod v0 { use crate as dash_spv_apple_bindings ; } } pub mod validator { use crate as dash_spv_apple_bindings ; pub mod v0 { use crate as dash_spv_apple_bindings ; } } } # [cfg (feature = "state-transitions")] pub mod state_transition { use crate as dash_spv_apple_bindings ; pub mod state_transition_types { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`StateTransitionType`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transition_types_StateTransitionType { DataContractCreate = 0 , DocumentsBatch = 1 , IdentityCreate = 2 , IdentityTopUp = 3 , DataContractUpdate = 4 , IdentityUpdate = 5 , IdentityCreditWithdrawal = 6 , IdentityCreditTransfer = 7 , MasternodeVote = 8 } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transition_types :: StateTransitionType > for dpp_state_transition_state_transition_types_StateTransitionType { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transition_types_StateTransitionType) -> dpp :: state_transition :: state_transition_types :: StateTransitionType { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transition_types_StateTransitionType :: DataContractCreate => dpp :: state_transition :: state_transition_types :: StateTransitionType :: DataContractCreate , dpp_state_transition_state_transition_types_StateTransitionType :: DocumentsBatch => dpp :: state_transition :: state_transition_types :: StateTransitionType :: DocumentsBatch , dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreate => dpp :: state_transition :: state_transition_types :: StateTransitionType :: IdentityCreate , dpp_state_transition_state_transition_types_StateTransitionType :: IdentityTopUp => dpp :: state_transition :: state_transition_types :: StateTransitionType :: IdentityTopUp , dpp_state_transition_state_transition_types_StateTransitionType :: DataContractUpdate => dpp :: state_transition :: state_transition_types :: StateTransitionType :: DataContractUpdate , dpp_state_transition_state_transition_types_StateTransitionType :: IdentityUpdate => dpp :: state_transition :: state_transition_types :: StateTransitionType :: IdentityUpdate , dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreditWithdrawal => dpp :: state_transition :: state_transition_types :: StateTransitionType :: IdentityCreditWithdrawal , dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreditTransfer => dpp :: state_transition :: state_transition_types :: StateTransitionType :: IdentityCreditTransfer , dpp_state_transition_state_transition_types_StateTransitionType :: MasternodeVote => dpp :: state_transition :: state_transition_types :: StateTransitionType :: MasternodeVote } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transition_types :: StateTransitionType > for dpp_state_transition_state_transition_types_StateTransitionType { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transition_types :: StateTransitionType) -> * const dpp_state_transition_state_transition_types_StateTransitionType { ferment :: boxed (match obj { dpp :: state_transition :: state_transition_types :: StateTransitionType :: DataContractCreate => dpp_state_transition_state_transition_types_StateTransitionType :: DataContractCreate , dpp :: state_transition :: state_transition_types :: StateTransitionType :: DocumentsBatch => dpp_state_transition_state_transition_types_StateTransitionType :: DocumentsBatch , dpp :: state_transition :: state_transition_types :: StateTransitionType :: IdentityCreate => dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreate , dpp :: state_transition :: state_transition_types :: StateTransitionType :: IdentityTopUp => dpp_state_transition_state_transition_types_StateTransitionType :: IdentityTopUp , dpp :: state_transition :: state_transition_types :: StateTransitionType :: DataContractUpdate => dpp_state_transition_state_transition_types_StateTransitionType :: DataContractUpdate , dpp :: state_transition :: state_transition_types :: StateTransitionType :: IdentityUpdate => dpp_state_transition_state_transition_types_StateTransitionType :: IdentityUpdate , dpp :: state_transition :: state_transition_types :: StateTransitionType :: IdentityCreditWithdrawal => dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreditWithdrawal , dpp :: state_transition :: state_transition_types :: StateTransitionType :: IdentityCreditTransfer => dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreditTransfer , dpp :: state_transition :: state_transition_types :: StateTransitionType :: MasternodeVote => dpp_state_transition_state_transition_types_StateTransitionType :: MasternodeVote , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_state_transition_state_transition_types_StateTransitionType { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transition_types_StateTransitionType :: DataContractCreate => { } , dpp_state_transition_state_transition_types_StateTransitionType :: DocumentsBatch => { } , dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreate => { } , dpp_state_transition_state_transition_types_StateTransitionType :: IdentityTopUp => { } , dpp_state_transition_state_transition_types_StateTransitionType :: DataContractUpdate => { } , dpp_state_transition_state_transition_types_StateTransitionType :: IdentityUpdate => { } , dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreditWithdrawal => { } , dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreditTransfer => { } , dpp_state_transition_state_transition_types_StateTransitionType :: MasternodeVote => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transition_types_StateTransitionType_DataContractCreate_ctor () -> * mut dpp_state_transition_state_transition_types_StateTransitionType { ferment :: boxed (dpp_state_transition_state_transition_types_StateTransitionType :: DataContractCreate { }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transition_types_StateTransitionType_DocumentsBatch_ctor () -> * mut dpp_state_transition_state_transition_types_StateTransitionType { ferment :: boxed (dpp_state_transition_state_transition_types_StateTransitionType :: DocumentsBatch { }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transition_types_StateTransitionType_IdentityCreate_ctor () -> * mut dpp_state_transition_state_transition_types_StateTransitionType { ferment :: boxed (dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreate { }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transition_types_StateTransitionType_IdentityTopUp_ctor () -> * mut dpp_state_transition_state_transition_types_StateTransitionType { ferment :: boxed (dpp_state_transition_state_transition_types_StateTransitionType :: IdentityTopUp { }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transition_types_StateTransitionType_DataContractUpdate_ctor () -> * mut dpp_state_transition_state_transition_types_StateTransitionType { ferment :: boxed (dpp_state_transition_state_transition_types_StateTransitionType :: DataContractUpdate { }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transition_types_StateTransitionType_IdentityUpdate_ctor () -> * mut dpp_state_transition_state_transition_types_StateTransitionType { ferment :: boxed (dpp_state_transition_state_transition_types_StateTransitionType :: IdentityUpdate { }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transition_types_StateTransitionType_IdentityCreditWithdrawal_ctor () -> * mut dpp_state_transition_state_transition_types_StateTransitionType { ferment :: boxed (dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreditWithdrawal { }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transition_types_StateTransitionType_IdentityCreditTransfer_ctor () -> * mut dpp_state_transition_state_transition_types_StateTransitionType { ferment :: boxed (dpp_state_transition_state_transition_types_StateTransitionType :: IdentityCreditTransfer { }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transition_types_StateTransitionType_MasternodeVote_ctor () -> * mut dpp_state_transition_state_transition_types_StateTransitionType { ferment :: boxed (dpp_state_transition_state_transition_types_StateTransitionType :: MasternodeVote { }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transition_types_StateTransitionType_destroy < > (ffi : * mut dpp_state_transition_state_transition_types_StateTransitionType) { ferment :: unbox_any (ffi) ; } } pub mod serialization { use crate as dash_spv_apple_bindings ; } pub mod proof_result { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`StateTransitionProofResult`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_proof_result_StateTransitionProofResult { VerifiedDataContract (* mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract) , VerifiedIdentity (* mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity) , VerifiedPartialIdentity (* mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_PartialIdentity) , VerifiedBalanceTransfer (* mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_PartialIdentity , * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_PartialIdentity) , VerifiedDocuments (* mut crate :: fermented :: generics :: std_collections_Map_keys_platform_value_types_identifier_Identifier_values_Option_dpp_document_Document) , VerifiedMasternodeVote (* mut crate :: fermented :: types :: dpp :: voting :: votes :: dpp_voting_votes_Vote) } impl ferment :: FFIConversionFrom < dpp :: state_transition :: proof_result :: StateTransitionProofResult > for dpp_state_transition_proof_result_StateTransitionProofResult { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_proof_result_StateTransitionProofResult) -> dpp :: state_transition :: proof_result :: StateTransitionProofResult { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedDataContract (o_0) => dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedDataContract (< crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (* o_0)) , dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedIdentity (o_0) => dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedIdentity (< crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity as ferment :: FFIConversionFrom < dpp :: identity :: identity :: Identity >> :: ffi_from (* o_0)) , dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedPartialIdentity (o_0) => dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedPartialIdentity (< crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_PartialIdentity as ferment :: FFIConversionFrom < dpp :: identity :: identity :: PartialIdentity >> :: ffi_from (* o_0)) , dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedBalanceTransfer (o_0 , o_1) => dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedBalanceTransfer (< crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_PartialIdentity as ferment :: FFIConversionFrom < dpp :: identity :: identity :: PartialIdentity >> :: ffi_from (* o_0) , < crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_PartialIdentity as ferment :: FFIConversionFrom < dpp :: identity :: identity :: PartialIdentity >> :: ffi_from (* o_1)) , dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedDocuments (o_0) => dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedDocuments (< crate :: fermented :: generics :: std_collections_Map_keys_platform_value_types_identifier_Identifier_values_Option_dpp_document_Document as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > >> :: ffi_from (* o_0)) , dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedMasternodeVote (o_0) => dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedMasternodeVote (< crate :: fermented :: types :: dpp :: voting :: votes :: dpp_voting_votes_Vote as ferment :: FFIConversionFrom < dpp :: voting :: votes :: Vote >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: proof_result :: StateTransitionProofResult > for dpp_state_transition_proof_result_StateTransitionProofResult { unsafe fn ffi_to_const (obj : dpp :: state_transition :: proof_result :: StateTransitionProofResult) -> * const dpp_state_transition_proof_result_StateTransitionProofResult { ferment :: boxed (match obj { dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedDataContract (o_0) => dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedDataContract (< crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionTo < dpp :: data_contract :: DataContract >> :: ffi_to (o_0)) , dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedIdentity (o_0) => dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedIdentity (< crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity as ferment :: FFIConversionTo < dpp :: identity :: identity :: Identity >> :: ffi_to (o_0)) , dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedPartialIdentity (o_0) => dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedPartialIdentity (< crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_PartialIdentity as ferment :: FFIConversionTo < dpp :: identity :: identity :: PartialIdentity >> :: ffi_to (o_0)) , dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedBalanceTransfer (o_0 , o_1) => dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedBalanceTransfer (< crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_PartialIdentity as ferment :: FFIConversionTo < dpp :: identity :: identity :: PartialIdentity >> :: ffi_to (o_0) , < crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_PartialIdentity as ferment :: FFIConversionTo < dpp :: identity :: identity :: PartialIdentity >> :: ffi_to (o_1)) , dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedDocuments (o_0) => dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedDocuments (< crate :: fermented :: generics :: std_collections_Map_keys_platform_value_types_identifier_Identifier_values_Option_dpp_document_Document as ferment :: FFIConversionTo < std :: collections :: BTreeMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > >> :: ffi_to (o_0)) , dpp :: state_transition :: proof_result :: StateTransitionProofResult :: VerifiedMasternodeVote (o_0) => dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedMasternodeVote (< crate :: fermented :: types :: dpp :: voting :: votes :: dpp_voting_votes_Vote as ferment :: FFIConversionTo < dpp :: voting :: votes :: Vote >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_state_transition_proof_result_StateTransitionProofResult { fn drop (& mut self) { unsafe { match self { dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedDataContract (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedIdentity (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedPartialIdentity (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedBalanceTransfer (o_0 , o_1) => { ferment :: unbox_any (* o_0) ; ; ferment :: unbox_any (* o_1) ; } , dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedDocuments (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedMasternodeVote (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_proof_result_StateTransitionProofResult_VerifiedDataContract_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract) -> * mut dpp_state_transition_proof_result_StateTransitionProofResult { ferment :: boxed (dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedDataContract (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_proof_result_StateTransitionProofResult_VerifiedIdentity_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity) -> * mut dpp_state_transition_proof_result_StateTransitionProofResult { ferment :: boxed (dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedIdentity (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_proof_result_StateTransitionProofResult_VerifiedPartialIdentity_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_PartialIdentity) -> * mut dpp_state_transition_proof_result_StateTransitionProofResult { ferment :: boxed (dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedPartialIdentity (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_proof_result_StateTransitionProofResult_VerifiedBalanceTransfer_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_PartialIdentity , o_o_1 : * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_PartialIdentity) -> * mut dpp_state_transition_proof_result_StateTransitionProofResult { ferment :: boxed (dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedBalanceTransfer (o_o_0 , o_o_1)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_proof_result_StateTransitionProofResult_VerifiedDocuments_ctor (o_o_0 : * mut crate :: fermented :: generics :: std_collections_Map_keys_platform_value_types_identifier_Identifier_values_Option_dpp_document_Document) -> * mut dpp_state_transition_proof_result_StateTransitionProofResult { ferment :: boxed (dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedDocuments (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_proof_result_StateTransitionProofResult_VerifiedMasternodeVote_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: voting :: votes :: dpp_voting_votes_Vote) -> * mut dpp_state_transition_proof_result_StateTransitionProofResult { ferment :: boxed (dpp_state_transition_proof_result_StateTransitionProofResult :: VerifiedMasternodeVote (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_proof_result_StateTransitionProofResult_destroy < > (ffi : * mut dpp_state_transition_proof_result_StateTransitionProofResult) { ferment :: unbox_any (ffi) ; } } pub mod abstract_state_transition { use crate as dash_spv_apple_bindings ; } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`StateTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_StateTransition { DataContractCreate (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition) , DataContractUpdate (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition) , DocumentsBatch (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition) , IdentityCreate (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition) , IdentityTopUp (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition) , IdentityCreditWithdrawal (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition) , IdentityUpdate (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition) , IdentityCreditTransfer (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition) , MasternodeVote (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition) } impl ferment :: FFIConversionFrom < dpp :: state_transition :: StateTransition > for dpp_state_transition_StateTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_StateTransition) -> dpp :: state_transition :: StateTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_StateTransition :: DataContractCreate (o_0) => dpp :: state_transition :: StateTransition :: DataContractCreate (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: DataContractCreateTransition >> :: ffi_from (* o_0)) , dpp_state_transition_StateTransition :: DataContractUpdate (o_0) => dpp :: state_transition :: StateTransition :: DataContractUpdate (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: DataContractUpdateTransition >> :: ffi_from (* o_0)) , dpp_state_transition_StateTransition :: DocumentsBatch (o_0) => dpp :: state_transition :: StateTransition :: DocumentsBatch (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: DocumentsBatchTransition >> :: ffi_from (* o_0)) , dpp_state_transition_StateTransition :: IdentityCreate (o_0) => dpp :: state_transition :: StateTransition :: IdentityCreate (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: IdentityCreateTransition >> :: ffi_from (* o_0)) , dpp_state_transition_StateTransition :: IdentityTopUp (o_0) => dpp :: state_transition :: StateTransition :: IdentityTopUp (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: IdentityTopUpTransition >> :: ffi_from (* o_0)) , dpp_state_transition_StateTransition :: IdentityCreditWithdrawal (o_0) => dpp :: state_transition :: StateTransition :: IdentityCreditWithdrawal (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: IdentityCreditWithdrawalTransition >> :: ffi_from (* o_0)) , dpp_state_transition_StateTransition :: IdentityUpdate (o_0) => dpp :: state_transition :: StateTransition :: IdentityUpdate (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: IdentityUpdateTransition >> :: ffi_from (* o_0)) , dpp_state_transition_StateTransition :: IdentityCreditTransfer (o_0) => dpp :: state_transition :: StateTransition :: IdentityCreditTransfer (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: IdentityCreditTransferTransition >> :: ffi_from (* o_0)) , dpp_state_transition_StateTransition :: MasternodeVote (o_0) => dpp :: state_transition :: StateTransition :: MasternodeVote (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: MasternodeVoteTransition >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: StateTransition > for dpp_state_transition_StateTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: StateTransition) -> * const dpp_state_transition_StateTransition { ferment :: boxed (match obj { dpp :: state_transition :: StateTransition :: DataContractCreate (o_0) => dpp_state_transition_StateTransition :: DataContractCreate (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: DataContractCreateTransition >> :: ffi_to (o_0)) , dpp :: state_transition :: StateTransition :: DataContractUpdate (o_0) => dpp_state_transition_StateTransition :: DataContractUpdate (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: DataContractUpdateTransition >> :: ffi_to (o_0)) , dpp :: state_transition :: StateTransition :: DocumentsBatch (o_0) => dpp_state_transition_StateTransition :: DocumentsBatch (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: DocumentsBatchTransition >> :: ffi_to (o_0)) , dpp :: state_transition :: StateTransition :: IdentityCreate (o_0) => dpp_state_transition_StateTransition :: IdentityCreate (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: IdentityCreateTransition >> :: ffi_to (o_0)) , dpp :: state_transition :: StateTransition :: IdentityTopUp (o_0) => dpp_state_transition_StateTransition :: IdentityTopUp (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: IdentityTopUpTransition >> :: ffi_to (o_0)) , dpp :: state_transition :: StateTransition :: IdentityCreditWithdrawal (o_0) => dpp_state_transition_StateTransition :: IdentityCreditWithdrawal (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: IdentityCreditWithdrawalTransition >> :: ffi_to (o_0)) , dpp :: state_transition :: StateTransition :: IdentityUpdate (o_0) => dpp_state_transition_StateTransition :: IdentityUpdate (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: IdentityUpdateTransition >> :: ffi_to (o_0)) , dpp :: state_transition :: StateTransition :: IdentityCreditTransfer (o_0) => dpp_state_transition_StateTransition :: IdentityCreditTransfer (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: IdentityCreditTransferTransition >> :: ffi_to (o_0)) , dpp :: state_transition :: StateTransition :: MasternodeVote (o_0) => dpp_state_transition_StateTransition :: MasternodeVote (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: MasternodeVoteTransition >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_state_transition_StateTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_StateTransition :: DataContractCreate (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_state_transition_StateTransition :: DataContractUpdate (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_state_transition_StateTransition :: DocumentsBatch (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_state_transition_StateTransition :: IdentityCreate (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_state_transition_StateTransition :: IdentityTopUp (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_state_transition_StateTransition :: IdentityCreditWithdrawal (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_state_transition_StateTransition :: IdentityUpdate (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_state_transition_StateTransition :: IdentityCreditTransfer (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_state_transition_StateTransition :: MasternodeVote (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_StateTransition_DataContractCreate_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition) -> * mut dpp_state_transition_StateTransition { ferment :: boxed (dpp_state_transition_StateTransition :: DataContractCreate (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_StateTransition_DataContractUpdate_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition) -> * mut dpp_state_transition_StateTransition { ferment :: boxed (dpp_state_transition_StateTransition :: DataContractUpdate (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_StateTransition_DocumentsBatch_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition) -> * mut dpp_state_transition_StateTransition { ferment :: boxed (dpp_state_transition_StateTransition :: DocumentsBatch (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_StateTransition_IdentityCreate_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition) -> * mut dpp_state_transition_StateTransition { ferment :: boxed (dpp_state_transition_StateTransition :: IdentityCreate (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_StateTransition_IdentityTopUp_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition) -> * mut dpp_state_transition_StateTransition { ferment :: boxed (dpp_state_transition_StateTransition :: IdentityTopUp (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_StateTransition_IdentityCreditWithdrawal_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition) -> * mut dpp_state_transition_StateTransition { ferment :: boxed (dpp_state_transition_StateTransition :: IdentityCreditWithdrawal (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_StateTransition_IdentityUpdate_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition) -> * mut dpp_state_transition_StateTransition { ferment :: boxed (dpp_state_transition_StateTransition :: IdentityUpdate (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_StateTransition_IdentityCreditTransfer_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition) -> * mut dpp_state_transition_StateTransition { ferment :: boxed (dpp_state_transition_StateTransition :: IdentityCreditTransfer (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_StateTransition_MasternodeVote_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition) -> * mut dpp_state_transition_StateTransition { ferment :: boxed (dpp_state_transition_StateTransition :: MasternodeVote (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_StateTransition_destroy < > (ffi : * mut dpp_state_transition_StateTransition) { ferment :: unbox_any (ffi) ; } pub mod errors { use crate as dash_spv_apple_bindings ; # [cfg (any (all (feature = "state-transitions" , feature = "validation") , feature = "state-transition-validation"))] pub mod state_transition_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`StateTransitionError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_errors_state_transition_error_StateTransitionError { InvalidStateTransitionError { errors : * mut crate :: fermented :: generics :: Vec_dpp_errors_consensus_consensus_error_ConsensusError , raw_state_transition : * mut crate :: fermented :: types :: platform_value :: platform_value_Value } } impl ferment :: FFIConversionFrom < dpp :: state_transition :: errors :: state_transition_error :: StateTransitionError > for dpp_state_transition_errors_state_transition_error_StateTransitionError { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_errors_state_transition_error_StateTransitionError) -> dpp :: state_transition :: errors :: state_transition_error :: StateTransitionError { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_errors_state_transition_error_StateTransitionError :: InvalidStateTransitionError { errors , raw_state_transition } => dpp :: state_transition :: errors :: state_transition_error :: StateTransitionError :: InvalidStateTransitionError { errors : < crate :: fermented :: generics :: Vec_dpp_errors_consensus_consensus_error_ConsensusError as ferment :: FFIConversionFrom < Vec < dpp :: errors :: consensus :: consensus_error :: ConsensusError > >> :: ffi_from (* errors) , raw_state_transition : < crate :: fermented :: types :: platform_value :: platform_value_Value as ferment :: FFIConversionFrom < platform_value :: Value >> :: ffi_from (* raw_state_transition) } } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: errors :: state_transition_error :: StateTransitionError > for dpp_state_transition_errors_state_transition_error_StateTransitionError { unsafe fn ffi_to_const (obj : dpp :: state_transition :: errors :: state_transition_error :: StateTransitionError) -> * const dpp_state_transition_errors_state_transition_error_StateTransitionError { ferment :: boxed (match obj { dpp :: state_transition :: errors :: state_transition_error :: StateTransitionError :: InvalidStateTransitionError { errors , raw_state_transition } => dpp_state_transition_errors_state_transition_error_StateTransitionError :: InvalidStateTransitionError { errors : < crate :: fermented :: generics :: Vec_dpp_errors_consensus_consensus_error_ConsensusError as ferment :: FFIConversionTo < Vec < dpp :: errors :: consensus :: consensus_error :: ConsensusError > >> :: ffi_to (errors) , raw_state_transition : < crate :: fermented :: types :: platform_value :: platform_value_Value as ferment :: FFIConversionTo < platform_value :: Value >> :: ffi_to (raw_state_transition) } , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_state_transition_errors_state_transition_error_StateTransitionError { fn drop (& mut self) { unsafe { match self { dpp_state_transition_errors_state_transition_error_StateTransitionError :: InvalidStateTransitionError { errors , raw_state_transition } => { ferment :: unbox_any (* errors) ; ; ferment :: unbox_any (* raw_state_transition) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_state_transition_error_StateTransitionError_InvalidStateTransitionError_ctor (errors : * mut crate :: fermented :: generics :: Vec_dpp_errors_consensus_consensus_error_ConsensusError , raw_state_transition : * mut crate :: fermented :: types :: platform_value :: platform_value_Value) -> * mut dpp_state_transition_errors_state_transition_error_StateTransitionError { ferment :: boxed (dpp_state_transition_errors_state_transition_error_StateTransitionError :: InvalidStateTransitionError { errors , raw_state_transition }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_state_transition_error_StateTransitionError_destroy < > (ffi : * mut dpp_state_transition_errors_state_transition_error_StateTransitionError) { ferment :: unbox_any (ffi) ; } } # [cfg (feature = "state-transition-validation")] pub mod state_transition_is_not_signed_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`StateTransitionIsNotSignedError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError { pub state_transition : * mut crate :: fermented :: types :: dpp :: state_transition :: dpp_state_transition_StateTransition } impl ferment :: FFIConversionFrom < dpp :: state_transition :: errors :: state_transition_is_not_signed_error :: StateTransitionIsNotSignedError > for dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError) -> dpp :: state_transition :: errors :: state_transition_is_not_signed_error :: StateTransitionIsNotSignedError { let ffi_ref = & * ffi ; dpp :: state_transition :: errors :: state_transition_is_not_signed_error :: StateTransitionIsNotSignedError { state_transition : < crate :: fermented :: types :: dpp :: state_transition :: dpp_state_transition_StateTransition as ferment :: FFIConversionFrom < dpp :: state_transition :: StateTransition >> :: ffi_from (ffi_ref . state_transition) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: errors :: state_transition_is_not_signed_error :: StateTransitionIsNotSignedError > for dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError { unsafe fn ffi_to_const (obj : dpp :: state_transition :: errors :: state_transition_is_not_signed_error :: StateTransitionIsNotSignedError) -> * const dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError { ferment :: boxed (dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError { state_transition : < crate :: fermented :: types :: dpp :: state_transition :: dpp_state_transition_StateTransition as ferment :: FFIConversionTo < dpp :: state_transition :: StateTransition >> :: ffi_to (obj . state_transition) }) } } impl Drop for dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . state_transition) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError_ctor < > (state_transition : * mut crate :: fermented :: types :: dpp :: state_transition :: dpp_state_transition_StateTransition) -> * mut dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError { ferment :: boxed (dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError { state_transition }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError_destroy < > (ffi : * mut dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError_get_state_transition < > (obj : * const dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError) -> * mut crate :: fermented :: types :: dpp :: state_transition :: dpp_state_transition_StateTransition { (* obj) . state_transition } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError_set_state_transition < > (obj : * const dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError) -> * mut crate :: fermented :: types :: dpp :: state_transition :: dpp_state_transition_StateTransition { (* obj) . state_transition } } # [cfg (feature = "state-transition-validation")] pub mod public_key_mismatch_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`PublicKeyMismatchError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError { pub public_key : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey } impl ferment :: FFIConversionFrom < dpp :: state_transition :: errors :: public_key_mismatch_error :: PublicKeyMismatchError > for dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError) -> dpp :: state_transition :: errors :: public_key_mismatch_error :: PublicKeyMismatchError { let ffi_ref = & * ffi ; dpp :: state_transition :: errors :: public_key_mismatch_error :: PublicKeyMismatchError { public_key : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: IdentityPublicKey >> :: ffi_from (ffi_ref . public_key) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: errors :: public_key_mismatch_error :: PublicKeyMismatchError > for dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError { unsafe fn ffi_to_const (obj : dpp :: state_transition :: errors :: public_key_mismatch_error :: PublicKeyMismatchError) -> * const dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError { ferment :: boxed (dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError { public_key : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: IdentityPublicKey >> :: ffi_to (obj . public_key) }) } } impl Drop for dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . public_key) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError_ctor < > (public_key : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey) -> * mut dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError { ferment :: boxed (dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError { public_key }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError_destroy < > (ffi : * mut dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError_get_public_key < > (obj : * const dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey { (* obj) . public_key } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError_set_public_key < > (obj : * const dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey { (* obj) . public_key } } # [cfg (any (feature = "state-transition-validation" , feature = "state-transition-signing"))] pub mod invalid_signature_public_key_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidSignaturePublicKeyError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError { pub public_key : * mut crate :: fermented :: generics :: Vec_u8 } impl ferment :: FFIConversionFrom < dpp :: state_transition :: errors :: invalid_signature_public_key_error :: InvalidSignaturePublicKeyError > for dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError) -> dpp :: state_transition :: errors :: invalid_signature_public_key_error :: InvalidSignaturePublicKeyError { let ffi_ref = & * ffi ; dpp :: state_transition :: errors :: invalid_signature_public_key_error :: InvalidSignaturePublicKeyError { public_key : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (ffi_ref . public_key) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: errors :: invalid_signature_public_key_error :: InvalidSignaturePublicKeyError > for dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError { unsafe fn ffi_to_const (obj : dpp :: state_transition :: errors :: invalid_signature_public_key_error :: InvalidSignaturePublicKeyError) -> * const dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError { ferment :: boxed (dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError { public_key : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj . public_key) }) } } impl Drop for dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . public_key) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError_ctor < > (public_key : * mut crate :: fermented :: generics :: Vec_u8) -> * mut dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError { ferment :: boxed (dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError { public_key }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError_destroy < > (ffi : * mut dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError_get_public_key < > (obj : * const dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . public_key } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError_set_public_key < > (obj : * const dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . public_key } } # [cfg (any (feature = "state-transition-validation" , feature = "state-transition-signing"))] pub mod invalid_identity_public_key_type_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidIdentityPublicKeyTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { pub public_key_type : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType } impl ferment :: FFIConversionFrom < dpp :: state_transition :: errors :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError > for dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) -> dpp :: state_transition :: errors :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError { let ffi_ref = & * ffi ; dpp :: state_transition :: errors :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError { public_key_type : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: key_type :: KeyType >> :: ffi_from (ffi_ref . public_key_type) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: errors :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError > for dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { unsafe fn ffi_to_const (obj : dpp :: state_transition :: errors :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError) -> * const dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { ferment :: boxed (dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { public_key_type : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: key_type :: KeyType >> :: ffi_to (obj . public_key_type) }) } } impl Drop for dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . public_key_type) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError_ctor < > (public_key_type : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType) -> * mut dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { ferment :: boxed (dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { public_key_type }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError_destroy < > (ffi : * mut dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError_get_public_key_type < > (obj : * const dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType { (* obj) . public_key_type } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError_set_public_key_type < > (obj : * const dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType { (* obj) . public_key_type } } # [cfg (feature = "state-transition-validation")] pub mod public_key_security_level_not_met_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`PublicKeySecurityLevelNotMetError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { pub public_key_security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , pub required_security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel } impl ferment :: FFIConversionFrom < dpp :: state_transition :: errors :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError > for dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) -> dpp :: state_transition :: errors :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError { let ffi_ref = & * ffi ; dpp :: state_transition :: errors :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError { public_key_security_level : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel >> :: ffi_from (ffi_ref . public_key_security_level) , required_security_level : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel >> :: ffi_from (ffi_ref . required_security_level) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: errors :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError > for dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { unsafe fn ffi_to_const (obj : dpp :: state_transition :: errors :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError) -> * const dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { ferment :: boxed (dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { public_key_security_level : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel >> :: ffi_to (obj . public_key_security_level) , required_security_level : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel >> :: ffi_to (obj . required_security_level) }) } } impl Drop for dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . public_key_security_level) ; ferment :: unbox_any (ffi_ref . required_security_level) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_ctor < > (public_key_security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , required_security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel) -> * mut dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { ferment :: boxed (dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { public_key_security_level , required_security_level }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_destroy < > (ffi : * mut dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_get_public_key_security_level < > (obj : * const dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . public_key_security_level } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_get_required_security_level < > (obj : * const dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . required_security_level } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_set_public_key_security_level < > (obj : * const dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . public_key_security_level } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_set_required_security_level < > (obj : * const dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . required_security_level } } } pub mod traits { use crate as dash_spv_apple_bindings ; } pub mod state_transitions { use crate as dash_spv_apple_bindings ; pub mod contract { use crate as dash_spv_apple_bindings ; pub mod data_contract_update_transition { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`DataContractUpdateTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: v0 :: dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0) } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: DataContractUpdateTransition > for dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition) -> dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: DataContractUpdateTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: DataContractUpdateTransition :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: v0 :: dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: v0 :: DataContractUpdateTransitionV0 >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: DataContractUpdateTransition > for dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: DataContractUpdateTransition) -> * const dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition { ferment :: boxed (match obj { dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: DataContractUpdateTransition :: V0 (o_0) => dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: v0 :: dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: v0 :: DataContractUpdateTransitionV0 >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition :: V0 (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: v0 :: dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0) -> * mut dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition { ferment :: boxed (dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_contract_data_contract_update_transition_DataContractUpdateTransition) { ferment :: unbox_any (ffi) ; } pub mod v0 { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DataContractUpdateTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 { pub identity_contract_nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , pub data_contract : * mut crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: dpp_data_contract_serialized_version_DataContractInSerializationFormat , pub user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , pub signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: v0 :: DataContractUpdateTransitionV0 > for dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0) -> dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: v0 :: DataContractUpdateTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: v0 :: DataContractUpdateTransitionV0 { identity_contract_nonce : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce as ferment :: FFIConversionFrom < dpp :: prelude :: IdentityNonce >> :: ffi_from (ffi_ref . identity_contract_nonce) , data_contract : < crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: dpp_data_contract_serialized_version_DataContractInSerializationFormat as ferment :: FFIConversionFrom < dpp :: data_contract :: serialized_version :: DataContractInSerializationFormat >> :: ffi_from (ffi_ref . data_contract) , user_fee_increase : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease as ferment :: FFIConversionFrom < dpp :: prelude :: UserFeeIncrease >> :: ffi_from (ffi_ref . user_fee_increase) , signature_public_key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_from (ffi_ref . signature_public_key_id) , signature : < crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData as ferment :: FFIConversionFrom < platform_value :: types :: binary_data :: BinaryData >> :: ffi_from (ffi_ref . signature) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: v0 :: DataContractUpdateTransitionV0 > for dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: contract :: data_contract_update_transition :: v0 :: DataContractUpdateTransitionV0) -> * const dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 { ferment :: boxed (dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 { identity_contract_nonce : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce as ferment :: FFIConversionTo < dpp :: prelude :: IdentityNonce >> :: ffi_to (obj . identity_contract_nonce) , data_contract : < crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: dpp_data_contract_serialized_version_DataContractInSerializationFormat as ferment :: FFIConversionTo < dpp :: data_contract :: serialized_version :: DataContractInSerializationFormat >> :: ffi_to (obj . data_contract) , user_fee_increase : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease as ferment :: FFIConversionTo < dpp :: prelude :: UserFeeIncrease >> :: ffi_to (obj . user_fee_increase) , signature_public_key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_to (obj . signature_public_key_id) , signature : < crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData as ferment :: FFIConversionTo < platform_value :: types :: binary_data :: BinaryData >> :: ffi_to (obj . signature) }) } } impl Drop for dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . identity_contract_nonce) ; ferment :: unbox_any (ffi_ref . data_contract) ; ferment :: unbox_any (ffi_ref . user_fee_increase) ; ferment :: unbox_any (ffi_ref . signature_public_key_id) ; ferment :: unbox_any (ffi_ref . signature) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0_ctor < > (identity_contract_nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , data_contract : * mut crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: dpp_data_contract_serialized_version_DataContractInSerializationFormat , user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) -> * mut dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 { ferment :: boxed (dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0 { identity_contract_nonce , data_contract , user_fee_increase , signature_public_key_id , signature }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0_get_identity_contract_nonce < > (obj : * const dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce { (* obj) . identity_contract_nonce } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0_get_data_contract < > (obj : * const dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: dpp_data_contract_serialized_version_DataContractInSerializationFormat { (* obj) . data_contract } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0_get_user_fee_increase < > (obj : * const dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease { (* obj) . user_fee_increase } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0_get_signature_public_key_id < > (obj : * const dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . signature_public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0_get_signature < > (obj : * const dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0_set_identity_contract_nonce < > (obj : * const dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce { (* obj) . identity_contract_nonce } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0_set_data_contract < > (obj : * const dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: dpp_data_contract_serialized_version_DataContractInSerializationFormat { (* obj) . data_contract } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0_set_user_fee_increase < > (obj : * const dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease { (* obj) . user_fee_increase } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0_set_signature_public_key_id < > (obj : * const dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . signature_public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0_set_signature < > (obj : * const dpp_state_transition_state_transitions_contract_data_contract_update_transition_v0_DataContractUpdateTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } } pub mod methods { use crate as dash_spv_apple_bindings ; } pub mod accessors { use crate as dash_spv_apple_bindings ; } } pub mod common_fields { use crate as dash_spv_apple_bindings ; } pub mod data_contract_create_transition { use crate as dash_spv_apple_bindings ; # [cfg (feature = "state-transition-json-conversion")] pub mod json_conversion { use crate as dash_spv_apple_bindings ; } pub mod methods { use crate as dash_spv_apple_bindings ; } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`DataContractCreateTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: v0 :: dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0) } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: DataContractCreateTransition > for dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition) -> dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: DataContractCreateTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: DataContractCreateTransition :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: v0 :: dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: v0 :: DataContractCreateTransitionV0 >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: DataContractCreateTransition > for dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: DataContractCreateTransition) -> * const dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition { ferment :: boxed (match obj { dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: DataContractCreateTransition :: V0 (o_0) => dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: v0 :: dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: v0 :: DataContractCreateTransitionV0 >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition :: V0 (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: v0 :: dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0) -> * mut dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition { ferment :: boxed (dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition) { ferment :: unbox_any (ffi) ; } pub mod accessors { use crate as dash_spv_apple_bindings ; } pub mod v0 { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DataContractCreateTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 { pub data_contract : * mut crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: dpp_data_contract_serialized_version_DataContractInSerializationFormat , pub identity_nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , pub user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , pub signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: v0 :: DataContractCreateTransitionV0 > for dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0) -> dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: v0 :: DataContractCreateTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: v0 :: DataContractCreateTransitionV0 { data_contract : < crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: dpp_data_contract_serialized_version_DataContractInSerializationFormat as ferment :: FFIConversionFrom < dpp :: data_contract :: serialized_version :: DataContractInSerializationFormat >> :: ffi_from (ffi_ref . data_contract) , identity_nonce : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce as ferment :: FFIConversionFrom < dpp :: prelude :: IdentityNonce >> :: ffi_from (ffi_ref . identity_nonce) , user_fee_increase : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease as ferment :: FFIConversionFrom < dpp :: prelude :: UserFeeIncrease >> :: ffi_from (ffi_ref . user_fee_increase) , signature_public_key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_from (ffi_ref . signature_public_key_id) , signature : < crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData as ferment :: FFIConversionFrom < platform_value :: types :: binary_data :: BinaryData >> :: ffi_from (ffi_ref . signature) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: v0 :: DataContractCreateTransitionV0 > for dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: v0 :: DataContractCreateTransitionV0) -> * const dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 { ferment :: boxed (dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 { data_contract : < crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: dpp_data_contract_serialized_version_DataContractInSerializationFormat as ferment :: FFIConversionTo < dpp :: data_contract :: serialized_version :: DataContractInSerializationFormat >> :: ffi_to (obj . data_contract) , identity_nonce : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce as ferment :: FFIConversionTo < dpp :: prelude :: IdentityNonce >> :: ffi_to (obj . identity_nonce) , user_fee_increase : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease as ferment :: FFIConversionTo < dpp :: prelude :: UserFeeIncrease >> :: ffi_to (obj . user_fee_increase) , signature_public_key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_to (obj . signature_public_key_id) , signature : < crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData as ferment :: FFIConversionTo < platform_value :: types :: binary_data :: BinaryData >> :: ffi_to (obj . signature) }) } } impl Drop for dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . data_contract) ; ferment :: unbox_any (ffi_ref . identity_nonce) ; ferment :: unbox_any (ffi_ref . user_fee_increase) ; ferment :: unbox_any (ffi_ref . signature_public_key_id) ; ferment :: unbox_any (ffi_ref . signature) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_ctor < > (data_contract : * mut crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: dpp_data_contract_serialized_version_DataContractInSerializationFormat , identity_nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) -> * mut dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 { ferment :: boxed (dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0 { data_contract , identity_nonce , user_fee_increase , signature_public_key_id , signature }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_get_data_contract < > (obj : * const dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: dpp_data_contract_serialized_version_DataContractInSerializationFormat { (* obj) . data_contract } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_get_identity_nonce < > (obj : * const dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce { (* obj) . identity_nonce } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_get_user_fee_increase < > (obj : * const dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease { (* obj) . user_fee_increase } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_get_signature_public_key_id < > (obj : * const dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . signature_public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_get_signature < > (obj : * const dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_set_data_contract < > (obj : * const dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: data_contract :: serialized_version :: dpp_data_contract_serialized_version_DataContractInSerializationFormat { (* obj) . data_contract } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_set_identity_nonce < > (obj : * const dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce { (* obj) . identity_nonce } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_set_user_fee_increase < > (obj : * const dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease { (* obj) . user_fee_increase } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_set_signature_public_key_id < > (obj : * const dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . signature_public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0_set_signature < > (obj : * const dpp_state_transition_state_transitions_contract_data_contract_create_transition_v0_DataContractCreateTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } } } } pub mod identity { use crate as dash_spv_apple_bindings ; pub mod identity_topup_transition { use crate as dash_spv_apple_bindings ; pub mod methods { use crate as dash_spv_apple_bindings ; } pub mod v0 { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`IdentityTopUpTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0 { pub asset_lock_proof : * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof , pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , pub signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: v0 :: IdentityTopUpTransitionV0 > for dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0) -> dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: v0 :: IdentityTopUpTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: v0 :: IdentityTopUpTransitionV0 { asset_lock_proof : < crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof as ferment :: FFIConversionFrom < dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof >> :: ffi_from (ffi_ref . asset_lock_proof) , identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . identity_id) , user_fee_increase : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease as ferment :: FFIConversionFrom < dpp :: prelude :: UserFeeIncrease >> :: ffi_from (ffi_ref . user_fee_increase) , signature : < crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData as ferment :: FFIConversionFrom < platform_value :: types :: binary_data :: BinaryData >> :: ffi_from (ffi_ref . signature) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: v0 :: IdentityTopUpTransitionV0 > for dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: v0 :: IdentityTopUpTransitionV0) -> * const dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0 { ferment :: boxed (dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0 { asset_lock_proof : < crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof as ferment :: FFIConversionTo < dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof >> :: ffi_to (obj . asset_lock_proof) , identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . identity_id) , user_fee_increase : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease as ferment :: FFIConversionTo < dpp :: prelude :: UserFeeIncrease >> :: ffi_to (obj . user_fee_increase) , signature : < crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData as ferment :: FFIConversionTo < platform_value :: types :: binary_data :: BinaryData >> :: ffi_to (obj . signature) }) } } impl Drop for dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . asset_lock_proof) ; ferment :: unbox_any (ffi_ref . identity_id) ; ferment :: unbox_any (ffi_ref . user_fee_increase) ; ferment :: unbox_any (ffi_ref . signature) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0_ctor < > (asset_lock_proof : * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof , identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) -> * mut dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0 { ferment :: boxed (dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0 { asset_lock_proof , identity_id , user_fee_increase , signature }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0_get_asset_lock_proof < > (obj : * const dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof { (* obj) . asset_lock_proof } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0_get_identity_id < > (obj : * const dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0_get_user_fee_increase < > (obj : * const dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease { (* obj) . user_fee_increase } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0_get_signature < > (obj : * const dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0_set_asset_lock_proof < > (obj : * const dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof { (* obj) . asset_lock_proof } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0_set_identity_id < > (obj : * const dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0_set_user_fee_increase < > (obj : * const dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease { (* obj) . user_fee_increase } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0_set_signature < > (obj : * const dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`IdentityTopUpTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0) } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: IdentityTopUpTransition > for dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition) -> dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: IdentityTopUpTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: IdentityTopUpTransition :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0 as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: v0 :: IdentityTopUpTransitionV0 >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: IdentityTopUpTransition > for dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: IdentityTopUpTransition) -> * const dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition { ferment :: boxed (match obj { dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: IdentityTopUpTransition :: V0 (o_0) => dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0 as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: v0 :: IdentityTopUpTransitionV0 >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition :: V0 (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_topup_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_topup_transition_v0_IdentityTopUpTransitionV0) -> * mut dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition { ferment :: boxed (dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_identity_identity_topup_transition_IdentityTopUpTransition) { ferment :: unbox_any (ffi) ; } pub mod accessors { use crate as dash_spv_apple_bindings ; } } pub mod public_key_in_creation { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`IdentityPublicKeyInCreation`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: v0 :: dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation > for dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation) -> dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation :: V0 (o_0) => dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: v0 :: dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: v0 :: IdentityPublicKeyInCreationV0 >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation > for dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation) -> * const dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { ferment :: boxed (match obj { dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation :: V0 (o_0) => dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: v0 :: dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: v0 :: IdentityPublicKeyInCreationV0 >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation :: V0 (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: v0 :: dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> * mut dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { ferment :: boxed (dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation_destroy < > (ffi : * mut dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation) { ferment :: unbox_any (ffi) ; } pub mod methods { use crate as dash_spv_apple_bindings ; pub mod duplicated_keys_witness { use crate as dash_spv_apple_bindings ; } # [cfg (feature = "state-transition-signing")] pub mod from_public_key_signed_with_private_key { use crate as dash_spv_apple_bindings ; } # [cfg (feature = "state-transition-signing")] pub mod from_public_key_signed_external { use crate as dash_spv_apple_bindings ; } pub mod hash { use crate as dash_spv_apple_bindings ; } pub mod validate_identity_public_keys_structure { use crate as dash_spv_apple_bindings ; } pub mod duplicated_key_ids_witness { use crate as dash_spv_apple_bindings ; } } pub mod v0 { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`IdentityPublicKeyInCreationV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 { pub id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub key_type : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType , pub purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , pub security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , pub contract_bounds : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: contract_bounds :: dpp_identity_identity_public_key_contract_bounds_ContractBounds , pub read_only : bool , pub data : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData , pub signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: v0 :: IdentityPublicKeyInCreationV0 > for dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: v0 :: IdentityPublicKeyInCreationV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: v0 :: IdentityPublicKeyInCreationV0 { id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_from (ffi_ref . id) , key_type : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: key_type :: KeyType >> :: ffi_from (ffi_ref . key_type) , purpose : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: purpose :: Purpose >> :: ffi_from (ffi_ref . purpose) , security_level : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel >> :: ffi_from (ffi_ref . security_level) , contract_bounds : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: contract_bounds :: dpp_identity_identity_public_key_contract_bounds_ContractBounds as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds >> :: ffi_from_opt (ffi_ref . contract_bounds) , read_only : ffi_ref . read_only , data : < crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData as ferment :: FFIConversionFrom < platform_value :: types :: binary_data :: BinaryData >> :: ffi_from (ffi_ref . data) , signature : < crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData as ferment :: FFIConversionFrom < platform_value :: types :: binary_data :: BinaryData >> :: ffi_from (ffi_ref . signature) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: v0 :: IdentityPublicKeyInCreationV0 > for dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: v0 :: IdentityPublicKeyInCreationV0) -> * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 { ferment :: boxed (dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 { id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_to (obj . id) , key_type : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: key_type :: KeyType >> :: ffi_to (obj . key_type) , purpose : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: purpose :: Purpose >> :: ffi_to (obj . purpose) , security_level : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel >> :: ffi_to (obj . security_level) , contract_bounds : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: contract_bounds :: dpp_identity_identity_public_key_contract_bounds_ContractBounds as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds >> :: ffi_to_opt (obj . contract_bounds) , read_only : obj . read_only , data : < crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData as ferment :: FFIConversionTo < platform_value :: types :: binary_data :: BinaryData >> :: ffi_to (obj . data) , signature : < crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData as ferment :: FFIConversionTo < platform_value :: types :: binary_data :: BinaryData >> :: ffi_to (obj . signature) }) } } impl Drop for dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . id) ; ferment :: unbox_any (ffi_ref . key_type) ; ferment :: unbox_any (ffi_ref . purpose) ; ferment :: unbox_any (ffi_ref . security_level) ; ferment :: unbox_any_opt (ffi_ref . contract_bounds) ; ; ferment :: unbox_any (ffi_ref . data) ; ferment :: unbox_any (ffi_ref . signature) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_ctor < > (id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , key_type : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType , purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , contract_bounds : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: contract_bounds :: dpp_identity_identity_public_key_contract_bounds_ContractBounds , read_only : bool , data : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData , signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) -> * mut dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 { ferment :: boxed (dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0 { id , key_type , purpose , security_level , contract_bounds , read_only , data , signature }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_get_id < > (obj : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_get_key_type < > (obj : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType { (* obj) . key_type } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_get_purpose < > (obj : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose { (* obj) . purpose } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_get_security_level < > (obj : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . security_level } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_get_contract_bounds < > (obj : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: contract_bounds :: dpp_identity_identity_public_key_contract_bounds_ContractBounds { (* obj) . contract_bounds } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_get_read_only < > (obj : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> bool { (* obj) . read_only } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_get_data < > (obj : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . data } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_get_signature < > (obj : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_set_id < > (obj : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_set_key_type < > (obj : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType { (* obj) . key_type } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_set_purpose < > (obj : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose { (* obj) . purpose } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_set_security_level < > (obj : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . security_level } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_set_contract_bounds < > (obj : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: contract_bounds :: dpp_identity_identity_public_key_contract_bounds_ContractBounds { (* obj) . contract_bounds } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_set_read_only < > (obj : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> bool { (* obj) . read_only } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_set_data < > (obj : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . data } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0_set_signature < > (obj : * const dpp_state_transition_state_transitions_identity_public_key_in_creation_v0_IdentityPublicKeyInCreationV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } } } pub mod common_fields { use crate as dash_spv_apple_bindings ; } pub mod identity_create_transition { use crate as dash_spv_apple_bindings ; pub mod methods { use crate as dash_spv_apple_bindings ; } pub mod accessors { use crate as dash_spv_apple_bindings ; } pub mod v0 { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`IdentityCreateTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 { pub public_keys : * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation , pub asset_lock_proof : * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof , pub user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , pub signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData , pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: v0 :: IdentityCreateTransitionV0 > for dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0) -> dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: v0 :: IdentityCreateTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: v0 :: IdentityCreateTransitionV0 { public_keys : < crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation as ferment :: FFIConversionFrom < Vec < dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation > >> :: ffi_from (ffi_ref . public_keys) , asset_lock_proof : < crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof as ferment :: FFIConversionFrom < dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof >> :: ffi_from (ffi_ref . asset_lock_proof) , user_fee_increase : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease as ferment :: FFIConversionFrom < dpp :: prelude :: UserFeeIncrease >> :: ffi_from (ffi_ref . user_fee_increase) , signature : < crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData as ferment :: FFIConversionFrom < platform_value :: types :: binary_data :: BinaryData >> :: ffi_from (ffi_ref . signature) , identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . identity_id) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: v0 :: IdentityCreateTransitionV0 > for dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: v0 :: IdentityCreateTransitionV0) -> * const dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 { ferment :: boxed (dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 { public_keys : < crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation as ferment :: FFIConversionTo < Vec < dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation > >> :: ffi_to (obj . public_keys) , asset_lock_proof : < crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof as ferment :: FFIConversionTo < dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof >> :: ffi_to (obj . asset_lock_proof) , user_fee_increase : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease as ferment :: FFIConversionTo < dpp :: prelude :: UserFeeIncrease >> :: ffi_to (obj . user_fee_increase) , signature : < crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData as ferment :: FFIConversionTo < platform_value :: types :: binary_data :: BinaryData >> :: ffi_to (obj . signature) , identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . identity_id) }) } } impl Drop for dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . public_keys) ; ferment :: unbox_any (ffi_ref . asset_lock_proof) ; ferment :: unbox_any (ffi_ref . user_fee_increase) ; ferment :: unbox_any (ffi_ref . signature) ; ferment :: unbox_any (ffi_ref . identity_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_ctor < > (public_keys : * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation , asset_lock_proof : * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof , user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData , identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 { ferment :: boxed (dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 { public_keys , asset_lock_proof , user_fee_increase , signature , identity_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_get_public_keys < > (obj : * const dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0) -> * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { (* obj) . public_keys } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_get_asset_lock_proof < > (obj : * const dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof { (* obj) . asset_lock_proof } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_get_user_fee_increase < > (obj : * const dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease { (* obj) . user_fee_increase } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_get_signature < > (obj : * const dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_get_identity_id < > (obj : * const dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_set_public_keys < > (obj : * const dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0) -> * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { (* obj) . public_keys } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_set_asset_lock_proof < > (obj : * const dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof { (* obj) . asset_lock_proof } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_set_user_fee_increase < > (obj : * const dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease { (* obj) . user_fee_increase } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_set_signature < > (obj : * const dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0_set_identity_id < > (obj : * const dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`IdentityCreateTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0) } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: IdentityCreateTransition > for dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition) -> dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: IdentityCreateTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: IdentityCreateTransition :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: v0 :: IdentityCreateTransitionV0 >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: IdentityCreateTransition > for dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: IdentityCreateTransition) -> * const dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition { ferment :: boxed (match obj { dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: IdentityCreateTransition :: V0 (o_0) => dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0 as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: v0 :: IdentityCreateTransitionV0 >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition :: V0 (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_create_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_create_transition_v0_IdentityCreateTransitionV0) -> * mut dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition { ferment :: boxed (dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_identity_identity_create_transition_IdentityCreateTransition) { ferment :: unbox_any (ffi) ; } } pub mod identity_credit_transfer_transition { use crate as dash_spv_apple_bindings ; pub mod v0 { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`IdentityCreditTransferTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 { pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub recipient_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub amount : u64 , pub nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , pub user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , pub signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: v0 :: IdentityCreditTransferTransitionV0 > for dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) -> dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: v0 :: IdentityCreditTransferTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: v0 :: IdentityCreditTransferTransitionV0 { identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . identity_id) , recipient_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . recipient_id) , amount : ffi_ref . amount , nonce : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce as ferment :: FFIConversionFrom < dpp :: prelude :: IdentityNonce >> :: ffi_from (ffi_ref . nonce) , user_fee_increase : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease as ferment :: FFIConversionFrom < dpp :: prelude :: UserFeeIncrease >> :: ffi_from (ffi_ref . user_fee_increase) , signature_public_key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_from (ffi_ref . signature_public_key_id) , signature : < crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData as ferment :: FFIConversionFrom < platform_value :: types :: binary_data :: BinaryData >> :: ffi_from (ffi_ref . signature) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: v0 :: IdentityCreditTransferTransitionV0 > for dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: v0 :: IdentityCreditTransferTransitionV0) -> * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 { ferment :: boxed (dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 { identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . identity_id) , recipient_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . recipient_id) , amount : obj . amount , nonce : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce as ferment :: FFIConversionTo < dpp :: prelude :: IdentityNonce >> :: ffi_to (obj . nonce) , user_fee_increase : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease as ferment :: FFIConversionTo < dpp :: prelude :: UserFeeIncrease >> :: ffi_to (obj . user_fee_increase) , signature_public_key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_to (obj . signature_public_key_id) , signature : < crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData as ferment :: FFIConversionTo < platform_value :: types :: binary_data :: BinaryData >> :: ffi_to (obj . signature) }) } } impl Drop for dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . identity_id) ; ferment :: unbox_any (ffi_ref . recipient_id) ; ; ferment :: unbox_any (ffi_ref . nonce) ; ferment :: unbox_any (ffi_ref . user_fee_increase) ; ferment :: unbox_any (ffi_ref . signature_public_key_id) ; ferment :: unbox_any (ffi_ref . signature) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_ctor < > (identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , recipient_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , amount : u64 , nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) -> * mut dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 { ferment :: boxed (dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 { identity_id , recipient_id , amount , nonce , user_fee_increase , signature_public_key_id , signature }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_get_identity_id < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_get_recipient_id < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . recipient_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_get_amount < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) -> u64 { (* obj) . amount } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_get_nonce < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce { (* obj) . nonce } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_get_user_fee_increase < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease { (* obj) . user_fee_increase } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_get_signature_public_key_id < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . signature_public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_get_signature < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_set_identity_id < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_set_recipient_id < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . recipient_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_set_amount < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) -> u64 { (* obj) . amount } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_set_nonce < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce { (* obj) . nonce } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_set_user_fee_increase < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease { (* obj) . user_fee_increase } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_set_signature_public_key_id < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . signature_public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0_set_signature < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } } pub mod accessors { use crate as dash_spv_apple_bindings ; } pub mod fields { use crate as dash_spv_apple_bindings ; } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`IdentityCreditTransferTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: IdentityCreditTransferTransition > for dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition) -> dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: IdentityCreditTransferTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: IdentityCreditTransferTransition :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: v0 :: IdentityCreditTransferTransitionV0 >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: IdentityCreditTransferTransition > for dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: IdentityCreditTransferTransition) -> * const dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition { ferment :: boxed (match obj { dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: IdentityCreditTransferTransition :: V0 (o_0) => dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0 as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: v0 :: IdentityCreditTransferTransitionV0 >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition :: V0 (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_transfer_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_v0_IdentityCreditTransferTransitionV0) -> * mut dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition { ferment :: boxed (dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_identity_identity_credit_transfer_transition_IdentityCreditTransferTransition) { ferment :: unbox_any (ffi) ; } pub mod methods { use crate as dash_spv_apple_bindings ; } } pub mod masternode_vote_transition { use crate as dash_spv_apple_bindings ; pub mod v0 { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`MasternodeVoteTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0 { pub pro_tx_hash : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub voter_identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub vote : * mut crate :: fermented :: types :: dpp :: voting :: votes :: dpp_voting_votes_Vote , pub nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , pub signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: v0 :: MasternodeVoteTransitionV0 > for dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0) -> dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: v0 :: MasternodeVoteTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: v0 :: MasternodeVoteTransitionV0 { pro_tx_hash : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . pro_tx_hash) , voter_identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . voter_identity_id) , vote : < crate :: fermented :: types :: dpp :: voting :: votes :: dpp_voting_votes_Vote as ferment :: FFIConversionFrom < dpp :: voting :: votes :: Vote >> :: ffi_from (ffi_ref . vote) , nonce : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce as ferment :: FFIConversionFrom < dpp :: prelude :: IdentityNonce >> :: ffi_from (ffi_ref . nonce) , signature_public_key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_from (ffi_ref . signature_public_key_id) , signature : < crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData as ferment :: FFIConversionFrom < platform_value :: types :: binary_data :: BinaryData >> :: ffi_from (ffi_ref . signature) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: v0 :: MasternodeVoteTransitionV0 > for dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: v0 :: MasternodeVoteTransitionV0) -> * const dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0 { ferment :: boxed (dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0 { pro_tx_hash : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . pro_tx_hash) , voter_identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . voter_identity_id) , vote : < crate :: fermented :: types :: dpp :: voting :: votes :: dpp_voting_votes_Vote as ferment :: FFIConversionTo < dpp :: voting :: votes :: Vote >> :: ffi_to (obj . vote) , nonce : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce as ferment :: FFIConversionTo < dpp :: prelude :: IdentityNonce >> :: ffi_to (obj . nonce) , signature_public_key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_to (obj . signature_public_key_id) , signature : < crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData as ferment :: FFIConversionTo < platform_value :: types :: binary_data :: BinaryData >> :: ffi_to (obj . signature) }) } } impl Drop for dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . pro_tx_hash) ; ferment :: unbox_any (ffi_ref . voter_identity_id) ; ferment :: unbox_any (ffi_ref . vote) ; ferment :: unbox_any (ffi_ref . nonce) ; ferment :: unbox_any (ffi_ref . signature_public_key_id) ; ferment :: unbox_any (ffi_ref . signature) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0_ctor < > (pro_tx_hash : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , voter_identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , vote : * mut crate :: fermented :: types :: dpp :: voting :: votes :: dpp_voting_votes_Vote , nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) -> * mut dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0 { ferment :: boxed (dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0 { pro_tx_hash , voter_identity_id , vote , nonce , signature_public_key_id , signature }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0_get_pro_tx_hash < > (obj : * const dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . pro_tx_hash } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0_get_voter_identity_id < > (obj : * const dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . voter_identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0_get_vote < > (obj : * const dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0) -> * mut crate :: fermented :: types :: dpp :: voting :: votes :: dpp_voting_votes_Vote { (* obj) . vote } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0_get_nonce < > (obj : * const dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce { (* obj) . nonce } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0_get_signature_public_key_id < > (obj : * const dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . signature_public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0_get_signature < > (obj : * const dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0_set_pro_tx_hash < > (obj : * const dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . pro_tx_hash } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0_set_voter_identity_id < > (obj : * const dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . voter_identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0_set_vote < > (obj : * const dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0) -> * mut crate :: fermented :: types :: dpp :: voting :: votes :: dpp_voting_votes_Vote { (* obj) . vote } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0_set_nonce < > (obj : * const dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce { (* obj) . nonce } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0_set_signature_public_key_id < > (obj : * const dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . signature_public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0_set_signature < > (obj : * const dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } } pub mod fields { use crate as dash_spv_apple_bindings ; } pub mod accessors { use crate as dash_spv_apple_bindings ; } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`MasternodeVoteTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: v0 :: dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0) } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: MasternodeVoteTransition > for dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition) -> dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: MasternodeVoteTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: MasternodeVoteTransition :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: v0 :: dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0 as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: v0 :: MasternodeVoteTransitionV0 >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: MasternodeVoteTransition > for dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: MasternodeVoteTransition) -> * const dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition { ferment :: boxed (match obj { dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: MasternodeVoteTransition :: V0 (o_0) => dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: v0 :: dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0 as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: v0 :: MasternodeVoteTransitionV0 >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition :: V0 (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: masternode_vote_transition :: v0 :: dpp_state_transition_state_transitions_identity_masternode_vote_transition_v0_MasternodeVoteTransitionV0) -> * mut dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition { ferment :: boxed (dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_identity_masternode_vote_transition_MasternodeVoteTransition) { ferment :: unbox_any (ffi) ; } pub mod methods { use crate as dash_spv_apple_bindings ; } } pub mod identity_update_transition { use crate as dash_spv_apple_bindings ; pub mod accessors { use crate as dash_spv_apple_bindings ; } pub mod fields { use crate as dash_spv_apple_bindings ; } pub mod v0 { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`IdentityUpdateTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 { pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , pub nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , pub add_public_keys : * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation , pub disable_public_keys : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID , pub user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , pub signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: v0 :: IdentityUpdateTransitionV0 > for dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: v0 :: IdentityUpdateTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: v0 :: IdentityUpdateTransitionV0 { identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . identity_id) , revision : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision as ferment :: FFIConversionFrom < dpp :: prelude :: Revision >> :: ffi_from (ffi_ref . revision) , nonce : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce as ferment :: FFIConversionFrom < dpp :: prelude :: IdentityNonce >> :: ffi_from (ffi_ref . nonce) , add_public_keys : < crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation as ferment :: FFIConversionFrom < Vec < dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation > >> :: ffi_from (ffi_ref . add_public_keys) , disable_public_keys : < crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionFrom < Vec < dpp :: identity :: identity_public_key :: KeyID > >> :: ffi_from (ffi_ref . disable_public_keys) , user_fee_increase : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease as ferment :: FFIConversionFrom < dpp :: prelude :: UserFeeIncrease >> :: ffi_from (ffi_ref . user_fee_increase) , signature_public_key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_from (ffi_ref . signature_public_key_id) , signature : < crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData as ferment :: FFIConversionFrom < platform_value :: types :: binary_data :: BinaryData >> :: ffi_from (ffi_ref . signature) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: v0 :: IdentityUpdateTransitionV0 > for dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: v0 :: IdentityUpdateTransitionV0) -> * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 { ferment :: boxed (dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 { identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . identity_id) , revision : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision as ferment :: FFIConversionTo < dpp :: prelude :: Revision >> :: ffi_to (obj . revision) , nonce : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce as ferment :: FFIConversionTo < dpp :: prelude :: IdentityNonce >> :: ffi_to (obj . nonce) , add_public_keys : < crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation as ferment :: FFIConversionTo < Vec < dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation > >> :: ffi_to (obj . add_public_keys) , disable_public_keys : < crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionTo < Vec < dpp :: identity :: identity_public_key :: KeyID > >> :: ffi_to (obj . disable_public_keys) , user_fee_increase : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease as ferment :: FFIConversionTo < dpp :: prelude :: UserFeeIncrease >> :: ffi_to (obj . user_fee_increase) , signature_public_key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_to (obj . signature_public_key_id) , signature : < crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData as ferment :: FFIConversionTo < platform_value :: types :: binary_data :: BinaryData >> :: ffi_to (obj . signature) }) } } impl Drop for dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . identity_id) ; ferment :: unbox_any (ffi_ref . revision) ; ferment :: unbox_any (ffi_ref . nonce) ; ferment :: unbox_any (ffi_ref . add_public_keys) ; ferment :: unbox_any (ffi_ref . disable_public_keys) ; ferment :: unbox_any (ffi_ref . user_fee_increase) ; ferment :: unbox_any (ffi_ref . signature_public_key_id) ; ferment :: unbox_any (ffi_ref . signature) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_ctor < > (identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , add_public_keys : * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation , disable_public_keys : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID , user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) -> * mut dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 { ferment :: boxed (dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 { identity_id , revision , nonce , add_public_keys , disable_public_keys , user_fee_increase , signature_public_key_id , signature }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_get_identity_id < > (obj : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_get_revision < > (obj : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_get_nonce < > (obj : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce { (* obj) . nonce } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_get_add_public_keys < > (obj : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { (* obj) . add_public_keys } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_get_disable_public_keys < > (obj : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID { (* obj) . disable_public_keys } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_get_user_fee_increase < > (obj : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease { (* obj) . user_fee_increase } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_get_signature_public_key_id < > (obj : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . signature_public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_get_signature < > (obj : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_set_identity_id < > (obj : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_set_revision < > (obj : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_set_nonce < > (obj : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce { (* obj) . nonce } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_set_add_public_keys < > (obj : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { (* obj) . add_public_keys } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_set_disable_public_keys < > (obj : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID { (* obj) . disable_public_keys } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_set_user_fee_increase < > (obj : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease { (* obj) . user_fee_increase } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_set_signature_public_key_id < > (obj : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . signature_public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0_set_signature < > (obj : * const dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } # [cfg (feature = "state-transition-json-conversion")] pub mod json_conversion { use crate as dash_spv_apple_bindings ; } } pub mod methods { use crate as dash_spv_apple_bindings ; } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`IdentityUpdateTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: IdentityUpdateTransition > for dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition) -> dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: IdentityUpdateTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: IdentityUpdateTransition :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: v0 :: IdentityUpdateTransitionV0 >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: IdentityUpdateTransition > for dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: IdentityUpdateTransition) -> * const dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition { ferment :: boxed (match obj { dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: IdentityUpdateTransition :: V0 (o_0) => dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0 as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: v0 :: IdentityUpdateTransitionV0 >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition :: V0 (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_update_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_update_transition_v0_IdentityUpdateTransitionV0) -> * mut dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition { ferment :: boxed (dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_identity_identity_update_transition_IdentityUpdateTransition) { ferment :: unbox_any (ffi) ; } } pub mod identity_credit_withdrawal_transition { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`IdentityCreditWithdrawalTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) , V1 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v1 :: dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1) } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: IdentityCreditWithdrawalTransition > for dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition) -> dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: IdentityCreditWithdrawalTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: IdentityCreditWithdrawalTransition :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v0 :: IdentityCreditWithdrawalTransitionV0 >> :: ffi_from (* o_0)) , dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition :: V1 (o_0) => dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: IdentityCreditWithdrawalTransition :: V1 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v1 :: dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1 as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v1 :: IdentityCreditWithdrawalTransitionV1 >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: IdentityCreditWithdrawalTransition > for dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: IdentityCreditWithdrawalTransition) -> * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition { ferment :: boxed (match obj { dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: IdentityCreditWithdrawalTransition :: V0 (o_0) => dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v0 :: IdentityCreditWithdrawalTransitionV0 >> :: ffi_to (o_0)) , dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: IdentityCreditWithdrawalTransition :: V1 (o_0) => dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition :: V1 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v1 :: dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1 as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v1 :: IdentityCreditWithdrawalTransitionV1 >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition :: V0 (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition :: V1 (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v0 :: dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition { ferment :: boxed (dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition_V1_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v1 :: dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1) -> * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition { ferment :: boxed (dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition :: V1 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_IdentityCreditWithdrawalTransition) { ferment :: unbox_any (ffi) ; } pub mod v0 { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`IdentityCreditWithdrawalTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 { pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub amount : u64 , pub core_fee_per_byte : u32 , pub pooling : * mut crate :: fermented :: types :: dpp :: withdrawal :: dpp_withdrawal_Pooling , pub output_script : * mut crate :: fermented :: types :: dpp :: identity :: core_script :: dpp_identity_core_script_CoreScript , pub nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , pub user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , pub signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v0 :: IdentityCreditWithdrawalTransitionV0 > for dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v0 :: IdentityCreditWithdrawalTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v0 :: IdentityCreditWithdrawalTransitionV0 { identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . identity_id) , amount : ffi_ref . amount , core_fee_per_byte : ffi_ref . core_fee_per_byte , pooling : < crate :: fermented :: types :: dpp :: withdrawal :: dpp_withdrawal_Pooling as ferment :: FFIConversionFrom < dpp :: withdrawal :: Pooling >> :: ffi_from (ffi_ref . pooling) , output_script : < crate :: fermented :: types :: dpp :: identity :: core_script :: dpp_identity_core_script_CoreScript as ferment :: FFIConversionFrom < dpp :: identity :: core_script :: CoreScript >> :: ffi_from (ffi_ref . output_script) , nonce : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce as ferment :: FFIConversionFrom < dpp :: prelude :: IdentityNonce >> :: ffi_from (ffi_ref . nonce) , user_fee_increase : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease as ferment :: FFIConversionFrom < dpp :: prelude :: UserFeeIncrease >> :: ffi_from (ffi_ref . user_fee_increase) , signature_public_key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_from (ffi_ref . signature_public_key_id) , signature : < crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData as ferment :: FFIConversionFrom < platform_value :: types :: binary_data :: BinaryData >> :: ffi_from (ffi_ref . signature) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v0 :: IdentityCreditWithdrawalTransitionV0 > for dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v0 :: IdentityCreditWithdrawalTransitionV0) -> * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 { ferment :: boxed (dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 { identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . identity_id) , amount : obj . amount , core_fee_per_byte : obj . core_fee_per_byte , pooling : < crate :: fermented :: types :: dpp :: withdrawal :: dpp_withdrawal_Pooling as ferment :: FFIConversionTo < dpp :: withdrawal :: Pooling >> :: ffi_to (obj . pooling) , output_script : < crate :: fermented :: types :: dpp :: identity :: core_script :: dpp_identity_core_script_CoreScript as ferment :: FFIConversionTo < dpp :: identity :: core_script :: CoreScript >> :: ffi_to (obj . output_script) , nonce : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce as ferment :: FFIConversionTo < dpp :: prelude :: IdentityNonce >> :: ffi_to (obj . nonce) , user_fee_increase : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease as ferment :: FFIConversionTo < dpp :: prelude :: UserFeeIncrease >> :: ffi_to (obj . user_fee_increase) , signature_public_key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_to (obj . signature_public_key_id) , signature : < crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData as ferment :: FFIConversionTo < platform_value :: types :: binary_data :: BinaryData >> :: ffi_to (obj . signature) }) } } impl Drop for dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . identity_id) ; ; ; ferment :: unbox_any (ffi_ref . pooling) ; ferment :: unbox_any (ffi_ref . output_script) ; ferment :: unbox_any (ffi_ref . nonce) ; ferment :: unbox_any (ffi_ref . user_fee_increase) ; ferment :: unbox_any (ffi_ref . signature_public_key_id) ; ferment :: unbox_any (ffi_ref . signature) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_ctor < > (identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , amount : u64 , core_fee_per_byte : u32 , pooling : * mut crate :: fermented :: types :: dpp :: withdrawal :: dpp_withdrawal_Pooling , output_script : * mut crate :: fermented :: types :: dpp :: identity :: core_script :: dpp_identity_core_script_CoreScript , nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) -> * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 { ferment :: boxed (dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0 { identity_id , amount , core_fee_per_byte , pooling , output_script , nonce , user_fee_increase , signature_public_key_id , signature }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_get_identity_id < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_get_amount < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> u64 { (* obj) . amount } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_get_core_fee_per_byte < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> u32 { (* obj) . core_fee_per_byte } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_get_pooling < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> * mut crate :: fermented :: types :: dpp :: withdrawal :: dpp_withdrawal_Pooling { (* obj) . pooling } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_get_output_script < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: core_script :: dpp_identity_core_script_CoreScript { (* obj) . output_script } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_get_nonce < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce { (* obj) . nonce } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_get_user_fee_increase < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease { (* obj) . user_fee_increase } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_get_signature_public_key_id < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . signature_public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_get_signature < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_set_identity_id < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_set_amount < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> u64 { (* obj) . amount } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_set_core_fee_per_byte < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> u32 { (* obj) . core_fee_per_byte } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_set_pooling < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> * mut crate :: fermented :: types :: dpp :: withdrawal :: dpp_withdrawal_Pooling { (* obj) . pooling } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_set_output_script < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: core_script :: dpp_identity_core_script_CoreScript { (* obj) . output_script } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_set_nonce < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce { (* obj) . nonce } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_set_user_fee_increase < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease { (* obj) . user_fee_increase } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_set_signature_public_key_id < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . signature_public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0_set_signature < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v0_IdentityCreditWithdrawalTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } } pub mod methods { use crate as dash_spv_apple_bindings ; } pub mod v1 { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`IdentityCreditWithdrawalTransitionV1`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1 { pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub amount : u64 , pub core_fee_per_byte : u32 , pub pooling : * mut crate :: fermented :: types :: dpp :: withdrawal :: dpp_withdrawal_Pooling , pub output_script : * mut crate :: fermented :: types :: dpp :: identity :: core_script :: dpp_identity_core_script_CoreScript , pub nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , pub user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , pub signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v1 :: IdentityCreditWithdrawalTransitionV1 > for dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1) -> dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v1 :: IdentityCreditWithdrawalTransitionV1 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v1 :: IdentityCreditWithdrawalTransitionV1 { identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . identity_id) , amount : ffi_ref . amount , core_fee_per_byte : ffi_ref . core_fee_per_byte , pooling : < crate :: fermented :: types :: dpp :: withdrawal :: dpp_withdrawal_Pooling as ferment :: FFIConversionFrom < dpp :: withdrawal :: Pooling >> :: ffi_from (ffi_ref . pooling) , output_script : < crate :: fermented :: types :: dpp :: identity :: core_script :: dpp_identity_core_script_CoreScript as ferment :: FFIConversionFrom < dpp :: identity :: core_script :: CoreScript >> :: ffi_from_opt (ffi_ref . output_script) , nonce : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce as ferment :: FFIConversionFrom < dpp :: prelude :: IdentityNonce >> :: ffi_from (ffi_ref . nonce) , user_fee_increase : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease as ferment :: FFIConversionFrom < dpp :: prelude :: UserFeeIncrease >> :: ffi_from (ffi_ref . user_fee_increase) , signature_public_key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_from (ffi_ref . signature_public_key_id) , signature : < crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData as ferment :: FFIConversionFrom < platform_value :: types :: binary_data :: BinaryData >> :: ffi_from (ffi_ref . signature) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v1 :: IdentityCreditWithdrawalTransitionV1 > for dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: identity :: identity_credit_withdrawal_transition :: v1 :: IdentityCreditWithdrawalTransitionV1) -> * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1 { ferment :: boxed (dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1 { identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . identity_id) , amount : obj . amount , core_fee_per_byte : obj . core_fee_per_byte , pooling : < crate :: fermented :: types :: dpp :: withdrawal :: dpp_withdrawal_Pooling as ferment :: FFIConversionTo < dpp :: withdrawal :: Pooling >> :: ffi_to (obj . pooling) , output_script : < crate :: fermented :: types :: dpp :: identity :: core_script :: dpp_identity_core_script_CoreScript as ferment :: FFIConversionTo < dpp :: identity :: core_script :: CoreScript >> :: ffi_to_opt (obj . output_script) , nonce : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce as ferment :: FFIConversionTo < dpp :: prelude :: IdentityNonce >> :: ffi_to (obj . nonce) , user_fee_increase : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease as ferment :: FFIConversionTo < dpp :: prelude :: UserFeeIncrease >> :: ffi_to (obj . user_fee_increase) , signature_public_key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_to (obj . signature_public_key_id) , signature : < crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData as ferment :: FFIConversionTo < platform_value :: types :: binary_data :: BinaryData >> :: ffi_to (obj . signature) }) } } impl Drop for dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . identity_id) ; ; ; ferment :: unbox_any (ffi_ref . pooling) ; ferment :: unbox_any_opt (ffi_ref . output_script) ; ferment :: unbox_any (ffi_ref . nonce) ; ferment :: unbox_any (ffi_ref . user_fee_increase) ; ferment :: unbox_any (ffi_ref . signature_public_key_id) ; ferment :: unbox_any (ffi_ref . signature) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1_ctor < > (identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , amount : u64 , core_fee_per_byte : u32 , pooling : * mut crate :: fermented :: types :: dpp :: withdrawal :: dpp_withdrawal_Pooling , output_script : * mut crate :: fermented :: types :: dpp :: identity :: core_script :: dpp_identity_core_script_CoreScript , nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) -> * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1 { ferment :: boxed (dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1 { identity_id , amount , core_fee_per_byte , pooling , output_script , nonce , user_fee_increase , signature_public_key_id , signature }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1_destroy < > (ffi : * mut dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1_get_identity_id < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1_get_amount < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1) -> u64 { (* obj) . amount } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1_get_core_fee_per_byte < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1) -> u32 { (* obj) . core_fee_per_byte } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1_get_pooling < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1) -> * mut crate :: fermented :: types :: dpp :: withdrawal :: dpp_withdrawal_Pooling { (* obj) . pooling } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1_get_output_script < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1) -> * mut crate :: fermented :: types :: dpp :: identity :: core_script :: dpp_identity_core_script_CoreScript { (* obj) . output_script } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1_get_nonce < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce { (* obj) . nonce } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1_get_user_fee_increase < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease { (* obj) . user_fee_increase } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1_get_signature_public_key_id < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . signature_public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1_get_signature < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1_set_identity_id < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1_set_amount < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1) -> u64 { (* obj) . amount } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1_set_core_fee_per_byte < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1) -> u32 { (* obj) . core_fee_per_byte } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1_set_pooling < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1) -> * mut crate :: fermented :: types :: dpp :: withdrawal :: dpp_withdrawal_Pooling { (* obj) . pooling } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1_set_output_script < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1) -> * mut crate :: fermented :: types :: dpp :: identity :: core_script :: dpp_identity_core_script_CoreScript { (* obj) . output_script } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1_set_nonce < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce { (* obj) . nonce } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1_set_user_fee_increase < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease { (* obj) . user_fee_increase } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1_set_signature_public_key_id < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . signature_public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1_set_signature < > (obj : * const dpp_state_transition_state_transitions_identity_identity_credit_withdrawal_transition_v1_IdentityCreditWithdrawalTransitionV1) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } } pub mod accessors { use crate as dash_spv_apple_bindings ; } } } pub mod document { use crate as dash_spv_apple_bindings ; pub mod documents_batch_transition { use crate as dash_spv_apple_bindings ; pub mod fields { use crate as dash_spv_apple_bindings ; } pub mod accessors { use crate as dash_spv_apple_bindings ; } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`DocumentsBatchTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0) } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: DocumentsBatchTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: DocumentsBatchTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: DocumentsBatchTransition :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: v0 :: DocumentsBatchTransitionV0 >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: DocumentsBatchTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: DocumentsBatchTransition) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition { ferment :: boxed (match obj { dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: DocumentsBatchTransition :: V0 (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: v0 :: DocumentsBatchTransitionV0 >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition :: V0 (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_DocumentsBatchTransition) { ferment :: unbox_any (ffi) ; } pub mod methods { use crate as dash_spv_apple_bindings ; } pub mod document_transition { use crate as dash_spv_apple_bindings ; pub mod document_update_price_transition { use crate as dash_spv_apple_bindings ; pub mod v0 { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DocumentUpdatePriceTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0 { pub base : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition , pub revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , pub price : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: v0 :: DocumentUpdatePriceTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: v0 :: DocumentUpdatePriceTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: v0 :: DocumentUpdatePriceTransitionV0 { base : < crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: DocumentBaseTransition >> :: ffi_from (ffi_ref . base) , revision : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision as ferment :: FFIConversionFrom < dpp :: prelude :: Revision >> :: ffi_from (ffi_ref . revision) , price : < crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits as ferment :: FFIConversionFrom < dpp :: balances :: credits :: Credits >> :: ffi_from (ffi_ref . price) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: v0 :: DocumentUpdatePriceTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: v0 :: DocumentUpdatePriceTransitionV0) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0 { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0 { base : < crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: DocumentBaseTransition >> :: ffi_to (obj . base) , revision : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision as ferment :: FFIConversionTo < dpp :: prelude :: Revision >> :: ffi_to (obj . revision) , price : < crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits as ferment :: FFIConversionTo < dpp :: balances :: credits :: Credits >> :: ffi_to (obj . price) }) } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . base) ; ferment :: unbox_any (ffi_ref . revision) ; ferment :: unbox_any (ffi_ref . price) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0_ctor < > (base : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition , revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , price : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0 { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0 { base , revision , price }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0_get_base < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0) -> * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { (* obj) . base } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0_get_revision < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0_get_price < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . price } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0_set_base < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0) -> * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { (* obj) . base } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0_set_revision < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0_set_price < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . price } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`DocumentUpdatePriceTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0) } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: DocumentUpdatePriceTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: DocumentUpdatePriceTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: DocumentUpdatePriceTransition :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0 as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: v0 :: DocumentUpdatePriceTransitionV0 >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: DocumentUpdatePriceTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: DocumentUpdatePriceTransition) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition { ferment :: boxed (match obj { dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: DocumentUpdatePriceTransition :: V0 (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0 as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: v0 :: DocumentUpdatePriceTransitionV0 >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition :: V0 (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_v0_DocumentUpdatePriceTransitionV0) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition) { ferment :: unbox_any (ffi) ; } } pub mod document_purchase_transition { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`DocumentPurchaseTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0) } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: DocumentPurchaseTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: DocumentPurchaseTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: DocumentPurchaseTransition :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0 as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: v0 :: DocumentPurchaseTransitionV0 >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: DocumentPurchaseTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: DocumentPurchaseTransition) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition { ferment :: boxed (match obj { dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: DocumentPurchaseTransition :: V0 (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0 as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: v0 :: DocumentPurchaseTransitionV0 >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition :: V0 (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition) { ferment :: unbox_any (ffi) ; } pub mod v0 { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DocumentPurchaseTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0 { pub base : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition , pub revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , pub price : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: v0 :: DocumentPurchaseTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: v0 :: DocumentPurchaseTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: v0 :: DocumentPurchaseTransitionV0 { base : < crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: DocumentBaseTransition >> :: ffi_from (ffi_ref . base) , revision : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision as ferment :: FFIConversionFrom < dpp :: prelude :: Revision >> :: ffi_from (ffi_ref . revision) , price : < crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits as ferment :: FFIConversionFrom < dpp :: balances :: credits :: Credits >> :: ffi_from (ffi_ref . price) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: v0 :: DocumentPurchaseTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: v0 :: DocumentPurchaseTransitionV0) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0 { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0 { base : < crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: DocumentBaseTransition >> :: ffi_to (obj . base) , revision : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision as ferment :: FFIConversionTo < dpp :: prelude :: Revision >> :: ffi_to (obj . revision) , price : < crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits as ferment :: FFIConversionTo < dpp :: balances :: credits :: Credits >> :: ffi_to (obj . price) }) } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . base) ; ferment :: unbox_any (ffi_ref . revision) ; ferment :: unbox_any (ffi_ref . price) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0_ctor < > (base : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition , revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , price : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0 { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0 { base , revision , price }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0_get_base < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0) -> * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { (* obj) . base } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0_get_revision < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0_get_price < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . price } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0_set_base < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0) -> * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { (* obj) . base } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0_set_revision < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0_set_price < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_v0_DocumentPurchaseTransitionV0) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . price } } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`DocumentTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { Create (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition) , Replace (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition) , Delete (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition) , Transfer (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition) , UpdatePrice (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition) , Purchase (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition) } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Create (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition :: Create (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: DocumentCreateTransition >> :: ffi_from (* o_0)) , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Replace (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition :: Replace (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: DocumentReplaceTransition >> :: ffi_from (* o_0)) , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Delete (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition :: Delete (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: DocumentDeleteTransition >> :: ffi_from (* o_0)) , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Transfer (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition :: Transfer (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: DocumentTransferTransition >> :: ffi_from (* o_0)) , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: UpdatePrice (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition :: UpdatePrice (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: DocumentUpdatePriceTransition >> :: ffi_from (* o_0)) , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Purchase (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition :: Purchase (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: DocumentPurchaseTransition >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { ferment :: boxed (match obj { dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition :: Create (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Create (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: DocumentCreateTransition >> :: ffi_to (o_0)) , dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition :: Replace (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Replace (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: DocumentReplaceTransition >> :: ffi_to (o_0)) , dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition :: Delete (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Delete (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: DocumentDeleteTransition >> :: ffi_to (o_0)) , dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition :: Transfer (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Transfer (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: DocumentTransferTransition >> :: ffi_to (o_0)) , dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition :: UpdatePrice (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: UpdatePrice (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: DocumentUpdatePriceTransition >> :: ffi_to (o_0)) , dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition :: Purchase (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Purchase (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: DocumentPurchaseTransition >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Create (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Replace (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Delete (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Transfer (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: UpdatePrice (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Purchase (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition_Create_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Create (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition_Replace_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Replace (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition_Delete_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Delete (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition_Transfer_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Transfer (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition_UpdatePrice_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_update_price_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_update_price_transition_DocumentUpdatePriceTransition) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: UpdatePrice (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition_Purchase_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_purchase_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_purchase_transition_DocumentPurchaseTransition) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition :: Purchase (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition) { ferment :: unbox_any (ffi) ; } pub mod action_type { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`DocumentTransitionActionType`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType { Create , Replace , Delete , Transfer , Purchase , UpdatePrice , IgnoreWhileBumpingRevision } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: action_type :: DocumentTransitionActionType > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: action_type :: DocumentTransitionActionType { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType :: Create => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: action_type :: DocumentTransitionActionType :: Create , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType :: Replace => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: action_type :: DocumentTransitionActionType :: Replace , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType :: Delete => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: action_type :: DocumentTransitionActionType :: Delete , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType :: Transfer => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: action_type :: DocumentTransitionActionType :: Transfer , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType :: Purchase => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: action_type :: DocumentTransitionActionType :: Purchase , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType :: UpdatePrice => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: action_type :: DocumentTransitionActionType :: UpdatePrice , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType :: IgnoreWhileBumpingRevision => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: action_type :: DocumentTransitionActionType :: IgnoreWhileBumpingRevision } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: action_type :: DocumentTransitionActionType > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: action_type :: DocumentTransitionActionType) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType { ferment :: boxed (match obj { dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: action_type :: DocumentTransitionActionType :: Create => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType :: Create , dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: action_type :: DocumentTransitionActionType :: Replace => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType :: Replace , dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: action_type :: DocumentTransitionActionType :: Delete => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType :: Delete , dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: action_type :: DocumentTransitionActionType :: Transfer => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType :: Transfer , dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: action_type :: DocumentTransitionActionType :: Purchase => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType :: Purchase , dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: action_type :: DocumentTransitionActionType :: UpdatePrice => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType :: UpdatePrice , dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: action_type :: DocumentTransitionActionType :: IgnoreWhileBumpingRevision => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType :: IgnoreWhileBumpingRevision , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType :: Create => { } , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType :: Replace => { } , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType :: Delete => { } , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType :: Transfer => { } , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType :: Purchase => { } , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType :: UpdatePrice => { } , dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType :: IgnoreWhileBumpingRevision => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType_Create_ctor () -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType :: Create { }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType_Replace_ctor () -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType :: Replace { }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType_Delete_ctor () -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType :: Delete { }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType_Transfer_ctor () -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType :: Transfer { }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType_Purchase_ctor () -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType :: Purchase { }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType_UpdatePrice_ctor () -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType :: UpdatePrice { }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType_IgnoreWhileBumpingRevision_ctor () -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType :: IgnoreWhileBumpingRevision { }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType) { ferment :: unbox_any (ffi) ; } } pub mod document_transfer_transition { use crate as dash_spv_apple_bindings ; pub mod v0 { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DocumentTransferTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0 { pub base : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition , pub revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , pub recipient_owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: v0 :: DocumentTransferTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: v0 :: DocumentTransferTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: v0 :: DocumentTransferTransitionV0 { base : < crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: DocumentBaseTransition >> :: ffi_from (ffi_ref . base) , revision : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision as ferment :: FFIConversionFrom < dpp :: prelude :: Revision >> :: ffi_from (ffi_ref . revision) , recipient_owner_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . recipient_owner_id) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: v0 :: DocumentTransferTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: v0 :: DocumentTransferTransitionV0) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0 { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0 { base : < crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: DocumentBaseTransition >> :: ffi_to (obj . base) , revision : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision as ferment :: FFIConversionTo < dpp :: prelude :: Revision >> :: ffi_to (obj . revision) , recipient_owner_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . recipient_owner_id) }) } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . base) ; ferment :: unbox_any (ffi_ref . revision) ; ferment :: unbox_any (ffi_ref . recipient_owner_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0_ctor < > (base : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition , revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , recipient_owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0 { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0 { base , revision , recipient_owner_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0_get_base < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0) -> * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { (* obj) . base } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0_get_revision < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0_get_recipient_owner_id < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . recipient_owner_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0_set_base < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0) -> * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { (* obj) . base } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0_set_revision < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0_set_recipient_owner_id < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . recipient_owner_id } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`DocumentTransferTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0) } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: DocumentTransferTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: DocumentTransferTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: DocumentTransferTransition :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0 as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: v0 :: DocumentTransferTransitionV0 >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: DocumentTransferTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: DocumentTransferTransition) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition { ferment :: boxed (match obj { dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: DocumentTransferTransition :: V0 (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0 as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: v0 :: DocumentTransferTransitionV0 >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition :: V0 (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_transfer_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_v0_DocumentTransferTransitionV0) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_transfer_transition_DocumentTransferTransition) { ferment :: unbox_any (ffi) ; } } pub mod document_delete_transition { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`DocumentDeleteTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0) } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: DocumentDeleteTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: DocumentDeleteTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: DocumentDeleteTransition :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0 as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: v0 :: DocumentDeleteTransitionV0 >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: DocumentDeleteTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: DocumentDeleteTransition) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition { ferment :: boxed (match obj { dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: DocumentDeleteTransition :: V0 (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0 as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: v0 :: DocumentDeleteTransitionV0 >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition :: V0 (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_DocumentDeleteTransition) { ferment :: unbox_any (ffi) ; } pub mod v0 { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DocumentDeleteTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0 { pub base : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: v0 :: DocumentDeleteTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: v0 :: DocumentDeleteTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: v0 :: DocumentDeleteTransitionV0 { base : < crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: DocumentBaseTransition >> :: ffi_from (ffi_ref . base) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: v0 :: DocumentDeleteTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_delete_transition :: v0 :: DocumentDeleteTransitionV0) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0 { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0 { base : < crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: DocumentBaseTransition >> :: ffi_to (obj . base) }) } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . base) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0_ctor < > (base : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0 { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0 { base }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0_get_base < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0) -> * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { (* obj) . base } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0_set_base < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_delete_transition_v0_DocumentDeleteTransitionV0) -> * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { (* obj) . base } } } pub mod document_base_transition { use crate as dash_spv_apple_bindings ; pub mod fields { use crate as dash_spv_apple_bindings ; } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`DocumentBaseTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0) } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: DocumentBaseTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: DocumentBaseTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: DocumentBaseTransition :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0 as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: v0 :: DocumentBaseTransitionV0 >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: DocumentBaseTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: DocumentBaseTransition) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { ferment :: boxed (match obj { dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: DocumentBaseTransition :: V0 (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0 as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: v0 :: DocumentBaseTransitionV0 >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition :: V0 (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition) { ferment :: unbox_any (ffi) ; } pub mod v0 { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DocumentBaseTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0 { pub id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub identity_contract_nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , pub document_type_name : * mut std :: os :: raw :: c_char , pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: v0 :: DocumentBaseTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: v0 :: DocumentBaseTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: v0 :: DocumentBaseTransitionV0 { id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . id) , identity_contract_nonce : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce as ferment :: FFIConversionFrom < dpp :: prelude :: IdentityNonce >> :: ffi_from (ffi_ref . identity_contract_nonce) , document_type_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . document_type_name) , data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . data_contract_id) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: v0 :: DocumentBaseTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: v0 :: DocumentBaseTransitionV0) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0 { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0 { id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . id) , identity_contract_nonce : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce as ferment :: FFIConversionTo < dpp :: prelude :: IdentityNonce >> :: ffi_to (obj . identity_contract_nonce) , document_type_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . document_type_name) , data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . data_contract_id) }) } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . id) ; ferment :: unbox_any (ffi_ref . identity_contract_nonce) ; ferment :: unbox_string (ffi_ref . document_type_name) ; ferment :: unbox_any (ffi_ref . data_contract_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0_ctor < > (id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , identity_contract_nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , document_type_name : * mut std :: os :: raw :: c_char , data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0 { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0 { id , identity_contract_nonce , document_type_name , data_contract_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0_get_id < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0_get_identity_contract_nonce < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce { (* obj) . identity_contract_nonce } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0_get_document_type_name < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0) -> * mut std :: os :: raw :: c_char { (* obj) . document_type_name } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0_get_data_contract_id < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0_set_id < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0_set_identity_contract_nonce < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce { (* obj) . identity_contract_nonce } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0_set_document_type_name < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0) -> * mut std :: os :: raw :: c_char { (* obj) . document_type_name } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0_set_data_contract_id < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_v0_DocumentBaseTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } } } pub mod document_create_transition { use crate as dash_spv_apple_bindings ; pub mod v0 { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DocumentCreateTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 { pub base : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition , pub entropy : * mut crate :: fermented :: generics :: Arr_u8_32 , pub data : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_platform_value_Value , pub prefunded_voting_balance : * mut crate :: fermented :: generics :: Tuple_String_dpp_balances_credits_Credits } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: v0 :: DocumentCreateTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: v0 :: DocumentCreateTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: v0 :: DocumentCreateTransitionV0 { base : < crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: DocumentBaseTransition >> :: ffi_from (ffi_ref . base) , entropy : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (ffi_ref . entropy) , data : < crate :: fermented :: generics :: std_collections_Map_keys_String_values_platform_value_Value as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < String , platform_value :: Value > >> :: ffi_from (ffi_ref . data) , prefunded_voting_balance : < crate :: fermented :: generics :: Tuple_String_dpp_balances_credits_Credits as ferment :: FFIConversionFrom < (String , dpp :: balances :: credits :: Credits) >> :: ffi_from_opt (ffi_ref . prefunded_voting_balance) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: v0 :: DocumentCreateTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: v0 :: DocumentCreateTransitionV0) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 { base : < crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: DocumentBaseTransition >> :: ffi_to (obj . base) , entropy : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj . entropy) , data : < crate :: fermented :: generics :: std_collections_Map_keys_String_values_platform_value_Value as ferment :: FFIConversionTo < std :: collections :: BTreeMap < String , platform_value :: Value > >> :: ffi_to (obj . data) , prefunded_voting_balance : < crate :: fermented :: generics :: Tuple_String_dpp_balances_credits_Credits as ferment :: FFIConversionTo < (String , dpp :: balances :: credits :: Credits) >> :: ffi_to_opt (obj . prefunded_voting_balance) }) } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . base) ; ferment :: unbox_any (ffi_ref . entropy) ; ferment :: unbox_any (ffi_ref . data) ; ferment :: unbox_any_opt (ffi_ref . prefunded_voting_balance) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0_ctor < > (base : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition , entropy : * mut crate :: fermented :: generics :: Arr_u8_32 , data : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_platform_value_Value , prefunded_voting_balance : * mut crate :: fermented :: generics :: Tuple_String_dpp_balances_credits_Credits) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 { base , entropy , data , prefunded_voting_balance }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0_get_base < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { (* obj) . base } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0_get_entropy < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . entropy } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0_get_data < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_platform_value_Value { (* obj) . data } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0_get_prefunded_voting_balance < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0) -> * mut crate :: fermented :: generics :: Tuple_String_dpp_balances_credits_Credits { (* obj) . prefunded_voting_balance } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0_set_base < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0) -> * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { (* obj) . base } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0_set_entropy < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . entropy } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0_set_data < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_platform_value_Value { (* obj) . data } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0_set_prefunded_voting_balance < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0) -> * mut crate :: fermented :: generics :: Tuple_String_dpp_balances_credits_Credits { (* obj) . prefunded_voting_balance } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`DocumentCreateTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0) } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: DocumentCreateTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: DocumentCreateTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: DocumentCreateTransition :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: v0 :: DocumentCreateTransitionV0 >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: DocumentCreateTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: DocumentCreateTransition) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition { ferment :: boxed (match obj { dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: DocumentCreateTransition :: V0 (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0 as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: v0 :: DocumentCreateTransitionV0 >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition :: V0 (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_create_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_v0_DocumentCreateTransitionV0) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_create_transition_DocumentCreateTransition) { ferment :: unbox_any (ffi) ; } } pub mod document_replace_transition { use crate as dash_spv_apple_bindings ; pub mod v0 { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DocumentReplaceTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0 { pub base : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition , pub revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , pub data : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_platform_value_Value } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: v0 :: DocumentReplaceTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: v0 :: DocumentReplaceTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: v0 :: DocumentReplaceTransitionV0 { base : < crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: DocumentBaseTransition >> :: ffi_from (ffi_ref . base) , revision : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision as ferment :: FFIConversionFrom < dpp :: prelude :: Revision >> :: ffi_from (ffi_ref . revision) , data : < crate :: fermented :: generics :: std_collections_Map_keys_String_values_platform_value_Value as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < String , platform_value :: Value > >> :: ffi_from (ffi_ref . data) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: v0 :: DocumentReplaceTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: v0 :: DocumentReplaceTransitionV0) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0 { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0 { base : < crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: DocumentBaseTransition >> :: ffi_to (obj . base) , revision : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision as ferment :: FFIConversionTo < dpp :: prelude :: Revision >> :: ffi_to (obj . revision) , data : < crate :: fermented :: generics :: std_collections_Map_keys_String_values_platform_value_Value as ferment :: FFIConversionTo < std :: collections :: BTreeMap < String , platform_value :: Value > >> :: ffi_to (obj . data) }) } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . base) ; ferment :: unbox_any (ffi_ref . revision) ; ferment :: unbox_any (ffi_ref . data) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0_ctor < > (base : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition , revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , data : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_platform_value_Value) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0 { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0 { base , revision , data }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0_get_base < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0) -> * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { (* obj) . base } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0_get_revision < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0_get_data < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_platform_value_Value { (* obj) . data } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0_set_base < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0) -> * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_base_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_base_transition_DocumentBaseTransition { (* obj) . base } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0_set_revision < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0_set_data < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_platform_value_Value { (* obj) . data } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`DocumentReplaceTransition`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition { V0 (* mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0) } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: DocumentReplaceTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: DocumentReplaceTransition { let ffi_ref = & * ffi ; match ffi_ref { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition :: V0 (o_0) => dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: DocumentReplaceTransition :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0 as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: v0 :: DocumentReplaceTransitionV0 >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: DocumentReplaceTransition > for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: DocumentReplaceTransition) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition { ferment :: boxed (match obj { dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: DocumentReplaceTransition :: V0 (o_0) => dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition :: V0 (< crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0 as ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: v0 :: DocumentReplaceTransitionV0 >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition { fn drop (& mut self) { unsafe { match self { dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition :: V0 (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition_V0_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: document_replace_transition :: v0 :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_v0_DocumentReplaceTransitionV0) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition :: V0 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_document_replace_transition_DocumentReplaceTransition) { ferment :: unbox_any (ffi) ; } } } # [cfg (feature = "validation")] pub mod validation { use crate as dash_spv_apple_bindings ; pub mod find_duplicates_by_id { use crate as dash_spv_apple_bindings ; pub mod v0 { use crate as dash_spv_apple_bindings ; } } pub mod validate_basic_structure { use crate as dash_spv_apple_bindings ; } } pub mod v0 { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DocumentsBatchTransitionV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 { pub owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub transitions : * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition , pub user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , pub signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData } impl ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: v0 :: DocumentsBatchTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 { unsafe fn ffi_from_const (ffi : * const dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0) -> dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: v0 :: DocumentsBatchTransitionV0 { let ffi_ref = & * ffi ; dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: v0 :: DocumentsBatchTransitionV0 { owner_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . owner_id) , transitions : < crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition as ferment :: FFIConversionFrom < Vec < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition > >> :: ffi_from (ffi_ref . transitions) , user_fee_increase : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease as ferment :: FFIConversionFrom < dpp :: prelude :: UserFeeIncrease >> :: ffi_from (ffi_ref . user_fee_increase) , signature_public_key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_from (ffi_ref . signature_public_key_id) , signature : < crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData as ferment :: FFIConversionFrom < platform_value :: types :: binary_data :: BinaryData >> :: ffi_from (ffi_ref . signature) } } } impl ferment :: FFIConversionTo < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: v0 :: DocumentsBatchTransitionV0 > for dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 { unsafe fn ffi_to_const (obj : dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: v0 :: DocumentsBatchTransitionV0) -> * const dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 { owner_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . owner_id) , transitions : < crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition as ferment :: FFIConversionTo < Vec < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition > >> :: ffi_to (obj . transitions) , user_fee_increase : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease as ferment :: FFIConversionTo < dpp :: prelude :: UserFeeIncrease >> :: ffi_to (obj . user_fee_increase) , signature_public_key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_to (obj . signature_public_key_id) , signature : < crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData as ferment :: FFIConversionTo < platform_value :: types :: binary_data :: BinaryData >> :: ffi_to (obj . signature) }) } } impl Drop for dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . owner_id) ; ferment :: unbox_any (ffi_ref . transitions) ; ferment :: unbox_any (ffi_ref . user_fee_increase) ; ferment :: unbox_any (ffi_ref . signature_public_key_id) ; ferment :: unbox_any (ffi_ref . signature) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_ctor < > (owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , transitions : * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition , user_fee_increase : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease , signature_public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , signature : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) -> * mut dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 { ferment :: boxed (dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0 { owner_id , transitions , user_fee_increase , signature_public_key_id , signature }) } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_destroy < > (ffi : * mut dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_get_owner_id < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . owner_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_get_transitions < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0) -> * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { (* obj) . transitions } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_get_user_fee_increase < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease { (* obj) . user_fee_increase } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_get_signature_public_key_id < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . signature_public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_get_signature < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_set_owner_id < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . owner_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_set_transitions < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0) -> * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { (* obj) . transitions } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_set_user_fee_increase < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_UserFeeIncrease { (* obj) . user_fee_increase } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_set_signature_public_key_id < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . signature_public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0_set_signature < > (obj : * const dpp_state_transition_state_transitions_document_documents_batch_transition_v0_DocumentsBatchTransitionV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . signature } } } } pub mod common_fields { use crate as dash_spv_apple_bindings ; } } } pub mod schema { use crate as dash_spv_apple_bindings ; pub mod identity { use crate as dash_spv_apple_bindings ; pub mod v0 { use crate as dash_spv_apple_bindings ; } } } # [cfg (feature = "fixtures-and-mocks")] pub mod tests { use crate as dash_spv_apple_bindings ; pub mod utils { use crate as dash_spv_apple_bindings ; } pub mod fixtures { use crate as dash_spv_apple_bindings ; } } pub mod errors { use crate as dash_spv_apple_bindings ; pub mod consensus { use crate as dash_spv_apple_bindings ; pub mod state { use crate as dash_spv_apple_bindings ; pub mod state_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`StateError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_errors_consensus_state_state_error_StateError { DataContractAlreadyPresentError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: data_contract_already_present_error :: dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError) , # [cfg (feature = "state-transition-validation")] DataTriggerError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_trigger :: dpp_errors_consensus_state_data_trigger_DataTriggerError) , DocumentAlreadyPresentError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_already_present_error :: dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError) , DocumentContestCurrentlyLockedError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_contest_currently_locked_error :: dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError) , DocumentContestNotJoinableError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_contest_not_joinable_error :: dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError) , DocumentContestIdentityAlreadyContestantError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_contest_identity_already_contestant :: dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError) , DocumentContestNotPaidForError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_contest_not_paid_for_error :: dpp_errors_consensus_state_document_document_contest_not_paid_for_error_DocumentContestNotPaidForError) , DocumentContestDocumentWithSameIdAlreadyPresentError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_contest_document_with_same_id_already_present_error :: dpp_errors_consensus_state_document_document_contest_document_with_same_id_already_present_error_DocumentContestDocumentWithSameIdAlreadyPresentError) , DocumentNotFoundError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_not_found_error :: dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError) , DocumentNotForSaleError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_not_for_sale_error :: dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError) , DocumentIncorrectPurchasePriceError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_incorrect_purchase_price_error :: dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError) , DocumentOwnerIdMismatchError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_owner_id_mismatch_error :: dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError) , DocumentTimestampsMismatchError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_timestamps_mismatch_error :: dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError) , DocumentTimestampWindowViolationError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_timestamp_window_violation_error :: dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) , DuplicateUniqueIndexError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: duplicate_unique_index_error :: dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError) , InvalidDocumentRevisionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: invalid_document_revision_error :: dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError) , IdentityAlreadyExistsError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_already_exists_error :: dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError) , IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_public_key_already_exists_for_unique_contract_bounds_error :: dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) , IdentityPublicKeyIsReadOnlyError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_read_only_error :: dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError) , MissingIdentityPublicKeyIdsError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: missing_identity_public_key_ids_error :: dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError) , MissingTransferKeyError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: missing_transfer_key_error :: dpp_errors_consensus_state_identity_missing_transfer_key_error_MissingTransferKeyError) , NoTransferKeyForCoreWithdrawalAvailableError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: no_transfer_key_for_core_withdrawal_available_error :: dpp_errors_consensus_state_identity_no_transfer_key_for_core_withdrawal_available_error_NoTransferKeyForCoreWithdrawalAvailableError) , InvalidIdentityPublicKeyIdError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: invalid_identity_public_key_id_error :: dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError) , InvalidIdentityRevisionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: invalid_identity_revision_error :: dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError) , InvalidIdentityNonceError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: invalid_identity_contract_nonce_error :: dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError) , MaxIdentityPublicKeyLimitReachedError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: max_identity_public_key_limit_reached_error :: dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError) , DuplicatedIdentityPublicKeyStateError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_state_error :: dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError) , DuplicatedIdentityPublicKeyIdStateError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_id_state_error :: dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError) , IdentityPublicKeyIsDisabledError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_disabled_error :: dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError) , IdentityInsufficientBalanceError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_insufficient_balance_error :: dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError) , DocumentTimestampsAreEqualError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_timestamps_are_equal_error :: dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError) , DataContractIsReadonlyError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: data_contract_is_readonly_error :: dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError) , DataContractConfigUpdateError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: data_contract_config_update_error :: dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError) , DocumentTypeUpdateError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: document_type_update_error :: dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError) , PrefundedSpecializedBalanceInsufficientError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_insufficient_error :: dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError) , PrefundedSpecializedBalanceNotFoundError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_not_found_error :: dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError) , DataContractUpdatePermissionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: data_contract_update_permission_error :: dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError) , MasternodeNotFoundError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: masternode_not_found_error :: dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError) , MasternodeIncorrectVoterIdentityIdError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voter_identity_id_error :: dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError) , MasternodeIncorrectVotingAddressError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voting_address_error :: dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError) , VotePollNotFoundError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: vote_poll_not_found_error :: dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError) , VotePollNotAvailableForVotingError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: vote_poll_not_available_for_voting_error :: dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError) , MasternodeVotedTooManyTimesError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: masternode_voted_too_many_times :: dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError) , MasternodeVoteAlreadyPresentError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: masternode_vote_already_present_error :: dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError) } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: state_error :: StateError > for dpp_errors_consensus_state_state_error_StateError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_state_error_StateError) -> dpp :: errors :: consensus :: state :: state_error :: StateError { let ffi_ref = & * ffi ; match ffi_ref { dpp_errors_consensus_state_state_error_StateError :: DataContractAlreadyPresentError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DataContractAlreadyPresentError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: data_contract_already_present_error :: dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: data_contract :: data_contract_already_present_error :: DataContractAlreadyPresentError >> :: ffi_from (* o_0)) , # [cfg (feature = "state-transition-validation")] dpp_errors_consensus_state_state_error_StateError :: DataTriggerError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DataTriggerError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_trigger :: dpp_errors_consensus_state_data_trigger_DataTriggerError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: data_trigger :: DataTriggerError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DocumentAlreadyPresentError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentAlreadyPresentError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_already_present_error :: dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_already_present_error :: DocumentAlreadyPresentError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DocumentContestCurrentlyLockedError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentContestCurrentlyLockedError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_contest_currently_locked_error :: dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_contest_currently_locked_error :: DocumentContestCurrentlyLockedError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DocumentContestNotJoinableError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentContestNotJoinableError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_contest_not_joinable_error :: dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_contest_not_joinable_error :: DocumentContestNotJoinableError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DocumentContestIdentityAlreadyContestantError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentContestIdentityAlreadyContestantError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_contest_identity_already_contestant :: dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_contest_identity_already_contestant :: DocumentContestIdentityAlreadyContestantError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DocumentContestNotPaidForError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentContestNotPaidForError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_contest_not_paid_for_error :: dpp_errors_consensus_state_document_document_contest_not_paid_for_error_DocumentContestNotPaidForError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_contest_not_paid_for_error :: DocumentContestNotPaidForError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DocumentContestDocumentWithSameIdAlreadyPresentError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentContestDocumentWithSameIdAlreadyPresentError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_contest_document_with_same_id_already_present_error :: dpp_errors_consensus_state_document_document_contest_document_with_same_id_already_present_error_DocumentContestDocumentWithSameIdAlreadyPresentError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_contest_document_with_same_id_already_present_error :: DocumentContestDocumentWithSameIdAlreadyPresentError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DocumentNotFoundError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentNotFoundError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_not_found_error :: dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_not_found_error :: DocumentNotFoundError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DocumentNotForSaleError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentNotForSaleError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_not_for_sale_error :: dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_not_for_sale_error :: DocumentNotForSaleError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DocumentIncorrectPurchasePriceError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentIncorrectPurchasePriceError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_incorrect_purchase_price_error :: dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_incorrect_purchase_price_error :: DocumentIncorrectPurchasePriceError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DocumentOwnerIdMismatchError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentOwnerIdMismatchError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_owner_id_mismatch_error :: dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_owner_id_mismatch_error :: DocumentOwnerIdMismatchError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampsMismatchError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentTimestampsMismatchError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_timestamps_mismatch_error :: dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_timestamps_mismatch_error :: DocumentTimestampsMismatchError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampWindowViolationError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentTimestampWindowViolationError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_timestamp_window_violation_error :: dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_timestamp_window_violation_error :: DocumentTimestampWindowViolationError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DuplicateUniqueIndexError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DuplicateUniqueIndexError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: duplicate_unique_index_error :: dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: duplicate_unique_index_error :: DuplicateUniqueIndexError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: InvalidDocumentRevisionError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: InvalidDocumentRevisionError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: invalid_document_revision_error :: dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: invalid_document_revision_error :: InvalidDocumentRevisionError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: IdentityAlreadyExistsError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: IdentityAlreadyExistsError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_already_exists_error :: dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: identity_already_exists_error :: IdentityAlreadyExistsError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_public_key_already_exists_for_unique_contract_bounds_error :: dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: identity_public_key_already_exists_for_unique_contract_bounds_error :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyIsReadOnlyError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: IdentityPublicKeyIsReadOnlyError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_read_only_error :: dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_read_only_error :: IdentityPublicKeyIsReadOnlyError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: MissingIdentityPublicKeyIdsError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: MissingIdentityPublicKeyIdsError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: missing_identity_public_key_ids_error :: dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: missing_identity_public_key_ids_error :: MissingIdentityPublicKeyIdsError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: MissingTransferKeyError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: MissingTransferKeyError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: missing_transfer_key_error :: dpp_errors_consensus_state_identity_missing_transfer_key_error_MissingTransferKeyError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: missing_transfer_key_error :: MissingTransferKeyError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: NoTransferKeyForCoreWithdrawalAvailableError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: NoTransferKeyForCoreWithdrawalAvailableError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: no_transfer_key_for_core_withdrawal_available_error :: dpp_errors_consensus_state_identity_no_transfer_key_for_core_withdrawal_available_error_NoTransferKeyForCoreWithdrawalAvailableError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: no_transfer_key_for_core_withdrawal_available_error :: NoTransferKeyForCoreWithdrawalAvailableError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: InvalidIdentityPublicKeyIdError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: InvalidIdentityPublicKeyIdError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: invalid_identity_public_key_id_error :: dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: invalid_identity_public_key_id_error :: InvalidIdentityPublicKeyIdError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: InvalidIdentityRevisionError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: InvalidIdentityRevisionError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: invalid_identity_revision_error :: dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: invalid_identity_revision_error :: InvalidIdentityRevisionError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: InvalidIdentityNonceError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: InvalidIdentityNonceError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: invalid_identity_contract_nonce_error :: dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: invalid_identity_contract_nonce_error :: InvalidIdentityNonceError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: MaxIdentityPublicKeyLimitReachedError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: MaxIdentityPublicKeyLimitReachedError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: max_identity_public_key_limit_reached_error :: dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: max_identity_public_key_limit_reached_error :: MaxIdentityPublicKeyLimitReachedError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DuplicatedIdentityPublicKeyStateError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DuplicatedIdentityPublicKeyStateError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_state_error :: dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_state_error :: DuplicatedIdentityPublicKeyStateError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DuplicatedIdentityPublicKeyIdStateError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DuplicatedIdentityPublicKeyIdStateError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_id_state_error :: dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_id_state_error :: DuplicatedIdentityPublicKeyIdStateError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyIsDisabledError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: IdentityPublicKeyIsDisabledError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_disabled_error :: dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_disabled_error :: IdentityPublicKeyIsDisabledError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: IdentityInsufficientBalanceError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: IdentityInsufficientBalanceError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_insufficient_balance_error :: dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: identity_insufficient_balance_error :: IdentityInsufficientBalanceError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampsAreEqualError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentTimestampsAreEqualError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_timestamps_are_equal_error :: dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_timestamps_are_equal_error :: DocumentTimestampsAreEqualError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DataContractIsReadonlyError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DataContractIsReadonlyError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: data_contract_is_readonly_error :: dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: data_contract :: data_contract_is_readonly_error :: DataContractIsReadonlyError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DataContractConfigUpdateError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DataContractConfigUpdateError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: data_contract_config_update_error :: dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: data_contract :: data_contract_config_update_error :: DataContractConfigUpdateError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DocumentTypeUpdateError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentTypeUpdateError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: document_type_update_error :: dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: data_contract :: document_type_update_error :: DocumentTypeUpdateError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: PrefundedSpecializedBalanceInsufficientError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: PrefundedSpecializedBalanceInsufficientError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_insufficient_error :: dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_insufficient_error :: PrefundedSpecializedBalanceInsufficientError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: PrefundedSpecializedBalanceNotFoundError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: PrefundedSpecializedBalanceNotFoundError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_not_found_error :: dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_not_found_error :: PrefundedSpecializedBalanceNotFoundError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: DataContractUpdatePermissionError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: DataContractUpdatePermissionError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: data_contract_update_permission_error :: dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: data_contract :: data_contract_update_permission_error :: DataContractUpdatePermissionError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: MasternodeNotFoundError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: MasternodeNotFoundError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: masternode_not_found_error :: dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: voting :: masternode_not_found_error :: MasternodeNotFoundError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: MasternodeIncorrectVoterIdentityIdError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: MasternodeIncorrectVoterIdentityIdError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voter_identity_id_error :: dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voter_identity_id_error :: MasternodeIncorrectVoterIdentityIdError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: MasternodeIncorrectVotingAddressError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: MasternodeIncorrectVotingAddressError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voting_address_error :: dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voting_address_error :: MasternodeIncorrectVotingAddressError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: VotePollNotFoundError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: VotePollNotFoundError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: vote_poll_not_found_error :: dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: voting :: vote_poll_not_found_error :: VotePollNotFoundError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: VotePollNotAvailableForVotingError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: VotePollNotAvailableForVotingError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: vote_poll_not_available_for_voting_error :: dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: voting :: vote_poll_not_available_for_voting_error :: VotePollNotAvailableForVotingError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: MasternodeVotedTooManyTimesError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: MasternodeVotedTooManyTimesError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: masternode_voted_too_many_times :: dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: voting :: masternode_voted_too_many_times :: MasternodeVotedTooManyTimesError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_state_error_StateError :: MasternodeVoteAlreadyPresentError (o_0) => dpp :: errors :: consensus :: state :: state_error :: StateError :: MasternodeVoteAlreadyPresentError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: masternode_vote_already_present_error :: dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: voting :: masternode_vote_already_present_error :: MasternodeVoteAlreadyPresentError >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: state_error :: StateError > for dpp_errors_consensus_state_state_error_StateError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: state_error :: StateError) -> * const dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (match obj { dpp :: errors :: consensus :: state :: state_error :: StateError :: DataContractAlreadyPresentError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DataContractAlreadyPresentError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: data_contract_already_present_error :: dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: data_contract :: data_contract_already_present_error :: DataContractAlreadyPresentError >> :: ffi_to (o_0)) , # [cfg (feature = "state-transition-validation")] dpp :: errors :: consensus :: state :: state_error :: StateError :: DataTriggerError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DataTriggerError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_trigger :: dpp_errors_consensus_state_data_trigger_DataTriggerError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: data_trigger :: DataTriggerError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentAlreadyPresentError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DocumentAlreadyPresentError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_already_present_error :: dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_already_present_error :: DocumentAlreadyPresentError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentContestCurrentlyLockedError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DocumentContestCurrentlyLockedError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_contest_currently_locked_error :: dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_contest_currently_locked_error :: DocumentContestCurrentlyLockedError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentContestNotJoinableError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DocumentContestNotJoinableError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_contest_not_joinable_error :: dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_contest_not_joinable_error :: DocumentContestNotJoinableError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentContestIdentityAlreadyContestantError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DocumentContestIdentityAlreadyContestantError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_contest_identity_already_contestant :: dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_contest_identity_already_contestant :: DocumentContestIdentityAlreadyContestantError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentContestNotPaidForError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DocumentContestNotPaidForError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_contest_not_paid_for_error :: dpp_errors_consensus_state_document_document_contest_not_paid_for_error_DocumentContestNotPaidForError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_contest_not_paid_for_error :: DocumentContestNotPaidForError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentContestDocumentWithSameIdAlreadyPresentError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DocumentContestDocumentWithSameIdAlreadyPresentError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_contest_document_with_same_id_already_present_error :: dpp_errors_consensus_state_document_document_contest_document_with_same_id_already_present_error_DocumentContestDocumentWithSameIdAlreadyPresentError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_contest_document_with_same_id_already_present_error :: DocumentContestDocumentWithSameIdAlreadyPresentError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentNotFoundError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DocumentNotFoundError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_not_found_error :: dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_not_found_error :: DocumentNotFoundError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentNotForSaleError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DocumentNotForSaleError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_not_for_sale_error :: dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_not_for_sale_error :: DocumentNotForSaleError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentIncorrectPurchasePriceError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DocumentIncorrectPurchasePriceError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_incorrect_purchase_price_error :: dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_incorrect_purchase_price_error :: DocumentIncorrectPurchasePriceError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentOwnerIdMismatchError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DocumentOwnerIdMismatchError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_owner_id_mismatch_error :: dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_owner_id_mismatch_error :: DocumentOwnerIdMismatchError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentTimestampsMismatchError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampsMismatchError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_timestamps_mismatch_error :: dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_timestamps_mismatch_error :: DocumentTimestampsMismatchError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentTimestampWindowViolationError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampWindowViolationError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_timestamp_window_violation_error :: dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_timestamp_window_violation_error :: DocumentTimestampWindowViolationError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DuplicateUniqueIndexError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DuplicateUniqueIndexError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: duplicate_unique_index_error :: dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: duplicate_unique_index_error :: DuplicateUniqueIndexError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: InvalidDocumentRevisionError (o_0) => dpp_errors_consensus_state_state_error_StateError :: InvalidDocumentRevisionError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: invalid_document_revision_error :: dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: invalid_document_revision_error :: InvalidDocumentRevisionError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: IdentityAlreadyExistsError (o_0) => dpp_errors_consensus_state_state_error_StateError :: IdentityAlreadyExistsError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_already_exists_error :: dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: identity_already_exists_error :: IdentityAlreadyExistsError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError (o_0) => dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_public_key_already_exists_for_unique_contract_bounds_error :: dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: identity_public_key_already_exists_for_unique_contract_bounds_error :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: IdentityPublicKeyIsReadOnlyError (o_0) => dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyIsReadOnlyError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_read_only_error :: dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_read_only_error :: IdentityPublicKeyIsReadOnlyError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: MissingIdentityPublicKeyIdsError (o_0) => dpp_errors_consensus_state_state_error_StateError :: MissingIdentityPublicKeyIdsError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: missing_identity_public_key_ids_error :: dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: missing_identity_public_key_ids_error :: MissingIdentityPublicKeyIdsError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: MissingTransferKeyError (o_0) => dpp_errors_consensus_state_state_error_StateError :: MissingTransferKeyError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: missing_transfer_key_error :: dpp_errors_consensus_state_identity_missing_transfer_key_error_MissingTransferKeyError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: missing_transfer_key_error :: MissingTransferKeyError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: NoTransferKeyForCoreWithdrawalAvailableError (o_0) => dpp_errors_consensus_state_state_error_StateError :: NoTransferKeyForCoreWithdrawalAvailableError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: no_transfer_key_for_core_withdrawal_available_error :: dpp_errors_consensus_state_identity_no_transfer_key_for_core_withdrawal_available_error_NoTransferKeyForCoreWithdrawalAvailableError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: no_transfer_key_for_core_withdrawal_available_error :: NoTransferKeyForCoreWithdrawalAvailableError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: InvalidIdentityPublicKeyIdError (o_0) => dpp_errors_consensus_state_state_error_StateError :: InvalidIdentityPublicKeyIdError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: invalid_identity_public_key_id_error :: dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: invalid_identity_public_key_id_error :: InvalidIdentityPublicKeyIdError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: InvalidIdentityRevisionError (o_0) => dpp_errors_consensus_state_state_error_StateError :: InvalidIdentityRevisionError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: invalid_identity_revision_error :: dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: invalid_identity_revision_error :: InvalidIdentityRevisionError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: InvalidIdentityNonceError (o_0) => dpp_errors_consensus_state_state_error_StateError :: InvalidIdentityNonceError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: invalid_identity_contract_nonce_error :: dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: invalid_identity_contract_nonce_error :: InvalidIdentityNonceError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: MaxIdentityPublicKeyLimitReachedError (o_0) => dpp_errors_consensus_state_state_error_StateError :: MaxIdentityPublicKeyLimitReachedError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: max_identity_public_key_limit_reached_error :: dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: max_identity_public_key_limit_reached_error :: MaxIdentityPublicKeyLimitReachedError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DuplicatedIdentityPublicKeyStateError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DuplicatedIdentityPublicKeyStateError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_state_error :: dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_state_error :: DuplicatedIdentityPublicKeyStateError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DuplicatedIdentityPublicKeyIdStateError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DuplicatedIdentityPublicKeyIdStateError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_id_state_error :: dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_id_state_error :: DuplicatedIdentityPublicKeyIdStateError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: IdentityPublicKeyIsDisabledError (o_0) => dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyIsDisabledError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_disabled_error :: dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_disabled_error :: IdentityPublicKeyIsDisabledError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: IdentityInsufficientBalanceError (o_0) => dpp_errors_consensus_state_state_error_StateError :: IdentityInsufficientBalanceError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_insufficient_balance_error :: dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: identity_insufficient_balance_error :: IdentityInsufficientBalanceError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentTimestampsAreEqualError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampsAreEqualError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_timestamps_are_equal_error :: dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_timestamps_are_equal_error :: DocumentTimestampsAreEqualError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DataContractIsReadonlyError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DataContractIsReadonlyError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: data_contract_is_readonly_error :: dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: data_contract :: data_contract_is_readonly_error :: DataContractIsReadonlyError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DataContractConfigUpdateError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DataContractConfigUpdateError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: data_contract_config_update_error :: dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: data_contract :: data_contract_config_update_error :: DataContractConfigUpdateError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DocumentTypeUpdateError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DocumentTypeUpdateError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: document_type_update_error :: dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: data_contract :: document_type_update_error :: DocumentTypeUpdateError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: PrefundedSpecializedBalanceInsufficientError (o_0) => dpp_errors_consensus_state_state_error_StateError :: PrefundedSpecializedBalanceInsufficientError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_insufficient_error :: dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_insufficient_error :: PrefundedSpecializedBalanceInsufficientError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: PrefundedSpecializedBalanceNotFoundError (o_0) => dpp_errors_consensus_state_state_error_StateError :: PrefundedSpecializedBalanceNotFoundError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_not_found_error :: dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_not_found_error :: PrefundedSpecializedBalanceNotFoundError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: DataContractUpdatePermissionError (o_0) => dpp_errors_consensus_state_state_error_StateError :: DataContractUpdatePermissionError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: data_contract_update_permission_error :: dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: data_contract :: data_contract_update_permission_error :: DataContractUpdatePermissionError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: MasternodeNotFoundError (o_0) => dpp_errors_consensus_state_state_error_StateError :: MasternodeNotFoundError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: masternode_not_found_error :: dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: voting :: masternode_not_found_error :: MasternodeNotFoundError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: MasternodeIncorrectVoterIdentityIdError (o_0) => dpp_errors_consensus_state_state_error_StateError :: MasternodeIncorrectVoterIdentityIdError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voter_identity_id_error :: dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voter_identity_id_error :: MasternodeIncorrectVoterIdentityIdError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: MasternodeIncorrectVotingAddressError (o_0) => dpp_errors_consensus_state_state_error_StateError :: MasternodeIncorrectVotingAddressError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voting_address_error :: dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voting_address_error :: MasternodeIncorrectVotingAddressError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: VotePollNotFoundError (o_0) => dpp_errors_consensus_state_state_error_StateError :: VotePollNotFoundError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: vote_poll_not_found_error :: dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: voting :: vote_poll_not_found_error :: VotePollNotFoundError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: VotePollNotAvailableForVotingError (o_0) => dpp_errors_consensus_state_state_error_StateError :: VotePollNotAvailableForVotingError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: vote_poll_not_available_for_voting_error :: dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: voting :: vote_poll_not_available_for_voting_error :: VotePollNotAvailableForVotingError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: MasternodeVotedTooManyTimesError (o_0) => dpp_errors_consensus_state_state_error_StateError :: MasternodeVotedTooManyTimesError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: masternode_voted_too_many_times :: dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: voting :: masternode_voted_too_many_times :: MasternodeVotedTooManyTimesError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: state_error :: StateError :: MasternodeVoteAlreadyPresentError (o_0) => dpp_errors_consensus_state_state_error_StateError :: MasternodeVoteAlreadyPresentError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: masternode_vote_already_present_error :: dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: voting :: masternode_vote_already_present_error :: MasternodeVoteAlreadyPresentError >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_errors_consensus_state_state_error_StateError { fn drop (& mut self) { unsafe { match self { dpp_errors_consensus_state_state_error_StateError :: DataContractAlreadyPresentError (o_0) => { ferment :: unbox_any (* o_0) ; } , # [cfg (feature = "state-transition-validation")] dpp_errors_consensus_state_state_error_StateError :: DataTriggerError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: DocumentAlreadyPresentError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: DocumentContestCurrentlyLockedError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: DocumentContestNotJoinableError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: DocumentContestIdentityAlreadyContestantError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: DocumentContestNotPaidForError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: DocumentContestDocumentWithSameIdAlreadyPresentError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: DocumentNotFoundError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: DocumentNotForSaleError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: DocumentIncorrectPurchasePriceError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: DocumentOwnerIdMismatchError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampsMismatchError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampWindowViolationError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: DuplicateUniqueIndexError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: InvalidDocumentRevisionError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: IdentityAlreadyExistsError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyIsReadOnlyError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: MissingIdentityPublicKeyIdsError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: MissingTransferKeyError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: NoTransferKeyForCoreWithdrawalAvailableError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: InvalidIdentityPublicKeyIdError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: InvalidIdentityRevisionError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: InvalidIdentityNonceError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: MaxIdentityPublicKeyLimitReachedError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: DuplicatedIdentityPublicKeyStateError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: DuplicatedIdentityPublicKeyIdStateError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyIsDisabledError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: IdentityInsufficientBalanceError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampsAreEqualError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: DataContractIsReadonlyError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: DataContractConfigUpdateError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: DocumentTypeUpdateError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: PrefundedSpecializedBalanceInsufficientError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: PrefundedSpecializedBalanceNotFoundError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: DataContractUpdatePermissionError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: MasternodeNotFoundError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: MasternodeIncorrectVoterIdentityIdError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: MasternodeIncorrectVotingAddressError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: VotePollNotFoundError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: VotePollNotAvailableForVotingError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: MasternodeVotedTooManyTimesError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_state_error_StateError :: MasternodeVoteAlreadyPresentError (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DataContractAlreadyPresentError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: data_contract_already_present_error :: dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: DataContractAlreadyPresentError (o_o_0)) } # [cfg (feature = "state-transition-validation")] # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DataTriggerError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_trigger :: dpp_errors_consensus_state_data_trigger_DataTriggerError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: DataTriggerError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DocumentAlreadyPresentError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_already_present_error :: dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: DocumentAlreadyPresentError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DocumentContestCurrentlyLockedError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_contest_currently_locked_error :: dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: DocumentContestCurrentlyLockedError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DocumentContestNotJoinableError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_contest_not_joinable_error :: dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: DocumentContestNotJoinableError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DocumentContestIdentityAlreadyContestantError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_contest_identity_already_contestant :: dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: DocumentContestIdentityAlreadyContestantError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DocumentContestNotPaidForError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_contest_not_paid_for_error :: dpp_errors_consensus_state_document_document_contest_not_paid_for_error_DocumentContestNotPaidForError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: DocumentContestNotPaidForError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DocumentContestDocumentWithSameIdAlreadyPresentError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_contest_document_with_same_id_already_present_error :: dpp_errors_consensus_state_document_document_contest_document_with_same_id_already_present_error_DocumentContestDocumentWithSameIdAlreadyPresentError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: DocumentContestDocumentWithSameIdAlreadyPresentError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DocumentNotFoundError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_not_found_error :: dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: DocumentNotFoundError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DocumentNotForSaleError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_not_for_sale_error :: dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: DocumentNotForSaleError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DocumentIncorrectPurchasePriceError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_incorrect_purchase_price_error :: dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: DocumentIncorrectPurchasePriceError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DocumentOwnerIdMismatchError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_owner_id_mismatch_error :: dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: DocumentOwnerIdMismatchError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DocumentTimestampsMismatchError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_timestamps_mismatch_error :: dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampsMismatchError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DocumentTimestampWindowViolationError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_timestamp_window_violation_error :: dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampWindowViolationError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DuplicateUniqueIndexError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: duplicate_unique_index_error :: dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: DuplicateUniqueIndexError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_InvalidDocumentRevisionError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: invalid_document_revision_error :: dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: InvalidDocumentRevisionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_IdentityAlreadyExistsError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_already_exists_error :: dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: IdentityAlreadyExistsError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_public_key_already_exists_for_unique_contract_bounds_error :: dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_IdentityPublicKeyIsReadOnlyError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_read_only_error :: dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyIsReadOnlyError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_MissingIdentityPublicKeyIdsError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: missing_identity_public_key_ids_error :: dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: MissingIdentityPublicKeyIdsError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_MissingTransferKeyError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: missing_transfer_key_error :: dpp_errors_consensus_state_identity_missing_transfer_key_error_MissingTransferKeyError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: MissingTransferKeyError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_NoTransferKeyForCoreWithdrawalAvailableError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: no_transfer_key_for_core_withdrawal_available_error :: dpp_errors_consensus_state_identity_no_transfer_key_for_core_withdrawal_available_error_NoTransferKeyForCoreWithdrawalAvailableError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: NoTransferKeyForCoreWithdrawalAvailableError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_InvalidIdentityPublicKeyIdError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: invalid_identity_public_key_id_error :: dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: InvalidIdentityPublicKeyIdError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_InvalidIdentityRevisionError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: invalid_identity_revision_error :: dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: InvalidIdentityRevisionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_InvalidIdentityNonceError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: invalid_identity_contract_nonce_error :: dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: InvalidIdentityNonceError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_MaxIdentityPublicKeyLimitReachedError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: max_identity_public_key_limit_reached_error :: dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: MaxIdentityPublicKeyLimitReachedError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DuplicatedIdentityPublicKeyStateError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_state_error :: dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: DuplicatedIdentityPublicKeyStateError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DuplicatedIdentityPublicKeyIdStateError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_id_state_error :: dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: DuplicatedIdentityPublicKeyIdStateError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_IdentityPublicKeyIsDisabledError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_disabled_error :: dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: IdentityPublicKeyIsDisabledError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_IdentityInsufficientBalanceError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: identity_insufficient_balance_error :: dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: IdentityInsufficientBalanceError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DocumentTimestampsAreEqualError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: document :: document_timestamps_are_equal_error :: dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: DocumentTimestampsAreEqualError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DataContractIsReadonlyError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: data_contract_is_readonly_error :: dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: DataContractIsReadonlyError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DataContractConfigUpdateError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: data_contract_config_update_error :: dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: DataContractConfigUpdateError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DocumentTypeUpdateError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: document_type_update_error :: dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: DocumentTypeUpdateError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_PrefundedSpecializedBalanceInsufficientError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_insufficient_error :: dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: PrefundedSpecializedBalanceInsufficientError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_PrefundedSpecializedBalanceNotFoundError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_not_found_error :: dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: PrefundedSpecializedBalanceNotFoundError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_DataContractUpdatePermissionError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_contract :: data_contract_update_permission_error :: dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: DataContractUpdatePermissionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_MasternodeNotFoundError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: masternode_not_found_error :: dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: MasternodeNotFoundError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_MasternodeIncorrectVoterIdentityIdError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voter_identity_id_error :: dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: MasternodeIncorrectVoterIdentityIdError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_MasternodeIncorrectVotingAddressError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voting_address_error :: dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: MasternodeIncorrectVotingAddressError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_VotePollNotFoundError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: vote_poll_not_found_error :: dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: VotePollNotFoundError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_VotePollNotAvailableForVotingError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: vote_poll_not_available_for_voting_error :: dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: VotePollNotAvailableForVotingError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_MasternodeVotedTooManyTimesError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: masternode_voted_too_many_times :: dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: MasternodeVotedTooManyTimesError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_MasternodeVoteAlreadyPresentError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: voting :: masternode_vote_already_present_error :: dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError) -> * mut dpp_errors_consensus_state_state_error_StateError { ferment :: boxed (dpp_errors_consensus_state_state_error_StateError :: MasternodeVoteAlreadyPresentError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_state_error_StateError_destroy < > (ffi : * mut dpp_errors_consensus_state_state_error_StateError) { ferment :: unbox_any (ffi) ; } } pub mod prefunded_specialized_balances { use crate as dash_spv_apple_bindings ; pub mod prefunded_specialized_balance_insufficient_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`PrefundedSpecializedBalanceInsufficientError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError { pub balance_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub balance : u64 , pub required_balance : u64 } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_insufficient_error :: PrefundedSpecializedBalanceInsufficientError > for dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError) -> dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_insufficient_error :: PrefundedSpecializedBalanceInsufficientError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_insufficient_error :: PrefundedSpecializedBalanceInsufficientError { balance_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . balance_id) , balance : ffi_ref . balance , required_balance : ffi_ref . required_balance } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_insufficient_error :: PrefundedSpecializedBalanceInsufficientError > for dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_insufficient_error :: PrefundedSpecializedBalanceInsufficientError) -> * const dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError { ferment :: boxed (dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError { balance_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . balance_id) , balance : obj . balance , required_balance : obj . required_balance }) } } impl Drop for dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . balance_id) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError_ctor < > (balance_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , balance : u64 , required_balance : u64) -> * mut dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError { ferment :: boxed (dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError { balance_id , balance , required_balance }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError_destroy < > (ffi : * mut dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError_get_balance_id < > (obj : * const dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . balance_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError_get_balance < > (obj : * const dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError) -> u64 { (* obj) . balance } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError_get_required_balance < > (obj : * const dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError) -> u64 { (* obj) . required_balance } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError_set_balance_id < > (obj : * const dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . balance_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError_set_balance < > (obj : * const dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError) -> u64 { (* obj) . balance } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError_set_required_balance < > (obj : * const dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_insufficient_error_PrefundedSpecializedBalanceInsufficientError) -> u64 { (* obj) . required_balance } } pub mod prefunded_specialized_balance_not_found_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`PrefundedSpecializedBalanceNotFoundError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError { pub balance_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_not_found_error :: PrefundedSpecializedBalanceNotFoundError > for dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError) -> dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_not_found_error :: PrefundedSpecializedBalanceNotFoundError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_not_found_error :: PrefundedSpecializedBalanceNotFoundError { balance_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . balance_id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_not_found_error :: PrefundedSpecializedBalanceNotFoundError > for dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: prefunded_specialized_balances :: prefunded_specialized_balance_not_found_error :: PrefundedSpecializedBalanceNotFoundError) -> * const dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError { ferment :: boxed (dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError { balance_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . balance_id) }) } } impl Drop for dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . balance_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError_ctor < > (balance_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError { ferment :: boxed (dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError { balance_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError_destroy < > (ffi : * mut dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError_get_balance_id < > (obj : * const dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . balance_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError_set_balance_id < > (obj : * const dpp_errors_consensus_state_prefunded_specialized_balances_prefunded_specialized_balance_not_found_error_PrefundedSpecializedBalanceNotFoundError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . balance_id } } } pub mod voting { use crate as dash_spv_apple_bindings ; pub mod masternode_voted_too_many_times { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`MasternodeVotedTooManyTimesError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError { pub pro_tx_hash : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub times_already_voted : u16 , pub max_times_allowed : u16 } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: voting :: masternode_voted_too_many_times :: MasternodeVotedTooManyTimesError > for dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError) -> dpp :: errors :: consensus :: state :: voting :: masternode_voted_too_many_times :: MasternodeVotedTooManyTimesError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: voting :: masternode_voted_too_many_times :: MasternodeVotedTooManyTimesError { pro_tx_hash : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . pro_tx_hash) , times_already_voted : ffi_ref . times_already_voted , max_times_allowed : ffi_ref . max_times_allowed } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: voting :: masternode_voted_too_many_times :: MasternodeVotedTooManyTimesError > for dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: voting :: masternode_voted_too_many_times :: MasternodeVotedTooManyTimesError) -> * const dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError { ferment :: boxed (dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError { pro_tx_hash : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . pro_tx_hash) , times_already_voted : obj . times_already_voted , max_times_allowed : obj . max_times_allowed }) } } impl Drop for dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . pro_tx_hash) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError_ctor < > (pro_tx_hash : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , times_already_voted : u16 , max_times_allowed : u16) -> * mut dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError { ferment :: boxed (dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError { pro_tx_hash , times_already_voted , max_times_allowed }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError_destroy < > (ffi : * mut dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError_get_pro_tx_hash < > (obj : * const dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . pro_tx_hash } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError_get_times_already_voted < > (obj : * const dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError) -> u16 { (* obj) . times_already_voted } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError_get_max_times_allowed < > (obj : * const dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError) -> u16 { (* obj) . max_times_allowed } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError_set_pro_tx_hash < > (obj : * const dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . pro_tx_hash } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError_set_times_already_voted < > (obj : * const dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError) -> u16 { (* obj) . times_already_voted } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError_set_max_times_allowed < > (obj : * const dpp_errors_consensus_state_voting_masternode_voted_too_many_times_MasternodeVotedTooManyTimesError) -> u16 { (* obj) . max_times_allowed } } pub mod masternode_incorrect_voter_identity_id_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`MasternodeIncorrectVoterIdentityIdError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError { pub pro_tx_hash : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub expected_voter_identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub provided_voter_identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voter_identity_id_error :: MasternodeIncorrectVoterIdentityIdError > for dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError) -> dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voter_identity_id_error :: MasternodeIncorrectVoterIdentityIdError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voter_identity_id_error :: MasternodeIncorrectVoterIdentityIdError { pro_tx_hash : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . pro_tx_hash) , expected_voter_identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . expected_voter_identity_id) , provided_voter_identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . provided_voter_identity_id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voter_identity_id_error :: MasternodeIncorrectVoterIdentityIdError > for dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voter_identity_id_error :: MasternodeIncorrectVoterIdentityIdError) -> * const dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError { ferment :: boxed (dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError { pro_tx_hash : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . pro_tx_hash) , expected_voter_identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . expected_voter_identity_id) , provided_voter_identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . provided_voter_identity_id) }) } } impl Drop for dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . pro_tx_hash) ; ferment :: unbox_any (ffi_ref . expected_voter_identity_id) ; ferment :: unbox_any (ffi_ref . provided_voter_identity_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError_ctor < > (pro_tx_hash : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , expected_voter_identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , provided_voter_identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError { ferment :: boxed (dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError { pro_tx_hash , expected_voter_identity_id , provided_voter_identity_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError_destroy < > (ffi : * mut dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError_get_pro_tx_hash < > (obj : * const dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . pro_tx_hash } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError_get_expected_voter_identity_id < > (obj : * const dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . expected_voter_identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError_get_provided_voter_identity_id < > (obj : * const dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . provided_voter_identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError_set_pro_tx_hash < > (obj : * const dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . pro_tx_hash } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError_set_expected_voter_identity_id < > (obj : * const dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . expected_voter_identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError_set_provided_voter_identity_id < > (obj : * const dpp_errors_consensus_state_voting_masternode_incorrect_voter_identity_id_error_MasternodeIncorrectVoterIdentityIdError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . provided_voter_identity_id } } pub mod vote_poll_not_available_for_voting_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`VotePollNotAvailableForVotingError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError { pub vote_poll : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll , pub status : * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: voting :: vote_poll_not_available_for_voting_error :: VotePollNotAvailableForVotingError > for dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError) -> dpp :: errors :: consensus :: state :: voting :: vote_poll_not_available_for_voting_error :: VotePollNotAvailableForVotingError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: voting :: vote_poll_not_available_for_voting_error :: VotePollNotAvailableForVotingError { vote_poll : < crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll as ferment :: FFIConversionFrom < dpp :: voting :: vote_polls :: VotePoll >> :: ffi_from (ffi_ref . vote_poll) , status : < crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus as ferment :: FFIConversionFrom < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStatus >> :: ffi_from (ffi_ref . status) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: voting :: vote_poll_not_available_for_voting_error :: VotePollNotAvailableForVotingError > for dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: voting :: vote_poll_not_available_for_voting_error :: VotePollNotAvailableForVotingError) -> * const dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError { ferment :: boxed (dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError { vote_poll : < crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll as ferment :: FFIConversionTo < dpp :: voting :: vote_polls :: VotePoll >> :: ffi_to (obj . vote_poll) , status : < crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus as ferment :: FFIConversionTo < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStatus >> :: ffi_to (obj . status) }) } } impl Drop for dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . vote_poll) ; ferment :: unbox_any (ffi_ref . status) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError_ctor < > (vote_poll : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll , status : * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus) -> * mut dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError { ferment :: boxed (dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError { vote_poll , status }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError_destroy < > (ffi : * mut dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError_get_vote_poll < > (obj : * const dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll { (* obj) . vote_poll } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError_get_status < > (obj : * const dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus { (* obj) . status } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError_set_vote_poll < > (obj : * const dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll { (* obj) . vote_poll } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError_set_status < > (obj : * const dpp_errors_consensus_state_voting_vote_poll_not_available_for_voting_error_VotePollNotAvailableForVotingError) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStatus { (* obj) . status } } pub mod masternode_not_found_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`MasternodeNotFoundError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError { pub pro_tx_hash : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: voting :: masternode_not_found_error :: MasternodeNotFoundError > for dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError) -> dpp :: errors :: consensus :: state :: voting :: masternode_not_found_error :: MasternodeNotFoundError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: voting :: masternode_not_found_error :: MasternodeNotFoundError { pro_tx_hash : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . pro_tx_hash) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: voting :: masternode_not_found_error :: MasternodeNotFoundError > for dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: voting :: masternode_not_found_error :: MasternodeNotFoundError) -> * const dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError { ferment :: boxed (dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError { pro_tx_hash : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . pro_tx_hash) }) } } impl Drop for dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . pro_tx_hash) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError_ctor < > (pro_tx_hash : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError { ferment :: boxed (dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError { pro_tx_hash }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError_destroy < > (ffi : * mut dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError_get_pro_tx_hash < > (obj : * const dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . pro_tx_hash } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError_set_pro_tx_hash < > (obj : * const dpp_errors_consensus_state_voting_masternode_not_found_error_MasternodeNotFoundError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . pro_tx_hash } } pub mod vote_poll_not_found_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`VotePollNotFoundError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError { pub vote_poll : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: voting :: vote_poll_not_found_error :: VotePollNotFoundError > for dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError) -> dpp :: errors :: consensus :: state :: voting :: vote_poll_not_found_error :: VotePollNotFoundError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: voting :: vote_poll_not_found_error :: VotePollNotFoundError { vote_poll : < crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll as ferment :: FFIConversionFrom < dpp :: voting :: vote_polls :: VotePoll >> :: ffi_from (ffi_ref . vote_poll) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: voting :: vote_poll_not_found_error :: VotePollNotFoundError > for dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: voting :: vote_poll_not_found_error :: VotePollNotFoundError) -> * const dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError { ferment :: boxed (dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError { vote_poll : < crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll as ferment :: FFIConversionTo < dpp :: voting :: vote_polls :: VotePoll >> :: ffi_to (obj . vote_poll) }) } } impl Drop for dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . vote_poll) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError_ctor < > (vote_poll : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll) -> * mut dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError { ferment :: boxed (dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError { vote_poll }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError_destroy < > (ffi : * mut dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError_get_vote_poll < > (obj : * const dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll { (* obj) . vote_poll } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError_set_vote_poll < > (obj : * const dpp_errors_consensus_state_voting_vote_poll_not_found_error_VotePollNotFoundError) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll { (* obj) . vote_poll } } pub mod masternode_incorrect_voting_address_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`MasternodeIncorrectVotingAddressError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError { pub pro_tx_hash : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub current_voting_address : * mut crate :: fermented :: types :: platform_value :: types :: bytes_20 :: platform_value_types_bytes_20_Bytes20 , pub given_voting_address : * mut crate :: fermented :: types :: platform_value :: types :: bytes_20 :: platform_value_types_bytes_20_Bytes20 } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voting_address_error :: MasternodeIncorrectVotingAddressError > for dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError) -> dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voting_address_error :: MasternodeIncorrectVotingAddressError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voting_address_error :: MasternodeIncorrectVotingAddressError { pro_tx_hash : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . pro_tx_hash) , current_voting_address : < crate :: fermented :: types :: platform_value :: types :: bytes_20 :: platform_value_types_bytes_20_Bytes20 as ferment :: FFIConversionFrom < platform_value :: types :: bytes_20 :: Bytes20 >> :: ffi_from (ffi_ref . current_voting_address) , given_voting_address : < crate :: fermented :: types :: platform_value :: types :: bytes_20 :: platform_value_types_bytes_20_Bytes20 as ferment :: FFIConversionFrom < platform_value :: types :: bytes_20 :: Bytes20 >> :: ffi_from (ffi_ref . given_voting_address) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voting_address_error :: MasternodeIncorrectVotingAddressError > for dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: voting :: masternode_incorrect_voting_address_error :: MasternodeIncorrectVotingAddressError) -> * const dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError { ferment :: boxed (dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError { pro_tx_hash : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . pro_tx_hash) , current_voting_address : < crate :: fermented :: types :: platform_value :: types :: bytes_20 :: platform_value_types_bytes_20_Bytes20 as ferment :: FFIConversionTo < platform_value :: types :: bytes_20 :: Bytes20 >> :: ffi_to (obj . current_voting_address) , given_voting_address : < crate :: fermented :: types :: platform_value :: types :: bytes_20 :: platform_value_types_bytes_20_Bytes20 as ferment :: FFIConversionTo < platform_value :: types :: bytes_20 :: Bytes20 >> :: ffi_to (obj . given_voting_address) }) } } impl Drop for dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . pro_tx_hash) ; ferment :: unbox_any (ffi_ref . current_voting_address) ; ferment :: unbox_any (ffi_ref . given_voting_address) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError_ctor < > (pro_tx_hash : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , current_voting_address : * mut crate :: fermented :: types :: platform_value :: types :: bytes_20 :: platform_value_types_bytes_20_Bytes20 , given_voting_address : * mut crate :: fermented :: types :: platform_value :: types :: bytes_20 :: platform_value_types_bytes_20_Bytes20) -> * mut dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError { ferment :: boxed (dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError { pro_tx_hash , current_voting_address , given_voting_address }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError_destroy < > (ffi : * mut dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError_get_pro_tx_hash < > (obj : * const dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . pro_tx_hash } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError_get_current_voting_address < > (obj : * const dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError) -> * mut crate :: fermented :: types :: platform_value :: types :: bytes_20 :: platform_value_types_bytes_20_Bytes20 { (* obj) . current_voting_address } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError_get_given_voting_address < > (obj : * const dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError) -> * mut crate :: fermented :: types :: platform_value :: types :: bytes_20 :: platform_value_types_bytes_20_Bytes20 { (* obj) . given_voting_address } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError_set_pro_tx_hash < > (obj : * const dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . pro_tx_hash } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError_set_current_voting_address < > (obj : * const dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError) -> * mut crate :: fermented :: types :: platform_value :: types :: bytes_20 :: platform_value_types_bytes_20_Bytes20 { (* obj) . current_voting_address } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError_set_given_voting_address < > (obj : * const dpp_errors_consensus_state_voting_masternode_incorrect_voting_address_error_MasternodeIncorrectVotingAddressError) -> * mut crate :: fermented :: types :: platform_value :: types :: bytes_20 :: platform_value_types_bytes_20_Bytes20 { (* obj) . given_voting_address } } pub mod masternode_vote_already_present_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`MasternodeVoteAlreadyPresentError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError { pub pro_tx_hash : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub vote_poll : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: voting :: masternode_vote_already_present_error :: MasternodeVoteAlreadyPresentError > for dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError) -> dpp :: errors :: consensus :: state :: voting :: masternode_vote_already_present_error :: MasternodeVoteAlreadyPresentError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: voting :: masternode_vote_already_present_error :: MasternodeVoteAlreadyPresentError { pro_tx_hash : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . pro_tx_hash) , vote_poll : < crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll as ferment :: FFIConversionFrom < dpp :: voting :: vote_polls :: VotePoll >> :: ffi_from (ffi_ref . vote_poll) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: voting :: masternode_vote_already_present_error :: MasternodeVoteAlreadyPresentError > for dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: voting :: masternode_vote_already_present_error :: MasternodeVoteAlreadyPresentError) -> * const dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError { ferment :: boxed (dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError { pro_tx_hash : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . pro_tx_hash) , vote_poll : < crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll as ferment :: FFIConversionTo < dpp :: voting :: vote_polls :: VotePoll >> :: ffi_to (obj . vote_poll) }) } } impl Drop for dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . pro_tx_hash) ; ferment :: unbox_any (ffi_ref . vote_poll) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError_ctor < > (pro_tx_hash : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , vote_poll : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll) -> * mut dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError { ferment :: boxed (dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError { pro_tx_hash , vote_poll }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError_destroy < > (ffi : * mut dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError_get_pro_tx_hash < > (obj : * const dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . pro_tx_hash } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError_get_vote_poll < > (obj : * const dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll { (* obj) . vote_poll } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError_set_pro_tx_hash < > (obj : * const dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . pro_tx_hash } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError_set_vote_poll < > (obj : * const dpp_errors_consensus_state_voting_masternode_vote_already_present_error_MasternodeVoteAlreadyPresentError) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: dpp_voting_vote_polls_VotePoll { (* obj) . vote_poll } } } # [cfg (feature = "state-transition-validation")] pub mod data_trigger { use crate as dash_spv_apple_bindings ; pub mod data_trigger_execution_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DataTriggerExecutionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub message : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_execution_error :: DataTriggerExecutionError > for dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError) -> dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_execution_error :: DataTriggerExecutionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_execution_error :: DataTriggerExecutionError { data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . data_contract_id) , document_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . document_id) , message : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . message) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_execution_error :: DataTriggerExecutionError > for dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_execution_error :: DataTriggerExecutionError) -> * const dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError { ferment :: boxed (dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError { data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . data_contract_id) , document_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . document_id) , message : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . message) }) } } impl Drop for dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . data_contract_id) ; ferment :: unbox_any (ffi_ref . document_id) ; ferment :: unbox_string (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError_ctor < > (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError { ferment :: boxed (dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError { data_contract_id , document_id , message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError_destroy < > (ffi : * mut dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError_get_data_contract_id < > (obj : * const dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError_get_document_id < > (obj : * const dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError_get_message < > (obj : * const dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError_set_data_contract_id < > (obj : * const dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError_set_document_id < > (obj : * const dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError_set_message < > (obj : * const dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError) -> * mut std :: os :: raw :: c_char { (* obj) . message } } pub mod data_trigger_invalid_result_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DataTriggerInvalidResultError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_invalid_result_error :: DataTriggerInvalidResultError > for dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError) -> dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_invalid_result_error :: DataTriggerInvalidResultError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_invalid_result_error :: DataTriggerInvalidResultError { data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . data_contract_id) , document_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . document_id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_invalid_result_error :: DataTriggerInvalidResultError > for dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_invalid_result_error :: DataTriggerInvalidResultError) -> * const dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError { ferment :: boxed (dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError { data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . data_contract_id) , document_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . document_id) }) } } impl Drop for dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . data_contract_id) ; ferment :: unbox_any (ffi_ref . document_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError_ctor < > (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError { ferment :: boxed (dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError { data_contract_id , document_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError_destroy < > (ffi : * mut dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError_get_data_contract_id < > (obj : * const dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError_get_document_id < > (obj : * const dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError_set_data_contract_id < > (obj : * const dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError_set_document_id < > (obj : * const dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`DataTriggerError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_errors_consensus_state_data_trigger_DataTriggerError { DataTriggerConditionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_condition_error :: dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError) , DataTriggerExecutionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_execution_error :: dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError) , DataTriggerInvalidResultError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_invalid_result_error :: dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError) } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: data_trigger :: DataTriggerError > for dpp_errors_consensus_state_data_trigger_DataTriggerError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_data_trigger_DataTriggerError) -> dpp :: errors :: consensus :: state :: data_trigger :: DataTriggerError { let ffi_ref = & * ffi ; match ffi_ref { dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerConditionError (o_0) => dpp :: errors :: consensus :: state :: data_trigger :: DataTriggerError :: DataTriggerConditionError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_condition_error :: dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_condition_error :: DataTriggerConditionError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerExecutionError (o_0) => dpp :: errors :: consensus :: state :: data_trigger :: DataTriggerError :: DataTriggerExecutionError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_execution_error :: dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_execution_error :: DataTriggerExecutionError >> :: ffi_from (* o_0)) , dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerInvalidResultError (o_0) => dpp :: errors :: consensus :: state :: data_trigger :: DataTriggerError :: DataTriggerInvalidResultError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_invalid_result_error :: dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_invalid_result_error :: DataTriggerInvalidResultError >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: data_trigger :: DataTriggerError > for dpp_errors_consensus_state_data_trigger_DataTriggerError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: data_trigger :: DataTriggerError) -> * const dpp_errors_consensus_state_data_trigger_DataTriggerError { ferment :: boxed (match obj { dpp :: errors :: consensus :: state :: data_trigger :: DataTriggerError :: DataTriggerConditionError (o_0) => dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerConditionError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_condition_error :: dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_condition_error :: DataTriggerConditionError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: data_trigger :: DataTriggerError :: DataTriggerExecutionError (o_0) => dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerExecutionError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_execution_error :: dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_execution_error :: DataTriggerExecutionError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: state :: data_trigger :: DataTriggerError :: DataTriggerInvalidResultError (o_0) => dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerInvalidResultError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_invalid_result_error :: dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_invalid_result_error :: DataTriggerInvalidResultError >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_errors_consensus_state_data_trigger_DataTriggerError { fn drop (& mut self) { unsafe { match self { dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerConditionError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerExecutionError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerInvalidResultError (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_DataTriggerError_DataTriggerConditionError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_condition_error :: dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError) -> * mut dpp_errors_consensus_state_data_trigger_DataTriggerError { ferment :: boxed (dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerConditionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_DataTriggerError_DataTriggerExecutionError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_execution_error :: dpp_errors_consensus_state_data_trigger_data_trigger_execution_error_DataTriggerExecutionError) -> * mut dpp_errors_consensus_state_data_trigger_DataTriggerError { ferment :: boxed (dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerExecutionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_DataTriggerError_DataTriggerInvalidResultError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_invalid_result_error :: dpp_errors_consensus_state_data_trigger_data_trigger_invalid_result_error_DataTriggerInvalidResultError) -> * mut dpp_errors_consensus_state_data_trigger_DataTriggerError { ferment :: boxed (dpp_errors_consensus_state_data_trigger_DataTriggerError :: DataTriggerInvalidResultError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_DataTriggerError_destroy < > (ffi : * mut dpp_errors_consensus_state_data_trigger_DataTriggerError) { ferment :: unbox_any (ffi) ; } pub mod data_trigger_condition_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DataTriggerConditionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub message : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_condition_error :: DataTriggerConditionError > for dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError) -> dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_condition_error :: DataTriggerConditionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_condition_error :: DataTriggerConditionError { data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . data_contract_id) , document_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . document_id) , message : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . message) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_condition_error :: DataTriggerConditionError > for dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: data_trigger :: data_trigger_condition_error :: DataTriggerConditionError) -> * const dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError { ferment :: boxed (dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError { data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . data_contract_id) , document_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . document_id) , message : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . message) }) } } impl Drop for dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . data_contract_id) ; ferment :: unbox_any (ffi_ref . document_id) ; ferment :: unbox_string (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError_ctor < > (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError { ferment :: boxed (dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError { data_contract_id , document_id , message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError_destroy < > (ffi : * mut dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError_get_data_contract_id < > (obj : * const dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError_get_document_id < > (obj : * const dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError_get_message < > (obj : * const dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError_set_data_contract_id < > (obj : * const dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError_set_document_id < > (obj : * const dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError_set_message < > (obj : * const dpp_errors_consensus_state_data_trigger_data_trigger_condition_error_DataTriggerConditionError) -> * mut std :: os :: raw :: c_char { (* obj) . message } } } pub mod data_contract { use crate as dash_spv_apple_bindings ; pub mod data_contract_update_permission_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DataContractUpdatePermissionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: data_contract :: data_contract_update_permission_error :: DataContractUpdatePermissionError > for dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError) -> dpp :: errors :: consensus :: state :: data_contract :: data_contract_update_permission_error :: DataContractUpdatePermissionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: data_contract :: data_contract_update_permission_error :: DataContractUpdatePermissionError { data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . data_contract_id) , identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . identity_id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: data_contract :: data_contract_update_permission_error :: DataContractUpdatePermissionError > for dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: data_contract :: data_contract_update_permission_error :: DataContractUpdatePermissionError) -> * const dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError { ferment :: boxed (dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError { data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . data_contract_id) , identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . identity_id) }) } } impl Drop for dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . data_contract_id) ; ferment :: unbox_any (ffi_ref . identity_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError_ctor < > (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError { ferment :: boxed (dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError { data_contract_id , identity_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError_destroy < > (ffi : * mut dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError_get_data_contract_id < > (obj : * const dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError_get_identity_id < > (obj : * const dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError_set_data_contract_id < > (obj : * const dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError_set_identity_id < > (obj : * const dpp_errors_consensus_state_data_contract_data_contract_update_permission_error_DataContractUpdatePermissionError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } } pub mod data_contract_already_present_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DataContractAlreadyPresentError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: data_contract :: data_contract_already_present_error :: DataContractAlreadyPresentError > for dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError) -> dpp :: errors :: consensus :: state :: data_contract :: data_contract_already_present_error :: DataContractAlreadyPresentError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: data_contract :: data_contract_already_present_error :: DataContractAlreadyPresentError { data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . data_contract_id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: data_contract :: data_contract_already_present_error :: DataContractAlreadyPresentError > for dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: data_contract :: data_contract_already_present_error :: DataContractAlreadyPresentError) -> * const dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError { ferment :: boxed (dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError { data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . data_contract_id) }) } } impl Drop for dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . data_contract_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError_ctor < > (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError { ferment :: boxed (dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError { data_contract_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError_destroy < > (ffi : * mut dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError_get_data_contract_id < > (obj : * const dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError_set_data_contract_id < > (obj : * const dpp_errors_consensus_state_data_contract_data_contract_already_present_error_DataContractAlreadyPresentError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } } pub mod document_type_update_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DocumentTypeUpdateError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub document_type_name : * mut std :: os :: raw :: c_char , pub additional_message : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: data_contract :: document_type_update_error :: DocumentTypeUpdateError > for dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError) -> dpp :: errors :: consensus :: state :: data_contract :: document_type_update_error :: DocumentTypeUpdateError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: data_contract :: document_type_update_error :: DocumentTypeUpdateError { data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . data_contract_id) , document_type_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . document_type_name) , additional_message : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . additional_message) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: data_contract :: document_type_update_error :: DocumentTypeUpdateError > for dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: data_contract :: document_type_update_error :: DocumentTypeUpdateError) -> * const dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError { ferment :: boxed (dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError { data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . data_contract_id) , document_type_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . document_type_name) , additional_message : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . additional_message) }) } } impl Drop for dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . data_contract_id) ; ferment :: unbox_string (ffi_ref . document_type_name) ; ferment :: unbox_string (ffi_ref . additional_message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError_ctor < > (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_type_name : * mut std :: os :: raw :: c_char , additional_message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError { ferment :: boxed (dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError { data_contract_id , document_type_name , additional_message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError_destroy < > (ffi : * mut dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError_get_data_contract_id < > (obj : * const dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError_get_document_type_name < > (obj : * const dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError_get_additional_message < > (obj : * const dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError) -> * mut std :: os :: raw :: c_char { (* obj) . additional_message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError_set_data_contract_id < > (obj : * const dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError_set_document_type_name < > (obj : * const dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError_set_additional_message < > (obj : * const dpp_errors_consensus_state_data_contract_document_type_update_error_DocumentTypeUpdateError) -> * mut std :: os :: raw :: c_char { (* obj) . additional_message } } pub mod data_contract_is_readonly_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DataContractIsReadonlyError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: data_contract :: data_contract_is_readonly_error :: DataContractIsReadonlyError > for dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError) -> dpp :: errors :: consensus :: state :: data_contract :: data_contract_is_readonly_error :: DataContractIsReadonlyError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: data_contract :: data_contract_is_readonly_error :: DataContractIsReadonlyError { data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . data_contract_id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: data_contract :: data_contract_is_readonly_error :: DataContractIsReadonlyError > for dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: data_contract :: data_contract_is_readonly_error :: DataContractIsReadonlyError) -> * const dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError { ferment :: boxed (dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError { data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . data_contract_id) }) } } impl Drop for dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . data_contract_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError_ctor < > (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError { ferment :: boxed (dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError { data_contract_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError_destroy < > (ffi : * mut dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError_get_data_contract_id < > (obj : * const dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError_set_data_contract_id < > (obj : * const dpp_errors_consensus_state_data_contract_data_contract_is_readonly_error_DataContractIsReadonlyError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } } pub mod data_contract_config_update_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DataContractConfigUpdateError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub additional_message : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: data_contract :: data_contract_config_update_error :: DataContractConfigUpdateError > for dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError) -> dpp :: errors :: consensus :: state :: data_contract :: data_contract_config_update_error :: DataContractConfigUpdateError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: data_contract :: data_contract_config_update_error :: DataContractConfigUpdateError { data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . data_contract_id) , additional_message : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . additional_message) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: data_contract :: data_contract_config_update_error :: DataContractConfigUpdateError > for dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: data_contract :: data_contract_config_update_error :: DataContractConfigUpdateError) -> * const dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError { ferment :: boxed (dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError { data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . data_contract_id) , additional_message : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . additional_message) }) } } impl Drop for dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . data_contract_id) ; ferment :: unbox_string (ffi_ref . additional_message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError_ctor < > (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , additional_message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError { ferment :: boxed (dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError { data_contract_id , additional_message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError_destroy < > (ffi : * mut dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError_get_data_contract_id < > (obj : * const dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError_get_additional_message < > (obj : * const dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError) -> * mut std :: os :: raw :: c_char { (* obj) . additional_message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError_set_data_contract_id < > (obj : * const dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError_set_additional_message < > (obj : * const dpp_errors_consensus_state_data_contract_data_contract_config_update_error_DataContractConfigUpdateError) -> * mut std :: os :: raw :: c_char { (* obj) . additional_message } } } pub mod identity { use crate as dash_spv_apple_bindings ; pub mod invalid_identity_public_key_id_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidIdentityPublicKeyIdError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError { pub id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: invalid_identity_public_key_id_error :: InvalidIdentityPublicKeyIdError > for dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError) -> dpp :: errors :: consensus :: state :: identity :: invalid_identity_public_key_id_error :: InvalidIdentityPublicKeyIdError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: invalid_identity_public_key_id_error :: InvalidIdentityPublicKeyIdError { id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_from (ffi_ref . id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: invalid_identity_public_key_id_error :: InvalidIdentityPublicKeyIdError > for dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: invalid_identity_public_key_id_error :: InvalidIdentityPublicKeyIdError) -> * const dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError { ferment :: boxed (dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError { id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_to (obj . id) }) } } impl Drop for dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError_ctor < > (id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError { ferment :: boxed (dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError { id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError_destroy < > (ffi : * mut dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError_get_id < > (obj : * const dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError_set_id < > (obj : * const dpp_errors_consensus_state_identity_invalid_identity_public_key_id_error_InvalidIdentityPublicKeyIdError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . id } } pub mod duplicated_identity_public_key_state_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DuplicatedIdentityPublicKeyStateError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError { pub duplicated_public_key_ids : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_state_error :: DuplicatedIdentityPublicKeyStateError > for dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError) -> dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_state_error :: DuplicatedIdentityPublicKeyStateError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_state_error :: DuplicatedIdentityPublicKeyStateError { duplicated_public_key_ids : < crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionFrom < Vec < dpp :: identity :: identity_public_key :: KeyID > >> :: ffi_from (ffi_ref . duplicated_public_key_ids) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_state_error :: DuplicatedIdentityPublicKeyStateError > for dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_state_error :: DuplicatedIdentityPublicKeyStateError) -> * const dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError { ferment :: boxed (dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError { duplicated_public_key_ids : < crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionTo < Vec < dpp :: identity :: identity_public_key :: KeyID > >> :: ffi_to (obj . duplicated_public_key_ids) }) } } impl Drop for dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . duplicated_public_key_ids) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError_ctor < > (duplicated_public_key_ids : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError { ferment :: boxed (dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError { duplicated_public_key_ids }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError_destroy < > (ffi : * mut dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError_get_duplicated_public_key_ids < > (obj : * const dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError) -> * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID { (* obj) . duplicated_public_key_ids } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError_set_duplicated_public_key_ids < > (obj : * const dpp_errors_consensus_state_identity_duplicated_identity_public_key_state_error_DuplicatedIdentityPublicKeyStateError) -> * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID { (* obj) . duplicated_public_key_ids } } pub mod identity_public_key_already_exists_for_unique_contract_bounds_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError { pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , pub new_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub old_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: identity_public_key_already_exists_for_unique_contract_bounds_error :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError > for dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) -> dpp :: errors :: consensus :: state :: identity :: identity_public_key_already_exists_for_unique_contract_bounds_error :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: identity_public_key_already_exists_for_unique_contract_bounds_error :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError { identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . identity_id) , contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . contract_id) , purpose : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: purpose :: Purpose >> :: ffi_from (ffi_ref . purpose) , new_key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_from (ffi_ref . new_key_id) , old_key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_from (ffi_ref . old_key_id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: identity_public_key_already_exists_for_unique_contract_bounds_error :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError > for dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: identity_public_key_already_exists_for_unique_contract_bounds_error :: IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) -> * const dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError { ferment :: boxed (dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError { identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . identity_id) , contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . contract_id) , purpose : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: purpose :: Purpose >> :: ffi_to (obj . purpose) , new_key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_to (obj . new_key_id) , old_key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_to (obj . old_key_id) }) } } impl Drop for dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . identity_id) ; ferment :: unbox_any (ffi_ref . contract_id) ; ferment :: unbox_any (ffi_ref . purpose) ; ferment :: unbox_any (ffi_ref . new_key_id) ; ferment :: unbox_any (ffi_ref . old_key_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_ctor < > (identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , new_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , old_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError { ferment :: boxed (dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError { identity_id , contract_id , purpose , new_key_id , old_key_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_destroy < > (ffi : * mut dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_get_identity_id < > (obj : * const dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_get_contract_id < > (obj : * const dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_get_purpose < > (obj : * const dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose { (* obj) . purpose } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_get_new_key_id < > (obj : * const dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . new_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_get_old_key_id < > (obj : * const dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . old_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_set_identity_id < > (obj : * const dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_set_contract_id < > (obj : * const dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_set_purpose < > (obj : * const dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose { (* obj) . purpose } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_set_new_key_id < > (obj : * const dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . new_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError_set_old_key_id < > (obj : * const dpp_errors_consensus_state_identity_identity_public_key_already_exists_for_unique_contract_bounds_error_IdentityPublicKeyAlreadyExistsForUniqueContractBoundsError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . old_key_id } } pub mod identity_public_key_is_disabled_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`IdentityPublicKeyIsDisabledError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError { pub public_key_index : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_disabled_error :: IdentityPublicKeyIsDisabledError > for dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError) -> dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_disabled_error :: IdentityPublicKeyIsDisabledError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_disabled_error :: IdentityPublicKeyIsDisabledError { public_key_index : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_from (ffi_ref . public_key_index) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_disabled_error :: IdentityPublicKeyIsDisabledError > for dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_disabled_error :: IdentityPublicKeyIsDisabledError) -> * const dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError { ferment :: boxed (dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError { public_key_index : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_to (obj . public_key_index) }) } } impl Drop for dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . public_key_index) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError_ctor < > (public_key_index : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError { ferment :: boxed (dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError { public_key_index }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError_destroy < > (ffi : * mut dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError_get_public_key_index < > (obj : * const dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . public_key_index } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError_set_public_key_index < > (obj : * const dpp_errors_consensus_state_identity_identity_public_key_is_disabled_error_IdentityPublicKeyIsDisabledError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . public_key_index } } pub mod duplicated_identity_public_key_id_state_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DuplicatedIdentityPublicKeyIdStateError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError { pub duplicated_ids : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_id_state_error :: DuplicatedIdentityPublicKeyIdStateError > for dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError) -> dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_id_state_error :: DuplicatedIdentityPublicKeyIdStateError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_id_state_error :: DuplicatedIdentityPublicKeyIdStateError { duplicated_ids : < crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionFrom < Vec < dpp :: identity :: identity_public_key :: KeyID > >> :: ffi_from (ffi_ref . duplicated_ids) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_id_state_error :: DuplicatedIdentityPublicKeyIdStateError > for dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: duplicated_identity_public_key_id_state_error :: DuplicatedIdentityPublicKeyIdStateError) -> * const dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError { ferment :: boxed (dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError { duplicated_ids : < crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionTo < Vec < dpp :: identity :: identity_public_key :: KeyID > >> :: ffi_to (obj . duplicated_ids) }) } } impl Drop for dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . duplicated_ids) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError_ctor < > (duplicated_ids : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError { ferment :: boxed (dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError { duplicated_ids }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError_destroy < > (ffi : * mut dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError_get_duplicated_ids < > (obj : * const dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError) -> * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID { (* obj) . duplicated_ids } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError_set_duplicated_ids < > (obj : * const dpp_errors_consensus_state_identity_duplicated_identity_public_key_id_state_error_DuplicatedIdentityPublicKeyIdStateError) -> * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID { (* obj) . duplicated_ids } } pub mod no_transfer_key_for_core_withdrawal_available_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`NoTransferKeyForCoreWithdrawalAvailableError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_no_transfer_key_for_core_withdrawal_available_error_NoTransferKeyForCoreWithdrawalAvailableError { pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: no_transfer_key_for_core_withdrawal_available_error :: NoTransferKeyForCoreWithdrawalAvailableError > for dpp_errors_consensus_state_identity_no_transfer_key_for_core_withdrawal_available_error_NoTransferKeyForCoreWithdrawalAvailableError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_no_transfer_key_for_core_withdrawal_available_error_NoTransferKeyForCoreWithdrawalAvailableError) -> dpp :: errors :: consensus :: state :: identity :: no_transfer_key_for_core_withdrawal_available_error :: NoTransferKeyForCoreWithdrawalAvailableError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: no_transfer_key_for_core_withdrawal_available_error :: NoTransferKeyForCoreWithdrawalAvailableError { identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . identity_id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: no_transfer_key_for_core_withdrawal_available_error :: NoTransferKeyForCoreWithdrawalAvailableError > for dpp_errors_consensus_state_identity_no_transfer_key_for_core_withdrawal_available_error_NoTransferKeyForCoreWithdrawalAvailableError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: no_transfer_key_for_core_withdrawal_available_error :: NoTransferKeyForCoreWithdrawalAvailableError) -> * const dpp_errors_consensus_state_identity_no_transfer_key_for_core_withdrawal_available_error_NoTransferKeyForCoreWithdrawalAvailableError { ferment :: boxed (dpp_errors_consensus_state_identity_no_transfer_key_for_core_withdrawal_available_error_NoTransferKeyForCoreWithdrawalAvailableError { identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . identity_id) }) } } impl Drop for dpp_errors_consensus_state_identity_no_transfer_key_for_core_withdrawal_available_error_NoTransferKeyForCoreWithdrawalAvailableError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . identity_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_no_transfer_key_for_core_withdrawal_available_error_NoTransferKeyForCoreWithdrawalAvailableError_ctor < > (identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_identity_no_transfer_key_for_core_withdrawal_available_error_NoTransferKeyForCoreWithdrawalAvailableError { ferment :: boxed (dpp_errors_consensus_state_identity_no_transfer_key_for_core_withdrawal_available_error_NoTransferKeyForCoreWithdrawalAvailableError { identity_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_no_transfer_key_for_core_withdrawal_available_error_NoTransferKeyForCoreWithdrawalAvailableError_destroy < > (ffi : * mut dpp_errors_consensus_state_identity_no_transfer_key_for_core_withdrawal_available_error_NoTransferKeyForCoreWithdrawalAvailableError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_no_transfer_key_for_core_withdrawal_available_error_NoTransferKeyForCoreWithdrawalAvailableError_get_identity_id < > (obj : * const dpp_errors_consensus_state_identity_no_transfer_key_for_core_withdrawal_available_error_NoTransferKeyForCoreWithdrawalAvailableError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_no_transfer_key_for_core_withdrawal_available_error_NoTransferKeyForCoreWithdrawalAvailableError_set_identity_id < > (obj : * const dpp_errors_consensus_state_identity_no_transfer_key_for_core_withdrawal_available_error_NoTransferKeyForCoreWithdrawalAvailableError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } } pub mod missing_identity_public_key_ids_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`MissingIdentityPublicKeyIdsError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError { pub ids : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: missing_identity_public_key_ids_error :: MissingIdentityPublicKeyIdsError > for dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError) -> dpp :: errors :: consensus :: state :: identity :: missing_identity_public_key_ids_error :: MissingIdentityPublicKeyIdsError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: missing_identity_public_key_ids_error :: MissingIdentityPublicKeyIdsError { ids : < crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionFrom < Vec < dpp :: identity :: identity_public_key :: KeyID > >> :: ffi_from (ffi_ref . ids) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: missing_identity_public_key_ids_error :: MissingIdentityPublicKeyIdsError > for dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: missing_identity_public_key_ids_error :: MissingIdentityPublicKeyIdsError) -> * const dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError { ferment :: boxed (dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError { ids : < crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionTo < Vec < dpp :: identity :: identity_public_key :: KeyID > >> :: ffi_to (obj . ids) }) } } impl Drop for dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . ids) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError_ctor < > (ids : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError { ferment :: boxed (dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError { ids }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError_destroy < > (ffi : * mut dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError_get_ids < > (obj : * const dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError) -> * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID { (* obj) . ids } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError_set_ids < > (obj : * const dpp_errors_consensus_state_identity_missing_identity_public_key_ids_error_MissingIdentityPublicKeyIdsError) -> * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID { (* obj) . ids } } pub mod max_identity_public_key_limit_reached_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`MaxIdentityPublicKeyLimitReachedError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError { pub max_items : usize } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: max_identity_public_key_limit_reached_error :: MaxIdentityPublicKeyLimitReachedError > for dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError) -> dpp :: errors :: consensus :: state :: identity :: max_identity_public_key_limit_reached_error :: MaxIdentityPublicKeyLimitReachedError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: max_identity_public_key_limit_reached_error :: MaxIdentityPublicKeyLimitReachedError { max_items : ffi_ref . max_items } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: max_identity_public_key_limit_reached_error :: MaxIdentityPublicKeyLimitReachedError > for dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: max_identity_public_key_limit_reached_error :: MaxIdentityPublicKeyLimitReachedError) -> * const dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError { ferment :: boxed (dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError { max_items : obj . max_items }) } } impl Drop for dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError_ctor < > (max_items : usize) -> * mut dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError { ferment :: boxed (dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError { max_items }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError_destroy < > (ffi : * mut dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError_get_max_items < > (obj : * const dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError) -> usize { (* obj) . max_items } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError_set_max_items < > (obj : * const dpp_errors_consensus_state_identity_max_identity_public_key_limit_reached_error_MaxIdentityPublicKeyLimitReachedError) -> usize { (* obj) . max_items } } pub mod invalid_identity_contract_nonce_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidIdentityNonceError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError { pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub current_identity_nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , pub setting_identity_nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , pub error : * mut crate :: fermented :: types :: dpp :: identity :: identity_nonce :: dpp_identity_identity_nonce_MergeIdentityNonceResult } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: invalid_identity_contract_nonce_error :: InvalidIdentityNonceError > for dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError) -> dpp :: errors :: consensus :: state :: identity :: invalid_identity_contract_nonce_error :: InvalidIdentityNonceError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: invalid_identity_contract_nonce_error :: InvalidIdentityNonceError { identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . identity_id) , current_identity_nonce : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce as ferment :: FFIConversionFrom < dpp :: prelude :: IdentityNonce >> :: ffi_from_opt (ffi_ref . current_identity_nonce) , setting_identity_nonce : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce as ferment :: FFIConversionFrom < dpp :: prelude :: IdentityNonce >> :: ffi_from (ffi_ref . setting_identity_nonce) , error : < crate :: fermented :: types :: dpp :: identity :: identity_nonce :: dpp_identity_identity_nonce_MergeIdentityNonceResult as ferment :: FFIConversionFrom < dpp :: identity :: identity_nonce :: MergeIdentityNonceResult >> :: ffi_from (ffi_ref . error) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: invalid_identity_contract_nonce_error :: InvalidIdentityNonceError > for dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: invalid_identity_contract_nonce_error :: InvalidIdentityNonceError) -> * const dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError { ferment :: boxed (dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError { identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . identity_id) , current_identity_nonce : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce as ferment :: FFIConversionTo < dpp :: prelude :: IdentityNonce >> :: ffi_to_opt (obj . current_identity_nonce) , setting_identity_nonce : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce as ferment :: FFIConversionTo < dpp :: prelude :: IdentityNonce >> :: ffi_to (obj . setting_identity_nonce) , error : < crate :: fermented :: types :: dpp :: identity :: identity_nonce :: dpp_identity_identity_nonce_MergeIdentityNonceResult as ferment :: FFIConversionTo < dpp :: identity :: identity_nonce :: MergeIdentityNonceResult >> :: ffi_to (obj . error) }) } } impl Drop for dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . identity_id) ; ferment :: unbox_any_opt (ffi_ref . current_identity_nonce) ; ferment :: unbox_any (ffi_ref . setting_identity_nonce) ; ferment :: unbox_any (ffi_ref . error) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError_ctor < > (identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , current_identity_nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , setting_identity_nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce , error : * mut crate :: fermented :: types :: dpp :: identity :: identity_nonce :: dpp_identity_identity_nonce_MergeIdentityNonceResult) -> * mut dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError { ferment :: boxed (dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError { identity_id , current_identity_nonce , setting_identity_nonce , error }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError_destroy < > (ffi : * mut dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError_get_identity_id < > (obj : * const dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError_get_current_identity_nonce < > (obj : * const dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce { (* obj) . current_identity_nonce } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError_get_setting_identity_nonce < > (obj : * const dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce { (* obj) . setting_identity_nonce } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError_get_error < > (obj : * const dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_nonce :: dpp_identity_identity_nonce_MergeIdentityNonceResult { (* obj) . error } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError_set_identity_id < > (obj : * const dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError_set_current_identity_nonce < > (obj : * const dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce { (* obj) . current_identity_nonce } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError_set_setting_identity_nonce < > (obj : * const dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce { (* obj) . setting_identity_nonce } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError_set_error < > (obj : * const dpp_errors_consensus_state_identity_invalid_identity_contract_nonce_error_InvalidIdentityNonceError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_nonce :: dpp_identity_identity_nonce_MergeIdentityNonceResult { (* obj) . error } } pub mod identity_public_key_is_read_only_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`IdentityPublicKeyIsReadOnlyError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError { pub public_key_index : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_read_only_error :: IdentityPublicKeyIsReadOnlyError > for dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError) -> dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_read_only_error :: IdentityPublicKeyIsReadOnlyError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_read_only_error :: IdentityPublicKeyIsReadOnlyError { public_key_index : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_from (ffi_ref . public_key_index) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_read_only_error :: IdentityPublicKeyIsReadOnlyError > for dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: identity_public_key_is_read_only_error :: IdentityPublicKeyIsReadOnlyError) -> * const dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError { ferment :: boxed (dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError { public_key_index : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_to (obj . public_key_index) }) } } impl Drop for dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . public_key_index) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError_ctor < > (public_key_index : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError { ferment :: boxed (dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError { public_key_index }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError_destroy < > (ffi : * mut dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError_get_public_key_index < > (obj : * const dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . public_key_index } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError_set_public_key_index < > (obj : * const dpp_errors_consensus_state_identity_identity_public_key_is_read_only_error_IdentityPublicKeyIsReadOnlyError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . public_key_index } } pub mod missing_transfer_key_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`MissingTransferKeyError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_missing_transfer_key_error_MissingTransferKeyError { pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: missing_transfer_key_error :: MissingTransferKeyError > for dpp_errors_consensus_state_identity_missing_transfer_key_error_MissingTransferKeyError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_missing_transfer_key_error_MissingTransferKeyError) -> dpp :: errors :: consensus :: state :: identity :: missing_transfer_key_error :: MissingTransferKeyError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: missing_transfer_key_error :: MissingTransferKeyError { identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . identity_id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: missing_transfer_key_error :: MissingTransferKeyError > for dpp_errors_consensus_state_identity_missing_transfer_key_error_MissingTransferKeyError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: missing_transfer_key_error :: MissingTransferKeyError) -> * const dpp_errors_consensus_state_identity_missing_transfer_key_error_MissingTransferKeyError { ferment :: boxed (dpp_errors_consensus_state_identity_missing_transfer_key_error_MissingTransferKeyError { identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . identity_id) }) } } impl Drop for dpp_errors_consensus_state_identity_missing_transfer_key_error_MissingTransferKeyError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . identity_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_missing_transfer_key_error_MissingTransferKeyError_ctor < > (identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_identity_missing_transfer_key_error_MissingTransferKeyError { ferment :: boxed (dpp_errors_consensus_state_identity_missing_transfer_key_error_MissingTransferKeyError { identity_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_missing_transfer_key_error_MissingTransferKeyError_destroy < > (ffi : * mut dpp_errors_consensus_state_identity_missing_transfer_key_error_MissingTransferKeyError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_missing_transfer_key_error_MissingTransferKeyError_get_identity_id < > (obj : * const dpp_errors_consensus_state_identity_missing_transfer_key_error_MissingTransferKeyError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_missing_transfer_key_error_MissingTransferKeyError_set_identity_id < > (obj : * const dpp_errors_consensus_state_identity_missing_transfer_key_error_MissingTransferKeyError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } } pub mod identity_already_exists_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`IdentityAlreadyExistsError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError { pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: identity_already_exists_error :: IdentityAlreadyExistsError > for dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError) -> dpp :: errors :: consensus :: state :: identity :: identity_already_exists_error :: IdentityAlreadyExistsError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: identity_already_exists_error :: IdentityAlreadyExistsError { identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . identity_id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: identity_already_exists_error :: IdentityAlreadyExistsError > for dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: identity_already_exists_error :: IdentityAlreadyExistsError) -> * const dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError { ferment :: boxed (dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError { identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . identity_id) }) } } impl Drop for dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . identity_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError_ctor < > (identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError { ferment :: boxed (dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError { identity_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError_destroy < > (ffi : * mut dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError_get_identity_id < > (obj : * const dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError_set_identity_id < > (obj : * const dpp_errors_consensus_state_identity_identity_already_exists_error_IdentityAlreadyExistsError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } } pub mod identity_insufficient_balance_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`IdentityInsufficientBalanceError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError { pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub balance : u64 , pub required_balance : u64 } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: identity_insufficient_balance_error :: IdentityInsufficientBalanceError > for dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError) -> dpp :: errors :: consensus :: state :: identity :: identity_insufficient_balance_error :: IdentityInsufficientBalanceError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: identity_insufficient_balance_error :: IdentityInsufficientBalanceError { identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . identity_id) , balance : ffi_ref . balance , required_balance : ffi_ref . required_balance } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: identity_insufficient_balance_error :: IdentityInsufficientBalanceError > for dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: identity_insufficient_balance_error :: IdentityInsufficientBalanceError) -> * const dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError { ferment :: boxed (dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError { identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . identity_id) , balance : obj . balance , required_balance : obj . required_balance }) } } impl Drop for dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . identity_id) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError_ctor < > (identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , balance : u64 , required_balance : u64) -> * mut dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError { ferment :: boxed (dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError { identity_id , balance , required_balance }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError_destroy < > (ffi : * mut dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError_get_identity_id < > (obj : * const dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError_get_balance < > (obj : * const dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError) -> u64 { (* obj) . balance } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError_get_required_balance < > (obj : * const dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError) -> u64 { (* obj) . required_balance } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError_set_identity_id < > (obj : * const dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError_set_balance < > (obj : * const dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError) -> u64 { (* obj) . balance } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError_set_required_balance < > (obj : * const dpp_errors_consensus_state_identity_identity_insufficient_balance_error_IdentityInsufficientBalanceError) -> u64 { (* obj) . required_balance } } pub mod invalid_identity_revision_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidIdentityRevisionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError { pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub current_revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: invalid_identity_revision_error :: InvalidIdentityRevisionError > for dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError) -> dpp :: errors :: consensus :: state :: identity :: invalid_identity_revision_error :: InvalidIdentityRevisionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: invalid_identity_revision_error :: InvalidIdentityRevisionError { identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . identity_id) , current_revision : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision as ferment :: FFIConversionFrom < dpp :: prelude :: Revision >> :: ffi_from (ffi_ref . current_revision) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: invalid_identity_revision_error :: InvalidIdentityRevisionError > for dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: invalid_identity_revision_error :: InvalidIdentityRevisionError) -> * const dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError { ferment :: boxed (dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError { identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . identity_id) , current_revision : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision as ferment :: FFIConversionTo < dpp :: prelude :: Revision >> :: ffi_to (obj . current_revision) }) } } impl Drop for dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . identity_id) ; ferment :: unbox_any (ffi_ref . current_revision) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError_ctor < > (identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , current_revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision) -> * mut dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError { ferment :: boxed (dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError { identity_id , current_revision }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError_destroy < > (ffi : * mut dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError_get_identity_id < > (obj : * const dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError_get_current_revision < > (obj : * const dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . current_revision } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError_set_identity_id < > (obj : * const dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError_set_current_revision < > (obj : * const dpp_errors_consensus_state_identity_invalid_identity_revision_error_InvalidIdentityRevisionError) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . current_revision } } pub mod master_public_key_update_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`MasterPublicKeyUpdateError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError { pub adding : usize , pub removing : usize , pub description : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: master_public_key_update_error :: MasterPublicKeyUpdateError > for dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError) -> dpp :: errors :: consensus :: state :: identity :: master_public_key_update_error :: MasterPublicKeyUpdateError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: identity :: master_public_key_update_error :: MasterPublicKeyUpdateError { adding : ffi_ref . adding , removing : ffi_ref . removing , description : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . description) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: master_public_key_update_error :: MasterPublicKeyUpdateError > for dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: identity :: master_public_key_update_error :: MasterPublicKeyUpdateError) -> * const dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError { ferment :: boxed (dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError { adding : obj . adding , removing : obj . removing , description : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . description) }) } } impl Drop for dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ferment :: unbox_string (ffi_ref . description) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError_ctor < > (adding : usize , removing : usize , description : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError { ferment :: boxed (dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError { adding , removing , description }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError_destroy < > (ffi : * mut dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError_get_adding < > (obj : * const dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError) -> usize { (* obj) . adding } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError_get_removing < > (obj : * const dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError) -> usize { (* obj) . removing } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError_get_description < > (obj : * const dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError) -> * mut std :: os :: raw :: c_char { (* obj) . description } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError_set_adding < > (obj : * const dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError) -> usize { (* obj) . adding } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError_set_removing < > (obj : * const dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError) -> usize { (* obj) . removing } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError_set_description < > (obj : * const dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError) -> * mut std :: os :: raw :: c_char { (* obj) . description } } } pub mod document { use crate as dash_spv_apple_bindings ; pub mod document_not_for_sale_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DocumentNotForSaleError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError { pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_not_for_sale_error :: DocumentNotForSaleError > for dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError) -> dpp :: errors :: consensus :: state :: document :: document_not_for_sale_error :: DocumentNotForSaleError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: document_not_for_sale_error :: DocumentNotForSaleError { document_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . document_id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_not_for_sale_error :: DocumentNotForSaleError > for dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: document_not_for_sale_error :: DocumentNotForSaleError) -> * const dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError { ferment :: boxed (dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError { document_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . document_id) }) } } impl Drop for dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . document_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError_ctor < > (document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError { ferment :: boxed (dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError { document_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError_destroy < > (ffi : * mut dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError_get_document_id < > (obj : * const dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError_set_document_id < > (obj : * const dpp_errors_consensus_state_document_document_not_for_sale_error_DocumentNotForSaleError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } } pub mod document_timestamp_window_violation_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DocumentTimestampWindowViolationError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError { pub timestamp_name : * mut std :: os :: raw :: c_char , pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub timestamp : i64 , pub time_window_start : i64 , pub time_window_end : i64 } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_timestamp_window_violation_error :: DocumentTimestampWindowViolationError > for dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) -> dpp :: errors :: consensus :: state :: document :: document_timestamp_window_violation_error :: DocumentTimestampWindowViolationError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: document_timestamp_window_violation_error :: DocumentTimestampWindowViolationError { timestamp_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . timestamp_name) , document_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . document_id) , timestamp : ffi_ref . timestamp , time_window_start : ffi_ref . time_window_start , time_window_end : ffi_ref . time_window_end } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_timestamp_window_violation_error :: DocumentTimestampWindowViolationError > for dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: document_timestamp_window_violation_error :: DocumentTimestampWindowViolationError) -> * const dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError { ferment :: boxed (dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError { timestamp_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . timestamp_name) , document_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . document_id) , timestamp : obj . timestamp , time_window_start : obj . time_window_start , time_window_end : obj . time_window_end }) } } impl Drop for dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . timestamp_name) ; ferment :: unbox_any (ffi_ref . document_id) ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_ctor < > (timestamp_name : * mut std :: os :: raw :: c_char , document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , timestamp : i64 , time_window_start : i64 , time_window_end : i64) -> * mut dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError { ferment :: boxed (dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError { timestamp_name , document_id , timestamp , time_window_start , time_window_end }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_destroy < > (ffi : * mut dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_get_timestamp_name < > (obj : * const dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) -> * mut std :: os :: raw :: c_char { (* obj) . timestamp_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_get_document_id < > (obj : * const dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_get_timestamp < > (obj : * const dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) -> i64 { (* obj) . timestamp } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_get_time_window_start < > (obj : * const dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) -> i64 { (* obj) . time_window_start } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_get_time_window_end < > (obj : * const dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) -> i64 { (* obj) . time_window_end } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_set_timestamp_name < > (obj : * const dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) -> * mut std :: os :: raw :: c_char { (* obj) . timestamp_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_set_document_id < > (obj : * const dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_set_timestamp < > (obj : * const dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) -> i64 { (* obj) . timestamp } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_set_time_window_start < > (obj : * const dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) -> i64 { (* obj) . time_window_start } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError_set_time_window_end < > (obj : * const dpp_errors_consensus_state_document_document_timestamp_window_violation_error_DocumentTimestampWindowViolationError) -> i64 { (* obj) . time_window_end } } pub mod document_contest_not_joinable_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DocumentContestNotJoinableError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError { pub vote_poll : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll , pub stored_info : * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo , pub start_time : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis , pub current_time : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis , pub joinable_time : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_contest_not_joinable_error :: DocumentContestNotJoinableError > for dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError) -> dpp :: errors :: consensus :: state :: document :: document_contest_not_joinable_error :: DocumentContestNotJoinableError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: document_contest_not_joinable_error :: DocumentContestNotJoinableError { vote_poll : < crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll as ferment :: FFIConversionFrom < dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: ContestedDocumentResourceVotePoll >> :: ffi_from (ffi_ref . vote_poll) , stored_info : < crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo as ferment :: FFIConversionFrom < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStoredInfo >> :: ffi_from (ffi_ref . stored_info) , start_time : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis as ferment :: FFIConversionFrom < dpp :: prelude :: TimestampMillis >> :: ffi_from (ffi_ref . start_time) , current_time : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis as ferment :: FFIConversionFrom < dpp :: prelude :: TimestampMillis >> :: ffi_from (ffi_ref . current_time) , joinable_time : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis as ferment :: FFIConversionFrom < dpp :: prelude :: TimestampMillis >> :: ffi_from (ffi_ref . joinable_time) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_contest_not_joinable_error :: DocumentContestNotJoinableError > for dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: document_contest_not_joinable_error :: DocumentContestNotJoinableError) -> * const dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError { ferment :: boxed (dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError { vote_poll : < crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll as ferment :: FFIConversionTo < dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: ContestedDocumentResourceVotePoll >> :: ffi_to (obj . vote_poll) , stored_info : < crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo as ferment :: FFIConversionTo < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStoredInfo >> :: ffi_to (obj . stored_info) , start_time : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis as ferment :: FFIConversionTo < dpp :: prelude :: TimestampMillis >> :: ffi_to (obj . start_time) , current_time : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis as ferment :: FFIConversionTo < dpp :: prelude :: TimestampMillis >> :: ffi_to (obj . current_time) , joinable_time : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis as ferment :: FFIConversionTo < dpp :: prelude :: TimestampMillis >> :: ffi_to (obj . joinable_time) }) } } impl Drop for dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . vote_poll) ; ferment :: unbox_any (ffi_ref . stored_info) ; ferment :: unbox_any (ffi_ref . start_time) ; ferment :: unbox_any (ffi_ref . current_time) ; ferment :: unbox_any (ffi_ref . joinable_time) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError_ctor < > (vote_poll : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll , stored_info : * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo , start_time : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis , current_time : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis , joinable_time : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis) -> * mut dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError { ferment :: boxed (dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError { vote_poll , stored_info , start_time , current_time , joinable_time }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError_destroy < > (ffi : * mut dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError_get_vote_poll < > (obj : * const dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll { (* obj) . vote_poll } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError_get_stored_info < > (obj : * const dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo { (* obj) . stored_info } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError_get_start_time < > (obj : * const dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis { (* obj) . start_time } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError_get_current_time < > (obj : * const dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis { (* obj) . current_time } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError_get_joinable_time < > (obj : * const dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis { (* obj) . joinable_time } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError_set_vote_poll < > (obj : * const dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll { (* obj) . vote_poll } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError_set_stored_info < > (obj : * const dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo { (* obj) . stored_info } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError_set_start_time < > (obj : * const dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis { (* obj) . start_time } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError_set_current_time < > (obj : * const dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis { (* obj) . current_time } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError_set_joinable_time < > (obj : * const dpp_errors_consensus_state_document_document_contest_not_joinable_error_DocumentContestNotJoinableError) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis { (* obj) . joinable_time } } pub mod document_incorrect_purchase_price_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DocumentIncorrectPurchasePriceError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError { pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub trying_to_purchase_at_price : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits , pub actual_price : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_incorrect_purchase_price_error :: DocumentIncorrectPurchasePriceError > for dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError) -> dpp :: errors :: consensus :: state :: document :: document_incorrect_purchase_price_error :: DocumentIncorrectPurchasePriceError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: document_incorrect_purchase_price_error :: DocumentIncorrectPurchasePriceError { document_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . document_id) , trying_to_purchase_at_price : < crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits as ferment :: FFIConversionFrom < dpp :: balances :: credits :: Credits >> :: ffi_from (ffi_ref . trying_to_purchase_at_price) , actual_price : < crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits as ferment :: FFIConversionFrom < dpp :: balances :: credits :: Credits >> :: ffi_from (ffi_ref . actual_price) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_incorrect_purchase_price_error :: DocumentIncorrectPurchasePriceError > for dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: document_incorrect_purchase_price_error :: DocumentIncorrectPurchasePriceError) -> * const dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError { ferment :: boxed (dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError { document_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . document_id) , trying_to_purchase_at_price : < crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits as ferment :: FFIConversionTo < dpp :: balances :: credits :: Credits >> :: ffi_to (obj . trying_to_purchase_at_price) , actual_price : < crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits as ferment :: FFIConversionTo < dpp :: balances :: credits :: Credits >> :: ffi_to (obj . actual_price) }) } } impl Drop for dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . document_id) ; ferment :: unbox_any (ffi_ref . trying_to_purchase_at_price) ; ferment :: unbox_any (ffi_ref . actual_price) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError_ctor < > (document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , trying_to_purchase_at_price : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits , actual_price : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits) -> * mut dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError { ferment :: boxed (dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError { document_id , trying_to_purchase_at_price , actual_price }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError_destroy < > (ffi : * mut dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError_get_document_id < > (obj : * const dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError_get_trying_to_purchase_at_price < > (obj : * const dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . trying_to_purchase_at_price } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError_get_actual_price < > (obj : * const dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . actual_price } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError_set_document_id < > (obj : * const dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError_set_trying_to_purchase_at_price < > (obj : * const dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . trying_to_purchase_at_price } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError_set_actual_price < > (obj : * const dpp_errors_consensus_state_document_document_incorrect_purchase_price_error_DocumentIncorrectPurchasePriceError) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . actual_price } } pub mod document_contest_document_with_same_id_already_present_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DocumentContestDocumentWithSameIdAlreadyPresentError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_document_contest_document_with_same_id_already_present_error_DocumentContestDocumentWithSameIdAlreadyPresentError { pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_contest_document_with_same_id_already_present_error :: DocumentContestDocumentWithSameIdAlreadyPresentError > for dpp_errors_consensus_state_document_document_contest_document_with_same_id_already_present_error_DocumentContestDocumentWithSameIdAlreadyPresentError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_document_contest_document_with_same_id_already_present_error_DocumentContestDocumentWithSameIdAlreadyPresentError) -> dpp :: errors :: consensus :: state :: document :: document_contest_document_with_same_id_already_present_error :: DocumentContestDocumentWithSameIdAlreadyPresentError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: document_contest_document_with_same_id_already_present_error :: DocumentContestDocumentWithSameIdAlreadyPresentError { document_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . document_id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_contest_document_with_same_id_already_present_error :: DocumentContestDocumentWithSameIdAlreadyPresentError > for dpp_errors_consensus_state_document_document_contest_document_with_same_id_already_present_error_DocumentContestDocumentWithSameIdAlreadyPresentError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: document_contest_document_with_same_id_already_present_error :: DocumentContestDocumentWithSameIdAlreadyPresentError) -> * const dpp_errors_consensus_state_document_document_contest_document_with_same_id_already_present_error_DocumentContestDocumentWithSameIdAlreadyPresentError { ferment :: boxed (dpp_errors_consensus_state_document_document_contest_document_with_same_id_already_present_error_DocumentContestDocumentWithSameIdAlreadyPresentError { document_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . document_id) }) } } impl Drop for dpp_errors_consensus_state_document_document_contest_document_with_same_id_already_present_error_DocumentContestDocumentWithSameIdAlreadyPresentError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . document_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_document_with_same_id_already_present_error_DocumentContestDocumentWithSameIdAlreadyPresentError_ctor < > (document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_document_document_contest_document_with_same_id_already_present_error_DocumentContestDocumentWithSameIdAlreadyPresentError { ferment :: boxed (dpp_errors_consensus_state_document_document_contest_document_with_same_id_already_present_error_DocumentContestDocumentWithSameIdAlreadyPresentError { document_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_document_with_same_id_already_present_error_DocumentContestDocumentWithSameIdAlreadyPresentError_destroy < > (ffi : * mut dpp_errors_consensus_state_document_document_contest_document_with_same_id_already_present_error_DocumentContestDocumentWithSameIdAlreadyPresentError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_document_with_same_id_already_present_error_DocumentContestDocumentWithSameIdAlreadyPresentError_get_document_id < > (obj : * const dpp_errors_consensus_state_document_document_contest_document_with_same_id_already_present_error_DocumentContestDocumentWithSameIdAlreadyPresentError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_document_with_same_id_already_present_error_DocumentContestDocumentWithSameIdAlreadyPresentError_set_document_id < > (obj : * const dpp_errors_consensus_state_document_document_contest_document_with_same_id_already_present_error_DocumentContestDocumentWithSameIdAlreadyPresentError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } } pub mod document_timestamps_mismatch_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DocumentTimestampsMismatchError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError { pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_timestamps_mismatch_error :: DocumentTimestampsMismatchError > for dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError) -> dpp :: errors :: consensus :: state :: document :: document_timestamps_mismatch_error :: DocumentTimestampsMismatchError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: document_timestamps_mismatch_error :: DocumentTimestampsMismatchError { document_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . document_id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_timestamps_mismatch_error :: DocumentTimestampsMismatchError > for dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: document_timestamps_mismatch_error :: DocumentTimestampsMismatchError) -> * const dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError { ferment :: boxed (dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError { document_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . document_id) }) } } impl Drop for dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . document_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError_ctor < > (document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError { ferment :: boxed (dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError { document_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError_destroy < > (ffi : * mut dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError_get_document_id < > (obj : * const dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError_set_document_id < > (obj : * const dpp_errors_consensus_state_document_document_timestamps_mismatch_error_DocumentTimestampsMismatchError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } } pub mod document_not_found_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DocumentNotFoundError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError { pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_not_found_error :: DocumentNotFoundError > for dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError) -> dpp :: errors :: consensus :: state :: document :: document_not_found_error :: DocumentNotFoundError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: document_not_found_error :: DocumentNotFoundError { document_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . document_id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_not_found_error :: DocumentNotFoundError > for dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: document_not_found_error :: DocumentNotFoundError) -> * const dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError { ferment :: boxed (dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError { document_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . document_id) }) } } impl Drop for dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . document_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError_ctor < > (document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError { ferment :: boxed (dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError { document_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError_destroy < > (ffi : * mut dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError_get_document_id < > (obj : * const dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError_set_document_id < > (obj : * const dpp_errors_consensus_state_document_document_not_found_error_DocumentNotFoundError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } } pub mod duplicate_unique_index_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DuplicateUniqueIndexError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError { pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub duplicating_properties : * mut crate :: fermented :: generics :: Vec_String } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: duplicate_unique_index_error :: DuplicateUniqueIndexError > for dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError) -> dpp :: errors :: consensus :: state :: document :: duplicate_unique_index_error :: DuplicateUniqueIndexError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: duplicate_unique_index_error :: DuplicateUniqueIndexError { document_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . document_id) , duplicating_properties : < crate :: fermented :: generics :: Vec_String as ferment :: FFIConversionFrom < Vec < String > >> :: ffi_from (ffi_ref . duplicating_properties) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: duplicate_unique_index_error :: DuplicateUniqueIndexError > for dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: duplicate_unique_index_error :: DuplicateUniqueIndexError) -> * const dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError { ferment :: boxed (dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError { document_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . document_id) , duplicating_properties : < crate :: fermented :: generics :: Vec_String as ferment :: FFIConversionTo < Vec < String > >> :: ffi_to (obj . duplicating_properties) }) } } impl Drop for dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . document_id) ; ferment :: unbox_any (ffi_ref . duplicating_properties) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError_ctor < > (document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , duplicating_properties : * mut crate :: fermented :: generics :: Vec_String) -> * mut dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError { ferment :: boxed (dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError { document_id , duplicating_properties }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError_destroy < > (ffi : * mut dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError_get_document_id < > (obj : * const dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError_get_duplicating_properties < > (obj : * const dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError) -> * mut crate :: fermented :: generics :: Vec_String { (* obj) . duplicating_properties } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError_set_document_id < > (obj : * const dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError_set_duplicating_properties < > (obj : * const dpp_errors_consensus_state_document_duplicate_unique_index_error_DuplicateUniqueIndexError) -> * mut crate :: fermented :: generics :: Vec_String { (* obj) . duplicating_properties } } pub mod document_owner_id_mismatch_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DocumentOwnerIdMismatchError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError { pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub document_owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub existing_document_owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_owner_id_mismatch_error :: DocumentOwnerIdMismatchError > for dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError) -> dpp :: errors :: consensus :: state :: document :: document_owner_id_mismatch_error :: DocumentOwnerIdMismatchError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: document_owner_id_mismatch_error :: DocumentOwnerIdMismatchError { document_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . document_id) , document_owner_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . document_owner_id) , existing_document_owner_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . existing_document_owner_id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_owner_id_mismatch_error :: DocumentOwnerIdMismatchError > for dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: document_owner_id_mismatch_error :: DocumentOwnerIdMismatchError) -> * const dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError { ferment :: boxed (dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError { document_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . document_id) , document_owner_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . document_owner_id) , existing_document_owner_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . existing_document_owner_id) }) } } impl Drop for dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . document_id) ; ferment :: unbox_any (ffi_ref . document_owner_id) ; ferment :: unbox_any (ffi_ref . existing_document_owner_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError_ctor < > (document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , existing_document_owner_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError { ferment :: boxed (dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError { document_id , document_owner_id , existing_document_owner_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError_destroy < > (ffi : * mut dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError_get_document_id < > (obj : * const dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError_get_document_owner_id < > (obj : * const dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_owner_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError_get_existing_document_owner_id < > (obj : * const dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . existing_document_owner_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError_set_document_id < > (obj : * const dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError_set_document_owner_id < > (obj : * const dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_owner_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError_set_existing_document_owner_id < > (obj : * const dpp_errors_consensus_state_document_document_owner_id_mismatch_error_DocumentOwnerIdMismatchError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . existing_document_owner_id } } pub mod document_contest_currently_locked_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DocumentContestCurrentlyLockedError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError { pub vote_poll : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll , pub stored_info : * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo , pub unlock_cost : u64 } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_contest_currently_locked_error :: DocumentContestCurrentlyLockedError > for dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError) -> dpp :: errors :: consensus :: state :: document :: document_contest_currently_locked_error :: DocumentContestCurrentlyLockedError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: document_contest_currently_locked_error :: DocumentContestCurrentlyLockedError { vote_poll : < crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll as ferment :: FFIConversionFrom < dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: ContestedDocumentResourceVotePoll >> :: ffi_from (ffi_ref . vote_poll) , stored_info : < crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo as ferment :: FFIConversionFrom < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStoredInfo >> :: ffi_from (ffi_ref . stored_info) , unlock_cost : ffi_ref . unlock_cost } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_contest_currently_locked_error :: DocumentContestCurrentlyLockedError > for dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: document_contest_currently_locked_error :: DocumentContestCurrentlyLockedError) -> * const dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError { ferment :: boxed (dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError { vote_poll : < crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll as ferment :: FFIConversionTo < dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: ContestedDocumentResourceVotePoll >> :: ffi_to (obj . vote_poll) , stored_info : < crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo as ferment :: FFIConversionTo < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: ContestedDocumentVotePollStoredInfo >> :: ffi_to (obj . stored_info) , unlock_cost : obj . unlock_cost }) } } impl Drop for dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . vote_poll) ; ferment :: unbox_any (ffi_ref . stored_info) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError_ctor < > (vote_poll : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll , stored_info : * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo , unlock_cost : u64) -> * mut dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError { ferment :: boxed (dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError { vote_poll , stored_info , unlock_cost }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError_destroy < > (ffi : * mut dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError_get_vote_poll < > (obj : * const dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll { (* obj) . vote_poll } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError_get_stored_info < > (obj : * const dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo { (* obj) . stored_info } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError_get_unlock_cost < > (obj : * const dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError) -> u64 { (* obj) . unlock_cost } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError_set_vote_poll < > (obj : * const dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll { (* obj) . vote_poll } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError_set_stored_info < > (obj : * const dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_ContestedDocumentVotePollStoredInfo { (* obj) . stored_info } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError_set_unlock_cost < > (obj : * const dpp_errors_consensus_state_document_document_contest_currently_locked_error_DocumentContestCurrentlyLockedError) -> u64 { (* obj) . unlock_cost } } pub mod invalid_document_revision_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidDocumentRevisionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError { pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub previous_revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , pub desired_revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: invalid_document_revision_error :: InvalidDocumentRevisionError > for dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError) -> dpp :: errors :: consensus :: state :: document :: invalid_document_revision_error :: InvalidDocumentRevisionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: invalid_document_revision_error :: InvalidDocumentRevisionError { document_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . document_id) , previous_revision : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision as ferment :: FFIConversionFrom < dpp :: prelude :: Revision >> :: ffi_from_opt (ffi_ref . previous_revision) , desired_revision : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision as ferment :: FFIConversionFrom < dpp :: prelude :: Revision >> :: ffi_from (ffi_ref . desired_revision) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: invalid_document_revision_error :: InvalidDocumentRevisionError > for dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: invalid_document_revision_error :: InvalidDocumentRevisionError) -> * const dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError { ferment :: boxed (dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError { document_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . document_id) , previous_revision : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision as ferment :: FFIConversionTo < dpp :: prelude :: Revision >> :: ffi_to_opt (obj . previous_revision) , desired_revision : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision as ferment :: FFIConversionTo < dpp :: prelude :: Revision >> :: ffi_to (obj . desired_revision) }) } } impl Drop for dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . document_id) ; ferment :: unbox_any_opt (ffi_ref . previous_revision) ; ferment :: unbox_any (ffi_ref . desired_revision) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError_ctor < > (document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , previous_revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , desired_revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision) -> * mut dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError { ferment :: boxed (dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError { document_id , previous_revision , desired_revision }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError_destroy < > (ffi : * mut dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError_get_document_id < > (obj : * const dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError_get_previous_revision < > (obj : * const dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . previous_revision } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError_get_desired_revision < > (obj : * const dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . desired_revision } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError_set_document_id < > (obj : * const dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError_set_previous_revision < > (obj : * const dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . previous_revision } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError_set_desired_revision < > (obj : * const dpp_errors_consensus_state_document_invalid_document_revision_error_InvalidDocumentRevisionError) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . desired_revision } } pub mod document_contest_identity_already_contestant { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DocumentContestIdentityAlreadyContestantError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError { pub vote_poll : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll , pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_contest_identity_already_contestant :: DocumentContestIdentityAlreadyContestantError > for dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError) -> dpp :: errors :: consensus :: state :: document :: document_contest_identity_already_contestant :: DocumentContestIdentityAlreadyContestantError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: document_contest_identity_already_contestant :: DocumentContestIdentityAlreadyContestantError { vote_poll : < crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll as ferment :: FFIConversionFrom < dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: ContestedDocumentResourceVotePoll >> :: ffi_from (ffi_ref . vote_poll) , identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . identity_id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_contest_identity_already_contestant :: DocumentContestIdentityAlreadyContestantError > for dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: document_contest_identity_already_contestant :: DocumentContestIdentityAlreadyContestantError) -> * const dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError { ferment :: boxed (dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError { vote_poll : < crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll as ferment :: FFIConversionTo < dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: ContestedDocumentResourceVotePoll >> :: ffi_to (obj . vote_poll) , identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . identity_id) }) } } impl Drop for dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . vote_poll) ; ferment :: unbox_any (ffi_ref . identity_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError_ctor < > (vote_poll : * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll , identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError { ferment :: boxed (dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError { vote_poll , identity_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError_destroy < > (ffi : * mut dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError_get_vote_poll < > (obj : * const dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll { (* obj) . vote_poll } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError_get_identity_id < > (obj : * const dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError_set_vote_poll < > (obj : * const dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError) -> * mut crate :: fermented :: types :: dpp :: voting :: vote_polls :: contested_document_resource_vote_poll :: dpp_voting_vote_polls_contested_document_resource_vote_poll_ContestedDocumentResourceVotePoll { (* obj) . vote_poll } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError_set_identity_id < > (obj : * const dpp_errors_consensus_state_document_document_contest_identity_already_contestant_DocumentContestIdentityAlreadyContestantError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } } pub mod document_already_present_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DocumentAlreadyPresentError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError { pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_already_present_error :: DocumentAlreadyPresentError > for dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError) -> dpp :: errors :: consensus :: state :: document :: document_already_present_error :: DocumentAlreadyPresentError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: document_already_present_error :: DocumentAlreadyPresentError { document_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . document_id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_already_present_error :: DocumentAlreadyPresentError > for dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: document_already_present_error :: DocumentAlreadyPresentError) -> * const dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError { ferment :: boxed (dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError { document_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . document_id) }) } } impl Drop for dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . document_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError_ctor < > (document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError { ferment :: boxed (dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError { document_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError_destroy < > (ffi : * mut dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError_get_document_id < > (obj : * const dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError_set_document_id < > (obj : * const dpp_errors_consensus_state_document_document_already_present_error_DocumentAlreadyPresentError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } } pub mod document_timestamps_are_equal_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DocumentTimestampsAreEqualError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError { pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_timestamps_are_equal_error :: DocumentTimestampsAreEqualError > for dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError) -> dpp :: errors :: consensus :: state :: document :: document_timestamps_are_equal_error :: DocumentTimestampsAreEqualError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: document_timestamps_are_equal_error :: DocumentTimestampsAreEqualError { document_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . document_id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_timestamps_are_equal_error :: DocumentTimestampsAreEqualError > for dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: document_timestamps_are_equal_error :: DocumentTimestampsAreEqualError) -> * const dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError { ferment :: boxed (dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError { document_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . document_id) }) } } impl Drop for dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . document_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError_ctor < > (document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError { ferment :: boxed (dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError { document_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError_destroy < > (ffi : * mut dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError_get_document_id < > (obj : * const dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError_set_document_id < > (obj : * const dpp_errors_consensus_state_document_document_timestamps_are_equal_error_DocumentTimestampsAreEqualError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } } pub mod document_contest_not_paid_for_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DocumentContestNotPaidForError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_state_document_document_contest_not_paid_for_error_DocumentContestNotPaidForError { pub document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub expected_amount : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits , pub paid_amount : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: document :: document_contest_not_paid_for_error :: DocumentContestNotPaidForError > for dpp_errors_consensus_state_document_document_contest_not_paid_for_error_DocumentContestNotPaidForError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_state_document_document_contest_not_paid_for_error_DocumentContestNotPaidForError) -> dpp :: errors :: consensus :: state :: document :: document_contest_not_paid_for_error :: DocumentContestNotPaidForError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: state :: document :: document_contest_not_paid_for_error :: DocumentContestNotPaidForError { document_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . document_id) , expected_amount : < crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits as ferment :: FFIConversionFrom < dpp :: balances :: credits :: Credits >> :: ffi_from (ffi_ref . expected_amount) , paid_amount : < crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits as ferment :: FFIConversionFrom < dpp :: balances :: credits :: Credits >> :: ffi_from (ffi_ref . paid_amount) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: document :: document_contest_not_paid_for_error :: DocumentContestNotPaidForError > for dpp_errors_consensus_state_document_document_contest_not_paid_for_error_DocumentContestNotPaidForError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: state :: document :: document_contest_not_paid_for_error :: DocumentContestNotPaidForError) -> * const dpp_errors_consensus_state_document_document_contest_not_paid_for_error_DocumentContestNotPaidForError { ferment :: boxed (dpp_errors_consensus_state_document_document_contest_not_paid_for_error_DocumentContestNotPaidForError { document_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . document_id) , expected_amount : < crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits as ferment :: FFIConversionTo < dpp :: balances :: credits :: Credits >> :: ffi_to (obj . expected_amount) , paid_amount : < crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits as ferment :: FFIConversionTo < dpp :: balances :: credits :: Credits >> :: ffi_to (obj . paid_amount) }) } } impl Drop for dpp_errors_consensus_state_document_document_contest_not_paid_for_error_DocumentContestNotPaidForError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . document_id) ; ferment :: unbox_any (ffi_ref . expected_amount) ; ferment :: unbox_any (ffi_ref . paid_amount) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_not_paid_for_error_DocumentContestNotPaidForError_ctor < > (document_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , expected_amount : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits , paid_amount : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits) -> * mut dpp_errors_consensus_state_document_document_contest_not_paid_for_error_DocumentContestNotPaidForError { ferment :: boxed (dpp_errors_consensus_state_document_document_contest_not_paid_for_error_DocumentContestNotPaidForError { document_id , expected_amount , paid_amount }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_not_paid_for_error_DocumentContestNotPaidForError_destroy < > (ffi : * mut dpp_errors_consensus_state_document_document_contest_not_paid_for_error_DocumentContestNotPaidForError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_not_paid_for_error_DocumentContestNotPaidForError_get_document_id < > (obj : * const dpp_errors_consensus_state_document_document_contest_not_paid_for_error_DocumentContestNotPaidForError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_not_paid_for_error_DocumentContestNotPaidForError_get_expected_amount < > (obj : * const dpp_errors_consensus_state_document_document_contest_not_paid_for_error_DocumentContestNotPaidForError) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . expected_amount } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_not_paid_for_error_DocumentContestNotPaidForError_get_paid_amount < > (obj : * const dpp_errors_consensus_state_document_document_contest_not_paid_for_error_DocumentContestNotPaidForError) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . paid_amount } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_not_paid_for_error_DocumentContestNotPaidForError_set_document_id < > (obj : * const dpp_errors_consensus_state_document_document_contest_not_paid_for_error_DocumentContestNotPaidForError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_not_paid_for_error_DocumentContestNotPaidForError_set_expected_amount < > (obj : * const dpp_errors_consensus_state_document_document_contest_not_paid_for_error_DocumentContestNotPaidForError) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . expected_amount } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_state_document_document_contest_not_paid_for_error_DocumentContestNotPaidForError_set_paid_amount < > (obj : * const dpp_errors_consensus_state_document_document_contest_not_paid_for_error_DocumentContestNotPaidForError) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . paid_amount } } } } pub mod signature { use crate as dash_spv_apple_bindings ; pub mod invalid_signature_public_key_security_level_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidSignaturePublicKeySecurityLevelError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError { pub public_key_security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , pub allowed_key_security_levels : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_security_level_SecurityLevel } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: InvalidSignaturePublicKeySecurityLevelError > for dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError) -> dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: InvalidSignaturePublicKeySecurityLevelError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: InvalidSignaturePublicKeySecurityLevelError { public_key_security_level : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel >> :: ffi_from (ffi_ref . public_key_security_level) , allowed_key_security_levels : < crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_security_level_SecurityLevel as ferment :: FFIConversionFrom < Vec < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel > >> :: ffi_from (ffi_ref . allowed_key_security_levels) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: InvalidSignaturePublicKeySecurityLevelError > for dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: InvalidSignaturePublicKeySecurityLevelError) -> * const dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError { ferment :: boxed (dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError { public_key_security_level : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel >> :: ffi_to (obj . public_key_security_level) , allowed_key_security_levels : < crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_security_level_SecurityLevel as ferment :: FFIConversionTo < Vec < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel > >> :: ffi_to (obj . allowed_key_security_levels) }) } } impl Drop for dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . public_key_security_level) ; ferment :: unbox_any (ffi_ref . allowed_key_security_levels) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError_ctor < > (public_key_security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , allowed_key_security_levels : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_security_level_SecurityLevel) -> * mut dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError { ferment :: boxed (dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError { public_key_security_level , allowed_key_security_levels }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError_destroy < > (ffi : * mut dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError_get_public_key_security_level < > (obj : * const dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . public_key_security_level } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError_get_allowed_key_security_levels < > (obj : * const dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError) -> * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . allowed_key_security_levels } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError_set_public_key_security_level < > (obj : * const dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . public_key_security_level } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError_set_allowed_key_security_levels < > (obj : * const dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError) -> * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . allowed_key_security_levels } } pub mod basic_ecdsa_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`BasicECDSAError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError { pub message : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: basic_ecdsa_error :: BasicECDSAError > for dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError) -> dpp :: errors :: consensus :: signature :: basic_ecdsa_error :: BasicECDSAError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: basic_ecdsa_error :: BasicECDSAError { message : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . message) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: signature :: basic_ecdsa_error :: BasicECDSAError > for dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: basic_ecdsa_error :: BasicECDSAError) -> * const dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError { ferment :: boxed (dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError { message : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . message) }) } } impl Drop for dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError_ctor < > (message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError { ferment :: boxed (dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError { message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError_destroy < > (ffi : * mut dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError_get_message < > (obj : * const dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError_set_message < > (obj : * const dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError) -> * mut std :: os :: raw :: c_char { (* obj) . message } } pub mod basic_bls_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`BasicBLSError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_basic_bls_error_BasicBLSError { pub message : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: basic_bls_error :: BasicBLSError > for dpp_errors_consensus_signature_basic_bls_error_BasicBLSError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_basic_bls_error_BasicBLSError) -> dpp :: errors :: consensus :: signature :: basic_bls_error :: BasicBLSError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: basic_bls_error :: BasicBLSError { message : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . message) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: signature :: basic_bls_error :: BasicBLSError > for dpp_errors_consensus_signature_basic_bls_error_BasicBLSError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: basic_bls_error :: BasicBLSError) -> * const dpp_errors_consensus_signature_basic_bls_error_BasicBLSError { ferment :: boxed (dpp_errors_consensus_signature_basic_bls_error_BasicBLSError { message : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . message) }) } } impl Drop for dpp_errors_consensus_signature_basic_bls_error_BasicBLSError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_basic_bls_error_BasicBLSError_ctor < > (message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_signature_basic_bls_error_BasicBLSError { ferment :: boxed (dpp_errors_consensus_signature_basic_bls_error_BasicBLSError { message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_basic_bls_error_BasicBLSError_destroy < > (ffi : * mut dpp_errors_consensus_signature_basic_bls_error_BasicBLSError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_basic_bls_error_BasicBLSError_get_message < > (obj : * const dpp_errors_consensus_signature_basic_bls_error_BasicBLSError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_basic_bls_error_BasicBLSError_set_message < > (obj : * const dpp_errors_consensus_signature_basic_bls_error_BasicBLSError) -> * mut std :: os :: raw :: c_char { (* obj) . message } } pub mod missing_public_key_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`MissingPublicKeyError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError { pub public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: missing_public_key_error :: MissingPublicKeyError > for dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError) -> dpp :: errors :: consensus :: signature :: missing_public_key_error :: MissingPublicKeyError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: missing_public_key_error :: MissingPublicKeyError { public_key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_from (ffi_ref . public_key_id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: signature :: missing_public_key_error :: MissingPublicKeyError > for dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: missing_public_key_error :: MissingPublicKeyError) -> * const dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError { ferment :: boxed (dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError { public_key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_to (obj . public_key_id) }) } } impl Drop for dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . public_key_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError_ctor < > (public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError { ferment :: boxed (dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError { public_key_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError_destroy < > (ffi : * mut dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError_get_public_key_id < > (obj : * const dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError_set_public_key_id < > (obj : * const dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . public_key_id } } pub mod public_key_is_disabled_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`PublicKeyIsDisabledError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError { pub public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: PublicKeyIsDisabledError > for dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError) -> dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: PublicKeyIsDisabledError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: PublicKeyIsDisabledError { public_key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_from (ffi_ref . public_key_id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: PublicKeyIsDisabledError > for dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: PublicKeyIsDisabledError) -> * const dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError { ferment :: boxed (dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError { public_key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_to (obj . public_key_id) }) } } impl Drop for dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . public_key_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError_ctor < > (public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError { ferment :: boxed (dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError { public_key_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError_destroy < > (ffi : * mut dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError_get_public_key_id < > (obj : * const dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError_set_public_key_id < > (obj : * const dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . public_key_id } } pub mod signature_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`SignatureError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_errors_consensus_signature_signature_error_SignatureError { IdentityNotFoundError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: identity_not_found_error :: dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError) , InvalidIdentityPublicKeyTypeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_identity_public_key_type_error :: dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) , InvalidStateTransitionSignatureError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_state_transition_signature_error :: dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError) , MissingPublicKeyError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: missing_public_key_error :: dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError) , InvalidSignaturePublicKeyPurposeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_signature_public_key_purpose_error :: dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError) , InvalidSignaturePublicKeySecurityLevelError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError) , WrongPublicKeyPurposeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: wrong_public_key_purpose_error :: dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) , PublicKeyIsDisabledError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError) , PublicKeySecurityLevelNotMetError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: public_key_security_level_not_met_error :: dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) , SignatureShouldNotBePresentError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: signature_should_not_be_present_error :: dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError) , BasicECDSAError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: basic_ecdsa_error :: dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError) , BasicBLSError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: basic_bls_error :: dpp_errors_consensus_signature_basic_bls_error_BasicBLSError) } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: signature_error :: SignatureError > for dpp_errors_consensus_signature_signature_error_SignatureError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_signature_error_SignatureError) -> dpp :: errors :: consensus :: signature :: signature_error :: SignatureError { let ffi_ref = & * ffi ; match ffi_ref { dpp_errors_consensus_signature_signature_error_SignatureError :: IdentityNotFoundError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: IdentityNotFoundError (< crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: identity_not_found_error :: dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: identity_not_found_error :: IdentityNotFoundError >> :: ffi_from (* o_0)) , dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidIdentityPublicKeyTypeError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: InvalidIdentityPublicKeyTypeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_identity_public_key_type_error :: dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError >> :: ffi_from (* o_0)) , dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidStateTransitionSignatureError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: InvalidStateTransitionSignatureError (< crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_state_transition_signature_error :: dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: invalid_state_transition_signature_error :: InvalidStateTransitionSignatureError >> :: ffi_from (* o_0)) , dpp_errors_consensus_signature_signature_error_SignatureError :: MissingPublicKeyError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: MissingPublicKeyError (< crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: missing_public_key_error :: dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: missing_public_key_error :: MissingPublicKeyError >> :: ffi_from (* o_0)) , dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidSignaturePublicKeyPurposeError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: InvalidSignaturePublicKeyPurposeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_signature_public_key_purpose_error :: dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: invalid_signature_public_key_purpose_error :: InvalidSignaturePublicKeyPurposeError >> :: ffi_from (* o_0)) , dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidSignaturePublicKeySecurityLevelError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: InvalidSignaturePublicKeySecurityLevelError (< crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: InvalidSignaturePublicKeySecurityLevelError >> :: ffi_from (* o_0)) , dpp_errors_consensus_signature_signature_error_SignatureError :: WrongPublicKeyPurposeError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: WrongPublicKeyPurposeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: wrong_public_key_purpose_error :: dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: wrong_public_key_purpose_error :: WrongPublicKeyPurposeError >> :: ffi_from (* o_0)) , dpp_errors_consensus_signature_signature_error_SignatureError :: PublicKeyIsDisabledError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: PublicKeyIsDisabledError (< crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: PublicKeyIsDisabledError >> :: ffi_from (* o_0)) , dpp_errors_consensus_signature_signature_error_SignatureError :: PublicKeySecurityLevelNotMetError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: PublicKeySecurityLevelNotMetError (< crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: public_key_security_level_not_met_error :: dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError >> :: ffi_from (* o_0)) , dpp_errors_consensus_signature_signature_error_SignatureError :: SignatureShouldNotBePresentError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: SignatureShouldNotBePresentError (< crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: signature_should_not_be_present_error :: dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: signature_should_not_be_present_error :: SignatureShouldNotBePresentError >> :: ffi_from (* o_0)) , dpp_errors_consensus_signature_signature_error_SignatureError :: BasicECDSAError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: BasicECDSAError (< crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: basic_ecdsa_error :: dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: basic_ecdsa_error :: BasicECDSAError >> :: ffi_from (* o_0)) , dpp_errors_consensus_signature_signature_error_SignatureError :: BasicBLSError (o_0) => dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: BasicBLSError (< crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: basic_bls_error :: dpp_errors_consensus_signature_basic_bls_error_BasicBLSError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: basic_bls_error :: BasicBLSError >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: signature :: signature_error :: SignatureError > for dpp_errors_consensus_signature_signature_error_SignatureError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: signature_error :: SignatureError) -> * const dpp_errors_consensus_signature_signature_error_SignatureError { ferment :: boxed (match obj { dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: IdentityNotFoundError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: IdentityNotFoundError (< crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: identity_not_found_error :: dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: signature :: identity_not_found_error :: IdentityNotFoundError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: InvalidIdentityPublicKeyTypeError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidIdentityPublicKeyTypeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_identity_public_key_type_error :: dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: signature :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: InvalidStateTransitionSignatureError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidStateTransitionSignatureError (< crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_state_transition_signature_error :: dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: signature :: invalid_state_transition_signature_error :: InvalidStateTransitionSignatureError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: MissingPublicKeyError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: MissingPublicKeyError (< crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: missing_public_key_error :: dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: signature :: missing_public_key_error :: MissingPublicKeyError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: InvalidSignaturePublicKeyPurposeError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidSignaturePublicKeyPurposeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_signature_public_key_purpose_error :: dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: signature :: invalid_signature_public_key_purpose_error :: InvalidSignaturePublicKeyPurposeError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: InvalidSignaturePublicKeySecurityLevelError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidSignaturePublicKeySecurityLevelError (< crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: InvalidSignaturePublicKeySecurityLevelError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: WrongPublicKeyPurposeError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: WrongPublicKeyPurposeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: wrong_public_key_purpose_error :: dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: signature :: wrong_public_key_purpose_error :: WrongPublicKeyPurposeError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: PublicKeyIsDisabledError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: PublicKeyIsDisabledError (< crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: PublicKeyIsDisabledError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: PublicKeySecurityLevelNotMetError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: PublicKeySecurityLevelNotMetError (< crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: public_key_security_level_not_met_error :: dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: signature :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: SignatureShouldNotBePresentError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: SignatureShouldNotBePresentError (< crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: signature_should_not_be_present_error :: dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: signature :: signature_should_not_be_present_error :: SignatureShouldNotBePresentError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: BasicECDSAError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: BasicECDSAError (< crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: basic_ecdsa_error :: dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: signature :: basic_ecdsa_error :: BasicECDSAError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: signature :: signature_error :: SignatureError :: BasicBLSError (o_0) => dpp_errors_consensus_signature_signature_error_SignatureError :: BasicBLSError (< crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: basic_bls_error :: dpp_errors_consensus_signature_basic_bls_error_BasicBLSError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: signature :: basic_bls_error :: BasicBLSError >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_errors_consensus_signature_signature_error_SignatureError { fn drop (& mut self) { unsafe { match self { dpp_errors_consensus_signature_signature_error_SignatureError :: IdentityNotFoundError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidIdentityPublicKeyTypeError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidStateTransitionSignatureError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_signature_signature_error_SignatureError :: MissingPublicKeyError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidSignaturePublicKeyPurposeError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidSignaturePublicKeySecurityLevelError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_signature_signature_error_SignatureError :: WrongPublicKeyPurposeError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_signature_signature_error_SignatureError :: PublicKeyIsDisabledError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_signature_signature_error_SignatureError :: PublicKeySecurityLevelNotMetError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_signature_signature_error_SignatureError :: SignatureShouldNotBePresentError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_signature_signature_error_SignatureError :: BasicECDSAError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_signature_signature_error_SignatureError :: BasicBLSError (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_IdentityNotFoundError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: identity_not_found_error :: dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: IdentityNotFoundError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_InvalidIdentityPublicKeyTypeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_identity_public_key_type_error :: dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidIdentityPublicKeyTypeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_InvalidStateTransitionSignatureError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_state_transition_signature_error :: dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidStateTransitionSignatureError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_MissingPublicKeyError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: missing_public_key_error :: dpp_errors_consensus_signature_missing_public_key_error_MissingPublicKeyError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: MissingPublicKeyError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_InvalidSignaturePublicKeyPurposeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_signature_public_key_purpose_error :: dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidSignaturePublicKeyPurposeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_InvalidSignaturePublicKeySecurityLevelError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: InvalidSignaturePublicKeySecurityLevelError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_WrongPublicKeyPurposeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: wrong_public_key_purpose_error :: dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: WrongPublicKeyPurposeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_PublicKeyIsDisabledError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: PublicKeyIsDisabledError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_PublicKeySecurityLevelNotMetError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: public_key_security_level_not_met_error :: dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: PublicKeySecurityLevelNotMetError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_SignatureShouldNotBePresentError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: signature_should_not_be_present_error :: dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: SignatureShouldNotBePresentError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_BasicECDSAError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: basic_ecdsa_error :: dpp_errors_consensus_signature_basic_ecdsa_error_BasicECDSAError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: BasicECDSAError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_BasicBLSError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: basic_bls_error :: dpp_errors_consensus_signature_basic_bls_error_BasicBLSError) -> * mut dpp_errors_consensus_signature_signature_error_SignatureError { ferment :: boxed (dpp_errors_consensus_signature_signature_error_SignatureError :: BasicBLSError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_error_SignatureError_destroy < > (ffi : * mut dpp_errors_consensus_signature_signature_error_SignatureError) { ferment :: unbox_any (ffi) ; } } pub mod invalid_signature_public_key_purpose_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidSignaturePublicKeyPurposeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError { pub public_key_purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , pub allowed_key_purposes : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_purpose_Purpose } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: invalid_signature_public_key_purpose_error :: InvalidSignaturePublicKeyPurposeError > for dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError) -> dpp :: errors :: consensus :: signature :: invalid_signature_public_key_purpose_error :: InvalidSignaturePublicKeyPurposeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: invalid_signature_public_key_purpose_error :: InvalidSignaturePublicKeyPurposeError { public_key_purpose : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: purpose :: Purpose >> :: ffi_from (ffi_ref . public_key_purpose) , allowed_key_purposes : < crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_purpose_Purpose as ferment :: FFIConversionFrom < Vec < dpp :: identity :: identity_public_key :: purpose :: Purpose > >> :: ffi_from (ffi_ref . allowed_key_purposes) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: signature :: invalid_signature_public_key_purpose_error :: InvalidSignaturePublicKeyPurposeError > for dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: invalid_signature_public_key_purpose_error :: InvalidSignaturePublicKeyPurposeError) -> * const dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError { ferment :: boxed (dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError { public_key_purpose : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: purpose :: Purpose >> :: ffi_to (obj . public_key_purpose) , allowed_key_purposes : < crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_purpose_Purpose as ferment :: FFIConversionTo < Vec < dpp :: identity :: identity_public_key :: purpose :: Purpose > >> :: ffi_to (obj . allowed_key_purposes) }) } } impl Drop for dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . public_key_purpose) ; ferment :: unbox_any (ffi_ref . allowed_key_purposes) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError_ctor < > (public_key_purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , allowed_key_purposes : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_purpose_Purpose) -> * mut dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError { ferment :: boxed (dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError { public_key_purpose , allowed_key_purposes }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError_destroy < > (ffi : * mut dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError_get_public_key_purpose < > (obj : * const dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose { (* obj) . public_key_purpose } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError_get_allowed_key_purposes < > (obj : * const dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError) -> * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_purpose_Purpose { (* obj) . allowed_key_purposes } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError_set_public_key_purpose < > (obj : * const dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose { (* obj) . public_key_purpose } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError_set_allowed_key_purposes < > (obj : * const dpp_errors_consensus_signature_invalid_signature_public_key_purpose_error_InvalidSignaturePublicKeyPurposeError) -> * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_purpose_Purpose { (* obj) . allowed_key_purposes } } pub mod invalid_state_transition_signature_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidStateTransitionSignatureError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError { pub message : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: invalid_state_transition_signature_error :: InvalidStateTransitionSignatureError > for dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError) -> dpp :: errors :: consensus :: signature :: invalid_state_transition_signature_error :: InvalidStateTransitionSignatureError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: invalid_state_transition_signature_error :: InvalidStateTransitionSignatureError { message : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . message) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: signature :: invalid_state_transition_signature_error :: InvalidStateTransitionSignatureError > for dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: invalid_state_transition_signature_error :: InvalidStateTransitionSignatureError) -> * const dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError { ferment :: boxed (dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError { message : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . message) }) } } impl Drop for dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError_ctor < > (message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError { ferment :: boxed (dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError { message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError_destroy < > (ffi : * mut dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError_get_message < > (obj : * const dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError_set_message < > (obj : * const dpp_errors_consensus_signature_invalid_state_transition_signature_error_InvalidStateTransitionSignatureError) -> * mut std :: os :: raw :: c_char { (* obj) . message } } pub mod identity_not_found_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`IdentityNotFoundError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError { pub identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: identity_not_found_error :: IdentityNotFoundError > for dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError) -> dpp :: errors :: consensus :: signature :: identity_not_found_error :: IdentityNotFoundError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: identity_not_found_error :: IdentityNotFoundError { identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . identity_id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: signature :: identity_not_found_error :: IdentityNotFoundError > for dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: identity_not_found_error :: IdentityNotFoundError) -> * const dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError { ferment :: boxed (dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError { identity_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . identity_id) }) } } impl Drop for dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . identity_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError_ctor < > (identity_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError { ferment :: boxed (dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError { identity_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError_destroy < > (ffi : * mut dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError_get_identity_id < > (obj : * const dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError_set_identity_id < > (obj : * const dpp_errors_consensus_signature_identity_not_found_error_IdentityNotFoundError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . identity_id } } pub mod wrong_public_key_purpose_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`WrongPublicKeyPurposeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { pub public_key_purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , pub allowed_key_purposes : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_purpose_Purpose } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: wrong_public_key_purpose_error :: WrongPublicKeyPurposeError > for dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) -> dpp :: errors :: consensus :: signature :: wrong_public_key_purpose_error :: WrongPublicKeyPurposeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: wrong_public_key_purpose_error :: WrongPublicKeyPurposeError { public_key_purpose : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: purpose :: Purpose >> :: ffi_from (ffi_ref . public_key_purpose) , allowed_key_purposes : < crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_purpose_Purpose as ferment :: FFIConversionFrom < Vec < dpp :: identity :: identity_public_key :: purpose :: Purpose > >> :: ffi_from (ffi_ref . allowed_key_purposes) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: signature :: wrong_public_key_purpose_error :: WrongPublicKeyPurposeError > for dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: wrong_public_key_purpose_error :: WrongPublicKeyPurposeError) -> * const dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { ferment :: boxed (dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { public_key_purpose : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: purpose :: Purpose >> :: ffi_to (obj . public_key_purpose) , allowed_key_purposes : < crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_purpose_Purpose as ferment :: FFIConversionTo < Vec < dpp :: identity :: identity_public_key :: purpose :: Purpose > >> :: ffi_to (obj . allowed_key_purposes) }) } } impl Drop for dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . public_key_purpose) ; ferment :: unbox_any (ffi_ref . allowed_key_purposes) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError_ctor < > (public_key_purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , allowed_key_purposes : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_purpose_Purpose) -> * mut dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { ferment :: boxed (dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError { public_key_purpose , allowed_key_purposes }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError_destroy < > (ffi : * mut dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError_get_public_key_purpose < > (obj : * const dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose { (* obj) . public_key_purpose } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError_get_allowed_key_purposes < > (obj : * const dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) -> * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_purpose_Purpose { (* obj) . allowed_key_purposes } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError_set_public_key_purpose < > (obj : * const dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose { (* obj) . public_key_purpose } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError_set_allowed_key_purposes < > (obj : * const dpp_errors_consensus_signature_wrong_public_key_purpose_error_WrongPublicKeyPurposeError) -> * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_purpose_Purpose { (* obj) . allowed_key_purposes } } pub mod invalid_identity_public_key_type_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidIdentityPublicKeyTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { pub public_key_type : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError > for dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) -> dpp :: errors :: consensus :: signature :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError { public_key_type : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: key_type :: KeyType >> :: ffi_from (ffi_ref . public_key_type) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: signature :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError > for dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError) -> * const dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { ferment :: boxed (dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { public_key_type : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: key_type :: KeyType >> :: ffi_to (obj . public_key_type) }) } } impl Drop for dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . public_key_type) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError_ctor < > (public_key_type : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType) -> * mut dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { ferment :: boxed (dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError { public_key_type }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError_destroy < > (ffi : * mut dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError_get_public_key_type < > (obj : * const dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType { (* obj) . public_key_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError_set_public_key_type < > (obj : * const dpp_errors_consensus_signature_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType { (* obj) . public_key_type } } pub mod signature_should_not_be_present_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`SignatureShouldNotBePresentError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError { pub message : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: signature_should_not_be_present_error :: SignatureShouldNotBePresentError > for dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError) -> dpp :: errors :: consensus :: signature :: signature_should_not_be_present_error :: SignatureShouldNotBePresentError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: signature_should_not_be_present_error :: SignatureShouldNotBePresentError { message : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . message) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: signature :: signature_should_not_be_present_error :: SignatureShouldNotBePresentError > for dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: signature_should_not_be_present_error :: SignatureShouldNotBePresentError) -> * const dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError { ferment :: boxed (dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError { message : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . message) }) } } impl Drop for dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError_ctor < > (message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError { ferment :: boxed (dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError { message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError_destroy < > (ffi : * mut dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError_get_message < > (obj : * const dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError_set_message < > (obj : * const dpp_errors_consensus_signature_signature_should_not_be_present_error_SignatureShouldNotBePresentError) -> * mut std :: os :: raw :: c_char { (* obj) . message } } pub mod public_key_security_level_not_met_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`PublicKeySecurityLevelNotMetError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { pub public_key_security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , pub required_security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError > for dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) -> dpp :: errors :: consensus :: signature :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: signature :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError { public_key_security_level : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel >> :: ffi_from (ffi_ref . public_key_security_level) , required_security_level : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel >> :: ffi_from (ffi_ref . required_security_level) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: signature :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError > for dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: signature :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError) -> * const dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { ferment :: boxed (dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { public_key_security_level : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel >> :: ffi_to (obj . public_key_security_level) , required_security_level : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel >> :: ffi_to (obj . required_security_level) }) } } impl Drop for dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . public_key_security_level) ; ferment :: unbox_any (ffi_ref . required_security_level) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_ctor < > (public_key_security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , required_security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel) -> * mut dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { ferment :: boxed (dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError { public_key_security_level , required_security_level }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_destroy < > (ffi : * mut dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_get_public_key_security_level < > (obj : * const dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . public_key_security_level } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_get_required_security_level < > (obj : * const dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . required_security_level } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_set_public_key_security_level < > (obj : * const dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . public_key_security_level } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError_set_required_security_level < > (obj : * const dpp_errors_consensus_signature_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . required_security_level } } } # [cfg (test)] pub mod test_consensus_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`TestConsensusError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_test_consensus_error_TestConsensusError { pub message : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: test_consensus_error :: TestConsensusError > for dpp_errors_consensus_test_consensus_error_TestConsensusError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_test_consensus_error_TestConsensusError) -> dpp :: errors :: consensus :: test_consensus_error :: TestConsensusError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: test_consensus_error :: TestConsensusError { message : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . message) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: test_consensus_error :: TestConsensusError > for dpp_errors_consensus_test_consensus_error_TestConsensusError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: test_consensus_error :: TestConsensusError) -> * const dpp_errors_consensus_test_consensus_error_TestConsensusError { ferment :: boxed (dpp_errors_consensus_test_consensus_error_TestConsensusError { message : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . message) }) } } impl Drop for dpp_errors_consensus_test_consensus_error_TestConsensusError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_test_consensus_error_TestConsensusError_ctor < > (message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_test_consensus_error_TestConsensusError { ferment :: boxed (dpp_errors_consensus_test_consensus_error_TestConsensusError { message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_test_consensus_error_TestConsensusError_destroy < > (ffi : * mut dpp_errors_consensus_test_consensus_error_TestConsensusError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_test_consensus_error_TestConsensusError_get_message < > (obj : * const dpp_errors_consensus_test_consensus_error_TestConsensusError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_test_consensus_error_TestConsensusError_set_message < > (obj : * const dpp_errors_consensus_test_consensus_error_TestConsensusError) -> * mut std :: os :: raw :: c_char { (* obj) . message } } pub mod fee { use crate as dash_spv_apple_bindings ; pub mod fee_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`FeeError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_errors_consensus_fee_fee_error_FeeError { BalanceIsNotEnoughError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: fee :: balance_is_not_enough_error :: dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError) } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: fee :: fee_error :: FeeError > for dpp_errors_consensus_fee_fee_error_FeeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_fee_fee_error_FeeError) -> dpp :: errors :: consensus :: fee :: fee_error :: FeeError { let ffi_ref = & * ffi ; match ffi_ref { dpp_errors_consensus_fee_fee_error_FeeError :: BalanceIsNotEnoughError (o_0) => dpp :: errors :: consensus :: fee :: fee_error :: FeeError :: BalanceIsNotEnoughError (< crate :: fermented :: types :: dpp :: errors :: consensus :: fee :: balance_is_not_enough_error :: dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: fee :: balance_is_not_enough_error :: BalanceIsNotEnoughError >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: fee :: fee_error :: FeeError > for dpp_errors_consensus_fee_fee_error_FeeError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: fee :: fee_error :: FeeError) -> * const dpp_errors_consensus_fee_fee_error_FeeError { ferment :: boxed (match obj { dpp :: errors :: consensus :: fee :: fee_error :: FeeError :: BalanceIsNotEnoughError (o_0) => dpp_errors_consensus_fee_fee_error_FeeError :: BalanceIsNotEnoughError (< crate :: fermented :: types :: dpp :: errors :: consensus :: fee :: balance_is_not_enough_error :: dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: fee :: balance_is_not_enough_error :: BalanceIsNotEnoughError >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_errors_consensus_fee_fee_error_FeeError { fn drop (& mut self) { unsafe { match self { dpp_errors_consensus_fee_fee_error_FeeError :: BalanceIsNotEnoughError (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_fee_fee_error_FeeError_BalanceIsNotEnoughError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: fee :: balance_is_not_enough_error :: dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError) -> * mut dpp_errors_consensus_fee_fee_error_FeeError { ferment :: boxed (dpp_errors_consensus_fee_fee_error_FeeError :: BalanceIsNotEnoughError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_fee_fee_error_FeeError_destroy < > (ffi : * mut dpp_errors_consensus_fee_fee_error_FeeError) { ferment :: unbox_any (ffi) ; } } pub mod balance_is_not_enough_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`BalanceIsNotEnoughError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError { pub balance : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits , pub fee : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: fee :: balance_is_not_enough_error :: BalanceIsNotEnoughError > for dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError) -> dpp :: errors :: consensus :: fee :: balance_is_not_enough_error :: BalanceIsNotEnoughError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: fee :: balance_is_not_enough_error :: BalanceIsNotEnoughError { balance : < crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits as ferment :: FFIConversionFrom < dpp :: balances :: credits :: Credits >> :: ffi_from (ffi_ref . balance) , fee : < crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits as ferment :: FFIConversionFrom < dpp :: balances :: credits :: Credits >> :: ffi_from (ffi_ref . fee) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: fee :: balance_is_not_enough_error :: BalanceIsNotEnoughError > for dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: fee :: balance_is_not_enough_error :: BalanceIsNotEnoughError) -> * const dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError { ferment :: boxed (dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError { balance : < crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits as ferment :: FFIConversionTo < dpp :: balances :: credits :: Credits >> :: ffi_to (obj . balance) , fee : < crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits as ferment :: FFIConversionTo < dpp :: balances :: credits :: Credits >> :: ffi_to (obj . fee) }) } } impl Drop for dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . balance) ; ferment :: unbox_any (ffi_ref . fee) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError_ctor < > (balance : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits , fee : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits) -> * mut dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError { ferment :: boxed (dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError { balance , fee }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError_destroy < > (ffi : * mut dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError_get_balance < > (obj : * const dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . balance } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError_get_fee < > (obj : * const dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . fee } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError_set_balance < > (obj : * const dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . balance } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError_set_fee < > (obj : * const dpp_errors_consensus_fee_balance_is_not_enough_error_BalanceIsNotEnoughError) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . fee } } } pub mod consensus_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`ConsensusError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_errors_consensus_consensus_error_ConsensusError { DefaultError , BasicError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: basic_error :: dpp_errors_consensus_basic_basic_error_BasicError) , StateError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: state_error :: dpp_errors_consensus_state_state_error_StateError) , SignatureError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: signature_error :: dpp_errors_consensus_signature_signature_error_SignatureError) , FeeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: fee :: fee_error :: dpp_errors_consensus_fee_fee_error_FeeError) , # [cfg (test)] TestConsensusError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: test_consensus_error :: dpp_errors_consensus_test_consensus_error_TestConsensusError) } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: consensus_error :: ConsensusError > for dpp_errors_consensus_consensus_error_ConsensusError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_consensus_error_ConsensusError) -> dpp :: errors :: consensus :: consensus_error :: ConsensusError { let ffi_ref = & * ffi ; match ffi_ref { dpp_errors_consensus_consensus_error_ConsensusError :: DefaultError => dpp :: errors :: consensus :: consensus_error :: ConsensusError :: DefaultError , dpp_errors_consensus_consensus_error_ConsensusError :: BasicError (o_0) => dpp :: errors :: consensus :: consensus_error :: ConsensusError :: BasicError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: basic_error :: dpp_errors_consensus_basic_basic_error_BasicError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: basic_error :: BasicError >> :: ffi_from (* o_0)) , dpp_errors_consensus_consensus_error_ConsensusError :: StateError (o_0) => dpp :: errors :: consensus :: consensus_error :: ConsensusError :: StateError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: state_error :: dpp_errors_consensus_state_state_error_StateError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: state_error :: StateError >> :: ffi_from (* o_0)) , dpp_errors_consensus_consensus_error_ConsensusError :: SignatureError (o_0) => dpp :: errors :: consensus :: consensus_error :: ConsensusError :: SignatureError (< crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: signature_error :: dpp_errors_consensus_signature_signature_error_SignatureError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: signature_error :: SignatureError >> :: ffi_from (* o_0)) , dpp_errors_consensus_consensus_error_ConsensusError :: FeeError (o_0) => dpp :: errors :: consensus :: consensus_error :: ConsensusError :: FeeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: fee :: fee_error :: dpp_errors_consensus_fee_fee_error_FeeError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: fee :: fee_error :: FeeError >> :: ffi_from (* o_0)) , # [cfg (test)] dpp_errors_consensus_consensus_error_ConsensusError :: TestConsensusError (o_0) => dpp :: errors :: consensus :: consensus_error :: ConsensusError :: TestConsensusError (< crate :: fermented :: types :: dpp :: errors :: consensus :: test_consensus_error :: dpp_errors_consensus_test_consensus_error_TestConsensusError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: test_consensus_error :: TestConsensusError >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: consensus_error :: ConsensusError > for dpp_errors_consensus_consensus_error_ConsensusError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: consensus_error :: ConsensusError) -> * const dpp_errors_consensus_consensus_error_ConsensusError { ferment :: boxed (match obj { dpp :: errors :: consensus :: consensus_error :: ConsensusError :: DefaultError => dpp_errors_consensus_consensus_error_ConsensusError :: DefaultError , dpp :: errors :: consensus :: consensus_error :: ConsensusError :: BasicError (o_0) => dpp_errors_consensus_consensus_error_ConsensusError :: BasicError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: basic_error :: dpp_errors_consensus_basic_basic_error_BasicError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: basic_error :: BasicError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: consensus_error :: ConsensusError :: StateError (o_0) => dpp_errors_consensus_consensus_error_ConsensusError :: StateError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: state_error :: dpp_errors_consensus_state_state_error_StateError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: state_error :: StateError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: consensus_error :: ConsensusError :: SignatureError (o_0) => dpp_errors_consensus_consensus_error_ConsensusError :: SignatureError (< crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: signature_error :: dpp_errors_consensus_signature_signature_error_SignatureError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: signature :: signature_error :: SignatureError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: consensus_error :: ConsensusError :: FeeError (o_0) => dpp_errors_consensus_consensus_error_ConsensusError :: FeeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: fee :: fee_error :: dpp_errors_consensus_fee_fee_error_FeeError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: fee :: fee_error :: FeeError >> :: ffi_to (o_0)) , # [cfg (test)] dpp :: errors :: consensus :: consensus_error :: ConsensusError :: TestConsensusError (o_0) => dpp_errors_consensus_consensus_error_ConsensusError :: TestConsensusError (< crate :: fermented :: types :: dpp :: errors :: consensus :: test_consensus_error :: dpp_errors_consensus_test_consensus_error_TestConsensusError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: test_consensus_error :: TestConsensusError >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_errors_consensus_consensus_error_ConsensusError { fn drop (& mut self) { unsafe { match self { dpp_errors_consensus_consensus_error_ConsensusError :: DefaultError => { } , dpp_errors_consensus_consensus_error_ConsensusError :: BasicError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_consensus_error_ConsensusError :: StateError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_consensus_error_ConsensusError :: SignatureError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_consensus_error_ConsensusError :: FeeError (o_0) => { ferment :: unbox_any (* o_0) ; } , # [cfg (test)] dpp_errors_consensus_consensus_error_ConsensusError :: TestConsensusError (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_consensus_error_ConsensusError_DefaultError_ctor () -> * mut dpp_errors_consensus_consensus_error_ConsensusError { ferment :: boxed (dpp_errors_consensus_consensus_error_ConsensusError :: DefaultError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_consensus_error_ConsensusError_BasicError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: basic_error :: dpp_errors_consensus_basic_basic_error_BasicError) -> * mut dpp_errors_consensus_consensus_error_ConsensusError { ferment :: boxed (dpp_errors_consensus_consensus_error_ConsensusError :: BasicError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_consensus_error_ConsensusError_StateError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: state_error :: dpp_errors_consensus_state_state_error_StateError) -> * mut dpp_errors_consensus_consensus_error_ConsensusError { ferment :: boxed (dpp_errors_consensus_consensus_error_ConsensusError :: StateError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_consensus_error_ConsensusError_SignatureError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: signature_error :: dpp_errors_consensus_signature_signature_error_SignatureError) -> * mut dpp_errors_consensus_consensus_error_ConsensusError { ferment :: boxed (dpp_errors_consensus_consensus_error_ConsensusError :: SignatureError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_consensus_error_ConsensusError_FeeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: fee :: fee_error :: dpp_errors_consensus_fee_fee_error_FeeError) -> * mut dpp_errors_consensus_consensus_error_ConsensusError { ferment :: boxed (dpp_errors_consensus_consensus_error_ConsensusError :: FeeError (o_o_0)) } # [cfg (test)] # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_consensus_error_ConsensusError_TestConsensusError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: test_consensus_error :: dpp_errors_consensus_test_consensus_error_TestConsensusError) -> * mut dpp_errors_consensus_consensus_error_ConsensusError { ferment :: boxed (dpp_errors_consensus_consensus_error_ConsensusError :: TestConsensusError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_consensus_error_ConsensusError_destroy < > (ffi : * mut dpp_errors_consensus_consensus_error_ConsensusError) { ferment :: unbox_any (ffi) ; } } pub mod basic { use crate as dash_spv_apple_bindings ; pub mod unsupported_feature_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`UnsupportedFeatureError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError { pub feature_name : * mut std :: os :: raw :: c_char , pub current_protocol_version : u32 } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: unsupported_feature_error :: UnsupportedFeatureError > for dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError) -> dpp :: errors :: consensus :: basic :: unsupported_feature_error :: UnsupportedFeatureError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: unsupported_feature_error :: UnsupportedFeatureError { feature_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . feature_name) , current_protocol_version : ffi_ref . current_protocol_version } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: unsupported_feature_error :: UnsupportedFeatureError > for dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: unsupported_feature_error :: UnsupportedFeatureError) -> * const dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError { ferment :: boxed (dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError { feature_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . feature_name) , current_protocol_version : obj . current_protocol_version }) } } impl Drop for dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . feature_name) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError_ctor < > (feature_name : * mut std :: os :: raw :: c_char , current_protocol_version : u32) -> * mut dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError { ferment :: boxed (dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError { feature_name , current_protocol_version }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError_destroy < > (ffi : * mut dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError_get_feature_name < > (obj : * const dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError) -> * mut std :: os :: raw :: c_char { (* obj) . feature_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError_get_current_protocol_version < > (obj : * const dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError) -> u32 { (* obj) . current_protocol_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError_set_feature_name < > (obj : * const dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError) -> * mut std :: os :: raw :: c_char { (* obj) . feature_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError_set_current_protocol_version < > (obj : * const dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError) -> u32 { (* obj) . current_protocol_version } } pub mod invalid_identifier_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidIdentifierError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError { pub identifier_name : * mut std :: os :: raw :: c_char , pub message : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: invalid_identifier_error :: InvalidIdentifierError > for dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError) -> dpp :: errors :: consensus :: basic :: invalid_identifier_error :: InvalidIdentifierError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: invalid_identifier_error :: InvalidIdentifierError { identifier_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . identifier_name) , message : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . message) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: invalid_identifier_error :: InvalidIdentifierError > for dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: invalid_identifier_error :: InvalidIdentifierError) -> * const dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError { ferment :: boxed (dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError { identifier_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . identifier_name) , message : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . message) }) } } impl Drop for dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . identifier_name) ; ferment :: unbox_string (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError_ctor < > (identifier_name : * mut std :: os :: raw :: c_char , message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError { ferment :: boxed (dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError { identifier_name , message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError_destroy < > (ffi : * mut dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError_get_identifier_name < > (obj : * const dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError) -> * mut std :: os :: raw :: c_char { (* obj) . identifier_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError_get_message < > (obj : * const dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError_set_identifier_name < > (obj : * const dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError) -> * mut std :: os :: raw :: c_char { (* obj) . identifier_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError_set_message < > (obj : * const dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError) -> * mut std :: os :: raw :: c_char { (* obj) . message } } pub mod unsupported_protocol_version_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`UnsupportedProtocolVersionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError { pub parsed_protocol_version : u32 , pub latest_version : u32 } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: unsupported_protocol_version_error :: UnsupportedProtocolVersionError > for dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError) -> dpp :: errors :: consensus :: basic :: unsupported_protocol_version_error :: UnsupportedProtocolVersionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: unsupported_protocol_version_error :: UnsupportedProtocolVersionError { parsed_protocol_version : ffi_ref . parsed_protocol_version , latest_version : ffi_ref . latest_version } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: unsupported_protocol_version_error :: UnsupportedProtocolVersionError > for dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: unsupported_protocol_version_error :: UnsupportedProtocolVersionError) -> * const dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError { ferment :: boxed (dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError { parsed_protocol_version : obj . parsed_protocol_version , latest_version : obj . latest_version }) } } impl Drop for dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError_ctor < > (parsed_protocol_version : u32 , latest_version : u32) -> * mut dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError { ferment :: boxed (dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError { parsed_protocol_version , latest_version }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError_destroy < > (ffi : * mut dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError_get_parsed_protocol_version < > (obj : * const dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError) -> u32 { (* obj) . parsed_protocol_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError_get_latest_version < > (obj : * const dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError) -> u32 { (* obj) . latest_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError_set_parsed_protocol_version < > (obj : * const dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError) -> u32 { (* obj) . parsed_protocol_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError_set_latest_version < > (obj : * const dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError) -> u32 { (* obj) . latest_version } } pub mod overflow_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`OverflowError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_overflow_error_OverflowError { pub message : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: overflow_error :: OverflowError > for dpp_errors_consensus_basic_overflow_error_OverflowError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_overflow_error_OverflowError) -> dpp :: errors :: consensus :: basic :: overflow_error :: OverflowError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: overflow_error :: OverflowError { message : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . message) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: overflow_error :: OverflowError > for dpp_errors_consensus_basic_overflow_error_OverflowError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: overflow_error :: OverflowError) -> * const dpp_errors_consensus_basic_overflow_error_OverflowError { ferment :: boxed (dpp_errors_consensus_basic_overflow_error_OverflowError { message : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . message) }) } } impl Drop for dpp_errors_consensus_basic_overflow_error_OverflowError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_overflow_error_OverflowError_ctor < > (message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_overflow_error_OverflowError { ferment :: boxed (dpp_errors_consensus_basic_overflow_error_OverflowError { message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_overflow_error_OverflowError_destroy < > (ffi : * mut dpp_errors_consensus_basic_overflow_error_OverflowError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_overflow_error_OverflowError_get_message < > (obj : * const dpp_errors_consensus_basic_overflow_error_OverflowError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_overflow_error_OverflowError_set_message < > (obj : * const dpp_errors_consensus_basic_overflow_error_OverflowError) -> * mut std :: os :: raw :: c_char { (* obj) . message } } pub mod unsupported_version_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`UnsupportedVersionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError { pub received_version : u16 , pub min_version : u16 , pub max_version : u16 } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: unsupported_version_error :: UnsupportedVersionError > for dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError) -> dpp :: errors :: consensus :: basic :: unsupported_version_error :: UnsupportedVersionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: unsupported_version_error :: UnsupportedVersionError { received_version : ffi_ref . received_version , min_version : ffi_ref . min_version , max_version : ffi_ref . max_version } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: unsupported_version_error :: UnsupportedVersionError > for dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: unsupported_version_error :: UnsupportedVersionError) -> * const dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError { ferment :: boxed (dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError { received_version : obj . received_version , min_version : obj . min_version , max_version : obj . max_version }) } } impl Drop for dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError_ctor < > (received_version : u16 , min_version : u16 , max_version : u16) -> * mut dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError { ferment :: boxed (dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError { received_version , min_version , max_version }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError_destroy < > (ffi : * mut dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError_get_received_version < > (obj : * const dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError) -> u16 { (* obj) . received_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError_get_min_version < > (obj : * const dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError) -> u16 { (* obj) . min_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError_get_max_version < > (obj : * const dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError) -> u16 { (* obj) . max_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError_set_received_version < > (obj : * const dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError) -> u16 { (* obj) . received_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError_set_min_version < > (obj : * const dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError) -> u16 { (* obj) . min_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError_set_max_version < > (obj : * const dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError) -> u16 { (* obj) . max_version } } pub mod document { use crate as dash_spv_apple_bindings ; pub mod data_contract_not_present_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DataContractNotPresentError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: data_contract_not_present_error :: DataContractNotPresentError > for dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError) -> dpp :: errors :: consensus :: basic :: document :: data_contract_not_present_error :: DataContractNotPresentError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: data_contract_not_present_error :: DataContractNotPresentError { data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . data_contract_id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: data_contract_not_present_error :: DataContractNotPresentError > for dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: data_contract_not_present_error :: DataContractNotPresentError) -> * const dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError { ferment :: boxed (dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError { data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . data_contract_id) }) } } impl Drop for dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . data_contract_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError_ctor < > (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError { ferment :: boxed (dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError { data_contract_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError_get_data_contract_id < > (obj : * const dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError_set_data_contract_id < > (obj : * const dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } } pub mod max_documents_transitions_exceeded_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`MaxDocumentsTransitionsExceededError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError { pub max_transitions : u16 } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: max_documents_transitions_exceeded_error :: MaxDocumentsTransitionsExceededError > for dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError) -> dpp :: errors :: consensus :: basic :: document :: max_documents_transitions_exceeded_error :: MaxDocumentsTransitionsExceededError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: max_documents_transitions_exceeded_error :: MaxDocumentsTransitionsExceededError { max_transitions : ffi_ref . max_transitions } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: max_documents_transitions_exceeded_error :: MaxDocumentsTransitionsExceededError > for dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: max_documents_transitions_exceeded_error :: MaxDocumentsTransitionsExceededError) -> * const dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError { ferment :: boxed (dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError { max_transitions : obj . max_transitions }) } } impl Drop for dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError_ctor < > (max_transitions : u16) -> * mut dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError { ferment :: boxed (dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError { max_transitions }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError_get_max_transitions < > (obj : * const dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError) -> u16 { (* obj) . max_transitions } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError_set_max_transitions < > (obj : * const dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError) -> u16 { (* obj) . max_transitions } } pub mod inconsistent_compound_index_data_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InconsistentCompoundIndexDataError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError { pub document_type : * mut std :: os :: raw :: c_char , pub index_properties : * mut crate :: fermented :: generics :: Vec_String } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: inconsistent_compound_index_data_error :: InconsistentCompoundIndexDataError > for dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError) -> dpp :: errors :: consensus :: basic :: document :: inconsistent_compound_index_data_error :: InconsistentCompoundIndexDataError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: inconsistent_compound_index_data_error :: InconsistentCompoundIndexDataError { document_type : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . document_type) , index_properties : < crate :: fermented :: generics :: Vec_String as ferment :: FFIConversionFrom < Vec < String > >> :: ffi_from (ffi_ref . index_properties) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: inconsistent_compound_index_data_error :: InconsistentCompoundIndexDataError > for dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: inconsistent_compound_index_data_error :: InconsistentCompoundIndexDataError) -> * const dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError { ferment :: boxed (dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError { document_type : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . document_type) , index_properties : < crate :: fermented :: generics :: Vec_String as ferment :: FFIConversionTo < Vec < String > >> :: ffi_to (obj . index_properties) }) } } impl Drop for dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . document_type) ; ferment :: unbox_any (ffi_ref . index_properties) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError_ctor < > (document_type : * mut std :: os :: raw :: c_char , index_properties : * mut crate :: fermented :: generics :: Vec_String) -> * mut dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError { ferment :: boxed (dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError { document_type , index_properties }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError_get_document_type < > (obj : * const dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError_get_index_properties < > (obj : * const dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError) -> * mut crate :: fermented :: generics :: Vec_String { (* obj) . index_properties } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError_set_document_type < > (obj : * const dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError_set_index_properties < > (obj : * const dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError) -> * mut crate :: fermented :: generics :: Vec_String { (* obj) . index_properties } } pub mod document_transitions_are_absent_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DocumentTransitionsAreAbsentError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError { } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: document_transitions_are_absent_error :: DocumentTransitionsAreAbsentError > for dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError) -> dpp :: errors :: consensus :: basic :: document :: document_transitions_are_absent_error :: DocumentTransitionsAreAbsentError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: document_transitions_are_absent_error :: DocumentTransitionsAreAbsentError { } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: document_transitions_are_absent_error :: DocumentTransitionsAreAbsentError > for dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: document_transitions_are_absent_error :: DocumentTransitionsAreAbsentError) -> * const dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError { ferment :: boxed (dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError { }) } } impl Drop for dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError_ctor < > () -> * mut dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError { ferment :: boxed (dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError) { ferment :: unbox_any (ffi) ; } } pub mod invalid_document_transition_id_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidDocumentTransitionIdError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError { pub expected_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub invalid_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_id_error :: InvalidDocumentTransitionIdError > for dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError) -> dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_id_error :: InvalidDocumentTransitionIdError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_id_error :: InvalidDocumentTransitionIdError { expected_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . expected_id) , invalid_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . invalid_id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_id_error :: InvalidDocumentTransitionIdError > for dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_id_error :: InvalidDocumentTransitionIdError) -> * const dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError { ferment :: boxed (dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError { expected_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . expected_id) , invalid_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . invalid_id) }) } } impl Drop for dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . expected_id) ; ferment :: unbox_any (ffi_ref . invalid_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError_ctor < > (expected_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , invalid_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError { ferment :: boxed (dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError { expected_id , invalid_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError_get_expected_id < > (obj : * const dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . expected_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError_get_invalid_id < > (obj : * const dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . invalid_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError_set_expected_id < > (obj : * const dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . expected_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError_set_invalid_id < > (obj : * const dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . invalid_id } } pub mod document_creation_not_allowed_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DocumentCreationNotAllowedError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub document_type_name : * mut std :: os :: raw :: c_char , pub creation_restriction_mode : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: restricted_creation :: dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: document_creation_not_allowed_error :: DocumentCreationNotAllowedError > for dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError) -> dpp :: errors :: consensus :: basic :: document :: document_creation_not_allowed_error :: DocumentCreationNotAllowedError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: document_creation_not_allowed_error :: DocumentCreationNotAllowedError { data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . data_contract_id) , document_type_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . document_type_name) , creation_restriction_mode : < crate :: fermented :: types :: dpp :: data_contract :: document_type :: restricted_creation :: dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode as ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: restricted_creation :: CreationRestrictionMode >> :: ffi_from (ffi_ref . creation_restriction_mode) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: document_creation_not_allowed_error :: DocumentCreationNotAllowedError > for dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: document_creation_not_allowed_error :: DocumentCreationNotAllowedError) -> * const dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError { ferment :: boxed (dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError { data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . data_contract_id) , document_type_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . document_type_name) , creation_restriction_mode : < crate :: fermented :: types :: dpp :: data_contract :: document_type :: restricted_creation :: dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode as ferment :: FFIConversionTo < dpp :: data_contract :: document_type :: restricted_creation :: CreationRestrictionMode >> :: ffi_to (obj . creation_restriction_mode) }) } } impl Drop for dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . data_contract_id) ; ferment :: unbox_string (ffi_ref . document_type_name) ; ferment :: unbox_any (ffi_ref . creation_restriction_mode) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError_ctor < > (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_type_name : * mut std :: os :: raw :: c_char , creation_restriction_mode : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: restricted_creation :: dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode) -> * mut dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError { ferment :: boxed (dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError { data_contract_id , document_type_name , creation_restriction_mode }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError_get_data_contract_id < > (obj : * const dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError_get_document_type_name < > (obj : * const dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError_get_creation_restriction_mode < > (obj : * const dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError) -> * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: restricted_creation :: dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode { (* obj) . creation_restriction_mode } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError_set_data_contract_id < > (obj : * const dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError_set_document_type_name < > (obj : * const dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError_set_creation_restriction_mode < > (obj : * const dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError) -> * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: restricted_creation :: dpp_data_contract_document_type_restricted_creation_CreationRestrictionMode { (* obj) . creation_restriction_mode } } pub mod missing_document_transition_action_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`MissingDocumentTransitionActionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError { } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: missing_document_transition_action_error :: MissingDocumentTransitionActionError > for dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError) -> dpp :: errors :: consensus :: basic :: document :: missing_document_transition_action_error :: MissingDocumentTransitionActionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: missing_document_transition_action_error :: MissingDocumentTransitionActionError { } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: missing_document_transition_action_error :: MissingDocumentTransitionActionError > for dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: missing_document_transition_action_error :: MissingDocumentTransitionActionError) -> * const dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError { ferment :: boxed (dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError { }) } } impl Drop for dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError_ctor < > () -> * mut dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError { ferment :: boxed (dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError) { ferment :: unbox_any (ffi) ; } } pub mod missing_document_transition_type_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`MissingDocumentTransitionTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError { } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: missing_document_transition_type_error :: MissingDocumentTransitionTypeError > for dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError) -> dpp :: errors :: consensus :: basic :: document :: missing_document_transition_type_error :: MissingDocumentTransitionTypeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: missing_document_transition_type_error :: MissingDocumentTransitionTypeError { } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: missing_document_transition_type_error :: MissingDocumentTransitionTypeError > for dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: missing_document_transition_type_error :: MissingDocumentTransitionTypeError) -> * const dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError { ferment :: boxed (dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError { }) } } impl Drop for dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError_ctor < > () -> * mut dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError { ferment :: boxed (dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError) { ferment :: unbox_any (ffi) ; } } pub mod document_field_max_size_exceeded_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DocumentFieldMaxSizeExceededError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError { pub field : * mut std :: os :: raw :: c_char , pub actual_size_bytes : u64 , pub max_size_bytes : u64 } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: document_field_max_size_exceeded_error :: DocumentFieldMaxSizeExceededError > for dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError) -> dpp :: errors :: consensus :: basic :: document :: document_field_max_size_exceeded_error :: DocumentFieldMaxSizeExceededError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: document_field_max_size_exceeded_error :: DocumentFieldMaxSizeExceededError { field : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . field) , actual_size_bytes : ffi_ref . actual_size_bytes , max_size_bytes : ffi_ref . max_size_bytes } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: document_field_max_size_exceeded_error :: DocumentFieldMaxSizeExceededError > for dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: document_field_max_size_exceeded_error :: DocumentFieldMaxSizeExceededError) -> * const dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError { ferment :: boxed (dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError { field : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . field) , actual_size_bytes : obj . actual_size_bytes , max_size_bytes : obj . max_size_bytes }) } } impl Drop for dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . field) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError_ctor < > (field : * mut std :: os :: raw :: c_char , actual_size_bytes : u64 , max_size_bytes : u64) -> * mut dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError { ferment :: boxed (dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError { field , actual_size_bytes , max_size_bytes }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError_get_field < > (obj : * const dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError) -> * mut std :: os :: raw :: c_char { (* obj) . field } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError_get_actual_size_bytes < > (obj : * const dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError) -> u64 { (* obj) . actual_size_bytes } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError_get_max_size_bytes < > (obj : * const dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError) -> u64 { (* obj) . max_size_bytes } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError_set_field < > (obj : * const dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError) -> * mut std :: os :: raw :: c_char { (* obj) . field } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError_set_actual_size_bytes < > (obj : * const dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError) -> u64 { (* obj) . actual_size_bytes } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError_set_max_size_bytes < > (obj : * const dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError) -> u64 { (* obj) . max_size_bytes } } pub mod contested_documents_temporarily_not_allowed_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`ContestedDocumentsTemporarilyNotAllowedError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_contested_documents_temporarily_not_allowed_error_ContestedDocumentsTemporarilyNotAllowedError { pub current_epoch : * mut crate :: fermented :: types :: dpp :: block :: epoch :: dpp_block_epoch_EpochIndex , pub target_epoch : * mut crate :: fermented :: types :: dpp :: block :: epoch :: dpp_block_epoch_EpochIndex } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: contested_documents_temporarily_not_allowed_error :: ContestedDocumentsTemporarilyNotAllowedError > for dpp_errors_consensus_basic_document_contested_documents_temporarily_not_allowed_error_ContestedDocumentsTemporarilyNotAllowedError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_contested_documents_temporarily_not_allowed_error_ContestedDocumentsTemporarilyNotAllowedError) -> dpp :: errors :: consensus :: basic :: document :: contested_documents_temporarily_not_allowed_error :: ContestedDocumentsTemporarilyNotAllowedError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: contested_documents_temporarily_not_allowed_error :: ContestedDocumentsTemporarilyNotAllowedError { current_epoch : < crate :: fermented :: types :: dpp :: block :: epoch :: dpp_block_epoch_EpochIndex as ferment :: FFIConversionFrom < dpp :: block :: epoch :: EpochIndex >> :: ffi_from (ffi_ref . current_epoch) , target_epoch : < crate :: fermented :: types :: dpp :: block :: epoch :: dpp_block_epoch_EpochIndex as ferment :: FFIConversionFrom < dpp :: block :: epoch :: EpochIndex >> :: ffi_from (ffi_ref . target_epoch) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: contested_documents_temporarily_not_allowed_error :: ContestedDocumentsTemporarilyNotAllowedError > for dpp_errors_consensus_basic_document_contested_documents_temporarily_not_allowed_error_ContestedDocumentsTemporarilyNotAllowedError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: contested_documents_temporarily_not_allowed_error :: ContestedDocumentsTemporarilyNotAllowedError) -> * const dpp_errors_consensus_basic_document_contested_documents_temporarily_not_allowed_error_ContestedDocumentsTemporarilyNotAllowedError { ferment :: boxed (dpp_errors_consensus_basic_document_contested_documents_temporarily_not_allowed_error_ContestedDocumentsTemporarilyNotAllowedError { current_epoch : < crate :: fermented :: types :: dpp :: block :: epoch :: dpp_block_epoch_EpochIndex as ferment :: FFIConversionTo < dpp :: block :: epoch :: EpochIndex >> :: ffi_to (obj . current_epoch) , target_epoch : < crate :: fermented :: types :: dpp :: block :: epoch :: dpp_block_epoch_EpochIndex as ferment :: FFIConversionTo < dpp :: block :: epoch :: EpochIndex >> :: ffi_to (obj . target_epoch) }) } } impl Drop for dpp_errors_consensus_basic_document_contested_documents_temporarily_not_allowed_error_ContestedDocumentsTemporarilyNotAllowedError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . current_epoch) ; ferment :: unbox_any (ffi_ref . target_epoch) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_contested_documents_temporarily_not_allowed_error_ContestedDocumentsTemporarilyNotAllowedError_ctor < > (current_epoch : * mut crate :: fermented :: types :: dpp :: block :: epoch :: dpp_block_epoch_EpochIndex , target_epoch : * mut crate :: fermented :: types :: dpp :: block :: epoch :: dpp_block_epoch_EpochIndex) -> * mut dpp_errors_consensus_basic_document_contested_documents_temporarily_not_allowed_error_ContestedDocumentsTemporarilyNotAllowedError { ferment :: boxed (dpp_errors_consensus_basic_document_contested_documents_temporarily_not_allowed_error_ContestedDocumentsTemporarilyNotAllowedError { current_epoch , target_epoch }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_contested_documents_temporarily_not_allowed_error_ContestedDocumentsTemporarilyNotAllowedError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_contested_documents_temporarily_not_allowed_error_ContestedDocumentsTemporarilyNotAllowedError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_contested_documents_temporarily_not_allowed_error_ContestedDocumentsTemporarilyNotAllowedError_get_current_epoch < > (obj : * const dpp_errors_consensus_basic_document_contested_documents_temporarily_not_allowed_error_ContestedDocumentsTemporarilyNotAllowedError) -> * mut crate :: fermented :: types :: dpp :: block :: epoch :: dpp_block_epoch_EpochIndex { (* obj) . current_epoch } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_contested_documents_temporarily_not_allowed_error_ContestedDocumentsTemporarilyNotAllowedError_get_target_epoch < > (obj : * const dpp_errors_consensus_basic_document_contested_documents_temporarily_not_allowed_error_ContestedDocumentsTemporarilyNotAllowedError) -> * mut crate :: fermented :: types :: dpp :: block :: epoch :: dpp_block_epoch_EpochIndex { (* obj) . target_epoch } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_contested_documents_temporarily_not_allowed_error_ContestedDocumentsTemporarilyNotAllowedError_set_current_epoch < > (obj : * const dpp_errors_consensus_basic_document_contested_documents_temporarily_not_allowed_error_ContestedDocumentsTemporarilyNotAllowedError) -> * mut crate :: fermented :: types :: dpp :: block :: epoch :: dpp_block_epoch_EpochIndex { (* obj) . current_epoch } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_contested_documents_temporarily_not_allowed_error_ContestedDocumentsTemporarilyNotAllowedError_set_target_epoch < > (obj : * const dpp_errors_consensus_basic_document_contested_documents_temporarily_not_allowed_error_ContestedDocumentsTemporarilyNotAllowedError) -> * mut crate :: fermented :: types :: dpp :: block :: epoch :: dpp_block_epoch_EpochIndex { (* obj) . target_epoch } } pub mod missing_document_type_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`MissingDocumentTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError { } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: missing_document_type_error :: MissingDocumentTypeError > for dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError) -> dpp :: errors :: consensus :: basic :: document :: missing_document_type_error :: MissingDocumentTypeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: missing_document_type_error :: MissingDocumentTypeError { } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: missing_document_type_error :: MissingDocumentTypeError > for dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: missing_document_type_error :: MissingDocumentTypeError) -> * const dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError { ferment :: boxed (dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError { }) } } impl Drop for dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError_ctor < > () -> * mut dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError { ferment :: boxed (dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError) { ferment :: unbox_any (ffi) ; } } pub mod identity_contract_nonce_out_of_bounds_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`NonceOutOfBoundsError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError { pub nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: identity_contract_nonce_out_of_bounds_error :: NonceOutOfBoundsError > for dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError) -> dpp :: errors :: consensus :: basic :: document :: identity_contract_nonce_out_of_bounds_error :: NonceOutOfBoundsError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: identity_contract_nonce_out_of_bounds_error :: NonceOutOfBoundsError { nonce : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce as ferment :: FFIConversionFrom < dpp :: prelude :: IdentityNonce >> :: ffi_from (ffi_ref . nonce) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: identity_contract_nonce_out_of_bounds_error :: NonceOutOfBoundsError > for dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: identity_contract_nonce_out_of_bounds_error :: NonceOutOfBoundsError) -> * const dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError { ferment :: boxed (dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError { nonce : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce as ferment :: FFIConversionTo < dpp :: prelude :: IdentityNonce >> :: ffi_to (obj . nonce) }) } } impl Drop for dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . nonce) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError_ctor < > (nonce : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce) -> * mut dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError { ferment :: boxed (dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError { nonce }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError_get_nonce < > (obj : * const dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce { (* obj) . nonce } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError_set_nonce < > (obj : * const dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_IdentityNonce { (* obj) . nonce } } pub mod invalid_document_transition_action_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidDocumentTransitionActionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError { pub action : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_action_error :: InvalidDocumentTransitionActionError > for dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError) -> dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_action_error :: InvalidDocumentTransitionActionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_action_error :: InvalidDocumentTransitionActionError { action : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . action) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_action_error :: InvalidDocumentTransitionActionError > for dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_action_error :: InvalidDocumentTransitionActionError) -> * const dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError { ferment :: boxed (dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError { action : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . action) }) } } impl Drop for dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . action) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError_ctor < > (action : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError { ferment :: boxed (dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError { action }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError_get_action < > (obj : * const dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError) -> * mut std :: os :: raw :: c_char { (* obj) . action } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError_set_action < > (obj : * const dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError) -> * mut std :: os :: raw :: c_char { (* obj) . action } } pub mod duplicate_document_transitions_with_indices_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DuplicateDocumentTransitionsWithIndicesError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError { pub references : * mut crate :: fermented :: generics :: Vec_Tuple_String_Arr_u8_32 } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_indices_error :: DuplicateDocumentTransitionsWithIndicesError > for dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError) -> dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_indices_error :: DuplicateDocumentTransitionsWithIndicesError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_indices_error :: DuplicateDocumentTransitionsWithIndicesError { references : < crate :: fermented :: generics :: Vec_Tuple_String_Arr_u8_32 as ferment :: FFIConversionFrom < Vec < (String , [u8 ; 32]) > >> :: ffi_from (ffi_ref . references) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_indices_error :: DuplicateDocumentTransitionsWithIndicesError > for dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_indices_error :: DuplicateDocumentTransitionsWithIndicesError) -> * const dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError { ferment :: boxed (dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError { references : < crate :: fermented :: generics :: Vec_Tuple_String_Arr_u8_32 as ferment :: FFIConversionTo < Vec < (String , [u8 ; 32]) > >> :: ffi_to (obj . references) }) } } impl Drop for dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . references) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError_ctor < > (references : * mut crate :: fermented :: generics :: Vec_Tuple_String_Arr_u8_32) -> * mut dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError { ferment :: boxed (dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError { references }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError_get_references < > (obj : * const dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError) -> * mut crate :: fermented :: generics :: Vec_Tuple_String_Arr_u8_32 { (* obj) . references } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError_set_references < > (obj : * const dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError) -> * mut crate :: fermented :: generics :: Vec_Tuple_String_Arr_u8_32 { (* obj) . references } } pub mod invalid_document_type_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidDocumentTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError { pub document_type : * mut std :: os :: raw :: c_char , pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: InvalidDocumentTypeError > for dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError) -> dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: InvalidDocumentTypeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: InvalidDocumentTypeError { document_type : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . document_type) , data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . data_contract_id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: InvalidDocumentTypeError > for dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: InvalidDocumentTypeError) -> * const dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError { ferment :: boxed (dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError { document_type : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . document_type) , data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . data_contract_id) }) } } impl Drop for dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . document_type) ; ferment :: unbox_any (ffi_ref . data_contract_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError_ctor < > (document_type : * mut std :: os :: raw :: c_char , data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError { ferment :: boxed (dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError { document_type , data_contract_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError_get_document_type < > (obj : * const dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError_get_data_contract_id < > (obj : * const dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError_set_document_type < > (obj : * const dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError_set_data_contract_id < > (obj : * const dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } } pub mod missing_positions_in_document_type_properties_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`MissingPositionsInDocumentTypePropertiesError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError { pub missing_position : u32 , pub contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub document_type_name : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: missing_positions_in_document_type_properties_error :: MissingPositionsInDocumentTypePropertiesError > for dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError) -> dpp :: errors :: consensus :: basic :: document :: missing_positions_in_document_type_properties_error :: MissingPositionsInDocumentTypePropertiesError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: missing_positions_in_document_type_properties_error :: MissingPositionsInDocumentTypePropertiesError { missing_position : ffi_ref . missing_position , contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . contract_id) , document_type_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . document_type_name) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: missing_positions_in_document_type_properties_error :: MissingPositionsInDocumentTypePropertiesError > for dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: missing_positions_in_document_type_properties_error :: MissingPositionsInDocumentTypePropertiesError) -> * const dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError { ferment :: boxed (dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError { missing_position : obj . missing_position , contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . contract_id) , document_type_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . document_type_name) }) } } impl Drop for dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment :: unbox_any (ffi_ref . contract_id) ; ferment :: unbox_string (ffi_ref . document_type_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError_ctor < > (missing_position : u32 , contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_type_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError { ferment :: boxed (dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError { missing_position , contract_id , document_type_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError_get_missing_position < > (obj : * const dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError) -> u32 { (* obj) . missing_position } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError_get_contract_id < > (obj : * const dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError_get_document_type_name < > (obj : * const dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError_set_missing_position < > (obj : * const dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError) -> u32 { (* obj) . missing_position } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError_set_contract_id < > (obj : * const dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError_set_document_type_name < > (obj : * const dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type_name } } pub mod missing_data_contract_id_basic_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`MissingDataContractIdBasicError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError { } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: missing_data_contract_id_basic_error :: MissingDataContractIdBasicError > for dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError) -> dpp :: errors :: consensus :: basic :: document :: missing_data_contract_id_basic_error :: MissingDataContractIdBasicError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: missing_data_contract_id_basic_error :: MissingDataContractIdBasicError { } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: missing_data_contract_id_basic_error :: MissingDataContractIdBasicError > for dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: missing_data_contract_id_basic_error :: MissingDataContractIdBasicError) -> * const dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError { ferment :: boxed (dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError { }) } } impl Drop for dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError_ctor < > () -> * mut dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError { ferment :: boxed (dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError) { ferment :: unbox_any (ffi) ; } } pub mod duplicate_document_transitions_with_ids_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DuplicateDocumentTransitionsWithIdsError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError { pub references : * mut crate :: fermented :: generics :: Vec_Tuple_String_Arr_u8_32 } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_ids_error :: DuplicateDocumentTransitionsWithIdsError > for dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError) -> dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_ids_error :: DuplicateDocumentTransitionsWithIdsError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_ids_error :: DuplicateDocumentTransitionsWithIdsError { references : < crate :: fermented :: generics :: Vec_Tuple_String_Arr_u8_32 as ferment :: FFIConversionFrom < Vec < (String , [u8 ; 32]) > >> :: ffi_from (ffi_ref . references) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_ids_error :: DuplicateDocumentTransitionsWithIdsError > for dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_ids_error :: DuplicateDocumentTransitionsWithIdsError) -> * const dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError { ferment :: boxed (dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError { references : < crate :: fermented :: generics :: Vec_Tuple_String_Arr_u8_32 as ferment :: FFIConversionTo < Vec < (String , [u8 ; 32]) > >> :: ffi_to (obj . references) }) } } impl Drop for dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . references) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError_ctor < > (references : * mut crate :: fermented :: generics :: Vec_Tuple_String_Arr_u8_32) -> * mut dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError { ferment :: boxed (dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError { references }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError_destroy < > (ffi : * mut dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError_get_references < > (obj : * const dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError) -> * mut crate :: fermented :: generics :: Vec_Tuple_String_Arr_u8_32 { (* obj) . references } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError_set_references < > (obj : * const dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError) -> * mut crate :: fermented :: generics :: Vec_Tuple_String_Arr_u8_32 { (* obj) . references } } } pub mod state_transition { use crate as dash_spv_apple_bindings ; pub mod state_transition_max_size_exceeded_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`StateTransitionMaxSizeExceededError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError { pub actual_size_bytes : u64 , pub max_size_bytes : u64 } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: state_transition :: state_transition_max_size_exceeded_error :: StateTransitionMaxSizeExceededError > for dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError) -> dpp :: errors :: consensus :: basic :: state_transition :: state_transition_max_size_exceeded_error :: StateTransitionMaxSizeExceededError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: state_transition :: state_transition_max_size_exceeded_error :: StateTransitionMaxSizeExceededError { actual_size_bytes : ffi_ref . actual_size_bytes , max_size_bytes : ffi_ref . max_size_bytes } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: state_transition :: state_transition_max_size_exceeded_error :: StateTransitionMaxSizeExceededError > for dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: state_transition :: state_transition_max_size_exceeded_error :: StateTransitionMaxSizeExceededError) -> * const dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError { ferment :: boxed (dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError { actual_size_bytes : obj . actual_size_bytes , max_size_bytes : obj . max_size_bytes }) } } impl Drop for dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError_ctor < > (actual_size_bytes : u64 , max_size_bytes : u64) -> * mut dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError { ferment :: boxed (dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError { actual_size_bytes , max_size_bytes }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError_destroy < > (ffi : * mut dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError_get_actual_size_bytes < > (obj : * const dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError) -> u64 { (* obj) . actual_size_bytes } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError_get_max_size_bytes < > (obj : * const dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError) -> u64 { (* obj) . max_size_bytes } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError_set_actual_size_bytes < > (obj : * const dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError) -> u64 { (* obj) . actual_size_bytes } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError_set_max_size_bytes < > (obj : * const dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError) -> u64 { (* obj) . max_size_bytes } } pub mod missing_state_transition_type_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`MissingStateTransitionTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError { } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: state_transition :: missing_state_transition_type_error :: MissingStateTransitionTypeError > for dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError) -> dpp :: errors :: consensus :: basic :: state_transition :: missing_state_transition_type_error :: MissingStateTransitionTypeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: state_transition :: missing_state_transition_type_error :: MissingStateTransitionTypeError { } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: state_transition :: missing_state_transition_type_error :: MissingStateTransitionTypeError > for dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: state_transition :: missing_state_transition_type_error :: MissingStateTransitionTypeError) -> * const dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError { ferment :: boxed (dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError { }) } } impl Drop for dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError_ctor < > () -> * mut dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError { ferment :: boxed (dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError_destroy < > (ffi : * mut dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError) { ferment :: unbox_any (ffi) ; } } pub mod invalid_state_transition_type_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidStateTransitionTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError { pub transition_type : u8 } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: InvalidStateTransitionTypeError > for dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError) -> dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: InvalidStateTransitionTypeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: InvalidStateTransitionTypeError { transition_type : ffi_ref . transition_type } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: InvalidStateTransitionTypeError > for dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: InvalidStateTransitionTypeError) -> * const dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError { ferment :: boxed (dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError { transition_type : obj . transition_type }) } } impl Drop for dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError_ctor < > (transition_type : u8) -> * mut dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError { ferment :: boxed (dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError { transition_type }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError_destroy < > (ffi : * mut dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError_get_transition_type < > (obj : * const dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError) -> u8 { (* obj) . transition_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError_set_transition_type < > (obj : * const dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError) -> u8 { (* obj) . transition_type } } } pub mod value_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`ValueError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_value_error_ValueError { pub value_error : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: value_error :: ValueError > for dpp_errors_consensus_basic_value_error_ValueError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_value_error_ValueError) -> dpp :: errors :: consensus :: basic :: value_error :: ValueError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: value_error :: ValueError { value_error : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . value_error) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: value_error :: ValueError > for dpp_errors_consensus_basic_value_error_ValueError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: value_error :: ValueError) -> * const dpp_errors_consensus_basic_value_error_ValueError { ferment :: boxed (dpp_errors_consensus_basic_value_error_ValueError { value_error : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . value_error) }) } } impl Drop for dpp_errors_consensus_basic_value_error_ValueError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . value_error) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_value_error_ValueError_ctor < > (value_error : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_value_error_ValueError { ferment :: boxed (dpp_errors_consensus_basic_value_error_ValueError { value_error }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_value_error_ValueError_destroy < > (ffi : * mut dpp_errors_consensus_basic_value_error_ValueError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_value_error_ValueError_get_value_error < > (obj : * const dpp_errors_consensus_basic_value_error_ValueError) -> * mut std :: os :: raw :: c_char { (* obj) . value_error } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_value_error_ValueError_set_value_error < > (obj : * const dpp_errors_consensus_basic_value_error_ValueError) -> * mut std :: os :: raw :: c_char { (* obj) . value_error } } pub mod decode { use crate as dash_spv_apple_bindings ; pub mod protocol_version_parsing_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`ProtocolVersionParsingError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError { pub parsing_error : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: decode :: protocol_version_parsing_error :: ProtocolVersionParsingError > for dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError) -> dpp :: errors :: consensus :: basic :: decode :: protocol_version_parsing_error :: ProtocolVersionParsingError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: decode :: protocol_version_parsing_error :: ProtocolVersionParsingError { parsing_error : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . parsing_error) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: decode :: protocol_version_parsing_error :: ProtocolVersionParsingError > for dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: decode :: protocol_version_parsing_error :: ProtocolVersionParsingError) -> * const dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError { ferment :: boxed (dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError { parsing_error : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . parsing_error) }) } } impl Drop for dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . parsing_error) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError_ctor < > (parsing_error : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError { ferment :: boxed (dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError { parsing_error }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError_destroy < > (ffi : * mut dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError_get_parsing_error < > (obj : * const dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError) -> * mut std :: os :: raw :: c_char { (* obj) . parsing_error } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError_set_parsing_error < > (obj : * const dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError) -> * mut std :: os :: raw :: c_char { (* obj) . parsing_error } } pub mod decoding_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DecodingError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_decode_decoding_error_DecodingError { pub error : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: decode :: decoding_error :: DecodingError > for dpp_errors_consensus_basic_decode_decoding_error_DecodingError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_decode_decoding_error_DecodingError) -> dpp :: errors :: consensus :: basic :: decode :: decoding_error :: DecodingError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: decode :: decoding_error :: DecodingError { error : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . error) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: decode :: decoding_error :: DecodingError > for dpp_errors_consensus_basic_decode_decoding_error_DecodingError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: decode :: decoding_error :: DecodingError) -> * const dpp_errors_consensus_basic_decode_decoding_error_DecodingError { ferment :: boxed (dpp_errors_consensus_basic_decode_decoding_error_DecodingError { error : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . error) }) } } impl Drop for dpp_errors_consensus_basic_decode_decoding_error_DecodingError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . error) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_decoding_error_DecodingError_ctor < > (error : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_decode_decoding_error_DecodingError { ferment :: boxed (dpp_errors_consensus_basic_decode_decoding_error_DecodingError { error }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_decoding_error_DecodingError_destroy < > (ffi : * mut dpp_errors_consensus_basic_decode_decoding_error_DecodingError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_decoding_error_DecodingError_get_error < > (obj : * const dpp_errors_consensus_basic_decode_decoding_error_DecodingError) -> * mut std :: os :: raw :: c_char { (* obj) . error } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_decoding_error_DecodingError_set_error < > (obj : * const dpp_errors_consensus_basic_decode_decoding_error_DecodingError) -> * mut std :: os :: raw :: c_char { (* obj) . error } } pub mod serialized_object_parsing_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`SerializedObjectParsingError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError { pub parsing_error : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: decode :: serialized_object_parsing_error :: SerializedObjectParsingError > for dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError) -> dpp :: errors :: consensus :: basic :: decode :: serialized_object_parsing_error :: SerializedObjectParsingError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: decode :: serialized_object_parsing_error :: SerializedObjectParsingError { parsing_error : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . parsing_error) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: decode :: serialized_object_parsing_error :: SerializedObjectParsingError > for dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: decode :: serialized_object_parsing_error :: SerializedObjectParsingError) -> * const dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError { ferment :: boxed (dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError { parsing_error : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . parsing_error) }) } } impl Drop for dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . parsing_error) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError_ctor < > (parsing_error : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError { ferment :: boxed (dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError { parsing_error }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError_destroy < > (ffi : * mut dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError_get_parsing_error < > (obj : * const dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError) -> * mut std :: os :: raw :: c_char { (* obj) . parsing_error } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError_set_parsing_error < > (obj : * const dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError) -> * mut std :: os :: raw :: c_char { (* obj) . parsing_error } } pub mod version_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`VersionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_decode_version_error_VersionError { pub error : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: decode :: version_error :: VersionError > for dpp_errors_consensus_basic_decode_version_error_VersionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_decode_version_error_VersionError) -> dpp :: errors :: consensus :: basic :: decode :: version_error :: VersionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: decode :: version_error :: VersionError { error : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . error) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: decode :: version_error :: VersionError > for dpp_errors_consensus_basic_decode_version_error_VersionError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: decode :: version_error :: VersionError) -> * const dpp_errors_consensus_basic_decode_version_error_VersionError { ferment :: boxed (dpp_errors_consensus_basic_decode_version_error_VersionError { error : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . error) }) } } impl Drop for dpp_errors_consensus_basic_decode_version_error_VersionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . error) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_version_error_VersionError_ctor < > (error : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_decode_version_error_VersionError { ferment :: boxed (dpp_errors_consensus_basic_decode_version_error_VersionError { error }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_version_error_VersionError_destroy < > (ffi : * mut dpp_errors_consensus_basic_decode_version_error_VersionError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_version_error_VersionError_get_error < > (obj : * const dpp_errors_consensus_basic_decode_version_error_VersionError) -> * mut std :: os :: raw :: c_char { (* obj) . error } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_decode_version_error_VersionError_set_error < > (obj : * const dpp_errors_consensus_basic_decode_version_error_VersionError) -> * mut std :: os :: raw :: c_char { (* obj) . error } } } pub mod identity { use crate as dash_spv_apple_bindings ; pub mod invalid_identity_credit_withdrawal_transition_core_fee_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidIdentityCreditWithdrawalTransitionCoreFeeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError { pub core_fee_per_byte : u32 , pub min_core_fee_per_byte : u32 } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_core_fee_error :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError > for dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_core_fee_error :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_core_fee_error :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError { core_fee_per_byte : ffi_ref . core_fee_per_byte , min_core_fee_per_byte : ffi_ref . min_core_fee_per_byte } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_core_fee_error :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError > for dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_core_fee_error :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError { core_fee_per_byte : obj . core_fee_per_byte , min_core_fee_per_byte : obj . min_core_fee_per_byte }) } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError_ctor < > (core_fee_per_byte : u32 , min_core_fee_per_byte : u32) -> * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError { core_fee_per_byte , min_core_fee_per_byte }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError_get_core_fee_per_byte < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError) -> u32 { (* obj) . core_fee_per_byte } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError_get_min_core_fee_per_byte < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError) -> u32 { (* obj) . min_core_fee_per_byte } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError_set_core_fee_per_byte < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError) -> u32 { (* obj) . core_fee_per_byte } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError_set_min_core_fee_per_byte < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError) -> u32 { (* obj) . min_core_fee_per_byte } } pub mod duplicated_identity_public_key_basic_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DuplicatedIdentityPublicKeyBasicError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError { pub duplicated_ids : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_basic_error :: DuplicatedIdentityPublicKeyBasicError > for dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError) -> dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_basic_error :: DuplicatedIdentityPublicKeyBasicError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_basic_error :: DuplicatedIdentityPublicKeyBasicError { duplicated_ids : < crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionFrom < Vec < dpp :: identity :: identity_public_key :: KeyID > >> :: ffi_from (ffi_ref . duplicated_ids) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_basic_error :: DuplicatedIdentityPublicKeyBasicError > for dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_basic_error :: DuplicatedIdentityPublicKeyBasicError) -> * const dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError { ferment :: boxed (dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError { duplicated_ids : < crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionTo < Vec < dpp :: identity :: identity_public_key :: KeyID > >> :: ffi_to (obj . duplicated_ids) }) } } impl Drop for dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . duplicated_ids) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError_ctor < > (duplicated_ids : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError { ferment :: boxed (dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError { duplicated_ids }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError_get_duplicated_ids < > (obj : * const dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError) -> * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID { (* obj) . duplicated_ids } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError_set_duplicated_ids < > (obj : * const dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError) -> * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID { (* obj) . duplicated_ids } } pub mod identity_asset_lock_state_transition_replay_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`IdentityAssetLockStateTransitionReplayError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError { pub transaction_id : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid , pub output_index : usize , pub state_transition_id : * mut crate :: fermented :: types :: platform_value :: types :: bytes_32 :: platform_value_types_bytes_32_Bytes32 } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_state_transition_replay_error :: IdentityAssetLockStateTransitionReplayError > for dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError) -> dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_state_transition_replay_error :: IdentityAssetLockStateTransitionReplayError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_state_transition_replay_error :: IdentityAssetLockStateTransitionReplayError { transaction_id : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid as ferment :: FFIConversionFrom < dashcore :: hash_types :: Txid >> :: ffi_from (ffi_ref . transaction_id) , output_index : ffi_ref . output_index , state_transition_id : < crate :: fermented :: types :: platform_value :: types :: bytes_32 :: platform_value_types_bytes_32_Bytes32 as ferment :: FFIConversionFrom < platform_value :: types :: bytes_32 :: Bytes32 >> :: ffi_from (ffi_ref . state_transition_id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_state_transition_replay_error :: IdentityAssetLockStateTransitionReplayError > for dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_state_transition_replay_error :: IdentityAssetLockStateTransitionReplayError) -> * const dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError { ferment :: boxed (dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError { transaction_id : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid as ferment :: FFIConversionTo < dashcore :: hash_types :: Txid >> :: ffi_to (obj . transaction_id) , output_index : obj . output_index , state_transition_id : < crate :: fermented :: types :: platform_value :: types :: bytes_32 :: platform_value_types_bytes_32_Bytes32 as ferment :: FFIConversionTo < platform_value :: types :: bytes_32 :: Bytes32 >> :: ffi_to (obj . state_transition_id) }) } } impl Drop for dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . transaction_id) ; ; ferment :: unbox_any (ffi_ref . state_transition_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError_ctor < > (transaction_id : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid , output_index : usize , state_transition_id : * mut crate :: fermented :: types :: platform_value :: types :: bytes_32 :: platform_value_types_bytes_32_Bytes32) -> * mut dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError { ferment :: boxed (dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError { transaction_id , output_index , state_transition_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError_get_transaction_id < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid { (* obj) . transaction_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError_get_output_index < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError) -> usize { (* obj) . output_index } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError_get_state_transition_id < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError) -> * mut crate :: fermented :: types :: platform_value :: types :: bytes_32 :: platform_value_types_bytes_32_Bytes32 { (* obj) . state_transition_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError_set_transaction_id < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid { (* obj) . transaction_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError_set_output_index < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError) -> usize { (* obj) . output_index } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError_set_state_transition_id < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError) -> * mut crate :: fermented :: types :: platform_value :: types :: bytes_32 :: platform_value_types_bytes_32_Bytes32 { (* obj) . state_transition_id } } pub mod invalid_identity_update_transition_empty_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidIdentityUpdateTransitionEmptyError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError { } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_empty_error :: InvalidIdentityUpdateTransitionEmptyError > for dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_empty_error :: InvalidIdentityUpdateTransitionEmptyError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_empty_error :: InvalidIdentityUpdateTransitionEmptyError { } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_empty_error :: InvalidIdentityUpdateTransitionEmptyError > for dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_empty_error :: InvalidIdentityUpdateTransitionEmptyError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError { }) } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError_ctor < > () -> * mut dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError) { ferment :: unbox_any (ffi) ; } } pub mod identity_credit_transfer_to_self_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`IdentityCreditTransferToSelfError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError { } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: identity_credit_transfer_to_self_error :: IdentityCreditTransferToSelfError > for dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError) -> dpp :: errors :: consensus :: basic :: identity :: identity_credit_transfer_to_self_error :: IdentityCreditTransferToSelfError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: identity_credit_transfer_to_self_error :: IdentityCreditTransferToSelfError { } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: identity_credit_transfer_to_self_error :: IdentityCreditTransferToSelfError > for dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: identity_credit_transfer_to_self_error :: IdentityCreditTransferToSelfError) -> * const dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError { ferment :: boxed (dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError { }) } } impl Drop for dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError_ctor < > () -> * mut dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError { ferment :: boxed (dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError) { ferment :: unbox_any (ffi) ; } } pub mod invalid_identity_asset_lock_transaction_output_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidIdentityAssetLockTransactionOutputError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError { pub output_index : usize } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_output_error :: InvalidIdentityAssetLockTransactionOutputError > for dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_output_error :: InvalidIdentityAssetLockTransactionOutputError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_output_error :: InvalidIdentityAssetLockTransactionOutputError { output_index : ffi_ref . output_index } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_output_error :: InvalidIdentityAssetLockTransactionOutputError > for dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_output_error :: InvalidIdentityAssetLockTransactionOutputError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError { output_index : obj . output_index }) } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError_ctor < > (output_index : usize) -> * mut dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError { output_index }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError_get_output_index < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError) -> usize { (* obj) . output_index } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError_set_output_index < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError) -> usize { (* obj) . output_index } } pub mod identity_asset_lock_proof_locked_transaction_mismatch_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`IdentityAssetLockProofLockedTransactionMismatchError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError { pub instant_lock_transaction_id : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid , pub asset_lock_transaction_id : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_proof_locked_transaction_mismatch_error :: IdentityAssetLockProofLockedTransactionMismatchError > for dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError) -> dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_proof_locked_transaction_mismatch_error :: IdentityAssetLockProofLockedTransactionMismatchError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_proof_locked_transaction_mismatch_error :: IdentityAssetLockProofLockedTransactionMismatchError { instant_lock_transaction_id : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid as ferment :: FFIConversionFrom < dashcore :: hash_types :: Txid >> :: ffi_from (ffi_ref . instant_lock_transaction_id) , asset_lock_transaction_id : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid as ferment :: FFIConversionFrom < dashcore :: hash_types :: Txid >> :: ffi_from (ffi_ref . asset_lock_transaction_id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_proof_locked_transaction_mismatch_error :: IdentityAssetLockProofLockedTransactionMismatchError > for dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_proof_locked_transaction_mismatch_error :: IdentityAssetLockProofLockedTransactionMismatchError) -> * const dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError { ferment :: boxed (dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError { instant_lock_transaction_id : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid as ferment :: FFIConversionTo < dashcore :: hash_types :: Txid >> :: ffi_to (obj . instant_lock_transaction_id) , asset_lock_transaction_id : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid as ferment :: FFIConversionTo < dashcore :: hash_types :: Txid >> :: ffi_to (obj . asset_lock_transaction_id) }) } } impl Drop for dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . instant_lock_transaction_id) ; ferment :: unbox_any (ffi_ref . asset_lock_transaction_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError_ctor < > (instant_lock_transaction_id : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid , asset_lock_transaction_id : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid) -> * mut dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError { ferment :: boxed (dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError { instant_lock_transaction_id , asset_lock_transaction_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError_get_instant_lock_transaction_id < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid { (* obj) . instant_lock_transaction_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError_get_asset_lock_transaction_id < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid { (* obj) . asset_lock_transaction_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError_set_instant_lock_transaction_id < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid { (* obj) . instant_lock_transaction_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError_set_asset_lock_transaction_id < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid { (* obj) . asset_lock_transaction_id } } pub mod data_contract_bounds_not_present_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DataContractBoundsNotPresentError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: data_contract_bounds_not_present_error :: DataContractBoundsNotPresentError > for dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError) -> dpp :: errors :: consensus :: basic :: identity :: data_contract_bounds_not_present_error :: DataContractBoundsNotPresentError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: data_contract_bounds_not_present_error :: DataContractBoundsNotPresentError { data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . data_contract_id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: data_contract_bounds_not_present_error :: DataContractBoundsNotPresentError > for dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: data_contract_bounds_not_present_error :: DataContractBoundsNotPresentError) -> * const dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError { ferment :: boxed (dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError { data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . data_contract_id) }) } } impl Drop for dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . data_contract_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError_ctor < > (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError { ferment :: boxed (dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError { data_contract_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError_get_data_contract_id < > (obj : * const dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError_set_data_contract_id < > (obj : * const dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } } pub mod invalid_instant_asset_lock_proof_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidInstantAssetLockProofError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError { pub message : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_error :: InvalidInstantAssetLockProofError > for dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_error :: InvalidInstantAssetLockProofError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_error :: InvalidInstantAssetLockProofError { message : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . message) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_error :: InvalidInstantAssetLockProofError > for dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_error :: InvalidInstantAssetLockProofError) -> * const dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError { message : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . message) }) } } impl Drop for dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError_ctor < > (message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError { message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError_get_message < > (obj : * const dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError_set_message < > (obj : * const dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError) -> * mut std :: os :: raw :: c_char { (* obj) . message } } pub mod invalid_identity_asset_lock_proof_chain_lock_validation_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidIdentityAssetLockProofChainLockValidationError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError { pub transaction_id : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid , pub height_reported_not_locked : u32 } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_proof_chain_lock_validation_error :: InvalidIdentityAssetLockProofChainLockValidationError > for dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_proof_chain_lock_validation_error :: InvalidIdentityAssetLockProofChainLockValidationError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_proof_chain_lock_validation_error :: InvalidIdentityAssetLockProofChainLockValidationError { transaction_id : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid as ferment :: FFIConversionFrom < dashcore :: hash_types :: Txid >> :: ffi_from (ffi_ref . transaction_id) , height_reported_not_locked : ffi_ref . height_reported_not_locked } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_proof_chain_lock_validation_error :: InvalidIdentityAssetLockProofChainLockValidationError > for dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_proof_chain_lock_validation_error :: InvalidIdentityAssetLockProofChainLockValidationError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError { transaction_id : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid as ferment :: FFIConversionTo < dashcore :: hash_types :: Txid >> :: ffi_to (obj . transaction_id) , height_reported_not_locked : obj . height_reported_not_locked }) } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . transaction_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError_ctor < > (transaction_id : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid , height_reported_not_locked : u32) -> * mut dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError { transaction_id , height_reported_not_locked }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError_get_transaction_id < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid { (* obj) . transaction_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError_get_height_reported_not_locked < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError) -> u32 { (* obj) . height_reported_not_locked } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError_set_transaction_id < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid { (* obj) . transaction_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError_set_height_reported_not_locked < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError) -> u32 { (* obj) . height_reported_not_locked } } pub mod invalid_identity_credit_withdrawal_transition_amount_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidIdentityCreditWithdrawalTransitionAmountError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError { pub amount : u64 , pub min_amount : u64 , pub max_amount : u64 } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_amount_error :: InvalidIdentityCreditWithdrawalTransitionAmountError > for dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_amount_error :: InvalidIdentityCreditWithdrawalTransitionAmountError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_amount_error :: InvalidIdentityCreditWithdrawalTransitionAmountError { amount : ffi_ref . amount , min_amount : ffi_ref . min_amount , max_amount : ffi_ref . max_amount } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_amount_error :: InvalidIdentityCreditWithdrawalTransitionAmountError > for dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_amount_error :: InvalidIdentityCreditWithdrawalTransitionAmountError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError { amount : obj . amount , min_amount : obj . min_amount , max_amount : obj . max_amount }) } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError_ctor < > (amount : u64 , min_amount : u64 , max_amount : u64) -> * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError { amount , min_amount , max_amount }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError_get_amount < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError) -> u64 { (* obj) . amount } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError_get_min_amount < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError) -> u64 { (* obj) . min_amount } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError_get_max_amount < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError) -> u64 { (* obj) . max_amount } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError_set_amount < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError) -> u64 { (* obj) . amount } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError_set_min_amount < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError) -> u64 { (* obj) . min_amount } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError_set_max_amount < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError) -> u64 { (* obj) . max_amount } } pub mod invalid_identity_key_signature_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidIdentityKeySignatureError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError { pub public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_key_signature_error :: InvalidIdentityKeySignatureError > for dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_key_signature_error :: InvalidIdentityKeySignatureError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_key_signature_error :: InvalidIdentityKeySignatureError { public_key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_from (ffi_ref . public_key_id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_key_signature_error :: InvalidIdentityKeySignatureError > for dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_key_signature_error :: InvalidIdentityKeySignatureError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError { public_key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_to (obj . public_key_id) }) } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . public_key_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError_ctor < > (public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError { public_key_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError_get_public_key_id < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError_set_public_key_id < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . public_key_id } } pub mod identity_asset_lock_transaction_output_not_found_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`IdentityAssetLockTransactionOutputNotFoundError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError { pub output_index : usize } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_output_not_found_error :: IdentityAssetLockTransactionOutputNotFoundError > for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError) -> dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_output_not_found_error :: IdentityAssetLockTransactionOutputNotFoundError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_output_not_found_error :: IdentityAssetLockTransactionOutputNotFoundError { output_index : ffi_ref . output_index } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_output_not_found_error :: IdentityAssetLockTransactionOutputNotFoundError > for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_output_not_found_error :: IdentityAssetLockTransactionOutputNotFoundError) -> * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError { ferment :: boxed (dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError { output_index : obj . output_index }) } } impl Drop for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError_ctor < > (output_index : usize) -> * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError { ferment :: boxed (dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError { output_index }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError_get_output_index < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError) -> usize { (* obj) . output_index } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError_set_output_index < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError) -> usize { (* obj) . output_index } } pub mod identity_asset_lock_transaction_out_point_not_enough_balance_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`IdentityAssetLockTransactionOutPointNotEnoughBalanceError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError { pub transaction_id : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid , pub output_index : usize , pub initial_asset_lock_credits : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits , pub credits_left : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits , pub credits_required : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_not_enough_balance_error :: IdentityAssetLockTransactionOutPointNotEnoughBalanceError > for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError) -> dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_not_enough_balance_error :: IdentityAssetLockTransactionOutPointNotEnoughBalanceError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_not_enough_balance_error :: IdentityAssetLockTransactionOutPointNotEnoughBalanceError { transaction_id : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid as ferment :: FFIConversionFrom < dashcore :: hash_types :: Txid >> :: ffi_from (ffi_ref . transaction_id) , output_index : ffi_ref . output_index , initial_asset_lock_credits : < crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits as ferment :: FFIConversionFrom < dpp :: balances :: credits :: Credits >> :: ffi_from (ffi_ref . initial_asset_lock_credits) , credits_left : < crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits as ferment :: FFIConversionFrom < dpp :: balances :: credits :: Credits >> :: ffi_from (ffi_ref . credits_left) , credits_required : < crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits as ferment :: FFIConversionFrom < dpp :: balances :: credits :: Credits >> :: ffi_from (ffi_ref . credits_required) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_not_enough_balance_error :: IdentityAssetLockTransactionOutPointNotEnoughBalanceError > for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_not_enough_balance_error :: IdentityAssetLockTransactionOutPointNotEnoughBalanceError) -> * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError { ferment :: boxed (dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError { transaction_id : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid as ferment :: FFIConversionTo < dashcore :: hash_types :: Txid >> :: ffi_to (obj . transaction_id) , output_index : obj . output_index , initial_asset_lock_credits : < crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits as ferment :: FFIConversionTo < dpp :: balances :: credits :: Credits >> :: ffi_to (obj . initial_asset_lock_credits) , credits_left : < crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits as ferment :: FFIConversionTo < dpp :: balances :: credits :: Credits >> :: ffi_to (obj . credits_left) , credits_required : < crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits as ferment :: FFIConversionTo < dpp :: balances :: credits :: Credits >> :: ffi_to (obj . credits_required) }) } } impl Drop for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . transaction_id) ; ; ferment :: unbox_any (ffi_ref . initial_asset_lock_credits) ; ferment :: unbox_any (ffi_ref . credits_left) ; ferment :: unbox_any (ffi_ref . credits_required) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError_ctor < > (transaction_id : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid , output_index : usize , initial_asset_lock_credits : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits , credits_left : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits , credits_required : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits) -> * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError { ferment :: boxed (dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError { transaction_id , output_index , initial_asset_lock_credits , credits_left , credits_required }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError_get_transaction_id < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid { (* obj) . transaction_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError_get_output_index < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError) -> usize { (* obj) . output_index } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError_get_initial_asset_lock_credits < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . initial_asset_lock_credits } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError_get_credits_left < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . credits_left } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError_get_credits_required < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . credits_required } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError_set_transaction_id < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid { (* obj) . transaction_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError_set_output_index < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError) -> usize { (* obj) . output_index } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError_set_initial_asset_lock_credits < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . initial_asset_lock_credits } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError_set_credits_left < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . credits_left } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError_set_credits_required < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError) -> * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits { (* obj) . credits_required } } pub mod too_many_master_public_key_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`TooManyMasterPublicKeyError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_too_many_master_public_key_error_TooManyMasterPublicKeyError { } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: too_many_master_public_key_error :: TooManyMasterPublicKeyError > for dpp_errors_consensus_basic_identity_too_many_master_public_key_error_TooManyMasterPublicKeyError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_too_many_master_public_key_error_TooManyMasterPublicKeyError) -> dpp :: errors :: consensus :: basic :: identity :: too_many_master_public_key_error :: TooManyMasterPublicKeyError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: too_many_master_public_key_error :: TooManyMasterPublicKeyError { } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: too_many_master_public_key_error :: TooManyMasterPublicKeyError > for dpp_errors_consensus_basic_identity_too_many_master_public_key_error_TooManyMasterPublicKeyError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: too_many_master_public_key_error :: TooManyMasterPublicKeyError) -> * const dpp_errors_consensus_basic_identity_too_many_master_public_key_error_TooManyMasterPublicKeyError { ferment :: boxed (dpp_errors_consensus_basic_identity_too_many_master_public_key_error_TooManyMasterPublicKeyError { }) } } impl Drop for dpp_errors_consensus_basic_identity_too_many_master_public_key_error_TooManyMasterPublicKeyError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_too_many_master_public_key_error_TooManyMasterPublicKeyError_ctor < > () -> * mut dpp_errors_consensus_basic_identity_too_many_master_public_key_error_TooManyMasterPublicKeyError { ferment :: boxed (dpp_errors_consensus_basic_identity_too_many_master_public_key_error_TooManyMasterPublicKeyError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_too_many_master_public_key_error_TooManyMasterPublicKeyError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_too_many_master_public_key_error_TooManyMasterPublicKeyError) { ferment :: unbox_any (ffi) ; } } pub mod invalid_instant_asset_lock_proof_signature_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidInstantAssetLockProofSignatureError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError { } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_signature_error :: InvalidInstantAssetLockProofSignatureError > for dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_signature_error :: InvalidInstantAssetLockProofSignatureError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_signature_error :: InvalidInstantAssetLockProofSignatureError { } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_signature_error :: InvalidInstantAssetLockProofSignatureError > for dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_signature_error :: InvalidInstantAssetLockProofSignatureError) -> * const dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError { }) } } impl Drop for dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError_ctor < > () -> * mut dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError) { ferment :: unbox_any (ffi) ; } } pub mod invalid_identity_update_transition_disable_keys_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidIdentityUpdateTransitionDisableKeysError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError { } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_disable_keys_error :: InvalidIdentityUpdateTransitionDisableKeysError > for dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_disable_keys_error :: InvalidIdentityUpdateTransitionDisableKeysError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_disable_keys_error :: InvalidIdentityUpdateTransitionDisableKeysError { } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_disable_keys_error :: InvalidIdentityUpdateTransitionDisableKeysError > for dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_disable_keys_error :: InvalidIdentityUpdateTransitionDisableKeysError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError { }) } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError_ctor < > () -> * mut dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError) { ferment :: unbox_any (ffi) ; } } pub mod invalid_identity_asset_lock_transaction_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidIdentityAssetLockTransactionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError { pub message : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_error :: InvalidIdentityAssetLockTransactionError > for dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_error :: InvalidIdentityAssetLockTransactionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_error :: InvalidIdentityAssetLockTransactionError { message : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . message) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_error :: InvalidIdentityAssetLockTransactionError > for dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_error :: InvalidIdentityAssetLockTransactionError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError { message : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . message) }) } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError_ctor < > (message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError { message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError_get_message < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError_set_message < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError) -> * mut std :: os :: raw :: c_char { (* obj) . message } } pub mod duplicated_identity_public_key_id_basic_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DuplicatedIdentityPublicKeyIdBasicError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError { pub duplicated_ids : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_id_basic_error :: DuplicatedIdentityPublicKeyIdBasicError > for dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError) -> dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_id_basic_error :: DuplicatedIdentityPublicKeyIdBasicError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_id_basic_error :: DuplicatedIdentityPublicKeyIdBasicError { duplicated_ids : < crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionFrom < Vec < dpp :: identity :: identity_public_key :: KeyID > >> :: ffi_from (ffi_ref . duplicated_ids) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_id_basic_error :: DuplicatedIdentityPublicKeyIdBasicError > for dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_id_basic_error :: DuplicatedIdentityPublicKeyIdBasicError) -> * const dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError { ferment :: boxed (dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError { duplicated_ids : < crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionTo < Vec < dpp :: identity :: identity_public_key :: KeyID > >> :: ffi_to (obj . duplicated_ids) }) } } impl Drop for dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . duplicated_ids) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError_ctor < > (duplicated_ids : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError { ferment :: boxed (dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError { duplicated_ids }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError_get_duplicated_ids < > (obj : * const dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError) -> * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID { (* obj) . duplicated_ids } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError_set_duplicated_ids < > (obj : * const dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError) -> * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID { (* obj) . duplicated_ids } } pub mod not_implemented_identity_credit_withdrawal_transition_pooling_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`NotImplementedIdentityCreditWithdrawalTransitionPoolingError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError { pub pooling : u8 } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: not_implemented_identity_credit_withdrawal_transition_pooling_error :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError > for dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError) -> dpp :: errors :: consensus :: basic :: identity :: not_implemented_identity_credit_withdrawal_transition_pooling_error :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: not_implemented_identity_credit_withdrawal_transition_pooling_error :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError { pooling : ffi_ref . pooling } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: not_implemented_identity_credit_withdrawal_transition_pooling_error :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError > for dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: not_implemented_identity_credit_withdrawal_transition_pooling_error :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError) -> * const dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError { ferment :: boxed (dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError { pooling : obj . pooling }) } } impl Drop for dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError_ctor < > (pooling : u8) -> * mut dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError { ferment :: boxed (dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError { pooling }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError_get_pooling < > (obj : * const dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError) -> u8 { (* obj) . pooling } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError_set_pooling < > (obj : * const dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError) -> u8 { (* obj) . pooling } } pub mod invalid_asset_lock_proof_core_chain_height_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidAssetLockProofCoreChainHeightError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError { pub proof_core_chain_locked_height : u32 , pub current_core_chain_locked_height : u32 } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_core_chain_height_error :: InvalidAssetLockProofCoreChainHeightError > for dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_core_chain_height_error :: InvalidAssetLockProofCoreChainHeightError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_core_chain_height_error :: InvalidAssetLockProofCoreChainHeightError { proof_core_chain_locked_height : ffi_ref . proof_core_chain_locked_height , current_core_chain_locked_height : ffi_ref . current_core_chain_locked_height } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_core_chain_height_error :: InvalidAssetLockProofCoreChainHeightError > for dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_core_chain_height_error :: InvalidAssetLockProofCoreChainHeightError) -> * const dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError { proof_core_chain_locked_height : obj . proof_core_chain_locked_height , current_core_chain_locked_height : obj . current_core_chain_locked_height }) } } impl Drop for dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError_ctor < > (proof_core_chain_locked_height : u32 , current_core_chain_locked_height : u32) -> * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError { proof_core_chain_locked_height , current_core_chain_locked_height }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError_get_proof_core_chain_locked_height < > (obj : * const dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError) -> u32 { (* obj) . proof_core_chain_locked_height } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError_get_current_core_chain_locked_height < > (obj : * const dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError) -> u32 { (* obj) . current_core_chain_locked_height } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError_set_proof_core_chain_locked_height < > (obj : * const dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError) -> u32 { (* obj) . proof_core_chain_locked_height } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError_set_current_core_chain_locked_height < > (obj : * const dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError) -> u32 { (* obj) . current_core_chain_locked_height } } pub mod invalid_identity_credit_withdrawal_transition_output_script_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidIdentityCreditWithdrawalTransitionOutputScriptError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError { pub output_script : * mut crate :: fermented :: types :: dpp :: identity :: core_script :: dpp_identity_core_script_CoreScript } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_output_script_error :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError > for dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_output_script_error :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_output_script_error :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError { output_script : < crate :: fermented :: types :: dpp :: identity :: core_script :: dpp_identity_core_script_CoreScript as ferment :: FFIConversionFrom < dpp :: identity :: core_script :: CoreScript >> :: ffi_from (ffi_ref . output_script) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_output_script_error :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError > for dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_output_script_error :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError { output_script : < crate :: fermented :: types :: dpp :: identity :: core_script :: dpp_identity_core_script_CoreScript as ferment :: FFIConversionTo < dpp :: identity :: core_script :: CoreScript >> :: ffi_to (obj . output_script) }) } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . output_script) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError_ctor < > (output_script : * mut crate :: fermented :: types :: dpp :: identity :: core_script :: dpp_identity_core_script_CoreScript) -> * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError { output_script }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError_get_output_script < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError) -> * mut crate :: fermented :: types :: dpp :: identity :: core_script :: dpp_identity_core_script_CoreScript { (* obj) . output_script } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError_set_output_script < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError) -> * mut crate :: fermented :: types :: dpp :: identity :: core_script :: dpp_identity_core_script_CoreScript { (* obj) . output_script } } pub mod withdrawal_output_script_not_allowed_when_signing_with_owner_key { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_withdrawal_output_script_not_allowed_when_signing_with_owner_key_WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError { pub output_script : * mut crate :: fermented :: types :: dpp :: identity :: core_script :: dpp_identity_core_script_CoreScript , pub key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: withdrawal_output_script_not_allowed_when_signing_with_owner_key :: WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError > for dpp_errors_consensus_basic_identity_withdrawal_output_script_not_allowed_when_signing_with_owner_key_WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_withdrawal_output_script_not_allowed_when_signing_with_owner_key_WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError) -> dpp :: errors :: consensus :: basic :: identity :: withdrawal_output_script_not_allowed_when_signing_with_owner_key :: WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: withdrawal_output_script_not_allowed_when_signing_with_owner_key :: WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError { output_script : < crate :: fermented :: types :: dpp :: identity :: core_script :: dpp_identity_core_script_CoreScript as ferment :: FFIConversionFrom < dpp :: identity :: core_script :: CoreScript >> :: ffi_from (ffi_ref . output_script) , key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_from (ffi_ref . key_id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: withdrawal_output_script_not_allowed_when_signing_with_owner_key :: WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError > for dpp_errors_consensus_basic_identity_withdrawal_output_script_not_allowed_when_signing_with_owner_key_WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: withdrawal_output_script_not_allowed_when_signing_with_owner_key :: WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError) -> * const dpp_errors_consensus_basic_identity_withdrawal_output_script_not_allowed_when_signing_with_owner_key_WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError { ferment :: boxed (dpp_errors_consensus_basic_identity_withdrawal_output_script_not_allowed_when_signing_with_owner_key_WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError { output_script : < crate :: fermented :: types :: dpp :: identity :: core_script :: dpp_identity_core_script_CoreScript as ferment :: FFIConversionTo < dpp :: identity :: core_script :: CoreScript >> :: ffi_to (obj . output_script) , key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_to (obj . key_id) }) } } impl Drop for dpp_errors_consensus_basic_identity_withdrawal_output_script_not_allowed_when_signing_with_owner_key_WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . output_script) ; ferment :: unbox_any (ffi_ref . key_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_withdrawal_output_script_not_allowed_when_signing_with_owner_key_WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError_ctor < > (output_script : * mut crate :: fermented :: types :: dpp :: identity :: core_script :: dpp_identity_core_script_CoreScript , key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_basic_identity_withdrawal_output_script_not_allowed_when_signing_with_owner_key_WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError { ferment :: boxed (dpp_errors_consensus_basic_identity_withdrawal_output_script_not_allowed_when_signing_with_owner_key_WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError { output_script , key_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_withdrawal_output_script_not_allowed_when_signing_with_owner_key_WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_withdrawal_output_script_not_allowed_when_signing_with_owner_key_WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_withdrawal_output_script_not_allowed_when_signing_with_owner_key_WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError_get_output_script < > (obj : * const dpp_errors_consensus_basic_identity_withdrawal_output_script_not_allowed_when_signing_with_owner_key_WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError) -> * mut crate :: fermented :: types :: dpp :: identity :: core_script :: dpp_identity_core_script_CoreScript { (* obj) . output_script } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_withdrawal_output_script_not_allowed_when_signing_with_owner_key_WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError_get_key_id < > (obj : * const dpp_errors_consensus_basic_identity_withdrawal_output_script_not_allowed_when_signing_with_owner_key_WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . key_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_withdrawal_output_script_not_allowed_when_signing_with_owner_key_WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError_set_output_script < > (obj : * const dpp_errors_consensus_basic_identity_withdrawal_output_script_not_allowed_when_signing_with_owner_key_WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError) -> * mut crate :: fermented :: types :: dpp :: identity :: core_script :: dpp_identity_core_script_CoreScript { (* obj) . output_script } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_withdrawal_output_script_not_allowed_when_signing_with_owner_key_WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError_set_key_id < > (obj : * const dpp_errors_consensus_basic_identity_withdrawal_output_script_not_allowed_when_signing_with_owner_key_WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . key_id } } pub mod identity_asset_lock_transaction_out_point_already_consumed_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`IdentityAssetLockTransactionOutPointAlreadyConsumedError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError { pub transaction_id : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid , pub output_index : usize } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_already_consumed_error :: IdentityAssetLockTransactionOutPointAlreadyConsumedError > for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError) -> dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_already_consumed_error :: IdentityAssetLockTransactionOutPointAlreadyConsumedError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_already_consumed_error :: IdentityAssetLockTransactionOutPointAlreadyConsumedError { transaction_id : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid as ferment :: FFIConversionFrom < dashcore :: hash_types :: Txid >> :: ffi_from (ffi_ref . transaction_id) , output_index : ffi_ref . output_index } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_already_consumed_error :: IdentityAssetLockTransactionOutPointAlreadyConsumedError > for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_already_consumed_error :: IdentityAssetLockTransactionOutPointAlreadyConsumedError) -> * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError { ferment :: boxed (dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError { transaction_id : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid as ferment :: FFIConversionTo < dashcore :: hash_types :: Txid >> :: ffi_to (obj . transaction_id) , output_index : obj . output_index }) } } impl Drop for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . transaction_id) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError_ctor < > (transaction_id : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid , output_index : usize) -> * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError { ferment :: boxed (dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError { transaction_id , output_index }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError_get_transaction_id < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid { (* obj) . transaction_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError_get_output_index < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError) -> usize { (* obj) . output_index } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError_set_transaction_id < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid { (* obj) . transaction_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError_set_output_index < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError) -> usize { (* obj) . output_index } } pub mod invalid_identity_public_key_data_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidIdentityPublicKeyDataError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError { pub public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub validation_error : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_data_error :: InvalidIdentityPublicKeyDataError > for dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_data_error :: InvalidIdentityPublicKeyDataError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_data_error :: InvalidIdentityPublicKeyDataError { public_key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_from (ffi_ref . public_key_id) , validation_error : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . validation_error) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_data_error :: InvalidIdentityPublicKeyDataError > for dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_data_error :: InvalidIdentityPublicKeyDataError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError { public_key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_to (obj . public_key_id) , validation_error : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . validation_error) }) } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . public_key_id) ; ferment :: unbox_string (ffi_ref . validation_error) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError_ctor < > (public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , validation_error : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError { public_key_id , validation_error }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError_get_public_key_id < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError_get_validation_error < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError) -> * mut std :: os :: raw :: c_char { (* obj) . validation_error } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError_set_public_key_id < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError_set_validation_error < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError) -> * mut std :: os :: raw :: c_char { (* obj) . validation_error } } pub mod invalid_asset_lock_transaction_output_return_size { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidAssetLockTransactionOutputReturnSizeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError { pub output_index : usize } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_transaction_output_return_size :: InvalidAssetLockTransactionOutputReturnSizeError > for dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_transaction_output_return_size :: InvalidAssetLockTransactionOutputReturnSizeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_transaction_output_return_size :: InvalidAssetLockTransactionOutputReturnSizeError { output_index : ffi_ref . output_index } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_transaction_output_return_size :: InvalidAssetLockTransactionOutputReturnSizeError > for dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_transaction_output_return_size :: InvalidAssetLockTransactionOutputReturnSizeError) -> * const dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError { output_index : obj . output_index }) } } impl Drop for dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError_ctor < > (output_index : usize) -> * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError { output_index }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError_get_output_index < > (obj : * const dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError) -> usize { (* obj) . output_index } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError_set_output_index < > (obj : * const dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError) -> usize { (* obj) . output_index } } pub mod identity_asset_lock_transaction_is_not_found_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`IdentityAssetLockTransactionIsNotFoundError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError { pub transaction_id : * mut crate :: fermented :: generics :: Arr_u8_32 } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_is_not_found_error :: IdentityAssetLockTransactionIsNotFoundError > for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError) -> dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_is_not_found_error :: IdentityAssetLockTransactionIsNotFoundError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_is_not_found_error :: IdentityAssetLockTransactionIsNotFoundError { transaction_id : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (ffi_ref . transaction_id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_is_not_found_error :: IdentityAssetLockTransactionIsNotFoundError > for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_is_not_found_error :: IdentityAssetLockTransactionIsNotFoundError) -> * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError { ferment :: boxed (dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError { transaction_id : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj . transaction_id) }) } } impl Drop for dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . transaction_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError_ctor < > (transaction_id : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError { ferment :: boxed (dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError { transaction_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError_get_transaction_id < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . transaction_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError_set_transaction_id < > (obj : * const dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . transaction_id } } pub mod invalid_identity_public_key_security_level_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidIdentityPublicKeySecurityLevelError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError { pub public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , pub security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , pub allowed_security_levels : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_security_level_error :: InvalidIdentityPublicKeySecurityLevelError > for dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_security_level_error :: InvalidIdentityPublicKeySecurityLevelError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_security_level_error :: InvalidIdentityPublicKeySecurityLevelError { public_key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_from (ffi_ref . public_key_id) , purpose : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: purpose :: Purpose >> :: ffi_from (ffi_ref . purpose) , security_level : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel >> :: ffi_from (ffi_ref . security_level) , allowed_security_levels : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . allowed_security_levels) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_security_level_error :: InvalidIdentityPublicKeySecurityLevelError > for dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_security_level_error :: InvalidIdentityPublicKeySecurityLevelError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError { public_key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_to (obj . public_key_id) , purpose : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: purpose :: Purpose >> :: ffi_to (obj . purpose) , security_level : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel >> :: ffi_to (obj . security_level) , allowed_security_levels : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . allowed_security_levels) }) } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . public_key_id) ; ferment :: unbox_any (ffi_ref . purpose) ; ferment :: unbox_any (ffi_ref . security_level) ; ferment :: unbox_string (ffi_ref . allowed_security_levels) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError_ctor < > (public_key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , allowed_security_levels : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError { public_key_id , purpose , security_level , allowed_security_levels }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError_get_public_key_id < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError_get_purpose < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose { (* obj) . purpose } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError_get_security_level < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . security_level } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError_get_allowed_security_levels < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError) -> * mut std :: os :: raw :: c_char { (* obj) . allowed_security_levels } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError_set_public_key_id < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . public_key_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError_set_purpose < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose { (* obj) . purpose } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError_set_security_level < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . security_level } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError_set_allowed_security_levels < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError) -> * mut std :: os :: raw :: c_char { (* obj) . allowed_security_levels } } pub mod disabling_key_id_also_being_added_in_same_transition_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DisablingKeyIdAlsoBeingAddedInSameTransitionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError { pub key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: disabling_key_id_also_being_added_in_same_transition_error :: DisablingKeyIdAlsoBeingAddedInSameTransitionError > for dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError) -> dpp :: errors :: consensus :: basic :: identity :: disabling_key_id_also_being_added_in_same_transition_error :: DisablingKeyIdAlsoBeingAddedInSameTransitionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: disabling_key_id_also_being_added_in_same_transition_error :: DisablingKeyIdAlsoBeingAddedInSameTransitionError { key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_from (ffi_ref . key_id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: disabling_key_id_also_being_added_in_same_transition_error :: DisablingKeyIdAlsoBeingAddedInSameTransitionError > for dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: disabling_key_id_also_being_added_in_same_transition_error :: DisablingKeyIdAlsoBeingAddedInSameTransitionError) -> * const dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError { ferment :: boxed (dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError { key_id : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_to (obj . key_id) }) } } impl Drop for dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . key_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError_ctor < > (key_id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError { ferment :: boxed (dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError { key_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError_get_key_id < > (obj : * const dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . key_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError_set_key_id < > (obj : * const dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . key_id } } pub mod missing_master_public_key_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`MissingMasterPublicKeyError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError { } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: missing_master_public_key_error :: MissingMasterPublicKeyError > for dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError) -> dpp :: errors :: consensus :: basic :: identity :: missing_master_public_key_error :: MissingMasterPublicKeyError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: missing_master_public_key_error :: MissingMasterPublicKeyError { } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: missing_master_public_key_error :: MissingMasterPublicKeyError > for dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: missing_master_public_key_error :: MissingMasterPublicKeyError) -> * const dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError { ferment :: boxed (dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError { }) } } impl Drop for dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError_ctor < > () -> * mut dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError { ferment :: boxed (dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError) { ferment :: unbox_any (ffi) ; } } pub mod invalid_asset_lock_proof_transaction_height_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidAssetLockProofTransactionHeightError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError { pub proof_core_chain_locked_height : u32 , pub transaction_height : * mut u32 } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_transaction_height_error :: InvalidAssetLockProofTransactionHeightError > for dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_transaction_height_error :: InvalidAssetLockProofTransactionHeightError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_transaction_height_error :: InvalidAssetLockProofTransactionHeightError { proof_core_chain_locked_height : ffi_ref . proof_core_chain_locked_height , transaction_height : ferment :: from_opt_primitive (ffi_ref . transaction_height) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_transaction_height_error :: InvalidAssetLockProofTransactionHeightError > for dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_transaction_height_error :: InvalidAssetLockProofTransactionHeightError) -> * const dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError { proof_core_chain_locked_height : obj . proof_core_chain_locked_height , transaction_height : ferment :: to_opt_primitive (obj . transaction_height) }) } } impl Drop for dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment :: destroy_opt_primitive (ffi_ref . transaction_height) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError_ctor < > (proof_core_chain_locked_height : u32 , transaction_height : * mut u32) -> * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError { proof_core_chain_locked_height , transaction_height }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError_get_proof_core_chain_locked_height < > (obj : * const dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError) -> u32 { (* obj) . proof_core_chain_locked_height } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError_get_transaction_height < > (obj : * const dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError) -> * mut u32 { (* obj) . transaction_height } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError_set_proof_core_chain_locked_height < > (obj : * const dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError) -> u32 { (* obj) . proof_core_chain_locked_height } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError_set_transaction_height < > (obj : * const dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError) -> * mut u32 { (* obj) . transaction_height } } pub mod invalid_identity_credit_transfer_amount_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidIdentityCreditTransferAmountError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError { pub amount : u64 , pub min_amount : u64 } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_transfer_amount_error :: InvalidIdentityCreditTransferAmountError > for dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError) -> dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_transfer_amount_error :: InvalidIdentityCreditTransferAmountError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_transfer_amount_error :: InvalidIdentityCreditTransferAmountError { amount : ffi_ref . amount , min_amount : ffi_ref . min_amount } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_transfer_amount_error :: InvalidIdentityCreditTransferAmountError > for dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_transfer_amount_error :: InvalidIdentityCreditTransferAmountError) -> * const dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError { amount : obj . amount , min_amount : obj . min_amount }) } } impl Drop for dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError_ctor < > (amount : u64 , min_amount : u64) -> * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError { ferment :: boxed (dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError { amount , min_amount }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError_destroy < > (ffi : * mut dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError_get_amount < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError) -> u64 { (* obj) . amount } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError_get_min_amount < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError) -> u64 { (* obj) . min_amount } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError_set_amount < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError) -> u64 { (* obj) . amount } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError_set_min_amount < > (obj : * const dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError) -> u64 { (* obj) . min_amount } } } # [cfg (feature = "json-schema-validation")] pub mod json_schema_error { use crate as dash_spv_apple_bindings ; pub mod json_schema_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`JsonSchemaError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError { pub error_summary : * mut std :: os :: raw :: c_char , pub keyword : * mut std :: os :: raw :: c_char , pub instance_path : * mut std :: os :: raw :: c_char , pub schema_path : * mut std :: os :: raw :: c_char , pub params : * mut crate :: fermented :: types :: platform_value :: platform_value_Value , pub property_name : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error :: JsonSchemaError > for dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) -> dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error :: JsonSchemaError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error :: JsonSchemaError { error_summary : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . error_summary) , keyword : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . keyword) , instance_path : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . instance_path) , schema_path : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . schema_path) , params : < crate :: fermented :: types :: platform_value :: platform_value_Value as ferment :: FFIConversionFrom < platform_value :: Value >> :: ffi_from (ffi_ref . params) , property_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . property_name) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error :: JsonSchemaError > for dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error :: JsonSchemaError) -> * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError { ferment :: boxed (dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError { error_summary : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . error_summary) , keyword : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . keyword) , instance_path : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . instance_path) , schema_path : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . schema_path) , params : < crate :: fermented :: types :: platform_value :: platform_value_Value as ferment :: FFIConversionTo < platform_value :: Value >> :: ffi_to (obj . params) , property_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . property_name) }) } } impl Drop for dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . error_summary) ; ferment :: unbox_string (ffi_ref . keyword) ; ferment :: unbox_string (ffi_ref . instance_path) ; ferment :: unbox_string (ffi_ref . schema_path) ; ferment :: unbox_any (ffi_ref . params) ; ferment :: unbox_string (ffi_ref . property_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_ctor < > (error_summary : * mut std :: os :: raw :: c_char , keyword : * mut std :: os :: raw :: c_char , instance_path : * mut std :: os :: raw :: c_char , schema_path : * mut std :: os :: raw :: c_char , params : * mut crate :: fermented :: types :: platform_value :: platform_value_Value , property_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError { ferment :: boxed (dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError { error_summary , keyword , instance_path , schema_path , params , property_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_destroy < > (ffi : * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_get_error_summary < > (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . error_summary } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_get_keyword < > (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . keyword } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_get_instance_path < > (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . instance_path } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_get_schema_path < > (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . schema_path } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_get_params < > (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) -> * mut crate :: fermented :: types :: platform_value :: platform_value_Value { (* obj) . params } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_get_property_name < > (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . property_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_set_error_summary < > (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . error_summary } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_set_keyword < > (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . keyword } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_set_instance_path < > (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . instance_path } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_set_schema_path < > (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . schema_path } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_set_params < > (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) -> * mut crate :: fermented :: types :: platform_value :: platform_value_Value { (* obj) . params } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError_set_property_name < > (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . property_name } } pub mod json_schema_error_data { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`JsonSchemaErrorData`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData { pub keyword : * mut std :: os :: raw :: c_char , pub params : * mut serde_json :: Map < String , serde_json :: Value > , pub property_name : * mut std :: os :: raw :: c_char , pub error_message : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error_data :: JsonSchemaErrorData > for dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData) -> dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error_data :: JsonSchemaErrorData { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error_data :: JsonSchemaErrorData { keyword : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . keyword) , params : (& * ffi_ref . params) . clone () , property_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . property_name) , error_message : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . error_message) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error_data :: JsonSchemaErrorData > for dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error_data :: JsonSchemaErrorData) -> * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData { ferment :: boxed (dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData { keyword : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . keyword) , params : ferment :: boxed (obj . params) , property_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . property_name) , error_message : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . error_message) }) } } impl Drop for dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . keyword) ; ferment :: unbox_any (ffi_ref . params) ; ferment :: unbox_string (ffi_ref . property_name) ; ferment :: unbox_string (ffi_ref . error_message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData_ctor < > (keyword : * mut std :: os :: raw :: c_char , params : * mut serde_json :: Map < String , serde_json :: Value > , property_name : * mut std :: os :: raw :: c_char , error_message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData { ferment :: boxed (dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData { keyword , params , property_name , error_message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData_destroy < > (ffi : * mut dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData_get_keyword < > (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData) -> * mut std :: os :: raw :: c_char { (* obj) . keyword } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData_get_params < > (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData) -> * mut serde_json :: Map < String , serde_json :: Value > { (* obj) . params } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData_get_property_name < > (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData) -> * mut std :: os :: raw :: c_char { (* obj) . property_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData_get_error_message < > (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData) -> * mut std :: os :: raw :: c_char { (* obj) . error_message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData_set_keyword < > (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData) -> * mut std :: os :: raw :: c_char { (* obj) . keyword } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData_set_params < > (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData) -> * mut serde_json :: Map < String , serde_json :: Value > { (* obj) . params } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData_set_property_name < > (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData) -> * mut std :: os :: raw :: c_char { (* obj) . property_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData_set_error_message < > (obj : * const dpp_errors_consensus_basic_json_schema_error_json_schema_error_data_JsonSchemaErrorData) -> * mut std :: os :: raw :: c_char { (* obj) . error_message } } } pub mod incompatible_protocol_version_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`IncompatibleProtocolVersionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError { pub parsed_protocol_version : u32 , pub minimal_protocol_version : u32 } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: incompatible_protocol_version_error :: IncompatibleProtocolVersionError > for dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError) -> dpp :: errors :: consensus :: basic :: incompatible_protocol_version_error :: IncompatibleProtocolVersionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: incompatible_protocol_version_error :: IncompatibleProtocolVersionError { parsed_protocol_version : ffi_ref . parsed_protocol_version , minimal_protocol_version : ffi_ref . minimal_protocol_version } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: incompatible_protocol_version_error :: IncompatibleProtocolVersionError > for dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: incompatible_protocol_version_error :: IncompatibleProtocolVersionError) -> * const dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError { ferment :: boxed (dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError { parsed_protocol_version : obj . parsed_protocol_version , minimal_protocol_version : obj . minimal_protocol_version }) } } impl Drop for dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError_ctor < > (parsed_protocol_version : u32 , minimal_protocol_version : u32) -> * mut dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError { ferment :: boxed (dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError { parsed_protocol_version , minimal_protocol_version }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError_destroy < > (ffi : * mut dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError_get_parsed_protocol_version < > (obj : * const dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError) -> u32 { (* obj) . parsed_protocol_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError_get_minimal_protocol_version < > (obj : * const dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError) -> u32 { (* obj) . minimal_protocol_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError_set_parsed_protocol_version < > (obj : * const dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError) -> u32 { (* obj) . parsed_protocol_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError_set_minimal_protocol_version < > (obj : * const dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError) -> u32 { (* obj) . minimal_protocol_version } } pub mod data_contract { use crate as dash_spv_apple_bindings ; pub mod invalid_document_type_required_security_level { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidDocumentTypeRequiredSecurityLevelError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError { pub security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , pub contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub document_type_name : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_required_security_level :: InvalidDocumentTypeRequiredSecurityLevelError > for dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError) -> dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_required_security_level :: InvalidDocumentTypeRequiredSecurityLevelError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_required_security_level :: InvalidDocumentTypeRequiredSecurityLevelError { security_level : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel >> :: ffi_from (ffi_ref . security_level) , contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . contract_id) , document_type_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . document_type_name) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_required_security_level :: InvalidDocumentTypeRequiredSecurityLevelError > for dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_required_security_level :: InvalidDocumentTypeRequiredSecurityLevelError) -> * const dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError { security_level : < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel >> :: ffi_to (obj . security_level) , contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . contract_id) , document_type_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . document_type_name) }) } } impl Drop for dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . security_level) ; ferment :: unbox_any (ffi_ref . contract_id) ; ferment :: unbox_string (ffi_ref . document_type_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError_ctor < > (security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_type_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError { security_level , contract_id , document_type_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError_get_security_level < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . security_level } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError_get_contract_id < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError_get_document_type_name < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError_set_security_level < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . security_level } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError_set_contract_id < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError_set_document_type_name < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type_name } } pub mod invalid_document_type_name_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidDocumentTypeNameError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError { pub name : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_name_error :: InvalidDocumentTypeNameError > for dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError) -> dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_name_error :: InvalidDocumentTypeNameError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_name_error :: InvalidDocumentTypeNameError { name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . name) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_name_error :: InvalidDocumentTypeNameError > for dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_name_error :: InvalidDocumentTypeNameError) -> * const dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError { name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . name) }) } } impl Drop for dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError_ctor < > (name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError { name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError_get_name < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError) -> * mut std :: os :: raw :: c_char { (* obj) . name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError_set_name < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError) -> * mut std :: os :: raw :: c_char { (* obj) . name } } pub mod unknown_storage_key_requirements_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`UnknownStorageKeyRequirementsError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError { pub allowed_values : * mut crate :: fermented :: generics :: Vec_u8 , pub received : * mut [u8 ; 16] } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: unknown_storage_key_requirements_error :: UnknownStorageKeyRequirementsError > for dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError) -> dpp :: errors :: consensus :: basic :: data_contract :: unknown_storage_key_requirements_error :: UnknownStorageKeyRequirementsError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: unknown_storage_key_requirements_error :: UnknownStorageKeyRequirementsError { allowed_values : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (ffi_ref . allowed_values) , received : < [u8 ; 16] as ferment :: FFIConversionFrom < i128 >> :: ffi_from (ffi_ref . received) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: unknown_storage_key_requirements_error :: UnknownStorageKeyRequirementsError > for dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: unknown_storage_key_requirements_error :: UnknownStorageKeyRequirementsError) -> * const dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError { allowed_values : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj . allowed_values) , received : < [u8 ; 16] as ferment :: FFIConversionTo < i128 >> :: ffi_to (obj . received) }) } } impl Drop for dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . allowed_values) ; ferment :: unbox_any_opt (ffi_ref . received) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError_ctor < > (allowed_values : * mut crate :: fermented :: generics :: Vec_u8 , received : * mut [u8 ; 16]) -> * mut dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError { allowed_values , received }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError_get_allowed_values < > (obj : * const dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . allowed_values } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError_get_received < > (obj : * const dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError) -> * mut [u8 ; 16] { (* obj) . received } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError_set_allowed_values < > (obj : * const dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . allowed_values } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError_set_received < > (obj : * const dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError) -> * mut [u8 ; 16] { (* obj) . received } } pub mod data_contract_invalid_index_definition_update_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DataContractInvalidIndexDefinitionUpdateError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError { pub document_type : * mut std :: os :: raw :: c_char , pub index_path : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_invalid_index_definition_update_error :: DataContractInvalidIndexDefinitionUpdateError > for dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError) -> dpp :: errors :: consensus :: basic :: data_contract :: data_contract_invalid_index_definition_update_error :: DataContractInvalidIndexDefinitionUpdateError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: data_contract_invalid_index_definition_update_error :: DataContractInvalidIndexDefinitionUpdateError { document_type : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . document_type) , index_path : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . index_path) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_invalid_index_definition_update_error :: DataContractInvalidIndexDefinitionUpdateError > for dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: data_contract_invalid_index_definition_update_error :: DataContractInvalidIndexDefinitionUpdateError) -> * const dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError { document_type : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . document_type) , index_path : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . index_path) }) } } impl Drop for dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . document_type) ; ferment :: unbox_string (ffi_ref . index_path) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError_ctor < > (document_type : * mut std :: os :: raw :: c_char , index_path : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError { document_type , index_path }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError_get_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError_get_index_path < > (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError) -> * mut std :: os :: raw :: c_char { (* obj) . index_path } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError_set_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError_set_index_path < > (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError) -> * mut std :: os :: raw :: c_char { (* obj) . index_path } } pub mod data_contract_have_new_unique_index_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DataContractHaveNewUniqueIndexError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError { pub document_type : * mut std :: os :: raw :: c_char , pub index_name : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_have_new_unique_index_error :: DataContractHaveNewUniqueIndexError > for dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError) -> dpp :: errors :: consensus :: basic :: data_contract :: data_contract_have_new_unique_index_error :: DataContractHaveNewUniqueIndexError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: data_contract_have_new_unique_index_error :: DataContractHaveNewUniqueIndexError { document_type : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . document_type) , index_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . index_name) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_have_new_unique_index_error :: DataContractHaveNewUniqueIndexError > for dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: data_contract_have_new_unique_index_error :: DataContractHaveNewUniqueIndexError) -> * const dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError { document_type : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . document_type) , index_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . index_name) }) } } impl Drop for dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . document_type) ; ferment :: unbox_string (ffi_ref . index_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError_ctor < > (document_type : * mut std :: os :: raw :: c_char , index_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError { document_type , index_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError_get_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError_get_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError_set_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError_set_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } } # [cfg (feature = "json-schema-validation")] pub mod invalid_json_schema_ref_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidJsonSchemaRefError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError { pub message : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: invalid_json_schema_ref_error :: InvalidJsonSchemaRefError > for dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError) -> dpp :: errors :: consensus :: basic :: data_contract :: invalid_json_schema_ref_error :: InvalidJsonSchemaRefError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: invalid_json_schema_ref_error :: InvalidJsonSchemaRefError { message : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . message) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: invalid_json_schema_ref_error :: InvalidJsonSchemaRefError > for dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: invalid_json_schema_ref_error :: InvalidJsonSchemaRefError) -> * const dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError { message : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . message) }) } } impl Drop for dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError_ctor < > (message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError { message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError_get_message < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError_set_message < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError) -> * mut std :: os :: raw :: c_char { (* obj) . message } } pub mod invalid_data_contract_version_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidDataContractVersionError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError { pub expected_version : u32 , pub version : u32 } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_version_error :: InvalidDataContractVersionError > for dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError) -> dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_version_error :: InvalidDataContractVersionError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_version_error :: InvalidDataContractVersionError { expected_version : ffi_ref . expected_version , version : ffi_ref . version } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_version_error :: InvalidDataContractVersionError > for dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_version_error :: InvalidDataContractVersionError) -> * const dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError { expected_version : obj . expected_version , version : obj . version }) } } impl Drop for dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError_ctor < > (expected_version : u32 , version : u32) -> * mut dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError { expected_version , version }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError_get_expected_version < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError) -> u32 { (* obj) . expected_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError_get_version < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError) -> u32 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError_set_expected_version < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError) -> u32 { (* obj) . expected_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError_set_version < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError) -> u32 { (* obj) . version } } pub mod data_contract_unique_indices_changed_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DataContractUniqueIndicesChangedError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError { pub document_type : * mut std :: os :: raw :: c_char , pub index_name : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_unique_indices_changed_error :: DataContractUniqueIndicesChangedError > for dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError) -> dpp :: errors :: consensus :: basic :: data_contract :: data_contract_unique_indices_changed_error :: DataContractUniqueIndicesChangedError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: data_contract_unique_indices_changed_error :: DataContractUniqueIndicesChangedError { document_type : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . document_type) , index_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . index_name) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_unique_indices_changed_error :: DataContractUniqueIndicesChangedError > for dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: data_contract_unique_indices_changed_error :: DataContractUniqueIndicesChangedError) -> * const dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError { document_type : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . document_type) , index_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . index_name) }) } } impl Drop for dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . document_type) ; ferment :: unbox_string (ffi_ref . index_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError_ctor < > (document_type : * mut std :: os :: raw :: c_char , index_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError { document_type , index_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError_get_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError_get_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError_set_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError_set_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } } pub mod system_property_index_already_present_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`SystemPropertyIndexAlreadyPresentError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError { pub document_type : * mut std :: os :: raw :: c_char , pub index_name : * mut std :: os :: raw :: c_char , pub property_name : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: system_property_index_already_present_error :: SystemPropertyIndexAlreadyPresentError > for dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError) -> dpp :: errors :: consensus :: basic :: data_contract :: system_property_index_already_present_error :: SystemPropertyIndexAlreadyPresentError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: system_property_index_already_present_error :: SystemPropertyIndexAlreadyPresentError { document_type : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . document_type) , index_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . index_name) , property_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . property_name) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: system_property_index_already_present_error :: SystemPropertyIndexAlreadyPresentError > for dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: system_property_index_already_present_error :: SystemPropertyIndexAlreadyPresentError) -> * const dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError { document_type : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . document_type) , index_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . index_name) , property_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . property_name) }) } } impl Drop for dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . document_type) ; ferment :: unbox_string (ffi_ref . index_name) ; ferment :: unbox_string (ffi_ref . property_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError_ctor < > (document_type : * mut std :: os :: raw :: c_char , index_name : * mut std :: os :: raw :: c_char , property_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError { document_type , index_name , property_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError_get_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError_get_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError_get_property_name < > (obj : * const dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError) -> * mut std :: os :: raw :: c_char { (* obj) . property_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError_set_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError_set_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError_set_property_name < > (obj : * const dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError) -> * mut std :: os :: raw :: c_char { (* obj) . property_name } } pub mod unknown_transferable_type_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`UnknownTransferableTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError { pub allowed_values : * mut crate :: fermented :: generics :: Vec_u8 , pub received : u8 } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: unknown_transferable_type_error :: UnknownTransferableTypeError > for dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError) -> dpp :: errors :: consensus :: basic :: data_contract :: unknown_transferable_type_error :: UnknownTransferableTypeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: unknown_transferable_type_error :: UnknownTransferableTypeError { allowed_values : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (ffi_ref . allowed_values) , received : ffi_ref . received } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: unknown_transferable_type_error :: UnknownTransferableTypeError > for dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: unknown_transferable_type_error :: UnknownTransferableTypeError) -> * const dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError { allowed_values : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj . allowed_values) , received : obj . received }) } } impl Drop for dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . allowed_values) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError_ctor < > (allowed_values : * mut crate :: fermented :: generics :: Vec_u8 , received : u8) -> * mut dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError { allowed_values , received }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError_get_allowed_values < > (obj : * const dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . allowed_values } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError_get_received < > (obj : * const dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError) -> u8 { (* obj) . received } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError_set_allowed_values < > (obj : * const dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . allowed_values } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError_set_received < > (obj : * const dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError) -> u8 { (* obj) . received } } pub mod duplicate_index_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DuplicateIndexError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError { pub document_type : * mut std :: os :: raw :: c_char , pub index_name : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_error :: DuplicateIndexError > for dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError) -> dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_error :: DuplicateIndexError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_error :: DuplicateIndexError { document_type : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . document_type) , index_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . index_name) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_error :: DuplicateIndexError > for dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_error :: DuplicateIndexError) -> * const dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError { document_type : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . document_type) , index_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . index_name) }) } } impl Drop for dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . document_type) ; ferment :: unbox_string (ffi_ref . index_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError_ctor < > (document_type : * mut std :: os :: raw :: c_char , index_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError { document_type , index_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError_get_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError_get_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError_set_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError_set_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } } pub mod invalid_indexed_property_constraint_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidIndexedPropertyConstraintError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError { pub document_type : * mut std :: os :: raw :: c_char , pub index_name : * mut std :: os :: raw :: c_char , pub property_name : * mut std :: os :: raw :: c_char , pub constraint_name : * mut std :: os :: raw :: c_char , pub reason : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: invalid_indexed_property_constraint_error :: InvalidIndexedPropertyConstraintError > for dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) -> dpp :: errors :: consensus :: basic :: data_contract :: invalid_indexed_property_constraint_error :: InvalidIndexedPropertyConstraintError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: invalid_indexed_property_constraint_error :: InvalidIndexedPropertyConstraintError { document_type : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . document_type) , index_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . index_name) , property_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . property_name) , constraint_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . constraint_name) , reason : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . reason) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: invalid_indexed_property_constraint_error :: InvalidIndexedPropertyConstraintError > for dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: invalid_indexed_property_constraint_error :: InvalidIndexedPropertyConstraintError) -> * const dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError { document_type : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . document_type) , index_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . index_name) , property_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . property_name) , constraint_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . constraint_name) , reason : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . reason) }) } } impl Drop for dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . document_type) ; ferment :: unbox_string (ffi_ref . index_name) ; ferment :: unbox_string (ffi_ref . property_name) ; ferment :: unbox_string (ffi_ref . constraint_name) ; ferment :: unbox_string (ffi_ref . reason) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_ctor < > (document_type : * mut std :: os :: raw :: c_char , index_name : * mut std :: os :: raw :: c_char , property_name : * mut std :: os :: raw :: c_char , constraint_name : * mut std :: os :: raw :: c_char , reason : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError { document_type , index_name , property_name , constraint_name , reason }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_get_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_get_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_get_property_name < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) -> * mut std :: os :: raw :: c_char { (* obj) . property_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_get_constraint_name < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) -> * mut std :: os :: raw :: c_char { (* obj) . constraint_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_get_reason < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) -> * mut std :: os :: raw :: c_char { (* obj) . reason } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_set_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_set_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_set_property_name < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) -> * mut std :: os :: raw :: c_char { (* obj) . property_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_set_constraint_name < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) -> * mut std :: os :: raw :: c_char { (* obj) . constraint_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError_set_reason < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) -> * mut std :: os :: raw :: c_char { (* obj) . reason } } pub mod document_types_are_missing_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DocumentTypesAreMissingError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: document_types_are_missing_error :: DocumentTypesAreMissingError > for dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError) -> dpp :: errors :: consensus :: basic :: data_contract :: document_types_are_missing_error :: DocumentTypesAreMissingError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: document_types_are_missing_error :: DocumentTypesAreMissingError { data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . data_contract_id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: document_types_are_missing_error :: DocumentTypesAreMissingError > for dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: document_types_are_missing_error :: DocumentTypesAreMissingError) -> * const dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError { data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . data_contract_id) }) } } impl Drop for dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . data_contract_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError_ctor < > (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError { data_contract_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError_get_data_contract_id < > (obj : * const dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError_set_data_contract_id < > (obj : * const dpp_errors_consensus_basic_data_contract_document_types_are_missing_error_DocumentTypesAreMissingError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } } pub mod invalid_data_contract_id_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidDataContractIdError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError { pub expected_id : * mut crate :: fermented :: generics :: Vec_u8 , pub invalid_id : * mut crate :: fermented :: generics :: Vec_u8 } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_id_error :: InvalidDataContractIdError > for dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError) -> dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_id_error :: InvalidDataContractIdError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_id_error :: InvalidDataContractIdError { expected_id : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (ffi_ref . expected_id) , invalid_id : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (ffi_ref . invalid_id) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_id_error :: InvalidDataContractIdError > for dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_id_error :: InvalidDataContractIdError) -> * const dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError { expected_id : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj . expected_id) , invalid_id : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj . invalid_id) }) } } impl Drop for dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . expected_id) ; ferment :: unbox_any (ffi_ref . invalid_id) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError_ctor < > (expected_id : * mut crate :: fermented :: generics :: Vec_u8 , invalid_id : * mut crate :: fermented :: generics :: Vec_u8) -> * mut dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError { expected_id , invalid_id }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError_get_expected_id < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . expected_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError_get_invalid_id < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . invalid_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError_set_expected_id < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . expected_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError_set_invalid_id < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . invalid_id } } pub mod unknown_document_creation_restriction_mode_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`UnknownDocumentCreationRestrictionModeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError { pub allowed_values : * mut crate :: fermented :: generics :: Vec_u8 , pub received : u8 } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: unknown_document_creation_restriction_mode_error :: UnknownDocumentCreationRestrictionModeError > for dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError) -> dpp :: errors :: consensus :: basic :: data_contract :: unknown_document_creation_restriction_mode_error :: UnknownDocumentCreationRestrictionModeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: unknown_document_creation_restriction_mode_error :: UnknownDocumentCreationRestrictionModeError { allowed_values : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (ffi_ref . allowed_values) , received : ffi_ref . received } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: unknown_document_creation_restriction_mode_error :: UnknownDocumentCreationRestrictionModeError > for dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: unknown_document_creation_restriction_mode_error :: UnknownDocumentCreationRestrictionModeError) -> * const dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError { allowed_values : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj . allowed_values) , received : obj . received }) } } impl Drop for dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . allowed_values) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError_ctor < > (allowed_values : * mut crate :: fermented :: generics :: Vec_u8 , received : u8) -> * mut dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError { allowed_values , received }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError_get_allowed_values < > (obj : * const dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . allowed_values } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError_get_received < > (obj : * const dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError) -> u8 { (* obj) . received } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError_set_allowed_values < > (obj : * const dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . allowed_values } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError_set_received < > (obj : * const dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError) -> u8 { (* obj) . received } } pub mod invalid_compound_index_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidCompoundIndexError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError { pub document_type : * mut std :: os :: raw :: c_char , pub index_name : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: invalid_compound_index_error :: InvalidCompoundIndexError > for dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError) -> dpp :: errors :: consensus :: basic :: data_contract :: invalid_compound_index_error :: InvalidCompoundIndexError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: invalid_compound_index_error :: InvalidCompoundIndexError { document_type : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . document_type) , index_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . index_name) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: invalid_compound_index_error :: InvalidCompoundIndexError > for dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: invalid_compound_index_error :: InvalidCompoundIndexError) -> * const dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError { document_type : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . document_type) , index_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . index_name) }) } } impl Drop for dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . document_type) ; ferment :: unbox_string (ffi_ref . index_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError_ctor < > (document_type : * mut std :: os :: raw :: c_char , index_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError { document_type , index_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError_get_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError_get_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError_set_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError_set_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } } pub mod duplicate_index_name_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DuplicateIndexNameError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError { pub document_type : * mut std :: os :: raw :: c_char , pub duplicate_index_name : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_name_error :: DuplicateIndexNameError > for dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError) -> dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_name_error :: DuplicateIndexNameError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_name_error :: DuplicateIndexNameError { document_type : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . document_type) , duplicate_index_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . duplicate_index_name) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_name_error :: DuplicateIndexNameError > for dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_name_error :: DuplicateIndexNameError) -> * const dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError { document_type : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . document_type) , duplicate_index_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . duplicate_index_name) }) } } impl Drop for dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . document_type) ; ferment :: unbox_string (ffi_ref . duplicate_index_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError_ctor < > (document_type : * mut std :: os :: raw :: c_char , duplicate_index_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError { document_type , duplicate_index_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError_get_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError_get_duplicate_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError) -> * mut std :: os :: raw :: c_char { (* obj) . duplicate_index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError_set_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError_set_duplicate_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError) -> * mut std :: os :: raw :: c_char { (* obj) . duplicate_index_name } } pub mod unique_indices_limit_reached_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`UniqueIndicesLimitReachedError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError { pub document_type : * mut std :: os :: raw :: c_char , pub index_limit : u16 , pub is_contested_limit : bool } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: unique_indices_limit_reached_error :: UniqueIndicesLimitReachedError > for dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError) -> dpp :: errors :: consensus :: basic :: data_contract :: unique_indices_limit_reached_error :: UniqueIndicesLimitReachedError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: unique_indices_limit_reached_error :: UniqueIndicesLimitReachedError { document_type : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . document_type) , index_limit : ffi_ref . index_limit , is_contested_limit : ffi_ref . is_contested_limit } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: unique_indices_limit_reached_error :: UniqueIndicesLimitReachedError > for dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: unique_indices_limit_reached_error :: UniqueIndicesLimitReachedError) -> * const dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError { document_type : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . document_type) , index_limit : obj . index_limit , is_contested_limit : obj . is_contested_limit }) } } impl Drop for dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . document_type) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError_ctor < > (document_type : * mut std :: os :: raw :: c_char , index_limit : u16 , is_contested_limit : bool) -> * mut dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError { document_type , index_limit , is_contested_limit }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError_get_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError_get_index_limit < > (obj : * const dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError) -> u16 { (* obj) . index_limit } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError_get_is_contested_limit < > (obj : * const dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError) -> bool { (* obj) . is_contested_limit } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError_set_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError_set_index_limit < > (obj : * const dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError) -> u16 { (* obj) . index_limit } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError_set_is_contested_limit < > (obj : * const dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError) -> bool { (* obj) . is_contested_limit } } pub mod contested_unique_index_with_unique_index_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`ContestedUniqueIndexWithUniqueIndexError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError { pub document_type : * mut std :: os :: raw :: c_char , pub contested_unique_index_name : * mut std :: os :: raw :: c_char , pub unique_index_name : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_with_unique_index_error :: ContestedUniqueIndexWithUniqueIndexError > for dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError) -> dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_with_unique_index_error :: ContestedUniqueIndexWithUniqueIndexError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_with_unique_index_error :: ContestedUniqueIndexWithUniqueIndexError { document_type : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . document_type) , contested_unique_index_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . contested_unique_index_name) , unique_index_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . unique_index_name) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_with_unique_index_error :: ContestedUniqueIndexWithUniqueIndexError > for dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_with_unique_index_error :: ContestedUniqueIndexWithUniqueIndexError) -> * const dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError { document_type : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . document_type) , contested_unique_index_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . contested_unique_index_name) , unique_index_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . unique_index_name) }) } } impl Drop for dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . document_type) ; ferment :: unbox_string (ffi_ref . contested_unique_index_name) ; ferment :: unbox_string (ffi_ref . unique_index_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError_ctor < > (document_type : * mut std :: os :: raw :: c_char , contested_unique_index_name : * mut std :: os :: raw :: c_char , unique_index_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError { document_type , contested_unique_index_name , unique_index_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError_get_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError_get_contested_unique_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError) -> * mut std :: os :: raw :: c_char { (* obj) . contested_unique_index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError_get_unique_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError) -> * mut std :: os :: raw :: c_char { (* obj) . unique_index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError_set_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError_set_contested_unique_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError) -> * mut std :: os :: raw :: c_char { (* obj) . contested_unique_index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError_set_unique_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError) -> * mut std :: os :: raw :: c_char { (* obj) . unique_index_name } } pub mod contested_unique_index_on_mutable_document_type_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`ContestedUniqueIndexOnMutableDocumentTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError { pub document_type : * mut std :: os :: raw :: c_char , pub contested_unique_index_name : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_on_mutable_document_type_error :: ContestedUniqueIndexOnMutableDocumentTypeError > for dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError) -> dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_on_mutable_document_type_error :: ContestedUniqueIndexOnMutableDocumentTypeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_on_mutable_document_type_error :: ContestedUniqueIndexOnMutableDocumentTypeError { document_type : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . document_type) , contested_unique_index_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . contested_unique_index_name) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_on_mutable_document_type_error :: ContestedUniqueIndexOnMutableDocumentTypeError > for dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_on_mutable_document_type_error :: ContestedUniqueIndexOnMutableDocumentTypeError) -> * const dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError { document_type : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . document_type) , contested_unique_index_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . contested_unique_index_name) }) } } impl Drop for dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . document_type) ; ferment :: unbox_string (ffi_ref . contested_unique_index_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError_ctor < > (document_type : * mut std :: os :: raw :: c_char , contested_unique_index_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError { document_type , contested_unique_index_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError_get_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError_get_contested_unique_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError) -> * mut std :: os :: raw :: c_char { (* obj) . contested_unique_index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError_set_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError_set_contested_unique_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError) -> * mut std :: os :: raw :: c_char { (* obj) . contested_unique_index_name } } pub mod invalid_index_property_type_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidIndexPropertyTypeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError { pub document_type : * mut std :: os :: raw :: c_char , pub index_name : * mut std :: os :: raw :: c_char , pub property_name : * mut std :: os :: raw :: c_char , pub property_type : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: invalid_index_property_type_error :: InvalidIndexPropertyTypeError > for dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError) -> dpp :: errors :: consensus :: basic :: data_contract :: invalid_index_property_type_error :: InvalidIndexPropertyTypeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: invalid_index_property_type_error :: InvalidIndexPropertyTypeError { document_type : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . document_type) , index_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . index_name) , property_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . property_name) , property_type : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . property_type) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: invalid_index_property_type_error :: InvalidIndexPropertyTypeError > for dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: invalid_index_property_type_error :: InvalidIndexPropertyTypeError) -> * const dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError { document_type : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . document_type) , index_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . index_name) , property_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . property_name) , property_type : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . property_type) }) } } impl Drop for dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . document_type) ; ferment :: unbox_string (ffi_ref . index_name) ; ferment :: unbox_string (ffi_ref . property_name) ; ferment :: unbox_string (ffi_ref . property_type) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError_ctor < > (document_type : * mut std :: os :: raw :: c_char , index_name : * mut std :: os :: raw :: c_char , property_name : * mut std :: os :: raw :: c_char , property_type : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError { document_type , index_name , property_name , property_type }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError_get_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError_get_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError_get_property_name < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError) -> * mut std :: os :: raw :: c_char { (* obj) . property_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError_get_property_type < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError) -> * mut std :: os :: raw :: c_char { (* obj) . property_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError_set_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError_set_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError_set_property_name < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError) -> * mut std :: os :: raw :: c_char { (* obj) . property_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError_set_property_type < > (obj : * const dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError) -> * mut std :: os :: raw :: c_char { (* obj) . property_type } } pub mod unknown_security_level_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`UnknownSecurityLevelError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError { pub allowed_values : * mut crate :: fermented :: generics :: Vec_u8 , pub received : u8 } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: unknown_security_level_error :: UnknownSecurityLevelError > for dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError) -> dpp :: errors :: consensus :: basic :: data_contract :: unknown_security_level_error :: UnknownSecurityLevelError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: unknown_security_level_error :: UnknownSecurityLevelError { allowed_values : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (ffi_ref . allowed_values) , received : ffi_ref . received } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: unknown_security_level_error :: UnknownSecurityLevelError > for dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: unknown_security_level_error :: UnknownSecurityLevelError) -> * const dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError { allowed_values : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj . allowed_values) , received : obj . received }) } } impl Drop for dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . allowed_values) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError_ctor < > (allowed_values : * mut crate :: fermented :: generics :: Vec_u8 , received : u8) -> * mut dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError { allowed_values , received }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError_get_allowed_values < > (obj : * const dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . allowed_values } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError_get_received < > (obj : * const dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError) -> u8 { (* obj) . received } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError_set_allowed_values < > (obj : * const dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . allowed_values } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError_set_received < > (obj : * const dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError) -> u8 { (* obj) . received } } pub mod incompatible_data_contract_schema_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`IncompatibleDataContractSchemaError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError { pub data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub operation : * mut std :: os :: raw :: c_char , pub field_path : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: incompatible_data_contract_schema_error :: IncompatibleDataContractSchemaError > for dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError) -> dpp :: errors :: consensus :: basic :: data_contract :: incompatible_data_contract_schema_error :: IncompatibleDataContractSchemaError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: incompatible_data_contract_schema_error :: IncompatibleDataContractSchemaError { data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . data_contract_id) , operation : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . operation) , field_path : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . field_path) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: incompatible_data_contract_schema_error :: IncompatibleDataContractSchemaError > for dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: incompatible_data_contract_schema_error :: IncompatibleDataContractSchemaError) -> * const dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError { data_contract_id : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . data_contract_id) , operation : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . operation) , field_path : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . field_path) }) } } impl Drop for dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . data_contract_id) ; ferment :: unbox_string (ffi_ref . operation) ; ferment :: unbox_string (ffi_ref . field_path) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError_ctor < > (data_contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , operation : * mut std :: os :: raw :: c_char , field_path : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError { data_contract_id , operation , field_path }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError_get_data_contract_id < > (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError_get_operation < > (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . operation } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError_get_field_path < > (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . field_path } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError_set_data_contract_id < > (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . data_contract_id } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError_set_operation < > (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . operation } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError_set_field_path < > (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . field_path } } pub mod data_contract_max_depth_exceed_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DataContractMaxDepthExceedError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError { pub max_depth : usize } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_max_depth_exceed_error :: DataContractMaxDepthExceedError > for dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError) -> dpp :: errors :: consensus :: basic :: data_contract :: data_contract_max_depth_exceed_error :: DataContractMaxDepthExceedError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: data_contract_max_depth_exceed_error :: DataContractMaxDepthExceedError { max_depth : ffi_ref . max_depth } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_max_depth_exceed_error :: DataContractMaxDepthExceedError > for dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: data_contract_max_depth_exceed_error :: DataContractMaxDepthExceedError) -> * const dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError { max_depth : obj . max_depth }) } } impl Drop for dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError_ctor < > (max_depth : usize) -> * mut dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError { max_depth }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError_get_max_depth < > (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError) -> usize { (* obj) . max_depth } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError_set_max_depth < > (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError) -> usize { (* obj) . max_depth } } pub mod data_contract_immutable_properties_update_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`DataContractImmutablePropertiesUpdateError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError { pub operation : * mut std :: os :: raw :: c_char , pub field_path : * mut std :: os :: raw :: c_char , pub old_value : * mut crate :: fermented :: types :: platform_value :: platform_value_Value , pub new_value : * mut crate :: fermented :: types :: platform_value :: platform_value_Value } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_immutable_properties_update_error :: DataContractImmutablePropertiesUpdateError > for dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError) -> dpp :: errors :: consensus :: basic :: data_contract :: data_contract_immutable_properties_update_error :: DataContractImmutablePropertiesUpdateError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: data_contract_immutable_properties_update_error :: DataContractImmutablePropertiesUpdateError { operation : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . operation) , field_path : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . field_path) , old_value : < crate :: fermented :: types :: platform_value :: platform_value_Value as ferment :: FFIConversionFrom < platform_value :: Value >> :: ffi_from (ffi_ref . old_value) , new_value : < crate :: fermented :: types :: platform_value :: platform_value_Value as ferment :: FFIConversionFrom < platform_value :: Value >> :: ffi_from (ffi_ref . new_value) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_immutable_properties_update_error :: DataContractImmutablePropertiesUpdateError > for dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: data_contract_immutable_properties_update_error :: DataContractImmutablePropertiesUpdateError) -> * const dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError { operation : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . operation) , field_path : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . field_path) , old_value : < crate :: fermented :: types :: platform_value :: platform_value_Value as ferment :: FFIConversionTo < platform_value :: Value >> :: ffi_to (obj . old_value) , new_value : < crate :: fermented :: types :: platform_value :: platform_value_Value as ferment :: FFIConversionTo < platform_value :: Value >> :: ffi_to (obj . new_value) }) } } impl Drop for dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . operation) ; ferment :: unbox_string (ffi_ref . field_path) ; ferment :: unbox_any (ffi_ref . old_value) ; ferment :: unbox_any (ffi_ref . new_value) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError_ctor < > (operation : * mut std :: os :: raw :: c_char , field_path : * mut std :: os :: raw :: c_char , old_value : * mut crate :: fermented :: types :: platform_value :: platform_value_Value , new_value : * mut crate :: fermented :: types :: platform_value :: platform_value_Value) -> * mut dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError { operation , field_path , old_value , new_value }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError_get_operation < > (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError) -> * mut std :: os :: raw :: c_char { (* obj) . operation } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError_get_field_path < > (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError) -> * mut std :: os :: raw :: c_char { (* obj) . field_path } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError_get_old_value < > (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError) -> * mut crate :: fermented :: types :: platform_value :: platform_value_Value { (* obj) . old_value } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError_get_new_value < > (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError) -> * mut crate :: fermented :: types :: platform_value :: platform_value_Value { (* obj) . new_value } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError_set_operation < > (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError) -> * mut std :: os :: raw :: c_char { (* obj) . operation } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError_set_field_path < > (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError) -> * mut std :: os :: raw :: c_char { (* obj) . field_path } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError_set_old_value < > (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError) -> * mut crate :: fermented :: types :: platform_value :: platform_value_Value { (* obj) . old_value } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError_set_new_value < > (obj : * const dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError) -> * mut crate :: fermented :: types :: platform_value :: platform_value_Value { (* obj) . new_value } } pub mod undefined_index_property_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`UndefinedIndexPropertyError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError { pub document_type : * mut std :: os :: raw :: c_char , pub index_name : * mut std :: os :: raw :: c_char , pub property_name : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: undefined_index_property_error :: UndefinedIndexPropertyError > for dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError) -> dpp :: errors :: consensus :: basic :: data_contract :: undefined_index_property_error :: UndefinedIndexPropertyError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: undefined_index_property_error :: UndefinedIndexPropertyError { document_type : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . document_type) , index_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . index_name) , property_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . property_name) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: undefined_index_property_error :: UndefinedIndexPropertyError > for dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: undefined_index_property_error :: UndefinedIndexPropertyError) -> * const dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError { document_type : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . document_type) , index_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . index_name) , property_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . property_name) }) } } impl Drop for dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . document_type) ; ferment :: unbox_string (ffi_ref . index_name) ; ferment :: unbox_string (ffi_ref . property_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError_ctor < > (document_type : * mut std :: os :: raw :: c_char , index_name : * mut std :: os :: raw :: c_char , property_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError { document_type , index_name , property_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError_get_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError_get_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError_get_property_name < > (obj : * const dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError) -> * mut std :: os :: raw :: c_char { (* obj) . property_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError_set_document_type < > (obj : * const dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError_set_index_name < > (obj : * const dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError) -> * mut std :: os :: raw :: c_char { (* obj) . index_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError_set_property_name < > (obj : * const dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError) -> * mut std :: os :: raw :: c_char { (* obj) . property_name } } pub mod incompatible_document_type_schema_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`IncompatibleDocumentTypeSchemaError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError { pub document_type_name : * mut std :: os :: raw :: c_char , pub operation : * mut std :: os :: raw :: c_char , pub property_path : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: incompatible_document_type_schema_error :: IncompatibleDocumentTypeSchemaError > for dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError) -> dpp :: errors :: consensus :: basic :: data_contract :: incompatible_document_type_schema_error :: IncompatibleDocumentTypeSchemaError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: incompatible_document_type_schema_error :: IncompatibleDocumentTypeSchemaError { document_type_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . document_type_name) , operation : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . operation) , property_path : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . property_path) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: incompatible_document_type_schema_error :: IncompatibleDocumentTypeSchemaError > for dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: incompatible_document_type_schema_error :: IncompatibleDocumentTypeSchemaError) -> * const dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError { document_type_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . document_type_name) , operation : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . operation) , property_path : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . property_path) }) } } impl Drop for dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . document_type_name) ; ferment :: unbox_string (ffi_ref . operation) ; ferment :: unbox_string (ffi_ref . property_path) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError_ctor < > (document_type_name : * mut std :: os :: raw :: c_char , operation : * mut std :: os :: raw :: c_char , property_path : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError { document_type_name , operation , property_path }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError_get_document_type_name < > (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError_get_operation < > (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . operation } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError_get_property_path < > (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . property_path } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError_set_document_type_name < > (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . document_type_name } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError_set_operation < > (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . operation } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError_set_property_path < > (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError) -> * mut std :: os :: raw :: c_char { (* obj) . property_path } } pub mod incompatible_re2_pattern_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`IncompatibleRe2PatternError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError { pub pattern : * mut std :: os :: raw :: c_char , pub path : * mut std :: os :: raw :: c_char , pub message : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: incompatible_re2_pattern_error :: IncompatibleRe2PatternError > for dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError) -> dpp :: errors :: consensus :: basic :: data_contract :: incompatible_re2_pattern_error :: IncompatibleRe2PatternError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: incompatible_re2_pattern_error :: IncompatibleRe2PatternError { pattern : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . pattern) , path : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . path) , message : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . message) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: incompatible_re2_pattern_error :: IncompatibleRe2PatternError > for dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: incompatible_re2_pattern_error :: IncompatibleRe2PatternError) -> * const dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError { pattern : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . pattern) , path : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . path) , message : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . message) }) } } impl Drop for dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . pattern) ; ferment :: unbox_string (ffi_ref . path) ; ferment :: unbox_string (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError_ctor < > (pattern : * mut std :: os :: raw :: c_char , path : * mut std :: os :: raw :: c_char , message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError { pattern , path , message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError_get_pattern < > (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError) -> * mut std :: os :: raw :: c_char { (* obj) . pattern } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError_get_path < > (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError) -> * mut std :: os :: raw :: c_char { (* obj) . path } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError_get_message < > (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError_set_pattern < > (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError) -> * mut std :: os :: raw :: c_char { (* obj) . pattern } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError_set_path < > (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError) -> * mut std :: os :: raw :: c_char { (* obj) . path } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError_set_message < > (obj : * const dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError) -> * mut std :: os :: raw :: c_char { (* obj) . message } } pub mod unknown_trade_mode_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`UnknownTradeModeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError { pub allowed_values : * mut crate :: fermented :: generics :: Vec_u8 , pub received : u8 } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: unknown_trade_mode_error :: UnknownTradeModeError > for dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError) -> dpp :: errors :: consensus :: basic :: data_contract :: unknown_trade_mode_error :: UnknownTradeModeError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: data_contract :: unknown_trade_mode_error :: UnknownTradeModeError { allowed_values : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (ffi_ref . allowed_values) , received : ffi_ref . received } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: unknown_trade_mode_error :: UnknownTradeModeError > for dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: data_contract :: unknown_trade_mode_error :: UnknownTradeModeError) -> * const dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError { allowed_values : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj . allowed_values) , received : obj . received }) } } impl Drop for dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . allowed_values) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError_ctor < > (allowed_values : * mut crate :: fermented :: generics :: Vec_u8 , received : u8) -> * mut dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError { ferment :: boxed (dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError { allowed_values , received }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError_destroy < > (ffi : * mut dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError_get_allowed_values < > (obj : * const dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . allowed_values } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError_get_received < > (obj : * const dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError) -> u8 { (* obj) . received } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError_set_allowed_values < > (obj : * const dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . allowed_values } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError_set_received < > (obj : * const dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError) -> u8 { (* obj) . received } } } pub mod basic_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`BasicError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_errors_consensus_basic_basic_error_BasicError { ProtocolVersionParsingError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: protocol_version_parsing_error :: dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError) , VersionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: version_error :: dpp_errors_consensus_basic_decode_version_error_VersionError) , ContractError (* mut crate :: fermented :: types :: dpp :: data_contract :: errors :: contract :: dpp_data_contract_errors_contract_DataContractError) , UnknownSecurityLevelError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unknown_security_level_error :: dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError) , UnknownStorageKeyRequirementsError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unknown_storage_key_requirements_error :: dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError) , UnknownTransferableTypeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unknown_transferable_type_error :: dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError) , UnknownTradeModeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unknown_trade_mode_error :: dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError) , UnknownDocumentCreationRestrictionModeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unknown_document_creation_restriction_mode_error :: dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError) , SerializedObjectParsingError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: serialized_object_parsing_error :: dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError) , UnsupportedProtocolVersionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: unsupported_protocol_version_error :: dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError) , UnsupportedVersionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: unsupported_version_error :: dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError) , IncompatibleProtocolVersionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: incompatible_protocol_version_error :: dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError) , # [cfg (feature = "json-schema-validation")] JsonSchemaCompilationError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: json_schema_compilation_error :: dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError) , # [cfg (feature = "json-schema-validation")] JsonSchemaError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error :: dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) , InvalidIdentifierError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: invalid_identifier_error :: dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError) , ValueError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: value_error :: dpp_errors_consensus_basic_value_error_ValueError) , DataContractMaxDepthExceedError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_max_depth_exceed_error :: dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError) , DuplicateIndexError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_error :: dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError) , IncompatibleRe2PatternError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: incompatible_re2_pattern_error :: dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError) , InvalidCompoundIndexError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_compound_index_error :: dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError) , InvalidDataContractIdError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_id_error :: dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError) , InvalidIndexedPropertyConstraintError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_indexed_property_constraint_error :: dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) , InvalidIndexPropertyTypeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_index_property_type_error :: dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError) , # [cfg (feature = "json-schema-validation")] InvalidJsonSchemaRefError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_json_schema_ref_error :: dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError) , SystemPropertyIndexAlreadyPresentError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: system_property_index_already_present_error :: dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError) , UndefinedIndexPropertyError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: undefined_index_property_error :: dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError) , UniqueIndicesLimitReachedError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unique_indices_limit_reached_error :: dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError) , DuplicateIndexNameError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_name_error :: dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError) , InvalidDataContractVersionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_version_error :: dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError) , IncompatibleDataContractSchemaError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: incompatible_data_contract_schema_error :: dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError) , DataContractImmutablePropertiesUpdateError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_immutable_properties_update_error :: dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError) , DataContractUniqueIndicesChangedError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_unique_indices_changed_error :: dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError) , DataContractInvalidIndexDefinitionUpdateError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_invalid_index_definition_update_error :: dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError) , DataContractHaveNewUniqueIndexError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_have_new_unique_index_error :: dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError) , DataContractNotPresentError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: data_contract_not_present_error :: dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError) , DocumentCreationNotAllowedError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: document_creation_not_allowed_error :: dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError) , DataContractBoundsNotPresentError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: data_contract_bounds_not_present_error :: dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError) , DuplicateDocumentTransitionsWithIdsError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_ids_error :: dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError) , DuplicateDocumentTransitionsWithIndicesError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_indices_error :: dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError) , NonceOutOfBoundsError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: identity_contract_nonce_out_of_bounds_error :: dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError) , InconsistentCompoundIndexDataError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: inconsistent_compound_index_data_error :: dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError) , InvalidDocumentTransitionActionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_action_error :: dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError) , InvalidDocumentTransitionIdError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_id_error :: dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError) , InvalidDocumentTypeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError) , MissingPositionsInDocumentTypePropertiesError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_positions_in_document_type_properties_error :: dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError) , MissingDataContractIdBasicError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_data_contract_id_basic_error :: dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError) , MissingDocumentTransitionActionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_document_transition_action_error :: dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError) , MissingDocumentTransitionTypeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_document_transition_type_error :: dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError) , MissingDocumentTypeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_document_type_error :: dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError) , MaxDocumentsTransitionsExceededError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: max_documents_transitions_exceeded_error :: dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError) , DuplicatedIdentityPublicKeyBasicError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_basic_error :: dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError) , DuplicatedIdentityPublicKeyIdBasicError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_id_basic_error :: dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError) , DisablingKeyIdAlsoBeingAddedInSameTransitionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: disabling_key_id_also_being_added_in_same_transition_error :: dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError) , IdentityAssetLockProofLockedTransactionMismatchError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_proof_locked_transaction_mismatch_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError) , IdentityAssetLockTransactionIsNotFoundError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_is_not_found_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError) , IdentityAssetLockTransactionOutPointAlreadyConsumedError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_already_consumed_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError) , IdentityAssetLockTransactionOutPointNotEnoughBalanceError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_not_enough_balance_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError) , IdentityAssetLockStateTransitionReplayError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_state_transition_replay_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError) , IdentityAssetLockTransactionOutputNotFoundError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_output_not_found_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError) , InvalidAssetLockProofCoreChainHeightError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_core_chain_height_error :: dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError) , InvalidIdentityAssetLockProofChainLockValidationError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_proof_chain_lock_validation_error :: dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError) , InvalidAssetLockProofTransactionHeightError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_transaction_height_error :: dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError) , InvalidAssetLockTransactionOutputReturnSizeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_transaction_output_return_size :: dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError) , InvalidIdentityAssetLockTransactionError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_error :: dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError) , InvalidIdentityAssetLockTransactionOutputError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_output_error :: dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError) , InvalidIdentityPublicKeyDataError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_data_error :: dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError) , InvalidInstantAssetLockProofError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_error :: dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError) , InvalidInstantAssetLockProofSignatureError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_signature_error :: dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError) , MissingMasterPublicKeyError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: missing_master_public_key_error :: dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError) , TooManyMasterPublicKeyError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: too_many_master_public_key_error :: dpp_errors_consensus_basic_identity_too_many_master_public_key_error_TooManyMasterPublicKeyError) , MasterPublicKeyUpdateError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: master_public_key_update_error :: dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError) , InvalidDocumentTypeRequiredSecurityLevelError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_required_security_level :: dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError) , InvalidIdentityPublicKeySecurityLevelError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_security_level_error :: dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError) , InvalidIdentityKeySignatureError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_key_signature_error :: dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError) , InvalidIdentityCreditTransferAmountError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_transfer_amount_error :: dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError) , InvalidIdentityCreditWithdrawalTransitionOutputScriptError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_output_script_error :: dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError) , WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: withdrawal_output_script_not_allowed_when_signing_with_owner_key :: dpp_errors_consensus_basic_identity_withdrawal_output_script_not_allowed_when_signing_with_owner_key_WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError) , InvalidIdentityCreditWithdrawalTransitionCoreFeeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_core_fee_error :: dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError) , InvalidIdentityCreditWithdrawalTransitionAmountError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_amount_error :: dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError) , InvalidIdentityUpdateTransitionEmptyError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_empty_error :: dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError) , InvalidIdentityUpdateTransitionDisableKeysError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_disable_keys_error :: dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError) , NotImplementedIdentityCreditWithdrawalTransitionPoolingError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: not_implemented_identity_credit_withdrawal_transition_pooling_error :: dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError) , InvalidStateTransitionTypeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError) , MissingStateTransitionTypeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: state_transition :: missing_state_transition_type_error :: dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError) , DocumentFieldMaxSizeExceededError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: document_field_max_size_exceeded_error :: dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError) , StateTransitionMaxSizeExceededError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: state_transition :: state_transition_max_size_exceeded_error :: dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError) , DocumentTransitionsAreAbsentError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: document_transitions_are_absent_error :: dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError) , IdentityCreditTransferToSelfError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_credit_transfer_to_self_error :: dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError) , InvalidDocumentTypeNameError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_name_error :: dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError) , IncompatibleDocumentTypeSchemaError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: incompatible_document_type_schema_error :: dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError) , ContestedUniqueIndexOnMutableDocumentTypeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_on_mutable_document_type_error :: dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError) , ContestedUniqueIndexWithUniqueIndexError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_with_unique_index_error :: dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError) , OverflowError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: overflow_error :: dpp_errors_consensus_basic_overflow_error_OverflowError) , UnsupportedFeatureError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: unsupported_feature_error :: dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError) , ContestedDocumentsTemporarilyNotAllowedError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: contested_documents_temporarily_not_allowed_error :: dpp_errors_consensus_basic_document_contested_documents_temporarily_not_allowed_error_ContestedDocumentsTemporarilyNotAllowedError) } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: basic_error :: BasicError > for dpp_errors_consensus_basic_basic_error_BasicError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_basic_error_BasicError) -> dpp :: errors :: consensus :: basic :: basic_error :: BasicError { let ffi_ref = & * ffi ; match ffi_ref { dpp_errors_consensus_basic_basic_error_BasicError :: ProtocolVersionParsingError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: ProtocolVersionParsingError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: protocol_version_parsing_error :: dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: decode :: protocol_version_parsing_error :: ProtocolVersionParsingError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: VersionError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: VersionError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: version_error :: dpp_errors_consensus_basic_decode_version_error_VersionError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: decode :: version_error :: VersionError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: ContractError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: ContractError (< crate :: fermented :: types :: dpp :: data_contract :: errors :: contract :: dpp_data_contract_errors_contract_DataContractError as ferment :: FFIConversionFrom < dpp :: data_contract :: errors :: contract :: DataContractError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: UnknownSecurityLevelError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnknownSecurityLevelError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unknown_security_level_error :: dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: unknown_security_level_error :: UnknownSecurityLevelError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: UnknownStorageKeyRequirementsError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnknownStorageKeyRequirementsError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unknown_storage_key_requirements_error :: dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: unknown_storage_key_requirements_error :: UnknownStorageKeyRequirementsError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: UnknownTransferableTypeError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnknownTransferableTypeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unknown_transferable_type_error :: dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: unknown_transferable_type_error :: UnknownTransferableTypeError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: UnknownTradeModeError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnknownTradeModeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unknown_trade_mode_error :: dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: unknown_trade_mode_error :: UnknownTradeModeError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: UnknownDocumentCreationRestrictionModeError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnknownDocumentCreationRestrictionModeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unknown_document_creation_restriction_mode_error :: dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: unknown_document_creation_restriction_mode_error :: UnknownDocumentCreationRestrictionModeError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: SerializedObjectParsingError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: SerializedObjectParsingError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: serialized_object_parsing_error :: dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: decode :: serialized_object_parsing_error :: SerializedObjectParsingError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: UnsupportedProtocolVersionError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnsupportedProtocolVersionError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: unsupported_protocol_version_error :: dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: unsupported_protocol_version_error :: UnsupportedProtocolVersionError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: UnsupportedVersionError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnsupportedVersionError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: unsupported_version_error :: dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: unsupported_version_error :: UnsupportedVersionError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleProtocolVersionError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IncompatibleProtocolVersionError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: incompatible_protocol_version_error :: dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: incompatible_protocol_version_error :: IncompatibleProtocolVersionError >> :: ffi_from (* o_0)) , # [cfg (feature = "json-schema-validation")] dpp_errors_consensus_basic_basic_error_BasicError :: JsonSchemaCompilationError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: JsonSchemaCompilationError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: json_schema_compilation_error :: dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: json_schema_compilation_error :: JsonSchemaCompilationError >> :: ffi_from (* o_0)) , # [cfg (feature = "json-schema-validation")] dpp_errors_consensus_basic_basic_error_BasicError :: JsonSchemaError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: JsonSchemaError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error :: dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error :: JsonSchemaError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentifierError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentifierError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: invalid_identifier_error :: dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: invalid_identifier_error :: InvalidIdentifierError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: ValueError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: ValueError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: value_error :: dpp_errors_consensus_basic_value_error_ValueError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: value_error :: ValueError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractMaxDepthExceedError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractMaxDepthExceedError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_max_depth_exceed_error :: dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_max_depth_exceed_error :: DataContractMaxDepthExceedError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateIndexError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicateIndexError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_error :: dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_error :: DuplicateIndexError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleRe2PatternError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IncompatibleRe2PatternError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: incompatible_re2_pattern_error :: dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: incompatible_re2_pattern_error :: IncompatibleRe2PatternError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidCompoundIndexError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidCompoundIndexError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_compound_index_error :: dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: invalid_compound_index_error :: InvalidCompoundIndexError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDataContractIdError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDataContractIdError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_id_error :: dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_id_error :: InvalidDataContractIdError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIndexedPropertyConstraintError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIndexedPropertyConstraintError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_indexed_property_constraint_error :: dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: invalid_indexed_property_constraint_error :: InvalidIndexedPropertyConstraintError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIndexPropertyTypeError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIndexPropertyTypeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_index_property_type_error :: dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: invalid_index_property_type_error :: InvalidIndexPropertyTypeError >> :: ffi_from (* o_0)) , # [cfg (feature = "json-schema-validation")] dpp_errors_consensus_basic_basic_error_BasicError :: InvalidJsonSchemaRefError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidJsonSchemaRefError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_json_schema_ref_error :: dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: invalid_json_schema_ref_error :: InvalidJsonSchemaRefError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: SystemPropertyIndexAlreadyPresentError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: SystemPropertyIndexAlreadyPresentError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: system_property_index_already_present_error :: dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: system_property_index_already_present_error :: SystemPropertyIndexAlreadyPresentError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: UndefinedIndexPropertyError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UndefinedIndexPropertyError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: undefined_index_property_error :: dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: undefined_index_property_error :: UndefinedIndexPropertyError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: UniqueIndicesLimitReachedError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UniqueIndicesLimitReachedError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unique_indices_limit_reached_error :: dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: unique_indices_limit_reached_error :: UniqueIndicesLimitReachedError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateIndexNameError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicateIndexNameError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_name_error :: dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_name_error :: DuplicateIndexNameError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDataContractVersionError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDataContractVersionError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_version_error :: dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_version_error :: InvalidDataContractVersionError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleDataContractSchemaError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IncompatibleDataContractSchemaError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: incompatible_data_contract_schema_error :: dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: incompatible_data_contract_schema_error :: IncompatibleDataContractSchemaError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractImmutablePropertiesUpdateError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractImmutablePropertiesUpdateError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_immutable_properties_update_error :: dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_immutable_properties_update_error :: DataContractImmutablePropertiesUpdateError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractUniqueIndicesChangedError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractUniqueIndicesChangedError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_unique_indices_changed_error :: dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_unique_indices_changed_error :: DataContractUniqueIndicesChangedError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractInvalidIndexDefinitionUpdateError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractInvalidIndexDefinitionUpdateError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_invalid_index_definition_update_error :: dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_invalid_index_definition_update_error :: DataContractInvalidIndexDefinitionUpdateError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractHaveNewUniqueIndexError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractHaveNewUniqueIndexError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_have_new_unique_index_error :: dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_have_new_unique_index_error :: DataContractHaveNewUniqueIndexError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractNotPresentError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractNotPresentError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: data_contract_not_present_error :: dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: data_contract_not_present_error :: DataContractNotPresentError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DocumentCreationNotAllowedError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DocumentCreationNotAllowedError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: document_creation_not_allowed_error :: dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: document_creation_not_allowed_error :: DocumentCreationNotAllowedError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractBoundsNotPresentError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractBoundsNotPresentError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: data_contract_bounds_not_present_error :: dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: data_contract_bounds_not_present_error :: DataContractBoundsNotPresentError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateDocumentTransitionsWithIdsError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicateDocumentTransitionsWithIdsError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_ids_error :: dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_ids_error :: DuplicateDocumentTransitionsWithIdsError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateDocumentTransitionsWithIndicesError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicateDocumentTransitionsWithIndicesError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_indices_error :: dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_indices_error :: DuplicateDocumentTransitionsWithIndicesError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: NonceOutOfBoundsError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: NonceOutOfBoundsError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: identity_contract_nonce_out_of_bounds_error :: dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: identity_contract_nonce_out_of_bounds_error :: NonceOutOfBoundsError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InconsistentCompoundIndexDataError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InconsistentCompoundIndexDataError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: inconsistent_compound_index_data_error :: dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: inconsistent_compound_index_data_error :: InconsistentCompoundIndexDataError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTransitionActionError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDocumentTransitionActionError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_action_error :: dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_action_error :: InvalidDocumentTransitionActionError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTransitionIdError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDocumentTransitionIdError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_id_error :: dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_id_error :: InvalidDocumentTransitionIdError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTypeError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDocumentTypeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: InvalidDocumentTypeError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: MissingPositionsInDocumentTypePropertiesError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingPositionsInDocumentTypePropertiesError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_positions_in_document_type_properties_error :: dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: missing_positions_in_document_type_properties_error :: MissingPositionsInDocumentTypePropertiesError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: MissingDataContractIdBasicError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingDataContractIdBasicError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_data_contract_id_basic_error :: dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: missing_data_contract_id_basic_error :: MissingDataContractIdBasicError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTransitionActionError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingDocumentTransitionActionError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_document_transition_action_error :: dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: missing_document_transition_action_error :: MissingDocumentTransitionActionError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTransitionTypeError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingDocumentTransitionTypeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_document_transition_type_error :: dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: missing_document_transition_type_error :: MissingDocumentTransitionTypeError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTypeError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingDocumentTypeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_document_type_error :: dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: missing_document_type_error :: MissingDocumentTypeError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: MaxDocumentsTransitionsExceededError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MaxDocumentsTransitionsExceededError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: max_documents_transitions_exceeded_error :: dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: max_documents_transitions_exceeded_error :: MaxDocumentsTransitionsExceededError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicatedIdentityPublicKeyBasicError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicatedIdentityPublicKeyBasicError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_basic_error :: dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_basic_error :: DuplicatedIdentityPublicKeyBasicError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicatedIdentityPublicKeyIdBasicError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicatedIdentityPublicKeyIdBasicError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_id_basic_error :: dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_id_basic_error :: DuplicatedIdentityPublicKeyIdBasicError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DisablingKeyIdAlsoBeingAddedInSameTransitionError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DisablingKeyIdAlsoBeingAddedInSameTransitionError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: disabling_key_id_also_being_added_in_same_transition_error :: dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: disabling_key_id_also_being_added_in_same_transition_error :: DisablingKeyIdAlsoBeingAddedInSameTransitionError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockProofLockedTransactionMismatchError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityAssetLockProofLockedTransactionMismatchError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_proof_locked_transaction_mismatch_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_proof_locked_transaction_mismatch_error :: IdentityAssetLockProofLockedTransactionMismatchError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionIsNotFoundError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityAssetLockTransactionIsNotFoundError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_is_not_found_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_is_not_found_error :: IdentityAssetLockTransactionIsNotFoundError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionOutPointAlreadyConsumedError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityAssetLockTransactionOutPointAlreadyConsumedError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_already_consumed_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_already_consumed_error :: IdentityAssetLockTransactionOutPointAlreadyConsumedError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionOutPointNotEnoughBalanceError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityAssetLockTransactionOutPointNotEnoughBalanceError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_not_enough_balance_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_not_enough_balance_error :: IdentityAssetLockTransactionOutPointNotEnoughBalanceError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockStateTransitionReplayError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityAssetLockStateTransitionReplayError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_state_transition_replay_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_state_transition_replay_error :: IdentityAssetLockStateTransitionReplayError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionOutputNotFoundError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityAssetLockTransactionOutputNotFoundError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_output_not_found_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_output_not_found_error :: IdentityAssetLockTransactionOutputNotFoundError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockProofCoreChainHeightError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidAssetLockProofCoreChainHeightError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_core_chain_height_error :: dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_core_chain_height_error :: InvalidAssetLockProofCoreChainHeightError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockProofChainLockValidationError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityAssetLockProofChainLockValidationError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_proof_chain_lock_validation_error :: dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_proof_chain_lock_validation_error :: InvalidIdentityAssetLockProofChainLockValidationError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockProofTransactionHeightError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidAssetLockProofTransactionHeightError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_transaction_height_error :: dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_transaction_height_error :: InvalidAssetLockProofTransactionHeightError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockTransactionOutputReturnSizeError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidAssetLockTransactionOutputReturnSizeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_transaction_output_return_size :: dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_transaction_output_return_size :: InvalidAssetLockTransactionOutputReturnSizeError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockTransactionError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityAssetLockTransactionError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_error :: dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_error :: InvalidIdentityAssetLockTransactionError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockTransactionOutputError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityAssetLockTransactionOutputError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_output_error :: dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_output_error :: InvalidIdentityAssetLockTransactionOutputError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityPublicKeyDataError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityPublicKeyDataError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_data_error :: dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_data_error :: InvalidIdentityPublicKeyDataError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidInstantAssetLockProofError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidInstantAssetLockProofError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_error :: dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_error :: InvalidInstantAssetLockProofError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidInstantAssetLockProofSignatureError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidInstantAssetLockProofSignatureError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_signature_error :: dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_signature_error :: InvalidInstantAssetLockProofSignatureError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: MissingMasterPublicKeyError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingMasterPublicKeyError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: missing_master_public_key_error :: dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: missing_master_public_key_error :: MissingMasterPublicKeyError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: TooManyMasterPublicKeyError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: TooManyMasterPublicKeyError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: too_many_master_public_key_error :: dpp_errors_consensus_basic_identity_too_many_master_public_key_error_TooManyMasterPublicKeyError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: too_many_master_public_key_error :: TooManyMasterPublicKeyError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: MasterPublicKeyUpdateError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MasterPublicKeyUpdateError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: master_public_key_update_error :: dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: state :: identity :: master_public_key_update_error :: MasterPublicKeyUpdateError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTypeRequiredSecurityLevelError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDocumentTypeRequiredSecurityLevelError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_required_security_level :: dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_required_security_level :: InvalidDocumentTypeRequiredSecurityLevelError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityPublicKeySecurityLevelError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityPublicKeySecurityLevelError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_security_level_error :: dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_security_level_error :: InvalidIdentityPublicKeySecurityLevelError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityKeySignatureError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityKeySignatureError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_key_signature_error :: dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_key_signature_error :: InvalidIdentityKeySignatureError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditTransferAmountError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityCreditTransferAmountError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_transfer_amount_error :: dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_transfer_amount_error :: InvalidIdentityCreditTransferAmountError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_output_script_error :: dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_output_script_error :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: withdrawal_output_script_not_allowed_when_signing_with_owner_key :: dpp_errors_consensus_basic_identity_withdrawal_output_script_not_allowed_when_signing_with_owner_key_WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: withdrawal_output_script_not_allowed_when_signing_with_owner_key :: WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_core_fee_error :: dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_core_fee_error :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionAmountError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityCreditWithdrawalTransitionAmountError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_amount_error :: dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_amount_error :: InvalidIdentityCreditWithdrawalTransitionAmountError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityUpdateTransitionEmptyError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityUpdateTransitionEmptyError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_empty_error :: dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_empty_error :: InvalidIdentityUpdateTransitionEmptyError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityUpdateTransitionDisableKeysError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityUpdateTransitionDisableKeysError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_disable_keys_error :: dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_disable_keys_error :: InvalidIdentityUpdateTransitionDisableKeysError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: not_implemented_identity_credit_withdrawal_transition_pooling_error :: dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: not_implemented_identity_credit_withdrawal_transition_pooling_error :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidStateTransitionTypeError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidStateTransitionTypeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: InvalidStateTransitionTypeError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: MissingStateTransitionTypeError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingStateTransitionTypeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: state_transition :: missing_state_transition_type_error :: dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: state_transition :: missing_state_transition_type_error :: MissingStateTransitionTypeError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DocumentFieldMaxSizeExceededError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DocumentFieldMaxSizeExceededError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: document_field_max_size_exceeded_error :: dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: document_field_max_size_exceeded_error :: DocumentFieldMaxSizeExceededError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: StateTransitionMaxSizeExceededError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: StateTransitionMaxSizeExceededError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: state_transition :: state_transition_max_size_exceeded_error :: dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: state_transition :: state_transition_max_size_exceeded_error :: StateTransitionMaxSizeExceededError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: DocumentTransitionsAreAbsentError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DocumentTransitionsAreAbsentError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: document_transitions_are_absent_error :: dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: document_transitions_are_absent_error :: DocumentTransitionsAreAbsentError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityCreditTransferToSelfError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityCreditTransferToSelfError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_credit_transfer_to_self_error :: dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: identity :: identity_credit_transfer_to_self_error :: IdentityCreditTransferToSelfError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTypeNameError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDocumentTypeNameError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_name_error :: dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_name_error :: InvalidDocumentTypeNameError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleDocumentTypeSchemaError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IncompatibleDocumentTypeSchemaError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: incompatible_document_type_schema_error :: dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: incompatible_document_type_schema_error :: IncompatibleDocumentTypeSchemaError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: ContestedUniqueIndexOnMutableDocumentTypeError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: ContestedUniqueIndexOnMutableDocumentTypeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_on_mutable_document_type_error :: dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_on_mutable_document_type_error :: ContestedUniqueIndexOnMutableDocumentTypeError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: ContestedUniqueIndexWithUniqueIndexError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: ContestedUniqueIndexWithUniqueIndexError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_with_unique_index_error :: dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_with_unique_index_error :: ContestedUniqueIndexWithUniqueIndexError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: OverflowError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: OverflowError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: overflow_error :: dpp_errors_consensus_basic_overflow_error_OverflowError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: overflow_error :: OverflowError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: UnsupportedFeatureError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnsupportedFeatureError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: unsupported_feature_error :: dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: unsupported_feature_error :: UnsupportedFeatureError >> :: ffi_from (* o_0)) , dpp_errors_consensus_basic_basic_error_BasicError :: ContestedDocumentsTemporarilyNotAllowedError (o_0) => dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: ContestedDocumentsTemporarilyNotAllowedError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: contested_documents_temporarily_not_allowed_error :: dpp_errors_consensus_basic_document_contested_documents_temporarily_not_allowed_error_ContestedDocumentsTemporarilyNotAllowedError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: document :: contested_documents_temporarily_not_allowed_error :: ContestedDocumentsTemporarilyNotAllowedError >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: basic_error :: BasicError > for dpp_errors_consensus_basic_basic_error_BasicError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: basic_error :: BasicError) -> * const dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (match obj { dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: ProtocolVersionParsingError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: ProtocolVersionParsingError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: protocol_version_parsing_error :: dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: decode :: protocol_version_parsing_error :: ProtocolVersionParsingError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: VersionError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: VersionError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: version_error :: dpp_errors_consensus_basic_decode_version_error_VersionError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: decode :: version_error :: VersionError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: ContractError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: ContractError (< crate :: fermented :: types :: dpp :: data_contract :: errors :: contract :: dpp_data_contract_errors_contract_DataContractError as ferment :: FFIConversionTo < dpp :: data_contract :: errors :: contract :: DataContractError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnknownSecurityLevelError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: UnknownSecurityLevelError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unknown_security_level_error :: dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: unknown_security_level_error :: UnknownSecurityLevelError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnknownStorageKeyRequirementsError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: UnknownStorageKeyRequirementsError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unknown_storage_key_requirements_error :: dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: unknown_storage_key_requirements_error :: UnknownStorageKeyRequirementsError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnknownTransferableTypeError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: UnknownTransferableTypeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unknown_transferable_type_error :: dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: unknown_transferable_type_error :: UnknownTransferableTypeError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnknownTradeModeError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: UnknownTradeModeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unknown_trade_mode_error :: dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: unknown_trade_mode_error :: UnknownTradeModeError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnknownDocumentCreationRestrictionModeError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: UnknownDocumentCreationRestrictionModeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unknown_document_creation_restriction_mode_error :: dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: unknown_document_creation_restriction_mode_error :: UnknownDocumentCreationRestrictionModeError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: SerializedObjectParsingError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: SerializedObjectParsingError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: serialized_object_parsing_error :: dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: decode :: serialized_object_parsing_error :: SerializedObjectParsingError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnsupportedProtocolVersionError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: UnsupportedProtocolVersionError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: unsupported_protocol_version_error :: dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: unsupported_protocol_version_error :: UnsupportedProtocolVersionError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnsupportedVersionError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: UnsupportedVersionError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: unsupported_version_error :: dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: unsupported_version_error :: UnsupportedVersionError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IncompatibleProtocolVersionError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleProtocolVersionError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: incompatible_protocol_version_error :: dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: incompatible_protocol_version_error :: IncompatibleProtocolVersionError >> :: ffi_to (o_0)) , # [cfg (feature = "json-schema-validation")] dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: JsonSchemaCompilationError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: JsonSchemaCompilationError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: json_schema_compilation_error :: dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: json_schema_compilation_error :: JsonSchemaCompilationError >> :: ffi_to (o_0)) , # [cfg (feature = "json-schema-validation")] dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: JsonSchemaError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: JsonSchemaError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error :: dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error :: JsonSchemaError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentifierError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentifierError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: invalid_identifier_error :: dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: invalid_identifier_error :: InvalidIdentifierError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: ValueError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: ValueError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: value_error :: dpp_errors_consensus_basic_value_error_ValueError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: value_error :: ValueError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractMaxDepthExceedError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DataContractMaxDepthExceedError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_max_depth_exceed_error :: dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_max_depth_exceed_error :: DataContractMaxDepthExceedError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicateIndexError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateIndexError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_error :: dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_error :: DuplicateIndexError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IncompatibleRe2PatternError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleRe2PatternError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: incompatible_re2_pattern_error :: dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: incompatible_re2_pattern_error :: IncompatibleRe2PatternError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidCompoundIndexError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidCompoundIndexError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_compound_index_error :: dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: invalid_compound_index_error :: InvalidCompoundIndexError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDataContractIdError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDataContractIdError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_id_error :: dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_id_error :: InvalidDataContractIdError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIndexedPropertyConstraintError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIndexedPropertyConstraintError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_indexed_property_constraint_error :: dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: invalid_indexed_property_constraint_error :: InvalidIndexedPropertyConstraintError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIndexPropertyTypeError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIndexPropertyTypeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_index_property_type_error :: dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: invalid_index_property_type_error :: InvalidIndexPropertyTypeError >> :: ffi_to (o_0)) , # [cfg (feature = "json-schema-validation")] dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidJsonSchemaRefError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidJsonSchemaRefError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_json_schema_ref_error :: dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: invalid_json_schema_ref_error :: InvalidJsonSchemaRefError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: SystemPropertyIndexAlreadyPresentError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: SystemPropertyIndexAlreadyPresentError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: system_property_index_already_present_error :: dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: system_property_index_already_present_error :: SystemPropertyIndexAlreadyPresentError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UndefinedIndexPropertyError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: UndefinedIndexPropertyError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: undefined_index_property_error :: dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: undefined_index_property_error :: UndefinedIndexPropertyError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UniqueIndicesLimitReachedError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: UniqueIndicesLimitReachedError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unique_indices_limit_reached_error :: dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: unique_indices_limit_reached_error :: UniqueIndicesLimitReachedError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicateIndexNameError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateIndexNameError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_name_error :: dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_name_error :: DuplicateIndexNameError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDataContractVersionError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDataContractVersionError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_version_error :: dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_version_error :: InvalidDataContractVersionError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IncompatibleDataContractSchemaError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleDataContractSchemaError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: incompatible_data_contract_schema_error :: dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: incompatible_data_contract_schema_error :: IncompatibleDataContractSchemaError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractImmutablePropertiesUpdateError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DataContractImmutablePropertiesUpdateError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_immutable_properties_update_error :: dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_immutable_properties_update_error :: DataContractImmutablePropertiesUpdateError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractUniqueIndicesChangedError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DataContractUniqueIndicesChangedError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_unique_indices_changed_error :: dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_unique_indices_changed_error :: DataContractUniqueIndicesChangedError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractInvalidIndexDefinitionUpdateError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DataContractInvalidIndexDefinitionUpdateError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_invalid_index_definition_update_error :: dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_invalid_index_definition_update_error :: DataContractInvalidIndexDefinitionUpdateError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractHaveNewUniqueIndexError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DataContractHaveNewUniqueIndexError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_have_new_unique_index_error :: dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: data_contract_have_new_unique_index_error :: DataContractHaveNewUniqueIndexError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractNotPresentError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DataContractNotPresentError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: data_contract_not_present_error :: dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: data_contract_not_present_error :: DataContractNotPresentError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DocumentCreationNotAllowedError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DocumentCreationNotAllowedError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: document_creation_not_allowed_error :: dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: document_creation_not_allowed_error :: DocumentCreationNotAllowedError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DataContractBoundsNotPresentError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DataContractBoundsNotPresentError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: data_contract_bounds_not_present_error :: dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: data_contract_bounds_not_present_error :: DataContractBoundsNotPresentError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicateDocumentTransitionsWithIdsError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateDocumentTransitionsWithIdsError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_ids_error :: dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_ids_error :: DuplicateDocumentTransitionsWithIdsError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicateDocumentTransitionsWithIndicesError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateDocumentTransitionsWithIndicesError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_indices_error :: dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_indices_error :: DuplicateDocumentTransitionsWithIndicesError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: NonceOutOfBoundsError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: NonceOutOfBoundsError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: identity_contract_nonce_out_of_bounds_error :: dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: identity_contract_nonce_out_of_bounds_error :: NonceOutOfBoundsError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InconsistentCompoundIndexDataError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InconsistentCompoundIndexDataError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: inconsistent_compound_index_data_error :: dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: inconsistent_compound_index_data_error :: InconsistentCompoundIndexDataError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDocumentTransitionActionError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTransitionActionError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_action_error :: dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_action_error :: InvalidDocumentTransitionActionError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDocumentTransitionIdError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTransitionIdError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_id_error :: dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_id_error :: InvalidDocumentTransitionIdError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDocumentTypeError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTypeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: InvalidDocumentTypeError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingPositionsInDocumentTypePropertiesError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: MissingPositionsInDocumentTypePropertiesError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_positions_in_document_type_properties_error :: dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: missing_positions_in_document_type_properties_error :: MissingPositionsInDocumentTypePropertiesError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingDataContractIdBasicError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: MissingDataContractIdBasicError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_data_contract_id_basic_error :: dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: missing_data_contract_id_basic_error :: MissingDataContractIdBasicError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingDocumentTransitionActionError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTransitionActionError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_document_transition_action_error :: dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: missing_document_transition_action_error :: MissingDocumentTransitionActionError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingDocumentTransitionTypeError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTransitionTypeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_document_transition_type_error :: dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: missing_document_transition_type_error :: MissingDocumentTransitionTypeError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingDocumentTypeError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTypeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_document_type_error :: dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: missing_document_type_error :: MissingDocumentTypeError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MaxDocumentsTransitionsExceededError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: MaxDocumentsTransitionsExceededError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: max_documents_transitions_exceeded_error :: dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: max_documents_transitions_exceeded_error :: MaxDocumentsTransitionsExceededError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicatedIdentityPublicKeyBasicError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DuplicatedIdentityPublicKeyBasicError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_basic_error :: dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_basic_error :: DuplicatedIdentityPublicKeyBasicError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DuplicatedIdentityPublicKeyIdBasicError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DuplicatedIdentityPublicKeyIdBasicError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_id_basic_error :: dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_id_basic_error :: DuplicatedIdentityPublicKeyIdBasicError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DisablingKeyIdAlsoBeingAddedInSameTransitionError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DisablingKeyIdAlsoBeingAddedInSameTransitionError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: disabling_key_id_also_being_added_in_same_transition_error :: dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: disabling_key_id_also_being_added_in_same_transition_error :: DisablingKeyIdAlsoBeingAddedInSameTransitionError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityAssetLockProofLockedTransactionMismatchError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockProofLockedTransactionMismatchError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_proof_locked_transaction_mismatch_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_proof_locked_transaction_mismatch_error :: IdentityAssetLockProofLockedTransactionMismatchError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityAssetLockTransactionIsNotFoundError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionIsNotFoundError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_is_not_found_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_is_not_found_error :: IdentityAssetLockTransactionIsNotFoundError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityAssetLockTransactionOutPointAlreadyConsumedError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionOutPointAlreadyConsumedError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_already_consumed_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_already_consumed_error :: IdentityAssetLockTransactionOutPointAlreadyConsumedError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityAssetLockTransactionOutPointNotEnoughBalanceError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionOutPointNotEnoughBalanceError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_not_enough_balance_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_not_enough_balance_error :: IdentityAssetLockTransactionOutPointNotEnoughBalanceError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityAssetLockStateTransitionReplayError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockStateTransitionReplayError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_state_transition_replay_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_state_transition_replay_error :: IdentityAssetLockStateTransitionReplayError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityAssetLockTransactionOutputNotFoundError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionOutputNotFoundError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_output_not_found_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_output_not_found_error :: IdentityAssetLockTransactionOutputNotFoundError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidAssetLockProofCoreChainHeightError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockProofCoreChainHeightError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_core_chain_height_error :: dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_core_chain_height_error :: InvalidAssetLockProofCoreChainHeightError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityAssetLockProofChainLockValidationError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockProofChainLockValidationError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_proof_chain_lock_validation_error :: dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_proof_chain_lock_validation_error :: InvalidIdentityAssetLockProofChainLockValidationError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidAssetLockProofTransactionHeightError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockProofTransactionHeightError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_transaction_height_error :: dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_transaction_height_error :: InvalidAssetLockProofTransactionHeightError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidAssetLockTransactionOutputReturnSizeError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockTransactionOutputReturnSizeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_transaction_output_return_size :: dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_transaction_output_return_size :: InvalidAssetLockTransactionOutputReturnSizeError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityAssetLockTransactionError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockTransactionError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_error :: dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_error :: InvalidIdentityAssetLockTransactionError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityAssetLockTransactionOutputError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockTransactionOutputError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_output_error :: dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_output_error :: InvalidIdentityAssetLockTransactionOutputError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityPublicKeyDataError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityPublicKeyDataError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_data_error :: dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_data_error :: InvalidIdentityPublicKeyDataError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidInstantAssetLockProofError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidInstantAssetLockProofError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_error :: dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_error :: InvalidInstantAssetLockProofError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidInstantAssetLockProofSignatureError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidInstantAssetLockProofSignatureError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_signature_error :: dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_signature_error :: InvalidInstantAssetLockProofSignatureError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingMasterPublicKeyError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: MissingMasterPublicKeyError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: missing_master_public_key_error :: dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: missing_master_public_key_error :: MissingMasterPublicKeyError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: TooManyMasterPublicKeyError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: TooManyMasterPublicKeyError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: too_many_master_public_key_error :: dpp_errors_consensus_basic_identity_too_many_master_public_key_error_TooManyMasterPublicKeyError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: too_many_master_public_key_error :: TooManyMasterPublicKeyError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MasterPublicKeyUpdateError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: MasterPublicKeyUpdateError (< crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: master_public_key_update_error :: dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: state :: identity :: master_public_key_update_error :: MasterPublicKeyUpdateError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDocumentTypeRequiredSecurityLevelError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTypeRequiredSecurityLevelError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_required_security_level :: dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_required_security_level :: InvalidDocumentTypeRequiredSecurityLevelError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityPublicKeySecurityLevelError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityPublicKeySecurityLevelError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_security_level_error :: dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_security_level_error :: InvalidIdentityPublicKeySecurityLevelError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityKeySignatureError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityKeySignatureError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_key_signature_error :: dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_key_signature_error :: InvalidIdentityKeySignatureError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityCreditTransferAmountError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditTransferAmountError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_transfer_amount_error :: dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_transfer_amount_error :: InvalidIdentityCreditTransferAmountError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_output_script_error :: dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_output_script_error :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: withdrawal_output_script_not_allowed_when_signing_with_owner_key :: dpp_errors_consensus_basic_identity_withdrawal_output_script_not_allowed_when_signing_with_owner_key_WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: withdrawal_output_script_not_allowed_when_signing_with_owner_key :: WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_core_fee_error :: dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_core_fee_error :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityCreditWithdrawalTransitionAmountError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionAmountError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_amount_error :: dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_amount_error :: InvalidIdentityCreditWithdrawalTransitionAmountError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityUpdateTransitionEmptyError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityUpdateTransitionEmptyError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_empty_error :: dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_empty_error :: InvalidIdentityUpdateTransitionEmptyError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidIdentityUpdateTransitionDisableKeysError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityUpdateTransitionDisableKeysError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_disable_keys_error :: dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_disable_keys_error :: InvalidIdentityUpdateTransitionDisableKeysError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: not_implemented_identity_credit_withdrawal_transition_pooling_error :: dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: not_implemented_identity_credit_withdrawal_transition_pooling_error :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidStateTransitionTypeError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidStateTransitionTypeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: InvalidStateTransitionTypeError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: MissingStateTransitionTypeError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: MissingStateTransitionTypeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: state_transition :: missing_state_transition_type_error :: dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: state_transition :: missing_state_transition_type_error :: MissingStateTransitionTypeError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DocumentFieldMaxSizeExceededError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DocumentFieldMaxSizeExceededError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: document_field_max_size_exceeded_error :: dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: document_field_max_size_exceeded_error :: DocumentFieldMaxSizeExceededError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: StateTransitionMaxSizeExceededError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: StateTransitionMaxSizeExceededError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: state_transition :: state_transition_max_size_exceeded_error :: dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: state_transition :: state_transition_max_size_exceeded_error :: StateTransitionMaxSizeExceededError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: DocumentTransitionsAreAbsentError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: DocumentTransitionsAreAbsentError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: document_transitions_are_absent_error :: dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: document_transitions_are_absent_error :: DocumentTransitionsAreAbsentError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IdentityCreditTransferToSelfError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: IdentityCreditTransferToSelfError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_credit_transfer_to_self_error :: dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: identity :: identity_credit_transfer_to_self_error :: IdentityCreditTransferToSelfError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: InvalidDocumentTypeNameError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTypeNameError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_name_error :: dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_name_error :: InvalidDocumentTypeNameError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: IncompatibleDocumentTypeSchemaError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleDocumentTypeSchemaError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: incompatible_document_type_schema_error :: dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: incompatible_document_type_schema_error :: IncompatibleDocumentTypeSchemaError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: ContestedUniqueIndexOnMutableDocumentTypeError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: ContestedUniqueIndexOnMutableDocumentTypeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_on_mutable_document_type_error :: dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_on_mutable_document_type_error :: ContestedUniqueIndexOnMutableDocumentTypeError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: ContestedUniqueIndexWithUniqueIndexError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: ContestedUniqueIndexWithUniqueIndexError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_with_unique_index_error :: dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_with_unique_index_error :: ContestedUniqueIndexWithUniqueIndexError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: OverflowError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: OverflowError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: overflow_error :: dpp_errors_consensus_basic_overflow_error_OverflowError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: overflow_error :: OverflowError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: UnsupportedFeatureError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: UnsupportedFeatureError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: unsupported_feature_error :: dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: unsupported_feature_error :: UnsupportedFeatureError >> :: ffi_to (o_0)) , dpp :: errors :: consensus :: basic :: basic_error :: BasicError :: ContestedDocumentsTemporarilyNotAllowedError (o_0) => dpp_errors_consensus_basic_basic_error_BasicError :: ContestedDocumentsTemporarilyNotAllowedError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: contested_documents_temporarily_not_allowed_error :: dpp_errors_consensus_basic_document_contested_documents_temporarily_not_allowed_error_ContestedDocumentsTemporarilyNotAllowedError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: document :: contested_documents_temporarily_not_allowed_error :: ContestedDocumentsTemporarilyNotAllowedError >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_errors_consensus_basic_basic_error_BasicError { fn drop (& mut self) { unsafe { match self { dpp_errors_consensus_basic_basic_error_BasicError :: ProtocolVersionParsingError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: VersionError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: ContractError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: UnknownSecurityLevelError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: UnknownStorageKeyRequirementsError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: UnknownTransferableTypeError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: UnknownTradeModeError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: UnknownDocumentCreationRestrictionModeError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: SerializedObjectParsingError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: UnsupportedProtocolVersionError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: UnsupportedVersionError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleProtocolVersionError (o_0) => { ferment :: unbox_any (* o_0) ; } , # [cfg (feature = "json-schema-validation")] dpp_errors_consensus_basic_basic_error_BasicError :: JsonSchemaCompilationError (o_0) => { ferment :: unbox_any (* o_0) ; } , # [cfg (feature = "json-schema-validation")] dpp_errors_consensus_basic_basic_error_BasicError :: JsonSchemaError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentifierError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: ValueError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractMaxDepthExceedError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateIndexError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleRe2PatternError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidCompoundIndexError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDataContractIdError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIndexedPropertyConstraintError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIndexPropertyTypeError (o_0) => { ferment :: unbox_any (* o_0) ; } , # [cfg (feature = "json-schema-validation")] dpp_errors_consensus_basic_basic_error_BasicError :: InvalidJsonSchemaRefError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: SystemPropertyIndexAlreadyPresentError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: UndefinedIndexPropertyError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: UniqueIndicesLimitReachedError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateIndexNameError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDataContractVersionError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleDataContractSchemaError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractImmutablePropertiesUpdateError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractUniqueIndicesChangedError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractInvalidIndexDefinitionUpdateError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractHaveNewUniqueIndexError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractNotPresentError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DocumentCreationNotAllowedError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DataContractBoundsNotPresentError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateDocumentTransitionsWithIdsError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateDocumentTransitionsWithIndicesError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: NonceOutOfBoundsError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InconsistentCompoundIndexDataError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTransitionActionError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTransitionIdError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTypeError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: MissingPositionsInDocumentTypePropertiesError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: MissingDataContractIdBasicError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTransitionActionError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTransitionTypeError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTypeError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: MaxDocumentsTransitionsExceededError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicatedIdentityPublicKeyBasicError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DuplicatedIdentityPublicKeyIdBasicError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DisablingKeyIdAlsoBeingAddedInSameTransitionError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockProofLockedTransactionMismatchError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionIsNotFoundError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionOutPointAlreadyConsumedError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionOutPointNotEnoughBalanceError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockStateTransitionReplayError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionOutputNotFoundError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockProofCoreChainHeightError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockProofChainLockValidationError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockProofTransactionHeightError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockTransactionOutputReturnSizeError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockTransactionError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockTransactionOutputError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityPublicKeyDataError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidInstantAssetLockProofError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidInstantAssetLockProofSignatureError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: MissingMasterPublicKeyError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: TooManyMasterPublicKeyError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: MasterPublicKeyUpdateError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTypeRequiredSecurityLevelError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityPublicKeySecurityLevelError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityKeySignatureError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditTransferAmountError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionAmountError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityUpdateTransitionEmptyError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityUpdateTransitionDisableKeysError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidStateTransitionTypeError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: MissingStateTransitionTypeError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DocumentFieldMaxSizeExceededError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: StateTransitionMaxSizeExceededError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: DocumentTransitionsAreAbsentError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: IdentityCreditTransferToSelfError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTypeNameError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleDocumentTypeSchemaError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: ContestedUniqueIndexOnMutableDocumentTypeError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: ContestedUniqueIndexWithUniqueIndexError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: OverflowError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: UnsupportedFeatureError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_consensus_basic_basic_error_BasicError :: ContestedDocumentsTemporarilyNotAllowedError (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_ProtocolVersionParsingError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: protocol_version_parsing_error :: dpp_errors_consensus_basic_decode_protocol_version_parsing_error_ProtocolVersionParsingError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: ProtocolVersionParsingError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_VersionError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: version_error :: dpp_errors_consensus_basic_decode_version_error_VersionError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: VersionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_ContractError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: errors :: contract :: dpp_data_contract_errors_contract_DataContractError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: ContractError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_UnknownSecurityLevelError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unknown_security_level_error :: dpp_errors_consensus_basic_data_contract_unknown_security_level_error_UnknownSecurityLevelError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: UnknownSecurityLevelError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_UnknownStorageKeyRequirementsError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unknown_storage_key_requirements_error :: dpp_errors_consensus_basic_data_contract_unknown_storage_key_requirements_error_UnknownStorageKeyRequirementsError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: UnknownStorageKeyRequirementsError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_UnknownTransferableTypeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unknown_transferable_type_error :: dpp_errors_consensus_basic_data_contract_unknown_transferable_type_error_UnknownTransferableTypeError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: UnknownTransferableTypeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_UnknownTradeModeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unknown_trade_mode_error :: dpp_errors_consensus_basic_data_contract_unknown_trade_mode_error_UnknownTradeModeError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: UnknownTradeModeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_UnknownDocumentCreationRestrictionModeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unknown_document_creation_restriction_mode_error :: dpp_errors_consensus_basic_data_contract_unknown_document_creation_restriction_mode_error_UnknownDocumentCreationRestrictionModeError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: UnknownDocumentCreationRestrictionModeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_SerializedObjectParsingError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: decode :: serialized_object_parsing_error :: dpp_errors_consensus_basic_decode_serialized_object_parsing_error_SerializedObjectParsingError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: SerializedObjectParsingError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_UnsupportedProtocolVersionError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: unsupported_protocol_version_error :: dpp_errors_consensus_basic_unsupported_protocol_version_error_UnsupportedProtocolVersionError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: UnsupportedProtocolVersionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_UnsupportedVersionError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: unsupported_version_error :: dpp_errors_consensus_basic_unsupported_version_error_UnsupportedVersionError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: UnsupportedVersionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_IncompatibleProtocolVersionError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: incompatible_protocol_version_error :: dpp_errors_consensus_basic_incompatible_protocol_version_error_IncompatibleProtocolVersionError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleProtocolVersionError (o_o_0)) } # [cfg (feature = "json-schema-validation")] # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_JsonSchemaCompilationError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: json_schema_compilation_error :: dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: JsonSchemaCompilationError (o_o_0)) } # [cfg (feature = "json-schema-validation")] # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_JsonSchemaError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: json_schema_error :: json_schema_error :: dpp_errors_consensus_basic_json_schema_error_json_schema_error_JsonSchemaError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: JsonSchemaError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentifierError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: invalid_identifier_error :: dpp_errors_consensus_basic_invalid_identifier_error_InvalidIdentifierError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentifierError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_ValueError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: value_error :: dpp_errors_consensus_basic_value_error_ValueError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: ValueError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DataContractMaxDepthExceedError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_max_depth_exceed_error :: dpp_errors_consensus_basic_data_contract_data_contract_max_depth_exceed_error_DataContractMaxDepthExceedError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DataContractMaxDepthExceedError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DuplicateIndexError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_error :: dpp_errors_consensus_basic_data_contract_duplicate_index_error_DuplicateIndexError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateIndexError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_IncompatibleRe2PatternError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: incompatible_re2_pattern_error :: dpp_errors_consensus_basic_data_contract_incompatible_re2_pattern_error_IncompatibleRe2PatternError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleRe2PatternError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidCompoundIndexError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_compound_index_error :: dpp_errors_consensus_basic_data_contract_invalid_compound_index_error_InvalidCompoundIndexError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidCompoundIndexError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidDataContractIdError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_id_error :: dpp_errors_consensus_basic_data_contract_invalid_data_contract_id_error_InvalidDataContractIdError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDataContractIdError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIndexedPropertyConstraintError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_indexed_property_constraint_error :: dpp_errors_consensus_basic_data_contract_invalid_indexed_property_constraint_error_InvalidIndexedPropertyConstraintError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIndexedPropertyConstraintError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIndexPropertyTypeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_index_property_type_error :: dpp_errors_consensus_basic_data_contract_invalid_index_property_type_error_InvalidIndexPropertyTypeError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIndexPropertyTypeError (o_o_0)) } # [cfg (feature = "json-schema-validation")] # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidJsonSchemaRefError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_json_schema_ref_error :: dpp_errors_consensus_basic_data_contract_invalid_json_schema_ref_error_InvalidJsonSchemaRefError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidJsonSchemaRefError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_SystemPropertyIndexAlreadyPresentError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: system_property_index_already_present_error :: dpp_errors_consensus_basic_data_contract_system_property_index_already_present_error_SystemPropertyIndexAlreadyPresentError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: SystemPropertyIndexAlreadyPresentError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_UndefinedIndexPropertyError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: undefined_index_property_error :: dpp_errors_consensus_basic_data_contract_undefined_index_property_error_UndefinedIndexPropertyError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: UndefinedIndexPropertyError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_UniqueIndicesLimitReachedError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: unique_indices_limit_reached_error :: dpp_errors_consensus_basic_data_contract_unique_indices_limit_reached_error_UniqueIndicesLimitReachedError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: UniqueIndicesLimitReachedError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DuplicateIndexNameError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: duplicate_index_name_error :: dpp_errors_consensus_basic_data_contract_duplicate_index_name_error_DuplicateIndexNameError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateIndexNameError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidDataContractVersionError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_data_contract_version_error :: dpp_errors_consensus_basic_data_contract_invalid_data_contract_version_error_InvalidDataContractVersionError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDataContractVersionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_IncompatibleDataContractSchemaError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: incompatible_data_contract_schema_error :: dpp_errors_consensus_basic_data_contract_incompatible_data_contract_schema_error_IncompatibleDataContractSchemaError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleDataContractSchemaError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DataContractImmutablePropertiesUpdateError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_immutable_properties_update_error :: dpp_errors_consensus_basic_data_contract_data_contract_immutable_properties_update_error_DataContractImmutablePropertiesUpdateError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DataContractImmutablePropertiesUpdateError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DataContractUniqueIndicesChangedError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_unique_indices_changed_error :: dpp_errors_consensus_basic_data_contract_data_contract_unique_indices_changed_error_DataContractUniqueIndicesChangedError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DataContractUniqueIndicesChangedError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DataContractInvalidIndexDefinitionUpdateError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_invalid_index_definition_update_error :: dpp_errors_consensus_basic_data_contract_data_contract_invalid_index_definition_update_error_DataContractInvalidIndexDefinitionUpdateError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DataContractInvalidIndexDefinitionUpdateError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DataContractHaveNewUniqueIndexError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: data_contract_have_new_unique_index_error :: dpp_errors_consensus_basic_data_contract_data_contract_have_new_unique_index_error_DataContractHaveNewUniqueIndexError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DataContractHaveNewUniqueIndexError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DataContractNotPresentError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: data_contract_not_present_error :: dpp_errors_consensus_basic_document_data_contract_not_present_error_DataContractNotPresentError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DataContractNotPresentError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DocumentCreationNotAllowedError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: document_creation_not_allowed_error :: dpp_errors_consensus_basic_document_document_creation_not_allowed_error_DocumentCreationNotAllowedError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DocumentCreationNotAllowedError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DataContractBoundsNotPresentError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: data_contract_bounds_not_present_error :: dpp_errors_consensus_basic_identity_data_contract_bounds_not_present_error_DataContractBoundsNotPresentError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DataContractBoundsNotPresentError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DuplicateDocumentTransitionsWithIdsError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_ids_error :: dpp_errors_consensus_basic_document_duplicate_document_transitions_with_ids_error_DuplicateDocumentTransitionsWithIdsError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateDocumentTransitionsWithIdsError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DuplicateDocumentTransitionsWithIndicesError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: duplicate_document_transitions_with_indices_error :: dpp_errors_consensus_basic_document_duplicate_document_transitions_with_indices_error_DuplicateDocumentTransitionsWithIndicesError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DuplicateDocumentTransitionsWithIndicesError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_NonceOutOfBoundsError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: identity_contract_nonce_out_of_bounds_error :: dpp_errors_consensus_basic_document_identity_contract_nonce_out_of_bounds_error_NonceOutOfBoundsError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: NonceOutOfBoundsError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InconsistentCompoundIndexDataError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: inconsistent_compound_index_data_error :: dpp_errors_consensus_basic_document_inconsistent_compound_index_data_error_InconsistentCompoundIndexDataError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InconsistentCompoundIndexDataError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidDocumentTransitionActionError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_action_error :: dpp_errors_consensus_basic_document_invalid_document_transition_action_error_InvalidDocumentTransitionActionError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTransitionActionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidDocumentTransitionIdError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: invalid_document_transition_id_error :: dpp_errors_consensus_basic_document_invalid_document_transition_id_error_InvalidDocumentTransitionIdError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTransitionIdError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidDocumentTypeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: invalid_document_type_error :: dpp_errors_consensus_basic_document_invalid_document_type_error_InvalidDocumentTypeError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTypeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_MissingPositionsInDocumentTypePropertiesError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_positions_in_document_type_properties_error :: dpp_errors_consensus_basic_document_missing_positions_in_document_type_properties_error_MissingPositionsInDocumentTypePropertiesError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: MissingPositionsInDocumentTypePropertiesError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_MissingDataContractIdBasicError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_data_contract_id_basic_error :: dpp_errors_consensus_basic_document_missing_data_contract_id_basic_error_MissingDataContractIdBasicError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: MissingDataContractIdBasicError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_MissingDocumentTransitionActionError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_document_transition_action_error :: dpp_errors_consensus_basic_document_missing_document_transition_action_error_MissingDocumentTransitionActionError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTransitionActionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_MissingDocumentTransitionTypeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_document_transition_type_error :: dpp_errors_consensus_basic_document_missing_document_transition_type_error_MissingDocumentTransitionTypeError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTransitionTypeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_MissingDocumentTypeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: missing_document_type_error :: dpp_errors_consensus_basic_document_missing_document_type_error_MissingDocumentTypeError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: MissingDocumentTypeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_MaxDocumentsTransitionsExceededError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: max_documents_transitions_exceeded_error :: dpp_errors_consensus_basic_document_max_documents_transitions_exceeded_error_MaxDocumentsTransitionsExceededError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: MaxDocumentsTransitionsExceededError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DuplicatedIdentityPublicKeyBasicError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_basic_error :: dpp_errors_consensus_basic_identity_duplicated_identity_public_key_basic_error_DuplicatedIdentityPublicKeyBasicError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DuplicatedIdentityPublicKeyBasicError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DuplicatedIdentityPublicKeyIdBasicError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: duplicated_identity_public_key_id_basic_error :: dpp_errors_consensus_basic_identity_duplicated_identity_public_key_id_basic_error_DuplicatedIdentityPublicKeyIdBasicError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DuplicatedIdentityPublicKeyIdBasicError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DisablingKeyIdAlsoBeingAddedInSameTransitionError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: disabling_key_id_also_being_added_in_same_transition_error :: dpp_errors_consensus_basic_identity_disabling_key_id_also_being_added_in_same_transition_error_DisablingKeyIdAlsoBeingAddedInSameTransitionError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DisablingKeyIdAlsoBeingAddedInSameTransitionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_IdentityAssetLockProofLockedTransactionMismatchError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_proof_locked_transaction_mismatch_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_proof_locked_transaction_mismatch_error_IdentityAssetLockProofLockedTransactionMismatchError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockProofLockedTransactionMismatchError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_IdentityAssetLockTransactionIsNotFoundError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_is_not_found_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_is_not_found_error_IdentityAssetLockTransactionIsNotFoundError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionIsNotFoundError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_IdentityAssetLockTransactionOutPointAlreadyConsumedError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_already_consumed_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_already_consumed_error_IdentityAssetLockTransactionOutPointAlreadyConsumedError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionOutPointAlreadyConsumedError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_IdentityAssetLockTransactionOutPointNotEnoughBalanceError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_out_point_not_enough_balance_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_out_point_not_enough_balance_error_IdentityAssetLockTransactionOutPointNotEnoughBalanceError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionOutPointNotEnoughBalanceError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_IdentityAssetLockStateTransitionReplayError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_state_transition_replay_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_state_transition_replay_error_IdentityAssetLockStateTransitionReplayError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockStateTransitionReplayError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_IdentityAssetLockTransactionOutputNotFoundError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_asset_lock_transaction_output_not_found_error :: dpp_errors_consensus_basic_identity_identity_asset_lock_transaction_output_not_found_error_IdentityAssetLockTransactionOutputNotFoundError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: IdentityAssetLockTransactionOutputNotFoundError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidAssetLockProofCoreChainHeightError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_core_chain_height_error :: dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_core_chain_height_error_InvalidAssetLockProofCoreChainHeightError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockProofCoreChainHeightError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityAssetLockProofChainLockValidationError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_proof_chain_lock_validation_error :: dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_proof_chain_lock_validation_error_InvalidIdentityAssetLockProofChainLockValidationError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockProofChainLockValidationError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidAssetLockProofTransactionHeightError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_proof_transaction_height_error :: dpp_errors_consensus_basic_identity_invalid_asset_lock_proof_transaction_height_error_InvalidAssetLockProofTransactionHeightError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockProofTransactionHeightError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidAssetLockTransactionOutputReturnSizeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_asset_lock_transaction_output_return_size :: dpp_errors_consensus_basic_identity_invalid_asset_lock_transaction_output_return_size_InvalidAssetLockTransactionOutputReturnSizeError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidAssetLockTransactionOutputReturnSizeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityAssetLockTransactionError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_error :: dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_error_InvalidIdentityAssetLockTransactionError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockTransactionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityAssetLockTransactionOutputError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_asset_lock_transaction_output_error :: dpp_errors_consensus_basic_identity_invalid_identity_asset_lock_transaction_output_error_InvalidIdentityAssetLockTransactionOutputError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityAssetLockTransactionOutputError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityPublicKeyDataError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_data_error :: dpp_errors_consensus_basic_identity_invalid_identity_public_key_data_error_InvalidIdentityPublicKeyDataError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityPublicKeyDataError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidInstantAssetLockProofError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_error :: dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_error_InvalidInstantAssetLockProofError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidInstantAssetLockProofError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidInstantAssetLockProofSignatureError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_instant_asset_lock_proof_signature_error :: dpp_errors_consensus_basic_identity_invalid_instant_asset_lock_proof_signature_error_InvalidInstantAssetLockProofSignatureError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidInstantAssetLockProofSignatureError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_MissingMasterPublicKeyError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: missing_master_public_key_error :: dpp_errors_consensus_basic_identity_missing_master_public_key_error_MissingMasterPublicKeyError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: MissingMasterPublicKeyError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_TooManyMasterPublicKeyError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: too_many_master_public_key_error :: dpp_errors_consensus_basic_identity_too_many_master_public_key_error_TooManyMasterPublicKeyError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: TooManyMasterPublicKeyError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_MasterPublicKeyUpdateError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: state :: identity :: master_public_key_update_error :: dpp_errors_consensus_state_identity_master_public_key_update_error_MasterPublicKeyUpdateError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: MasterPublicKeyUpdateError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidDocumentTypeRequiredSecurityLevelError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_required_security_level :: dpp_errors_consensus_basic_data_contract_invalid_document_type_required_security_level_InvalidDocumentTypeRequiredSecurityLevelError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTypeRequiredSecurityLevelError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityPublicKeySecurityLevelError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_public_key_security_level_error :: dpp_errors_consensus_basic_identity_invalid_identity_public_key_security_level_error_InvalidIdentityPublicKeySecurityLevelError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityPublicKeySecurityLevelError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityKeySignatureError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_key_signature_error :: dpp_errors_consensus_basic_identity_invalid_identity_key_signature_error_InvalidIdentityKeySignatureError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityKeySignatureError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityCreditTransferAmountError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_transfer_amount_error :: dpp_errors_consensus_basic_identity_invalid_identity_credit_transfer_amount_error_InvalidIdentityCreditTransferAmountError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditTransferAmountError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityCreditWithdrawalTransitionOutputScriptError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_output_script_error :: dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_output_script_error_InvalidIdentityCreditWithdrawalTransitionOutputScriptError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionOutputScriptError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: withdrawal_output_script_not_allowed_when_signing_with_owner_key :: dpp_errors_consensus_basic_identity_withdrawal_output_script_not_allowed_when_signing_with_owner_key_WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: WithdrawalOutputScriptNotAllowedWhenSigningWithOwnerKeyError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityCreditWithdrawalTransitionCoreFeeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_core_fee_error :: dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_core_fee_error_InvalidIdentityCreditWithdrawalTransitionCoreFeeError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionCoreFeeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityCreditWithdrawalTransitionAmountError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_credit_withdrawal_transition_amount_error :: dpp_errors_consensus_basic_identity_invalid_identity_credit_withdrawal_transition_amount_error_InvalidIdentityCreditWithdrawalTransitionAmountError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityCreditWithdrawalTransitionAmountError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityUpdateTransitionEmptyError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_empty_error :: dpp_errors_consensus_basic_identity_invalid_identity_update_transition_empty_error_InvalidIdentityUpdateTransitionEmptyError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityUpdateTransitionEmptyError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidIdentityUpdateTransitionDisableKeysError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: invalid_identity_update_transition_disable_keys_error :: dpp_errors_consensus_basic_identity_invalid_identity_update_transition_disable_keys_error_InvalidIdentityUpdateTransitionDisableKeysError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidIdentityUpdateTransitionDisableKeysError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_NotImplementedIdentityCreditWithdrawalTransitionPoolingError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: not_implemented_identity_credit_withdrawal_transition_pooling_error :: dpp_errors_consensus_basic_identity_not_implemented_identity_credit_withdrawal_transition_pooling_error_NotImplementedIdentityCreditWithdrawalTransitionPoolingError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: NotImplementedIdentityCreditWithdrawalTransitionPoolingError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidStateTransitionTypeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidStateTransitionTypeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_MissingStateTransitionTypeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: state_transition :: missing_state_transition_type_error :: dpp_errors_consensus_basic_state_transition_missing_state_transition_type_error_MissingStateTransitionTypeError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: MissingStateTransitionTypeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DocumentFieldMaxSizeExceededError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: document_field_max_size_exceeded_error :: dpp_errors_consensus_basic_document_document_field_max_size_exceeded_error_DocumentFieldMaxSizeExceededError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DocumentFieldMaxSizeExceededError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_StateTransitionMaxSizeExceededError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: state_transition :: state_transition_max_size_exceeded_error :: dpp_errors_consensus_basic_state_transition_state_transition_max_size_exceeded_error_StateTransitionMaxSizeExceededError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: StateTransitionMaxSizeExceededError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_DocumentTransitionsAreAbsentError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: document_transitions_are_absent_error :: dpp_errors_consensus_basic_document_document_transitions_are_absent_error_DocumentTransitionsAreAbsentError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: DocumentTransitionsAreAbsentError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_IdentityCreditTransferToSelfError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: identity :: identity_credit_transfer_to_self_error :: dpp_errors_consensus_basic_identity_identity_credit_transfer_to_self_error_IdentityCreditTransferToSelfError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: IdentityCreditTransferToSelfError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_InvalidDocumentTypeNameError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: invalid_document_type_name_error :: dpp_errors_consensus_basic_data_contract_invalid_document_type_name_error_InvalidDocumentTypeNameError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: InvalidDocumentTypeNameError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_IncompatibleDocumentTypeSchemaError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: incompatible_document_type_schema_error :: dpp_errors_consensus_basic_data_contract_incompatible_document_type_schema_error_IncompatibleDocumentTypeSchemaError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: IncompatibleDocumentTypeSchemaError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_ContestedUniqueIndexOnMutableDocumentTypeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_on_mutable_document_type_error :: dpp_errors_consensus_basic_data_contract_contested_unique_index_on_mutable_document_type_error_ContestedUniqueIndexOnMutableDocumentTypeError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: ContestedUniqueIndexOnMutableDocumentTypeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_ContestedUniqueIndexWithUniqueIndexError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: data_contract :: contested_unique_index_with_unique_index_error :: dpp_errors_consensus_basic_data_contract_contested_unique_index_with_unique_index_error_ContestedUniqueIndexWithUniqueIndexError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: ContestedUniqueIndexWithUniqueIndexError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_OverflowError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: overflow_error :: dpp_errors_consensus_basic_overflow_error_OverflowError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: OverflowError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_UnsupportedFeatureError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: unsupported_feature_error :: dpp_errors_consensus_basic_unsupported_feature_error_UnsupportedFeatureError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: UnsupportedFeatureError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_ContestedDocumentsTemporarilyNotAllowedError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: document :: contested_documents_temporarily_not_allowed_error :: dpp_errors_consensus_basic_document_contested_documents_temporarily_not_allowed_error_ContestedDocumentsTemporarilyNotAllowedError) -> * mut dpp_errors_consensus_basic_basic_error_BasicError { ferment :: boxed (dpp_errors_consensus_basic_basic_error_BasicError :: ContestedDocumentsTemporarilyNotAllowedError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_basic_error_BasicError_destroy < > (ffi : * mut dpp_errors_consensus_basic_basic_error_BasicError) { ferment :: unbox_any (ffi) ; } } # [cfg (feature = "json-schema-validation")] pub mod json_schema_compilation_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`JsonSchemaCompilationError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError { pub compilation_error : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: json_schema_compilation_error :: JsonSchemaCompilationError > for dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError { unsafe fn ffi_from_const (ffi : * const dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError) -> dpp :: errors :: consensus :: basic :: json_schema_compilation_error :: JsonSchemaCompilationError { let ffi_ref = & * ffi ; dpp :: errors :: consensus :: basic :: json_schema_compilation_error :: JsonSchemaCompilationError { compilation_error : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . compilation_error) } } } impl ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: json_schema_compilation_error :: JsonSchemaCompilationError > for dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError { unsafe fn ffi_to_const (obj : dpp :: errors :: consensus :: basic :: json_schema_compilation_error :: JsonSchemaCompilationError) -> * const dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError { ferment :: boxed (dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError { compilation_error : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . compilation_error) }) } } impl Drop for dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . compilation_error) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError_ctor < > (compilation_error : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError { ferment :: boxed (dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError { compilation_error }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError_destroy < > (ffi : * mut dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError_get_compilation_error < > (obj : * const dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError) -> * mut std :: os :: raw :: c_char { (* obj) . compilation_error } # [no_mangle] pub unsafe extern "C" fn dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError_set_compilation_error < > (obj : * const dpp_errors_consensus_basic_json_schema_compilation_error_JsonSchemaCompilationError) -> * mut std :: os :: raw :: c_char { (* obj) . compilation_error } } } } pub mod protocol_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`ProtocolError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_errors_protocol_error_ProtocolError { IdentifierError (* mut std :: os :: raw :: c_char) , StringDecodeError (* mut std :: os :: raw :: c_char) , EmptyPublicKeyDataError , MaxEncodedBytesReachedError { max_size_kbytes : usize , size_hit : usize } , EncodingError (* mut std :: os :: raw :: c_char) , DecodingError (* mut std :: os :: raw :: c_char) , FileNotFound (* mut std :: os :: raw :: c_char) , UnsupportedVersionMismatch { method : * mut std :: os :: raw :: c_char , allowed_versions : * mut crate :: fermented :: generics :: Vec_versioned_feature_core_FeatureVersion , received : * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion } , UnknownVersionMismatch { method : * mut std :: os :: raw :: c_char , known_versions : * mut crate :: fermented :: generics :: Vec_versioned_feature_core_FeatureVersion , received : * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion } , CurrentProtocolVersionNotInitialized , UnknownVersionError (* mut std :: os :: raw :: c_char) , UnknownProtocolVersionError (* mut std :: os :: raw :: c_char) , NoProtocolVersionError , ParsingError (* mut std :: os :: raw :: c_char) , ParsingJsonError (* mut dash_spv_apple_bindings :: custom :: serde_json :: serde_json_Error) , Error (* mut dash_spv_apple_bindings :: custom :: anyhow :: anyhow_Error) , InvalidKeyContractBoundsError (* mut std :: os :: raw :: c_char) , UnknownStorageKeyRequirements (* mut std :: os :: raw :: c_char) , UnknownContestedIndexResolution (* mut std :: os :: raw :: c_char) , DataContractError (* mut crate :: fermented :: types :: dpp :: data_contract :: errors :: contract :: dpp_data_contract_errors_contract_DataContractError) , # [cfg (all (feature = "state-transitions" , feature = "validation"))] StateTransitionError (* mut crate :: fermented :: types :: dpp :: state_transition :: errors :: state_transition_error :: dpp_state_transition_errors_state_transition_error_StateTransitionError) , InvalidStateTransitionType (* mut std :: os :: raw :: c_char) , PlatformVersionError (* mut crate :: fermented :: types :: platform_version :: error :: platform_version_error_PlatformVersionError) , ConsensusError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: consensus_error :: dpp_errors_consensus_consensus_error_ConsensusError) , Document (* mut crate :: fermented :: types :: dpp :: document :: errors :: dpp_document_errors_DocumentError) , Generic (* mut std :: os :: raw :: c_char) , NotSupported (* mut std :: os :: raw :: c_char) , # [cfg (feature = "message-signing")] InvalidSigningKeyTypeError (* mut std :: os :: raw :: c_char) , # [cfg (any (feature = "state-transition-validation" , feature = "state-transition-signing"))] InvalidIdentityPublicKeyTypeError (* mut crate :: fermented :: types :: dpp :: state_transition :: errors :: invalid_identity_public_key_type_error :: dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) , # [cfg (feature = "state-transition-validation")] StateTransitionIsNotSignedError (* mut crate :: fermented :: types :: dpp :: state_transition :: errors :: state_transition_is_not_signed_error :: dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError) , # [cfg (feature = "state-transition-validation")] PublicKeySecurityLevelNotMetError (* mut crate :: fermented :: types :: dpp :: state_transition :: errors :: public_key_security_level_not_met_error :: dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) , # [cfg (any (all (feature = "state-transitions" , feature = "validation") , feature = "state-transition-validation" , feature = "state-transition-signing" , feature = "state-transition-validation"))] WrongPublicKeyPurposeError (* mut dpp :: state_transition :: errors :: wrong_public_key_purpose_error :: WrongPublicKeyPurposeError) , # [cfg (feature = "state-transition-validation")] PublicKeyMismatchError (* mut crate :: fermented :: types :: dpp :: state_transition :: errors :: public_key_mismatch_error :: dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError) , # [cfg (feature = "state-transition-validation")] InvalidSignaturePublicKeyError (* mut crate :: fermented :: types :: dpp :: state_transition :: errors :: invalid_signature_public_key_error :: dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError) , NonConsensusError (* mut crate :: fermented :: types :: dpp :: errors :: non_consensus_error :: dpp_errors_non_consensus_error_NonConsensusError) , CompatibleProtocolVersionIsNotDefinedError (* mut crate :: fermented :: types :: dpp :: errors :: compatible_protocol_version_is_not_defined_error :: dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError) , InvalidDocumentTypeError (* mut crate :: fermented :: types :: dpp :: data_contract :: errors :: invalid_document_type_error :: dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError) , DataContractNotPresentError (* mut crate :: fermented :: types :: dpp :: data_contract :: errors :: data_contract_not_present_error :: dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError) , InvalidSignaturePublicKeySecurityLevelError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError) , InvalidStateTransitionTypeError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError) , PublicKeyIsDisabledError (* mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError) , IdentityNotPresentError (* mut crate :: fermented :: types :: dpp :: data_contract :: errors :: identity_not_present_error :: dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError) , Overflow (* mut std :: os :: raw :: c_char) , DesiredKeyWithTypePurposeSecurityLevelMissing (* mut std :: os :: raw :: c_char) , ValueError (* mut crate :: fermented :: types :: platform_value :: error :: platform_value_error_Error) , PlatformSerializationError (* mut std :: os :: raw :: c_char) , PlatformDeserializationError (* mut std :: os :: raw :: c_char) , DashCoreError (* mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_consensus_Error) , InvalidIdentityError { errors : * mut crate :: fermented :: generics :: Vec_dpp_errors_consensus_consensus_error_ConsensusError , raw_identity : * mut crate :: fermented :: types :: platform_value :: platform_value_Value } , VoteError (* mut std :: os :: raw :: c_char) , PublicKeyGenerationError (* mut std :: os :: raw :: c_char) , CorruptedCodeExecution (* mut std :: os :: raw :: c_char) , CorruptedSerialization (* mut std :: os :: raw :: c_char) , CriticalCorruptedCreditsCodeExecution (* mut std :: os :: raw :: c_char) , InvalidVectorSizeError (* mut crate :: fermented :: types :: dpp :: errors :: invalid_vector_size_error :: dpp_errors_invalid_vector_size_error_InvalidVectorSizeError) , InvalidCBOR (* mut std :: os :: raw :: c_char) , # [cfg (feature = "bls-signatures")] BlsError (* mut dashcore :: blsful :: BlsError) , PrivateKeySizeError { got : u32 } , InvalidBLSPrivateKeyError (* mut std :: os :: raw :: c_char) , BlsSignatureSizeError { got : u32 } } impl ferment :: FFIConversionFrom < dpp :: errors :: protocol_error :: ProtocolError > for dpp_errors_protocol_error_ProtocolError { unsafe fn ffi_from_const (ffi : * const dpp_errors_protocol_error_ProtocolError) -> dpp :: errors :: protocol_error :: ProtocolError { let ffi_ref = & * ffi ; match ffi_ref { dpp_errors_protocol_error_ProtocolError :: IdentifierError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: IdentifierError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: StringDecodeError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: StringDecodeError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: EmptyPublicKeyDataError => dpp :: errors :: protocol_error :: ProtocolError :: EmptyPublicKeyDataError , dpp_errors_protocol_error_ProtocolError :: MaxEncodedBytesReachedError { max_size_kbytes , size_hit } => dpp :: errors :: protocol_error :: ProtocolError :: MaxEncodedBytesReachedError { max_size_kbytes : * max_size_kbytes , size_hit : * size_hit } , dpp_errors_protocol_error_ProtocolError :: EncodingError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: EncodingError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: DecodingError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: DecodingError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: FileNotFound (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: FileNotFound (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: UnsupportedVersionMismatch { method , allowed_versions , received } => dpp :: errors :: protocol_error :: ProtocolError :: UnsupportedVersionMismatch { method : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* method) , allowed_versions : < crate :: fermented :: generics :: Vec_versioned_feature_core_FeatureVersion as ferment :: FFIConversionFrom < Vec < versioned_feature_core :: FeatureVersion > >> :: ffi_from (* allowed_versions) , received : < dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion as ferment :: FFIConversionFrom < versioned_feature_core :: FeatureVersion >> :: ffi_from (* received) } , dpp_errors_protocol_error_ProtocolError :: UnknownVersionMismatch { method , known_versions , received } => dpp :: errors :: protocol_error :: ProtocolError :: UnknownVersionMismatch { method : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* method) , known_versions : < crate :: fermented :: generics :: Vec_versioned_feature_core_FeatureVersion as ferment :: FFIConversionFrom < Vec < versioned_feature_core :: FeatureVersion > >> :: ffi_from (* known_versions) , received : < dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion as ferment :: FFIConversionFrom < versioned_feature_core :: FeatureVersion >> :: ffi_from (* received) } , dpp_errors_protocol_error_ProtocolError :: CurrentProtocolVersionNotInitialized => dpp :: errors :: protocol_error :: ProtocolError :: CurrentProtocolVersionNotInitialized , dpp_errors_protocol_error_ProtocolError :: UnknownVersionError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: UnknownVersionError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: UnknownProtocolVersionError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: UnknownProtocolVersionError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: NoProtocolVersionError => dpp :: errors :: protocol_error :: ProtocolError :: NoProtocolVersionError , dpp_errors_protocol_error_ProtocolError :: ParsingError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: ParsingError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: ParsingJsonError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: ParsingJsonError (< dash_spv_apple_bindings :: custom :: serde_json :: serde_json_Error as ferment :: FFIConversionFrom < serde_json :: Error >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: Error (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: Error (< dash_spv_apple_bindings :: custom :: anyhow :: anyhow_Error as ferment :: FFIConversionFrom < anyhow :: Error >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: InvalidKeyContractBoundsError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: InvalidKeyContractBoundsError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: UnknownStorageKeyRequirements (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: UnknownStorageKeyRequirements (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: UnknownContestedIndexResolution (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: UnknownContestedIndexResolution (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: DataContractError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: DataContractError (< crate :: fermented :: types :: dpp :: data_contract :: errors :: contract :: dpp_data_contract_errors_contract_DataContractError as ferment :: FFIConversionFrom < dpp :: data_contract :: errors :: contract :: DataContractError >> :: ffi_from (* o_0)) , # [cfg (all (feature = "state-transitions" , feature = "validation"))] dpp_errors_protocol_error_ProtocolError :: StateTransitionError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: StateTransitionError (< crate :: fermented :: types :: dpp :: state_transition :: errors :: state_transition_error :: dpp_state_transition_errors_state_transition_error_StateTransitionError as ferment :: FFIConversionFrom < dpp :: state_transition :: errors :: state_transition_error :: StateTransitionError >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: InvalidStateTransitionType (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: InvalidStateTransitionType (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: PlatformVersionError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: PlatformVersionError (< crate :: fermented :: types :: platform_version :: error :: platform_version_error_PlatformVersionError as ferment :: FFIConversionFrom < platform_version :: error :: PlatformVersionError >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: ConsensusError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: ConsensusError (Box :: new (< crate :: fermented :: types :: dpp :: errors :: consensus :: consensus_error :: dpp_errors_consensus_consensus_error_ConsensusError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: consensus_error :: ConsensusError >> :: ffi_from (* o_0))) , dpp_errors_protocol_error_ProtocolError :: Document (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: Document (Box :: new (< crate :: fermented :: types :: dpp :: document :: errors :: dpp_document_errors_DocumentError as ferment :: FFIConversionFrom < dpp :: document :: errors :: DocumentError >> :: ffi_from (* o_0))) , dpp_errors_protocol_error_ProtocolError :: Generic (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: Generic (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: NotSupported (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: NotSupported (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , # [cfg (feature = "message-signing")] dpp_errors_protocol_error_ProtocolError :: InvalidSigningKeyTypeError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: InvalidSigningKeyTypeError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , # [cfg (any (feature = "state-transition-validation" , feature = "state-transition-signing"))] dpp_errors_protocol_error_ProtocolError :: InvalidIdentityPublicKeyTypeError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: InvalidIdentityPublicKeyTypeError (< crate :: fermented :: types :: dpp :: state_transition :: errors :: invalid_identity_public_key_type_error :: dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError as ferment :: FFIConversionFrom < dpp :: state_transition :: errors :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError >> :: ffi_from (* o_0)) , # [cfg (feature = "state-transition-validation")] dpp_errors_protocol_error_ProtocolError :: StateTransitionIsNotSignedError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: StateTransitionIsNotSignedError (< crate :: fermented :: types :: dpp :: state_transition :: errors :: state_transition_is_not_signed_error :: dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError as ferment :: FFIConversionFrom < dpp :: state_transition :: errors :: state_transition_is_not_signed_error :: StateTransitionIsNotSignedError >> :: ffi_from (* o_0)) , # [cfg (feature = "state-transition-validation")] dpp_errors_protocol_error_ProtocolError :: PublicKeySecurityLevelNotMetError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: PublicKeySecurityLevelNotMetError (< crate :: fermented :: types :: dpp :: state_transition :: errors :: public_key_security_level_not_met_error :: dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError as ferment :: FFIConversionFrom < dpp :: state_transition :: errors :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError >> :: ffi_from (* o_0)) , # [cfg (any (all (feature = "state-transitions" , feature = "validation") , feature = "state-transition-validation" , feature = "state-transition-signing" , feature = "state-transition-validation"))] dpp_errors_protocol_error_ProtocolError :: WrongPublicKeyPurposeError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: WrongPublicKeyPurposeError ((& * * o_0) . clone ()) , # [cfg (feature = "state-transition-validation")] dpp_errors_protocol_error_ProtocolError :: PublicKeyMismatchError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: PublicKeyMismatchError (< crate :: fermented :: types :: dpp :: state_transition :: errors :: public_key_mismatch_error :: dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError as ferment :: FFIConversionFrom < dpp :: state_transition :: errors :: public_key_mismatch_error :: PublicKeyMismatchError >> :: ffi_from (* o_0)) , # [cfg (feature = "state-transition-validation")] dpp_errors_protocol_error_ProtocolError :: InvalidSignaturePublicKeyError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: InvalidSignaturePublicKeyError (< crate :: fermented :: types :: dpp :: state_transition :: errors :: invalid_signature_public_key_error :: dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError as ferment :: FFIConversionFrom < dpp :: state_transition :: errors :: invalid_signature_public_key_error :: InvalidSignaturePublicKeyError >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: NonConsensusError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: NonConsensusError (< crate :: fermented :: types :: dpp :: errors :: non_consensus_error :: dpp_errors_non_consensus_error_NonConsensusError as ferment :: FFIConversionFrom < dpp :: errors :: non_consensus_error :: NonConsensusError >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: CompatibleProtocolVersionIsNotDefinedError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: CompatibleProtocolVersionIsNotDefinedError (< crate :: fermented :: types :: dpp :: errors :: compatible_protocol_version_is_not_defined_error :: dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError as ferment :: FFIConversionFrom < dpp :: errors :: compatible_protocol_version_is_not_defined_error :: CompatibleProtocolVersionIsNotDefinedError >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: InvalidDocumentTypeError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: InvalidDocumentTypeError (< crate :: fermented :: types :: dpp :: data_contract :: errors :: invalid_document_type_error :: dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError as ferment :: FFIConversionFrom < dpp :: data_contract :: errors :: invalid_document_type_error :: InvalidDocumentTypeError >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: DataContractNotPresentError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: DataContractNotPresentError (< crate :: fermented :: types :: dpp :: data_contract :: errors :: data_contract_not_present_error :: dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError as ferment :: FFIConversionFrom < dpp :: data_contract :: errors :: data_contract_not_present_error :: DataContractNotPresentError >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: InvalidSignaturePublicKeySecurityLevelError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: InvalidSignaturePublicKeySecurityLevelError (< crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: InvalidSignaturePublicKeySecurityLevelError >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: InvalidStateTransitionTypeError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: InvalidStateTransitionTypeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: InvalidStateTransitionTypeError >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: PublicKeyIsDisabledError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: PublicKeyIsDisabledError (< crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError as ferment :: FFIConversionFrom < dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: PublicKeyIsDisabledError >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: IdentityNotPresentError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: IdentityNotPresentError (< crate :: fermented :: types :: dpp :: data_contract :: errors :: identity_not_present_error :: dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError as ferment :: FFIConversionFrom < dpp :: data_contract :: errors :: identity_not_present_error :: IdentityNotPresentError >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: Overflow (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: Overflow (Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (* o_0)))) , dpp_errors_protocol_error_ProtocolError :: DesiredKeyWithTypePurposeSecurityLevelMissing (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: DesiredKeyWithTypePurposeSecurityLevelMissing (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: ValueError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: ValueError (< crate :: fermented :: types :: platform_value :: error :: platform_value_error_Error as ferment :: FFIConversionFrom < platform_value :: error :: Error >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: PlatformSerializationError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: PlatformSerializationError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: PlatformDeserializationError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: PlatformDeserializationError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: DashCoreError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: DashCoreError (< dash_spv_apple_bindings :: custom :: dashcore :: dashcore_consensus_Error as ferment :: FFIConversionFrom < dashcore :: consensus :: encode :: Error >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: InvalidIdentityError { errors , raw_identity } => dpp :: errors :: protocol_error :: ProtocolError :: InvalidIdentityError { errors : < crate :: fermented :: generics :: Vec_dpp_errors_consensus_consensus_error_ConsensusError as ferment :: FFIConversionFrom < Vec < dpp :: errors :: consensus :: consensus_error :: ConsensusError > >> :: ffi_from (* errors) , raw_identity : < crate :: fermented :: types :: platform_value :: platform_value_Value as ferment :: FFIConversionFrom < platform_value :: Value >> :: ffi_from (* raw_identity) } , dpp_errors_protocol_error_ProtocolError :: VoteError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: VoteError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: PublicKeyGenerationError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: PublicKeyGenerationError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: CorruptedCodeExecution (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: CorruptedCodeExecution (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: CorruptedSerialization (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: CorruptedSerialization (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: CriticalCorruptedCreditsCodeExecution (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: CriticalCorruptedCreditsCodeExecution (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: InvalidVectorSizeError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: InvalidVectorSizeError (< crate :: fermented :: types :: dpp :: errors :: invalid_vector_size_error :: dpp_errors_invalid_vector_size_error_InvalidVectorSizeError as ferment :: FFIConversionFrom < dpp :: errors :: invalid_vector_size_error :: InvalidVectorSizeError >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: InvalidCBOR (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: InvalidCBOR (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , # [cfg (feature = "bls-signatures")] dpp_errors_protocol_error_ProtocolError :: BlsError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: BlsError ((& * * o_0) . clone ()) , dpp_errors_protocol_error_ProtocolError :: PrivateKeySizeError { got } => dpp :: errors :: protocol_error :: ProtocolError :: PrivateKeySizeError { got : * got } , dpp_errors_protocol_error_ProtocolError :: InvalidBLSPrivateKeyError (o_0) => dpp :: errors :: protocol_error :: ProtocolError :: InvalidBLSPrivateKeyError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_errors_protocol_error_ProtocolError :: BlsSignatureSizeError { got } => dpp :: errors :: protocol_error :: ProtocolError :: BlsSignatureSizeError { got : * got } } } } impl ferment :: FFIConversionTo < dpp :: errors :: protocol_error :: ProtocolError > for dpp_errors_protocol_error_ProtocolError { unsafe fn ffi_to_const (obj : dpp :: errors :: protocol_error :: ProtocolError) -> * const dpp_errors_protocol_error_ProtocolError { ferment :: boxed (match obj { dpp :: errors :: protocol_error :: ProtocolError :: IdentifierError (o_0) => dpp_errors_protocol_error_ProtocolError :: IdentifierError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: StringDecodeError (o_0) => dpp_errors_protocol_error_ProtocolError :: StringDecodeError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: EmptyPublicKeyDataError => dpp_errors_protocol_error_ProtocolError :: EmptyPublicKeyDataError , dpp :: errors :: protocol_error :: ProtocolError :: MaxEncodedBytesReachedError { max_size_kbytes , size_hit } => dpp_errors_protocol_error_ProtocolError :: MaxEncodedBytesReachedError { max_size_kbytes : max_size_kbytes , size_hit : size_hit } , dpp :: errors :: protocol_error :: ProtocolError :: EncodingError (o_0) => dpp_errors_protocol_error_ProtocolError :: EncodingError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: DecodingError (o_0) => dpp_errors_protocol_error_ProtocolError :: DecodingError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: FileNotFound (o_0) => dpp_errors_protocol_error_ProtocolError :: FileNotFound (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: UnsupportedVersionMismatch { method , allowed_versions , received } => dpp_errors_protocol_error_ProtocolError :: UnsupportedVersionMismatch { method : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (method) , allowed_versions : < crate :: fermented :: generics :: Vec_versioned_feature_core_FeatureVersion as ferment :: FFIConversionTo < Vec < versioned_feature_core :: FeatureVersion > >> :: ffi_to (allowed_versions) , received : < dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion as ferment :: FFIConversionTo < versioned_feature_core :: FeatureVersion >> :: ffi_to (received) } , dpp :: errors :: protocol_error :: ProtocolError :: UnknownVersionMismatch { method , known_versions , received } => dpp_errors_protocol_error_ProtocolError :: UnknownVersionMismatch { method : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (method) , known_versions : < crate :: fermented :: generics :: Vec_versioned_feature_core_FeatureVersion as ferment :: FFIConversionTo < Vec < versioned_feature_core :: FeatureVersion > >> :: ffi_to (known_versions) , received : < dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion as ferment :: FFIConversionTo < versioned_feature_core :: FeatureVersion >> :: ffi_to (received) } , dpp :: errors :: protocol_error :: ProtocolError :: CurrentProtocolVersionNotInitialized => dpp_errors_protocol_error_ProtocolError :: CurrentProtocolVersionNotInitialized , dpp :: errors :: protocol_error :: ProtocolError :: UnknownVersionError (o_0) => dpp_errors_protocol_error_ProtocolError :: UnknownVersionError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: UnknownProtocolVersionError (o_0) => dpp_errors_protocol_error_ProtocolError :: UnknownProtocolVersionError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: NoProtocolVersionError => dpp_errors_protocol_error_ProtocolError :: NoProtocolVersionError , dpp :: errors :: protocol_error :: ProtocolError :: ParsingError (o_0) => dpp_errors_protocol_error_ProtocolError :: ParsingError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: ParsingJsonError (o_0) => dpp_errors_protocol_error_ProtocolError :: ParsingJsonError (< dash_spv_apple_bindings :: custom :: serde_json :: serde_json_Error as ferment :: FFIConversionTo < serde_json :: Error >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: Error (o_0) => dpp_errors_protocol_error_ProtocolError :: Error (< dash_spv_apple_bindings :: custom :: anyhow :: anyhow_Error as ferment :: FFIConversionTo < anyhow :: Error >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: InvalidKeyContractBoundsError (o_0) => dpp_errors_protocol_error_ProtocolError :: InvalidKeyContractBoundsError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: UnknownStorageKeyRequirements (o_0) => dpp_errors_protocol_error_ProtocolError :: UnknownStorageKeyRequirements (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: UnknownContestedIndexResolution (o_0) => dpp_errors_protocol_error_ProtocolError :: UnknownContestedIndexResolution (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: DataContractError (o_0) => dpp_errors_protocol_error_ProtocolError :: DataContractError (< crate :: fermented :: types :: dpp :: data_contract :: errors :: contract :: dpp_data_contract_errors_contract_DataContractError as ferment :: FFIConversionTo < dpp :: data_contract :: errors :: contract :: DataContractError >> :: ffi_to (o_0)) , # [cfg (all (feature = "state-transitions" , feature = "validation"))] dpp :: errors :: protocol_error :: ProtocolError :: StateTransitionError (o_0) => dpp_errors_protocol_error_ProtocolError :: StateTransitionError (< crate :: fermented :: types :: dpp :: state_transition :: errors :: state_transition_error :: dpp_state_transition_errors_state_transition_error_StateTransitionError as ferment :: FFIConversionTo < dpp :: state_transition :: errors :: state_transition_error :: StateTransitionError >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: InvalidStateTransitionType (o_0) => dpp_errors_protocol_error_ProtocolError :: InvalidStateTransitionType (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: PlatformVersionError (o_0) => dpp_errors_protocol_error_ProtocolError :: PlatformVersionError (< crate :: fermented :: types :: platform_version :: error :: platform_version_error_PlatformVersionError as ferment :: FFIConversionTo < platform_version :: error :: PlatformVersionError >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: ConsensusError (o_0) => dpp_errors_protocol_error_ProtocolError :: ConsensusError (< crate :: fermented :: types :: dpp :: errors :: consensus :: consensus_error :: dpp_errors_consensus_consensus_error_ConsensusError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: consensus_error :: ConsensusError >> :: ffi_to (* o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: Document (o_0) => dpp_errors_protocol_error_ProtocolError :: Document (< crate :: fermented :: types :: dpp :: document :: errors :: dpp_document_errors_DocumentError as ferment :: FFIConversionTo < dpp :: document :: errors :: DocumentError >> :: ffi_to (* o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: Generic (o_0) => dpp_errors_protocol_error_ProtocolError :: Generic (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: NotSupported (o_0) => dpp_errors_protocol_error_ProtocolError :: NotSupported (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , # [cfg (feature = "message-signing")] dpp :: errors :: protocol_error :: ProtocolError :: InvalidSigningKeyTypeError (o_0) => dpp_errors_protocol_error_ProtocolError :: InvalidSigningKeyTypeError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , # [cfg (any (feature = "state-transition-validation" , feature = "state-transition-signing"))] dpp :: errors :: protocol_error :: ProtocolError :: InvalidIdentityPublicKeyTypeError (o_0) => dpp_errors_protocol_error_ProtocolError :: InvalidIdentityPublicKeyTypeError (< crate :: fermented :: types :: dpp :: state_transition :: errors :: invalid_identity_public_key_type_error :: dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError as ferment :: FFIConversionTo < dpp :: state_transition :: errors :: invalid_identity_public_key_type_error :: InvalidIdentityPublicKeyTypeError >> :: ffi_to (o_0)) , # [cfg (feature = "state-transition-validation")] dpp :: errors :: protocol_error :: ProtocolError :: StateTransitionIsNotSignedError (o_0) => dpp_errors_protocol_error_ProtocolError :: StateTransitionIsNotSignedError (< crate :: fermented :: types :: dpp :: state_transition :: errors :: state_transition_is_not_signed_error :: dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError as ferment :: FFIConversionTo < dpp :: state_transition :: errors :: state_transition_is_not_signed_error :: StateTransitionIsNotSignedError >> :: ffi_to (o_0)) , # [cfg (feature = "state-transition-validation")] dpp :: errors :: protocol_error :: ProtocolError :: PublicKeySecurityLevelNotMetError (o_0) => dpp_errors_protocol_error_ProtocolError :: PublicKeySecurityLevelNotMetError (< crate :: fermented :: types :: dpp :: state_transition :: errors :: public_key_security_level_not_met_error :: dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError as ferment :: FFIConversionTo < dpp :: state_transition :: errors :: public_key_security_level_not_met_error :: PublicKeySecurityLevelNotMetError >> :: ffi_to (o_0)) , # [cfg (any (all (feature = "state-transitions" , feature = "validation") , feature = "state-transition-validation" , feature = "state-transition-signing" , feature = "state-transition-validation"))] dpp :: errors :: protocol_error :: ProtocolError :: WrongPublicKeyPurposeError (o_0) => dpp_errors_protocol_error_ProtocolError :: WrongPublicKeyPurposeError (ferment :: boxed (o_0)) , # [cfg (feature = "state-transition-validation")] dpp :: errors :: protocol_error :: ProtocolError :: PublicKeyMismatchError (o_0) => dpp_errors_protocol_error_ProtocolError :: PublicKeyMismatchError (< crate :: fermented :: types :: dpp :: state_transition :: errors :: public_key_mismatch_error :: dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError as ferment :: FFIConversionTo < dpp :: state_transition :: errors :: public_key_mismatch_error :: PublicKeyMismatchError >> :: ffi_to (o_0)) , # [cfg (feature = "state-transition-validation")] dpp :: errors :: protocol_error :: ProtocolError :: InvalidSignaturePublicKeyError (o_0) => dpp_errors_protocol_error_ProtocolError :: InvalidSignaturePublicKeyError (< crate :: fermented :: types :: dpp :: state_transition :: errors :: invalid_signature_public_key_error :: dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError as ferment :: FFIConversionTo < dpp :: state_transition :: errors :: invalid_signature_public_key_error :: InvalidSignaturePublicKeyError >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: NonConsensusError (o_0) => dpp_errors_protocol_error_ProtocolError :: NonConsensusError (< crate :: fermented :: types :: dpp :: errors :: non_consensus_error :: dpp_errors_non_consensus_error_NonConsensusError as ferment :: FFIConversionTo < dpp :: errors :: non_consensus_error :: NonConsensusError >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: CompatibleProtocolVersionIsNotDefinedError (o_0) => dpp_errors_protocol_error_ProtocolError :: CompatibleProtocolVersionIsNotDefinedError (< crate :: fermented :: types :: dpp :: errors :: compatible_protocol_version_is_not_defined_error :: dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError as ferment :: FFIConversionTo < dpp :: errors :: compatible_protocol_version_is_not_defined_error :: CompatibleProtocolVersionIsNotDefinedError >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: InvalidDocumentTypeError (o_0) => dpp_errors_protocol_error_ProtocolError :: InvalidDocumentTypeError (< crate :: fermented :: types :: dpp :: data_contract :: errors :: invalid_document_type_error :: dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError as ferment :: FFIConversionTo < dpp :: data_contract :: errors :: invalid_document_type_error :: InvalidDocumentTypeError >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: DataContractNotPresentError (o_0) => dpp_errors_protocol_error_ProtocolError :: DataContractNotPresentError (< crate :: fermented :: types :: dpp :: data_contract :: errors :: data_contract_not_present_error :: dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError as ferment :: FFIConversionTo < dpp :: data_contract :: errors :: data_contract_not_present_error :: DataContractNotPresentError >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: InvalidSignaturePublicKeySecurityLevelError (o_0) => dpp_errors_protocol_error_ProtocolError :: InvalidSignaturePublicKeySecurityLevelError (< crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: InvalidSignaturePublicKeySecurityLevelError >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: InvalidStateTransitionTypeError (o_0) => dpp_errors_protocol_error_ProtocolError :: InvalidStateTransitionTypeError (< crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: InvalidStateTransitionTypeError >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: PublicKeyIsDisabledError (o_0) => dpp_errors_protocol_error_ProtocolError :: PublicKeyIsDisabledError (< crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError as ferment :: FFIConversionTo < dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: PublicKeyIsDisabledError >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: IdentityNotPresentError (o_0) => dpp_errors_protocol_error_ProtocolError :: IdentityNotPresentError (< crate :: fermented :: types :: dpp :: data_contract :: errors :: identity_not_present_error :: dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError as ferment :: FFIConversionTo < dpp :: data_contract :: errors :: identity_not_present_error :: IdentityNotPresentError >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: Overflow (o_0) => dpp_errors_protocol_error_ProtocolError :: Overflow (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < & str >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: DesiredKeyWithTypePurposeSecurityLevelMissing (o_0) => dpp_errors_protocol_error_ProtocolError :: DesiredKeyWithTypePurposeSecurityLevelMissing (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: ValueError (o_0) => dpp_errors_protocol_error_ProtocolError :: ValueError (< crate :: fermented :: types :: platform_value :: error :: platform_value_error_Error as ferment :: FFIConversionTo < platform_value :: error :: Error >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: PlatformSerializationError (o_0) => dpp_errors_protocol_error_ProtocolError :: PlatformSerializationError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: PlatformDeserializationError (o_0) => dpp_errors_protocol_error_ProtocolError :: PlatformDeserializationError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: DashCoreError (o_0) => dpp_errors_protocol_error_ProtocolError :: DashCoreError (< dash_spv_apple_bindings :: custom :: dashcore :: dashcore_consensus_Error as ferment :: FFIConversionTo < dashcore :: consensus :: encode :: Error >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: InvalidIdentityError { errors , raw_identity } => dpp_errors_protocol_error_ProtocolError :: InvalidIdentityError { errors : < crate :: fermented :: generics :: Vec_dpp_errors_consensus_consensus_error_ConsensusError as ferment :: FFIConversionTo < Vec < dpp :: errors :: consensus :: consensus_error :: ConsensusError > >> :: ffi_to (errors) , raw_identity : < crate :: fermented :: types :: platform_value :: platform_value_Value as ferment :: FFIConversionTo < platform_value :: Value >> :: ffi_to (raw_identity) } , dpp :: errors :: protocol_error :: ProtocolError :: VoteError (o_0) => dpp_errors_protocol_error_ProtocolError :: VoteError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: PublicKeyGenerationError (o_0) => dpp_errors_protocol_error_ProtocolError :: PublicKeyGenerationError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: CorruptedCodeExecution (o_0) => dpp_errors_protocol_error_ProtocolError :: CorruptedCodeExecution (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: CorruptedSerialization (o_0) => dpp_errors_protocol_error_ProtocolError :: CorruptedSerialization (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: CriticalCorruptedCreditsCodeExecution (o_0) => dpp_errors_protocol_error_ProtocolError :: CriticalCorruptedCreditsCodeExecution (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: InvalidVectorSizeError (o_0) => dpp_errors_protocol_error_ProtocolError :: InvalidVectorSizeError (< crate :: fermented :: types :: dpp :: errors :: invalid_vector_size_error :: dpp_errors_invalid_vector_size_error_InvalidVectorSizeError as ferment :: FFIConversionTo < dpp :: errors :: invalid_vector_size_error :: InvalidVectorSizeError >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: InvalidCBOR (o_0) => dpp_errors_protocol_error_ProtocolError :: InvalidCBOR (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , # [cfg (feature = "bls-signatures")] dpp :: errors :: protocol_error :: ProtocolError :: BlsError (o_0) => dpp_errors_protocol_error_ProtocolError :: BlsError (ferment :: boxed (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: PrivateKeySizeError { got } => dpp_errors_protocol_error_ProtocolError :: PrivateKeySizeError { got : got } , dpp :: errors :: protocol_error :: ProtocolError :: InvalidBLSPrivateKeyError (o_0) => dpp_errors_protocol_error_ProtocolError :: InvalidBLSPrivateKeyError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: errors :: protocol_error :: ProtocolError :: BlsSignatureSizeError { got } => dpp_errors_protocol_error_ProtocolError :: BlsSignatureSizeError { got : got } , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_errors_protocol_error_ProtocolError { fn drop (& mut self) { unsafe { match self { dpp_errors_protocol_error_ProtocolError :: IdentifierError (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: StringDecodeError (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: EmptyPublicKeyDataError => { } , dpp_errors_protocol_error_ProtocolError :: MaxEncodedBytesReachedError { max_size_kbytes , size_hit } => { ; ; ; } , dpp_errors_protocol_error_ProtocolError :: EncodingError (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: DecodingError (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: FileNotFound (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: UnsupportedVersionMismatch { method , allowed_versions , received } => { ferment :: unbox_string (* method) ; ; ferment :: unbox_any (* allowed_versions) ; ; ferment :: unbox_any (* received) ; } , dpp_errors_protocol_error_ProtocolError :: UnknownVersionMismatch { method , known_versions , received } => { ferment :: unbox_string (* method) ; ; ferment :: unbox_any (* known_versions) ; ; ferment :: unbox_any (* received) ; } , dpp_errors_protocol_error_ProtocolError :: CurrentProtocolVersionNotInitialized => { } , dpp_errors_protocol_error_ProtocolError :: UnknownVersionError (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: UnknownProtocolVersionError (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: NoProtocolVersionError => { } , dpp_errors_protocol_error_ProtocolError :: ParsingError (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: ParsingJsonError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: Error (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: InvalidKeyContractBoundsError (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: UnknownStorageKeyRequirements (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: UnknownContestedIndexResolution (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: DataContractError (o_0) => { ferment :: unbox_any (* o_0) ; } , # [cfg (all (feature = "state-transitions" , feature = "validation"))] dpp_errors_protocol_error_ProtocolError :: StateTransitionError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: InvalidStateTransitionType (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: PlatformVersionError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: ConsensusError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: Document (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: Generic (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: NotSupported (o_0) => { ferment :: unbox_string (* o_0) ; } , # [cfg (feature = "message-signing")] dpp_errors_protocol_error_ProtocolError :: InvalidSigningKeyTypeError (o_0) => { ferment :: unbox_string (* o_0) ; } , # [cfg (any (feature = "state-transition-validation" , feature = "state-transition-signing"))] dpp_errors_protocol_error_ProtocolError :: InvalidIdentityPublicKeyTypeError (o_0) => { ferment :: unbox_any (* o_0) ; } , # [cfg (feature = "state-transition-validation")] dpp_errors_protocol_error_ProtocolError :: StateTransitionIsNotSignedError (o_0) => { ferment :: unbox_any (* o_0) ; } , # [cfg (feature = "state-transition-validation")] dpp_errors_protocol_error_ProtocolError :: PublicKeySecurityLevelNotMetError (o_0) => { ferment :: unbox_any (* o_0) ; } , # [cfg (any (all (feature = "state-transitions" , feature = "validation") , feature = "state-transition-validation" , feature = "state-transition-signing" , feature = "state-transition-validation"))] dpp_errors_protocol_error_ProtocolError :: WrongPublicKeyPurposeError (o_0) => { ferment :: unbox_any (* o_0) ; } , # [cfg (feature = "state-transition-validation")] dpp_errors_protocol_error_ProtocolError :: PublicKeyMismatchError (o_0) => { ferment :: unbox_any (* o_0) ; } , # [cfg (feature = "state-transition-validation")] dpp_errors_protocol_error_ProtocolError :: InvalidSignaturePublicKeyError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: NonConsensusError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: CompatibleProtocolVersionIsNotDefinedError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: InvalidDocumentTypeError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: DataContractNotPresentError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: InvalidSignaturePublicKeySecurityLevelError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: InvalidStateTransitionTypeError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: PublicKeyIsDisabledError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: IdentityNotPresentError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: Overflow (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: DesiredKeyWithTypePurposeSecurityLevelMissing (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: ValueError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: PlatformSerializationError (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: PlatformDeserializationError (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: DashCoreError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: InvalidIdentityError { errors , raw_identity } => { ferment :: unbox_any (* errors) ; ; ferment :: unbox_any (* raw_identity) ; } , dpp_errors_protocol_error_ProtocolError :: VoteError (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: PublicKeyGenerationError (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: CorruptedCodeExecution (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: CorruptedSerialization (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: CriticalCorruptedCreditsCodeExecution (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: InvalidVectorSizeError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: InvalidCBOR (o_0) => { ferment :: unbox_string (* o_0) ; } , # [cfg (feature = "bls-signatures")] dpp_errors_protocol_error_ProtocolError :: BlsError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: PrivateKeySizeError { got } => { ; } , dpp_errors_protocol_error_ProtocolError :: InvalidBLSPrivateKeyError (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_errors_protocol_error_ProtocolError :: BlsSignatureSizeError { got } => { ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_IdentifierError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: IdentifierError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_StringDecodeError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: StringDecodeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_EmptyPublicKeyDataError_ctor () -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: EmptyPublicKeyDataError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_MaxEncodedBytesReachedError_ctor (max_size_kbytes : usize , size_hit : usize) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: MaxEncodedBytesReachedError { max_size_kbytes , size_hit }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_EncodingError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: EncodingError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_DecodingError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: DecodingError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_FileNotFound_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: FileNotFound (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_UnsupportedVersionMismatch_ctor (method : * mut std :: os :: raw :: c_char , allowed_versions : * mut crate :: fermented :: generics :: Vec_versioned_feature_core_FeatureVersion , received : * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: UnsupportedVersionMismatch { method , allowed_versions , received }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_UnknownVersionMismatch_ctor (method : * mut std :: os :: raw :: c_char , known_versions : * mut crate :: fermented :: generics :: Vec_versioned_feature_core_FeatureVersion , received : * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: UnknownVersionMismatch { method , known_versions , received }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_CurrentProtocolVersionNotInitialized_ctor () -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: CurrentProtocolVersionNotInitialized { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_UnknownVersionError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: UnknownVersionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_UnknownProtocolVersionError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: UnknownProtocolVersionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_NoProtocolVersionError_ctor () -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: NoProtocolVersionError { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_ParsingError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: ParsingError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_ParsingJsonError_ctor (o_o_0 : * mut dash_spv_apple_bindings :: custom :: serde_json :: serde_json_Error) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: ParsingJsonError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_Error_ctor (o_o_0 : * mut dash_spv_apple_bindings :: custom :: anyhow :: anyhow_Error) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: Error (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_InvalidKeyContractBoundsError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: InvalidKeyContractBoundsError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_UnknownStorageKeyRequirements_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: UnknownStorageKeyRequirements (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_UnknownContestedIndexResolution_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: UnknownContestedIndexResolution (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_DataContractError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: errors :: contract :: dpp_data_contract_errors_contract_DataContractError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: DataContractError (o_o_0)) } # [cfg (all (feature = "state-transitions" , feature = "validation"))] # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_StateTransitionError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: errors :: state_transition_error :: dpp_state_transition_errors_state_transition_error_StateTransitionError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: StateTransitionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_InvalidStateTransitionType_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: InvalidStateTransitionType (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_PlatformVersionError_ctor (o_o_0 : * mut crate :: fermented :: types :: platform_version :: error :: platform_version_error_PlatformVersionError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: PlatformVersionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_ConsensusError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: consensus_error :: dpp_errors_consensus_consensus_error_ConsensusError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: ConsensusError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_Document_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: document :: errors :: dpp_document_errors_DocumentError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: Document (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_Generic_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: Generic (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_NotSupported_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: NotSupported (o_o_0)) } # [cfg (feature = "message-signing")] # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_InvalidSigningKeyTypeError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: InvalidSigningKeyTypeError (o_o_0)) } # [cfg (any (feature = "state-transition-validation" , feature = "state-transition-signing"))] # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_InvalidIdentityPublicKeyTypeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: errors :: invalid_identity_public_key_type_error :: dpp_state_transition_errors_invalid_identity_public_key_type_error_InvalidIdentityPublicKeyTypeError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: InvalidIdentityPublicKeyTypeError (o_o_0)) } # [cfg (feature = "state-transition-validation")] # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_StateTransitionIsNotSignedError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: errors :: state_transition_is_not_signed_error :: dpp_state_transition_errors_state_transition_is_not_signed_error_StateTransitionIsNotSignedError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: StateTransitionIsNotSignedError (o_o_0)) } # [cfg (feature = "state-transition-validation")] # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_PublicKeySecurityLevelNotMetError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: errors :: public_key_security_level_not_met_error :: dpp_state_transition_errors_public_key_security_level_not_met_error_PublicKeySecurityLevelNotMetError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: PublicKeySecurityLevelNotMetError (o_o_0)) } # [cfg (any (all (feature = "state-transitions" , feature = "validation") , feature = "state-transition-validation" , feature = "state-transition-signing" , feature = "state-transition-validation"))] # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_WrongPublicKeyPurposeError_ctor (o_o_0 : * mut dpp :: state_transition :: errors :: wrong_public_key_purpose_error :: WrongPublicKeyPurposeError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: WrongPublicKeyPurposeError (o_o_0)) } # [cfg (feature = "state-transition-validation")] # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_PublicKeyMismatchError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: errors :: public_key_mismatch_error :: dpp_state_transition_errors_public_key_mismatch_error_PublicKeyMismatchError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: PublicKeyMismatchError (o_o_0)) } # [cfg (feature = "state-transition-validation")] # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_InvalidSignaturePublicKeyError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: state_transition :: errors :: invalid_signature_public_key_error :: dpp_state_transition_errors_invalid_signature_public_key_error_InvalidSignaturePublicKeyError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: InvalidSignaturePublicKeyError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_NonConsensusError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: non_consensus_error :: dpp_errors_non_consensus_error_NonConsensusError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: NonConsensusError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_CompatibleProtocolVersionIsNotDefinedError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: compatible_protocol_version_is_not_defined_error :: dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: CompatibleProtocolVersionIsNotDefinedError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_InvalidDocumentTypeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: errors :: invalid_document_type_error :: dpp_data_contract_errors_invalid_document_type_error_InvalidDocumentTypeError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: InvalidDocumentTypeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_DataContractNotPresentError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: errors :: data_contract_not_present_error :: dpp_data_contract_errors_data_contract_not_present_error_DataContractNotPresentError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: DataContractNotPresentError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_InvalidSignaturePublicKeySecurityLevelError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: invalid_signature_public_key_security_level_error :: dpp_errors_consensus_signature_invalid_signature_public_key_security_level_error_InvalidSignaturePublicKeySecurityLevelError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: InvalidSignaturePublicKeySecurityLevelError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_InvalidStateTransitionTypeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: basic :: state_transition :: invalid_state_transition_type_error :: dpp_errors_consensus_basic_state_transition_invalid_state_transition_type_error_InvalidStateTransitionTypeError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: InvalidStateTransitionTypeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_PublicKeyIsDisabledError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: consensus :: signature :: public_key_is_disabled_error :: dpp_errors_consensus_signature_public_key_is_disabled_error_PublicKeyIsDisabledError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: PublicKeyIsDisabledError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_IdentityNotPresentError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: data_contract :: errors :: identity_not_present_error :: dpp_data_contract_errors_identity_not_present_error_IdentityNotPresentError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: IdentityNotPresentError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_Overflow_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: Overflow (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_DesiredKeyWithTypePurposeSecurityLevelMissing_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: DesiredKeyWithTypePurposeSecurityLevelMissing (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_ValueError_ctor (o_o_0 : * mut crate :: fermented :: types :: platform_value :: error :: platform_value_error_Error) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: ValueError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_PlatformSerializationError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: PlatformSerializationError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_PlatformDeserializationError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: PlatformDeserializationError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_DashCoreError_ctor (o_o_0 : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_consensus_Error) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: DashCoreError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_InvalidIdentityError_ctor (errors : * mut crate :: fermented :: generics :: Vec_dpp_errors_consensus_consensus_error_ConsensusError , raw_identity : * mut crate :: fermented :: types :: platform_value :: platform_value_Value) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: InvalidIdentityError { errors , raw_identity }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_VoteError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: VoteError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_PublicKeyGenerationError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: PublicKeyGenerationError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_CorruptedCodeExecution_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: CorruptedCodeExecution (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_CorruptedSerialization_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: CorruptedSerialization (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_CriticalCorruptedCreditsCodeExecution_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: CriticalCorruptedCreditsCodeExecution (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_InvalidVectorSizeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: invalid_vector_size_error :: dpp_errors_invalid_vector_size_error_InvalidVectorSizeError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: InvalidVectorSizeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_InvalidCBOR_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: InvalidCBOR (o_o_0)) } # [cfg (feature = "bls-signatures")] # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_BlsError_ctor (o_o_0 : * mut dashcore :: blsful :: BlsError) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: BlsError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_PrivateKeySizeError_ctor (got : u32) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: PrivateKeySizeError { got }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_InvalidBLSPrivateKeyError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: InvalidBLSPrivateKeyError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_BlsSignatureSizeError_ctor (got : u32) -> * mut dpp_errors_protocol_error_ProtocolError { ferment :: boxed (dpp_errors_protocol_error_ProtocolError :: BlsSignatureSizeError { got }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_protocol_error_ProtocolError_destroy < > (ffi : * mut dpp_errors_protocol_error_ProtocolError) { ferment :: unbox_any (ffi) ; } } pub mod compatible_protocol_version_is_not_defined_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`CompatibleProtocolVersionIsNotDefinedError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError { pub current_protocol_version : u32 } impl ferment :: FFIConversionFrom < dpp :: errors :: compatible_protocol_version_is_not_defined_error :: CompatibleProtocolVersionIsNotDefinedError > for dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError { unsafe fn ffi_from_const (ffi : * const dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError) -> dpp :: errors :: compatible_protocol_version_is_not_defined_error :: CompatibleProtocolVersionIsNotDefinedError { let ffi_ref = & * ffi ; dpp :: errors :: compatible_protocol_version_is_not_defined_error :: CompatibleProtocolVersionIsNotDefinedError { current_protocol_version : ffi_ref . current_protocol_version } } } impl ferment :: FFIConversionTo < dpp :: errors :: compatible_protocol_version_is_not_defined_error :: CompatibleProtocolVersionIsNotDefinedError > for dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError { unsafe fn ffi_to_const (obj : dpp :: errors :: compatible_protocol_version_is_not_defined_error :: CompatibleProtocolVersionIsNotDefinedError) -> * const dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError { ferment :: boxed (dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError { current_protocol_version : obj . current_protocol_version }) } } impl Drop for dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError_ctor < > (current_protocol_version : u32) -> * mut dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError { ferment :: boxed (dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError { current_protocol_version }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError_destroy < > (ffi : * mut dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError_get_current_protocol_version < > (obj : * const dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError) -> u32 { (* obj) . current_protocol_version } # [no_mangle] pub unsafe extern "C" fn dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError_set_current_protocol_version < > (obj : * const dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError) -> u32 { (* obj) . current_protocol_version } } pub mod non_consensus_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`NonConsensusError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_errors_non_consensus_error_NonConsensusError { ValueError (* mut crate :: fermented :: types :: platform_value :: error :: platform_value_error_Error) , UnknownVersionMismatch { method : * mut std :: os :: raw :: c_char , known_versions : * mut crate :: fermented :: generics :: Vec_versioned_feature_core_FeatureVersion , received : * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion } , SerdeParsingError (* mut crate :: fermented :: types :: dpp :: errors :: serde_parsing_error :: dpp_errors_serde_parsing_error_SerdeParsingError) , CompatibleProtocolVersionIsNotDefinedError (* mut crate :: fermented :: types :: dpp :: errors :: compatible_protocol_version_is_not_defined_error :: dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError) , SerdeJsonError (* mut std :: os :: raw :: c_char) , InvalidVectorSizeError (* mut crate :: fermented :: types :: dpp :: errors :: invalid_vector_size_error :: dpp_errors_invalid_vector_size_error_InvalidVectorSizeError) , StateRepositoryFetchError (* mut std :: os :: raw :: c_char) , WithdrawalError (* mut std :: os :: raw :: c_char) , IdentifierCreateError (* mut std :: os :: raw :: c_char) , StateTransitionCreationError (* mut std :: os :: raw :: c_char) , IdentityPublicKeyCreateError (* mut std :: os :: raw :: c_char) , RequiredPropertyError { property_name : * mut std :: os :: raw :: c_char } , InvalidDataProcessedError (* mut std :: os :: raw :: c_char) , ObjectCreationError { object_name : * mut std :: os :: raw :: c_char , details : * mut std :: os :: raw :: c_char } , DPPError (* mut crate :: fermented :: types :: dpp :: errors :: dpp_error :: dpp_errors_dpp_error_DPPError) , Error (* mut dash_spv_apple_bindings :: custom :: anyhow :: anyhow_Error) , Overflow (* mut std :: os :: raw :: c_char) } impl ferment :: FFIConversionFrom < dpp :: errors :: non_consensus_error :: NonConsensusError > for dpp_errors_non_consensus_error_NonConsensusError { unsafe fn ffi_from_const (ffi : * const dpp_errors_non_consensus_error_NonConsensusError) -> dpp :: errors :: non_consensus_error :: NonConsensusError { let ffi_ref = & * ffi ; match ffi_ref { dpp_errors_non_consensus_error_NonConsensusError :: ValueError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: ValueError (< crate :: fermented :: types :: platform_value :: error :: platform_value_error_Error as ferment :: FFIConversionFrom < platform_value :: error :: Error >> :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: UnknownVersionMismatch { method , known_versions , received } => dpp :: errors :: non_consensus_error :: NonConsensusError :: UnknownVersionMismatch { method : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* method) , known_versions : < crate :: fermented :: generics :: Vec_versioned_feature_core_FeatureVersion as ferment :: FFIConversionFrom < Vec < versioned_feature_core :: FeatureVersion > >> :: ffi_from (* known_versions) , received : < dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion as ferment :: FFIConversionFrom < versioned_feature_core :: FeatureVersion >> :: ffi_from (* received) } , dpp_errors_non_consensus_error_NonConsensusError :: SerdeParsingError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: SerdeParsingError (< crate :: fermented :: types :: dpp :: errors :: serde_parsing_error :: dpp_errors_serde_parsing_error_SerdeParsingError as ferment :: FFIConversionFrom < dpp :: errors :: serde_parsing_error :: SerdeParsingError >> :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: CompatibleProtocolVersionIsNotDefinedError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: CompatibleProtocolVersionIsNotDefinedError (< crate :: fermented :: types :: dpp :: errors :: compatible_protocol_version_is_not_defined_error :: dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError as ferment :: FFIConversionFrom < dpp :: errors :: compatible_protocol_version_is_not_defined_error :: CompatibleProtocolVersionIsNotDefinedError >> :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: SerdeJsonError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: SerdeJsonError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: InvalidVectorSizeError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: InvalidVectorSizeError (< crate :: fermented :: types :: dpp :: errors :: invalid_vector_size_error :: dpp_errors_invalid_vector_size_error_InvalidVectorSizeError as ferment :: FFIConversionFrom < dpp :: errors :: invalid_vector_size_error :: InvalidVectorSizeError >> :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: StateRepositoryFetchError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: StateRepositoryFetchError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: WithdrawalError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: WithdrawalError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: IdentifierCreateError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: IdentifierCreateError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: StateTransitionCreationError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: StateTransitionCreationError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: IdentityPublicKeyCreateError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: IdentityPublicKeyCreateError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: RequiredPropertyError { property_name } => dpp :: errors :: non_consensus_error :: NonConsensusError :: RequiredPropertyError { property_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* property_name) } , dpp_errors_non_consensus_error_NonConsensusError :: InvalidDataProcessedError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: InvalidDataProcessedError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: ObjectCreationError { object_name , details } => dpp :: errors :: non_consensus_error :: NonConsensusError :: ObjectCreationError { object_name : Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (* object_name))) , details : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* details) } , dpp_errors_non_consensus_error_NonConsensusError :: DPPError (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: DPPError (< crate :: fermented :: types :: dpp :: errors :: dpp_error :: dpp_errors_dpp_error_DPPError as ferment :: FFIConversionFrom < dpp :: errors :: dpp_error :: DPPError >> :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: Error (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: Error (< dash_spv_apple_bindings :: custom :: anyhow :: anyhow_Error as ferment :: FFIConversionFrom < anyhow :: Error >> :: ffi_from (* o_0)) , dpp_errors_non_consensus_error_NonConsensusError :: Overflow (o_0) => dpp :: errors :: non_consensus_error :: NonConsensusError :: Overflow (Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (* o_0)))) } } } impl ferment :: FFIConversionTo < dpp :: errors :: non_consensus_error :: NonConsensusError > for dpp_errors_non_consensus_error_NonConsensusError { unsafe fn ffi_to_const (obj : dpp :: errors :: non_consensus_error :: NonConsensusError) -> * const dpp_errors_non_consensus_error_NonConsensusError { ferment :: boxed (match obj { dpp :: errors :: non_consensus_error :: NonConsensusError :: ValueError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: ValueError (< crate :: fermented :: types :: platform_value :: error :: platform_value_error_Error as ferment :: FFIConversionTo < platform_value :: error :: Error >> :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: UnknownVersionMismatch { method , known_versions , received } => dpp_errors_non_consensus_error_NonConsensusError :: UnknownVersionMismatch { method : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (method) , known_versions : < crate :: fermented :: generics :: Vec_versioned_feature_core_FeatureVersion as ferment :: FFIConversionTo < Vec < versioned_feature_core :: FeatureVersion > >> :: ffi_to (known_versions) , received : < dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion as ferment :: FFIConversionTo < versioned_feature_core :: FeatureVersion >> :: ffi_to (received) } , dpp :: errors :: non_consensus_error :: NonConsensusError :: SerdeParsingError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: SerdeParsingError (< crate :: fermented :: types :: dpp :: errors :: serde_parsing_error :: dpp_errors_serde_parsing_error_SerdeParsingError as ferment :: FFIConversionTo < dpp :: errors :: serde_parsing_error :: SerdeParsingError >> :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: CompatibleProtocolVersionIsNotDefinedError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: CompatibleProtocolVersionIsNotDefinedError (< crate :: fermented :: types :: dpp :: errors :: compatible_protocol_version_is_not_defined_error :: dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError as ferment :: FFIConversionTo < dpp :: errors :: compatible_protocol_version_is_not_defined_error :: CompatibleProtocolVersionIsNotDefinedError >> :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: SerdeJsonError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: SerdeJsonError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: InvalidVectorSizeError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: InvalidVectorSizeError (< crate :: fermented :: types :: dpp :: errors :: invalid_vector_size_error :: dpp_errors_invalid_vector_size_error_InvalidVectorSizeError as ferment :: FFIConversionTo < dpp :: errors :: invalid_vector_size_error :: InvalidVectorSizeError >> :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: StateRepositoryFetchError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: StateRepositoryFetchError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: WithdrawalError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: WithdrawalError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: IdentifierCreateError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: IdentifierCreateError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: StateTransitionCreationError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: StateTransitionCreationError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: IdentityPublicKeyCreateError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: IdentityPublicKeyCreateError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: RequiredPropertyError { property_name } => dpp_errors_non_consensus_error_NonConsensusError :: RequiredPropertyError { property_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (property_name) } , dpp :: errors :: non_consensus_error :: NonConsensusError :: InvalidDataProcessedError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: InvalidDataProcessedError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: ObjectCreationError { object_name , details } => dpp_errors_non_consensus_error_NonConsensusError :: ObjectCreationError { object_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < & str >> :: ffi_to (object_name) , details : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (details) } , dpp :: errors :: non_consensus_error :: NonConsensusError :: DPPError (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: DPPError (< crate :: fermented :: types :: dpp :: errors :: dpp_error :: dpp_errors_dpp_error_DPPError as ferment :: FFIConversionTo < dpp :: errors :: dpp_error :: DPPError >> :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: Error (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: Error (< dash_spv_apple_bindings :: custom :: anyhow :: anyhow_Error as ferment :: FFIConversionTo < anyhow :: Error >> :: ffi_to (o_0)) , dpp :: errors :: non_consensus_error :: NonConsensusError :: Overflow (o_0) => dpp_errors_non_consensus_error_NonConsensusError :: Overflow (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < & str >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_errors_non_consensus_error_NonConsensusError { fn drop (& mut self) { unsafe { match self { dpp_errors_non_consensus_error_NonConsensusError :: ValueError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_non_consensus_error_NonConsensusError :: UnknownVersionMismatch { method , known_versions , received } => { ferment :: unbox_string (* method) ; ; ferment :: unbox_any (* known_versions) ; ; ferment :: unbox_any (* received) ; } , dpp_errors_non_consensus_error_NonConsensusError :: SerdeParsingError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_non_consensus_error_NonConsensusError :: CompatibleProtocolVersionIsNotDefinedError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_non_consensus_error_NonConsensusError :: SerdeJsonError (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_errors_non_consensus_error_NonConsensusError :: InvalidVectorSizeError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_non_consensus_error_NonConsensusError :: StateRepositoryFetchError (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_errors_non_consensus_error_NonConsensusError :: WithdrawalError (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_errors_non_consensus_error_NonConsensusError :: IdentifierCreateError (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_errors_non_consensus_error_NonConsensusError :: StateTransitionCreationError (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_errors_non_consensus_error_NonConsensusError :: IdentityPublicKeyCreateError (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_errors_non_consensus_error_NonConsensusError :: RequiredPropertyError { property_name } => { ferment :: unbox_string (* property_name) ; } , dpp_errors_non_consensus_error_NonConsensusError :: InvalidDataProcessedError (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_errors_non_consensus_error_NonConsensusError :: ObjectCreationError { object_name , details } => { ferment :: unbox_string (* object_name) ; ; ferment :: unbox_string (* details) ; } , dpp_errors_non_consensus_error_NonConsensusError :: DPPError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_non_consensus_error_NonConsensusError :: Error (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_non_consensus_error_NonConsensusError :: Overflow (o_0) => { ferment :: unbox_string (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_ValueError_ctor (o_o_0 : * mut crate :: fermented :: types :: platform_value :: error :: platform_value_error_Error) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: ValueError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_UnknownVersionMismatch_ctor (method : * mut std :: os :: raw :: c_char , known_versions : * mut crate :: fermented :: generics :: Vec_versioned_feature_core_FeatureVersion , received : * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: UnknownVersionMismatch { method , known_versions , received }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_SerdeParsingError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: serde_parsing_error :: dpp_errors_serde_parsing_error_SerdeParsingError) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: SerdeParsingError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_CompatibleProtocolVersionIsNotDefinedError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: compatible_protocol_version_is_not_defined_error :: dpp_errors_compatible_protocol_version_is_not_defined_error_CompatibleProtocolVersionIsNotDefinedError) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: CompatibleProtocolVersionIsNotDefinedError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_SerdeJsonError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: SerdeJsonError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_InvalidVectorSizeError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: invalid_vector_size_error :: dpp_errors_invalid_vector_size_error_InvalidVectorSizeError) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: InvalidVectorSizeError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_StateRepositoryFetchError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: StateRepositoryFetchError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_WithdrawalError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: WithdrawalError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_IdentifierCreateError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: IdentifierCreateError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_StateTransitionCreationError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: StateTransitionCreationError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_IdentityPublicKeyCreateError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: IdentityPublicKeyCreateError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_RequiredPropertyError_ctor (property_name : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: RequiredPropertyError { property_name }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_InvalidDataProcessedError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: InvalidDataProcessedError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_ObjectCreationError_ctor (object_name : * mut std :: os :: raw :: c_char , details : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: ObjectCreationError { object_name , details }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_DPPError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: errors :: dpp_error :: dpp_errors_dpp_error_DPPError) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: DPPError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_Error_ctor (o_o_0 : * mut dash_spv_apple_bindings :: custom :: anyhow :: anyhow_Error) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: Error (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_Overflow_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_non_consensus_error_NonConsensusError { ferment :: boxed (dpp_errors_non_consensus_error_NonConsensusError :: Overflow (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_non_consensus_error_NonConsensusError_destroy < > (ffi : * mut dpp_errors_non_consensus_error_NonConsensusError) { ferment :: unbox_any (ffi) ; } } pub mod invalid_vector_size_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InvalidVectorSizeError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_invalid_vector_size_error_InvalidVectorSizeError { pub expected_size : usize , pub actual_size : usize } impl ferment :: FFIConversionFrom < dpp :: errors :: invalid_vector_size_error :: InvalidVectorSizeError > for dpp_errors_invalid_vector_size_error_InvalidVectorSizeError { unsafe fn ffi_from_const (ffi : * const dpp_errors_invalid_vector_size_error_InvalidVectorSizeError) -> dpp :: errors :: invalid_vector_size_error :: InvalidVectorSizeError { let ffi_ref = & * ffi ; dpp :: errors :: invalid_vector_size_error :: InvalidVectorSizeError { expected_size : ffi_ref . expected_size , actual_size : ffi_ref . actual_size } } } impl ferment :: FFIConversionTo < dpp :: errors :: invalid_vector_size_error :: InvalidVectorSizeError > for dpp_errors_invalid_vector_size_error_InvalidVectorSizeError { unsafe fn ffi_to_const (obj : dpp :: errors :: invalid_vector_size_error :: InvalidVectorSizeError) -> * const dpp_errors_invalid_vector_size_error_InvalidVectorSizeError { ferment :: boxed (dpp_errors_invalid_vector_size_error_InvalidVectorSizeError { expected_size : obj . expected_size , actual_size : obj . actual_size }) } } impl Drop for dpp_errors_invalid_vector_size_error_InvalidVectorSizeError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_invalid_vector_size_error_InvalidVectorSizeError_ctor < > (expected_size : usize , actual_size : usize) -> * mut dpp_errors_invalid_vector_size_error_InvalidVectorSizeError { ferment :: boxed (dpp_errors_invalid_vector_size_error_InvalidVectorSizeError { expected_size , actual_size }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_invalid_vector_size_error_InvalidVectorSizeError_destroy < > (ffi : * mut dpp_errors_invalid_vector_size_error_InvalidVectorSizeError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_invalid_vector_size_error_InvalidVectorSizeError_get_expected_size < > (obj : * const dpp_errors_invalid_vector_size_error_InvalidVectorSizeError) -> usize { (* obj) . expected_size } # [no_mangle] pub unsafe extern "C" fn dpp_errors_invalid_vector_size_error_InvalidVectorSizeError_get_actual_size < > (obj : * const dpp_errors_invalid_vector_size_error_InvalidVectorSizeError) -> usize { (* obj) . actual_size } # [no_mangle] pub unsafe extern "C" fn dpp_errors_invalid_vector_size_error_InvalidVectorSizeError_set_expected_size < > (obj : * const dpp_errors_invalid_vector_size_error_InvalidVectorSizeError) -> usize { (* obj) . expected_size } # [no_mangle] pub unsafe extern "C" fn dpp_errors_invalid_vector_size_error_InvalidVectorSizeError_set_actual_size < > (obj : * const dpp_errors_invalid_vector_size_error_InvalidVectorSizeError) -> usize { (* obj) . actual_size } } pub mod serde_parsing_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`SerdeParsingError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_serde_parsing_error_SerdeParsingError { pub message : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: serde_parsing_error :: SerdeParsingError > for dpp_errors_serde_parsing_error_SerdeParsingError { unsafe fn ffi_from_const (ffi : * const dpp_errors_serde_parsing_error_SerdeParsingError) -> dpp :: errors :: serde_parsing_error :: SerdeParsingError { let ffi_ref = & * ffi ; dpp :: errors :: serde_parsing_error :: SerdeParsingError { message : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . message) } } } impl ferment :: FFIConversionTo < dpp :: errors :: serde_parsing_error :: SerdeParsingError > for dpp_errors_serde_parsing_error_SerdeParsingError { unsafe fn ffi_to_const (obj : dpp :: errors :: serde_parsing_error :: SerdeParsingError) -> * const dpp_errors_serde_parsing_error_SerdeParsingError { ferment :: boxed (dpp_errors_serde_parsing_error_SerdeParsingError { message : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . message) }) } } impl Drop for dpp_errors_serde_parsing_error_SerdeParsingError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_serde_parsing_error_SerdeParsingError_ctor < > (message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_serde_parsing_error_SerdeParsingError { ferment :: boxed (dpp_errors_serde_parsing_error_SerdeParsingError { message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_serde_parsing_error_SerdeParsingError_destroy < > (ffi : * mut dpp_errors_serde_parsing_error_SerdeParsingError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_serde_parsing_error_SerdeParsingError_get_message < > (obj : * const dpp_errors_serde_parsing_error_SerdeParsingError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_serde_parsing_error_SerdeParsingError_set_message < > (obj : * const dpp_errors_serde_parsing_error_SerdeParsingError) -> * mut std :: os :: raw :: c_char { (* obj) . message } } pub mod dpp_init_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`DashPlatformProtocolInitError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_errors_dpp_init_error_DashPlatformProtocolInitError { SchemaDeserializationError (* mut dash_spv_apple_bindings :: custom :: serde_json :: serde_json_Error) , InvalidSchemaError (* mut std :: os :: raw :: c_char) , UnknownVersionMismatch { method : * mut std :: os :: raw :: c_char , known_versions : * mut crate :: fermented :: generics :: Vec_versioned_feature_core_FeatureVersion , received : * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion } } impl ferment :: FFIConversionFrom < dpp :: errors :: dpp_init_error :: DashPlatformProtocolInitError > for dpp_errors_dpp_init_error_DashPlatformProtocolInitError { unsafe fn ffi_from_const (ffi : * const dpp_errors_dpp_init_error_DashPlatformProtocolInitError) -> dpp :: errors :: dpp_init_error :: DashPlatformProtocolInitError { let ffi_ref = & * ffi ; match ffi_ref { dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: SchemaDeserializationError (o_0) => dpp :: errors :: dpp_init_error :: DashPlatformProtocolInitError :: SchemaDeserializationError (< dash_spv_apple_bindings :: custom :: serde_json :: serde_json_Error as ferment :: FFIConversionFrom < serde_json :: Error >> :: ffi_from (* o_0)) , dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: InvalidSchemaError (o_0) => dpp :: errors :: dpp_init_error :: DashPlatformProtocolInitError :: InvalidSchemaError (Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (* o_0)))) , dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: UnknownVersionMismatch { method , known_versions , received } => dpp :: errors :: dpp_init_error :: DashPlatformProtocolInitError :: UnknownVersionMismatch { method : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* method) , known_versions : < crate :: fermented :: generics :: Vec_versioned_feature_core_FeatureVersion as ferment :: FFIConversionFrom < Vec < versioned_feature_core :: FeatureVersion > >> :: ffi_from (* known_versions) , received : < dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion as ferment :: FFIConversionFrom < versioned_feature_core :: FeatureVersion >> :: ffi_from (* received) } } } } impl ferment :: FFIConversionTo < dpp :: errors :: dpp_init_error :: DashPlatformProtocolInitError > for dpp_errors_dpp_init_error_DashPlatformProtocolInitError { unsafe fn ffi_to_const (obj : dpp :: errors :: dpp_init_error :: DashPlatformProtocolInitError) -> * const dpp_errors_dpp_init_error_DashPlatformProtocolInitError { ferment :: boxed (match obj { dpp :: errors :: dpp_init_error :: DashPlatformProtocolInitError :: SchemaDeserializationError (o_0) => dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: SchemaDeserializationError (< dash_spv_apple_bindings :: custom :: serde_json :: serde_json_Error as ferment :: FFIConversionTo < serde_json :: Error >> :: ffi_to (o_0)) , dpp :: errors :: dpp_init_error :: DashPlatformProtocolInitError :: InvalidSchemaError (o_0) => dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: InvalidSchemaError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < & str >> :: ffi_to (o_0)) , dpp :: errors :: dpp_init_error :: DashPlatformProtocolInitError :: UnknownVersionMismatch { method , known_versions , received } => dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: UnknownVersionMismatch { method : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (method) , known_versions : < crate :: fermented :: generics :: Vec_versioned_feature_core_FeatureVersion as ferment :: FFIConversionTo < Vec < versioned_feature_core :: FeatureVersion > >> :: ffi_to (known_versions) , received : < dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion as ferment :: FFIConversionTo < versioned_feature_core :: FeatureVersion >> :: ffi_to (received) } , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_errors_dpp_init_error_DashPlatformProtocolInitError { fn drop (& mut self) { unsafe { match self { dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: SchemaDeserializationError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: InvalidSchemaError (o_0) => { ferment :: unbox_string (* o_0) ; } , dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: UnknownVersionMismatch { method , known_versions , received } => { ferment :: unbox_string (* method) ; ; ferment :: unbox_any (* known_versions) ; ; ferment :: unbox_any (* received) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_init_error_DashPlatformProtocolInitError_SchemaDeserializationError_ctor (o_o_0 : * mut dash_spv_apple_bindings :: custom :: serde_json :: serde_json_Error) -> * mut dpp_errors_dpp_init_error_DashPlatformProtocolInitError { ferment :: boxed (dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: SchemaDeserializationError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_init_error_DashPlatformProtocolInitError_InvalidSchemaError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_dpp_init_error_DashPlatformProtocolInitError { ferment :: boxed (dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: InvalidSchemaError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_init_error_DashPlatformProtocolInitError_UnknownVersionMismatch_ctor (method : * mut std :: os :: raw :: c_char , known_versions : * mut crate :: fermented :: generics :: Vec_versioned_feature_core_FeatureVersion , received : * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion) -> * mut dpp_errors_dpp_init_error_DashPlatformProtocolInitError { ferment :: boxed (dpp_errors_dpp_init_error_DashPlatformProtocolInitError :: UnknownVersionMismatch { method , known_versions , received }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_init_error_DashPlatformProtocolInitError_destroy < > (ffi : * mut dpp_errors_dpp_init_error_DashPlatformProtocolInitError) { ferment :: unbox_any (ffi) ; } } pub mod public_key_validation_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`PublicKeyValidationError`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_errors_public_key_validation_error_PublicKeyValidationError { pub message : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dpp :: errors :: public_key_validation_error :: PublicKeyValidationError > for dpp_errors_public_key_validation_error_PublicKeyValidationError { unsafe fn ffi_from_const (ffi : * const dpp_errors_public_key_validation_error_PublicKeyValidationError) -> dpp :: errors :: public_key_validation_error :: PublicKeyValidationError { let ffi_ref = & * ffi ; dpp :: errors :: public_key_validation_error :: PublicKeyValidationError { message : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . message) } } } impl ferment :: FFIConversionTo < dpp :: errors :: public_key_validation_error :: PublicKeyValidationError > for dpp_errors_public_key_validation_error_PublicKeyValidationError { unsafe fn ffi_to_const (obj : dpp :: errors :: public_key_validation_error :: PublicKeyValidationError) -> * const dpp_errors_public_key_validation_error_PublicKeyValidationError { ferment :: boxed (dpp_errors_public_key_validation_error_PublicKeyValidationError { message : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . message) }) } } impl Drop for dpp_errors_public_key_validation_error_PublicKeyValidationError { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . message) ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_public_key_validation_error_PublicKeyValidationError_ctor < > (message : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_public_key_validation_error_PublicKeyValidationError { ferment :: boxed (dpp_errors_public_key_validation_error_PublicKeyValidationError { message }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_public_key_validation_error_PublicKeyValidationError_destroy < > (ffi : * mut dpp_errors_public_key_validation_error_PublicKeyValidationError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_errors_public_key_validation_error_PublicKeyValidationError_get_message < > (obj : * const dpp_errors_public_key_validation_error_PublicKeyValidationError) -> * mut std :: os :: raw :: c_char { (* obj) . message } # [no_mangle] pub unsafe extern "C" fn dpp_errors_public_key_validation_error_PublicKeyValidationError_set_message < > (obj : * const dpp_errors_public_key_validation_error_PublicKeyValidationError) -> * mut std :: os :: raw :: c_char { (* obj) . message } } pub mod dpp_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`DPPError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dpp_errors_dpp_error_DPPError { AssetLockOutputNotFoundError (* mut crate :: fermented :: types :: dpp :: identity :: errors :: asset_lock_output_not_found_error :: dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError) , AssetLockTransactionIsNotFoundError (* mut dash_spv_apple_bindings :: custom :: dpp :: AssetLockTransactionIsNotFoundErrorFFI) , WrongPublicKeyHashSize , WrongBurnOutputType , InvalidAssetLockTransaction , CoreMessageCorruption (* mut std :: os :: raw :: c_char) } impl ferment :: FFIConversionFrom < dpp :: errors :: dpp_error :: DPPError > for dpp_errors_dpp_error_DPPError { unsafe fn ffi_from_const (ffi : * const dpp_errors_dpp_error_DPPError) -> dpp :: errors :: dpp_error :: DPPError { let ffi_ref = & * ffi ; match ffi_ref { dpp_errors_dpp_error_DPPError :: AssetLockOutputNotFoundError (o_0) => dpp :: errors :: dpp_error :: DPPError :: AssetLockOutputNotFoundError (< crate :: fermented :: types :: dpp :: identity :: errors :: asset_lock_output_not_found_error :: dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError as ferment :: FFIConversionFrom < dpp :: identity :: errors :: asset_lock_output_not_found_error :: AssetLockOutputNotFoundError >> :: ffi_from (* o_0)) , dpp_errors_dpp_error_DPPError :: AssetLockTransactionIsNotFoundError (o_0) => dpp :: errors :: dpp_error :: DPPError :: AssetLockTransactionIsNotFoundError (< dash_spv_apple_bindings :: custom :: dpp :: AssetLockTransactionIsNotFoundErrorFFI as ferment :: FFIConversionFrom < dpp :: identity :: errors :: asset_lock_transaction_is_not_found_error :: AssetLockTransactionIsNotFoundError >> :: ffi_from (* o_0)) , dpp_errors_dpp_error_DPPError :: WrongPublicKeyHashSize => dpp :: errors :: dpp_error :: DPPError :: WrongPublicKeyHashSize , dpp_errors_dpp_error_DPPError :: WrongBurnOutputType => dpp :: errors :: dpp_error :: DPPError :: WrongBurnOutputType , dpp_errors_dpp_error_DPPError :: InvalidAssetLockTransaction => dpp :: errors :: dpp_error :: DPPError :: InvalidAssetLockTransaction , dpp_errors_dpp_error_DPPError :: CoreMessageCorruption (o_0) => dpp :: errors :: dpp_error :: DPPError :: CoreMessageCorruption (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dpp :: errors :: dpp_error :: DPPError > for dpp_errors_dpp_error_DPPError { unsafe fn ffi_to_const (obj : dpp :: errors :: dpp_error :: DPPError) -> * const dpp_errors_dpp_error_DPPError { ferment :: boxed (match obj { dpp :: errors :: dpp_error :: DPPError :: AssetLockOutputNotFoundError (o_0) => dpp_errors_dpp_error_DPPError :: AssetLockOutputNotFoundError (< crate :: fermented :: types :: dpp :: identity :: errors :: asset_lock_output_not_found_error :: dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError as ferment :: FFIConversionTo < dpp :: identity :: errors :: asset_lock_output_not_found_error :: AssetLockOutputNotFoundError >> :: ffi_to (o_0)) , dpp :: errors :: dpp_error :: DPPError :: AssetLockTransactionIsNotFoundError (o_0) => dpp_errors_dpp_error_DPPError :: AssetLockTransactionIsNotFoundError (< dash_spv_apple_bindings :: custom :: dpp :: AssetLockTransactionIsNotFoundErrorFFI as ferment :: FFIConversionTo < dpp :: identity :: errors :: asset_lock_transaction_is_not_found_error :: AssetLockTransactionIsNotFoundError >> :: ffi_to (o_0)) , dpp :: errors :: dpp_error :: DPPError :: WrongPublicKeyHashSize => dpp_errors_dpp_error_DPPError :: WrongPublicKeyHashSize , dpp :: errors :: dpp_error :: DPPError :: WrongBurnOutputType => dpp_errors_dpp_error_DPPError :: WrongBurnOutputType , dpp :: errors :: dpp_error :: DPPError :: InvalidAssetLockTransaction => dpp_errors_dpp_error_DPPError :: InvalidAssetLockTransaction , dpp :: errors :: dpp_error :: DPPError :: CoreMessageCorruption (o_0) => dpp_errors_dpp_error_DPPError :: CoreMessageCorruption (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dpp_errors_dpp_error_DPPError { fn drop (& mut self) { unsafe { match self { dpp_errors_dpp_error_DPPError :: AssetLockOutputNotFoundError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_dpp_error_DPPError :: AssetLockTransactionIsNotFoundError (o_0) => { ferment :: unbox_any (* o_0) ; } , dpp_errors_dpp_error_DPPError :: WrongPublicKeyHashSize => { } , dpp_errors_dpp_error_DPPError :: WrongBurnOutputType => { } , dpp_errors_dpp_error_DPPError :: InvalidAssetLockTransaction => { } , dpp_errors_dpp_error_DPPError :: CoreMessageCorruption (o_0) => { ferment :: unbox_string (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_error_DPPError_AssetLockOutputNotFoundError_ctor (o_o_0 : * mut crate :: fermented :: types :: dpp :: identity :: errors :: asset_lock_output_not_found_error :: dpp_identity_errors_asset_lock_output_not_found_error_AssetLockOutputNotFoundError) -> * mut dpp_errors_dpp_error_DPPError { ferment :: boxed (dpp_errors_dpp_error_DPPError :: AssetLockOutputNotFoundError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_error_DPPError_AssetLockTransactionIsNotFoundError_ctor (o_o_0 : * mut dash_spv_apple_bindings :: custom :: dpp :: AssetLockTransactionIsNotFoundErrorFFI) -> * mut dpp_errors_dpp_error_DPPError { ferment :: boxed (dpp_errors_dpp_error_DPPError :: AssetLockTransactionIsNotFoundError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_error_DPPError_WrongPublicKeyHashSize_ctor () -> * mut dpp_errors_dpp_error_DPPError { ferment :: boxed (dpp_errors_dpp_error_DPPError :: WrongPublicKeyHashSize { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_error_DPPError_WrongBurnOutputType_ctor () -> * mut dpp_errors_dpp_error_DPPError { ferment :: boxed (dpp_errors_dpp_error_DPPError :: WrongBurnOutputType { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_error_DPPError_InvalidAssetLockTransaction_ctor () -> * mut dpp_errors_dpp_error_DPPError { ferment :: boxed (dpp_errors_dpp_error_DPPError :: InvalidAssetLockTransaction { }) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_error_DPPError_CoreMessageCorruption_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dpp_errors_dpp_error_DPPError { ferment :: boxed (dpp_errors_dpp_error_DPPError :: CoreMessageCorruption (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_errors_dpp_error_DPPError_destroy < > (ffi : * mut dpp_errors_dpp_error_DPPError) { ferment :: unbox_any (ffi) ; } } } pub mod util { use crate as dash_spv_apple_bindings ; # [cfg (feature = "cbor")] pub mod cbor_value { use crate as dash_spv_apple_bindings ; pub mod canonical { use crate as dash_spv_apple_bindings ; } pub mod convert { use crate as dash_spv_apple_bindings ; } } pub mod json_path { use crate as dash_spv_apple_bindings ; } pub mod json_schema { use crate as dash_spv_apple_bindings ; } pub mod deserializer { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`ProtocolVersion`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_util_deserializer_ProtocolVersion (u32) ; impl ferment :: FFIConversionFrom < dpp :: util :: deserializer :: ProtocolVersion > for dpp_util_deserializer_ProtocolVersion { unsafe fn ffi_from_const (ffi : * const dpp_util_deserializer_ProtocolVersion) -> dpp :: util :: deserializer :: ProtocolVersion { let ffi_ref = & * ffi ; ffi_ref . 0 } } impl ferment :: FFIConversionTo < dpp :: util :: deserializer :: ProtocolVersion > for dpp_util_deserializer_ProtocolVersion { unsafe fn ffi_to_const (obj : dpp :: util :: deserializer :: ProtocolVersion) -> * const dpp_util_deserializer_ProtocolVersion { ferment :: boxed (dpp_util_deserializer_ProtocolVersion (obj)) } } impl Drop for dpp_util_deserializer_ProtocolVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn dpp_util_deserializer_ProtocolVersion_ctor < > (o_0 : u32) -> * mut dpp_util_deserializer_ProtocolVersion { ferment :: boxed (dpp_util_deserializer_ProtocolVersion (o_0)) } # [no_mangle] pub unsafe extern "C" fn dpp_util_deserializer_ProtocolVersion_destroy < > (ffi : * mut dpp_util_deserializer_ProtocolVersion) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dpp_util_deserializer_ProtocolVersion_get_0 < > (obj : * const dpp_util_deserializer_ProtocolVersion) -> u32 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dpp_util_deserializer_ProtocolVersion_set_0 < > (obj : * const dpp_util_deserializer_ProtocolVersion) -> u32 { (* obj) . 0 } } pub mod json_value { use crate as dash_spv_apple_bindings ; pub mod remove_path { use crate as dash_spv_apple_bindings ; } pub mod insert_with_path { use crate as dash_spv_apple_bindings ; } } pub mod strings { use crate as dash_spv_apple_bindings ; # [cfg (test)] pub mod tests { use crate as dash_spv_apple_bindings ; } } } pub mod validation { use crate as dash_spv_apple_bindings ; # [cfg (feature = "validation")] pub mod json_schema_validator { use crate as dash_spv_apple_bindings ; pub mod methods { use crate as dash_spv_apple_bindings ; pub mod validate { use crate as dash_spv_apple_bindings ; } pub mod compile { use crate as dash_spv_apple_bindings ; } pub mod new { use crate as dash_spv_apple_bindings ; } } } # [cfg (feature = "validation")] pub mod byte_array_keyword { use crate as dash_spv_apple_bindings ; # [cfg (test)] pub mod tests { use crate as dash_spv_apple_bindings ; } } } } pub mod dash_spv_crypto { use crate as dash_spv_apple_bindings ; pub mod consensus { use crate as dash_spv_apple_bindings ; } pub mod util { use crate as dash_spv_apple_bindings ; pub mod psbt { use crate as dash_spv_apple_bindings ; } pub mod address { use crate as dash_spv_apple_bindings ; pub mod address { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_crypto::util::address::address::with_public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_address_address_with_public_key_data (data : * mut crate :: fermented :: generics :: Slice_u8 , map : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_crypto :: util :: address :: address :: with_public_key_data (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data))) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (map)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::util::address::address::with_public_key_data_and_script_pub_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_address_address_with_public_key_data_and_script_pub_key (data : * mut crate :: fermented :: generics :: Slice_u8 , script_pub_key : u8) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_crypto :: util :: address :: address :: with_public_key_data_and_script_pub_key (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data))) , script_pub_key) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } } } pub mod params { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`BIP32ScriptMap`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_crypto_util_params_BIP32ScriptMap { pub xprv : * mut crate :: fermented :: generics :: Arr_u8_4 , pub xpub : * mut crate :: fermented :: generics :: Arr_u8_4 } impl ferment :: FFIConversionFrom < dash_spv_crypto :: util :: params :: BIP32ScriptMap > for dash_spv_crypto_util_params_BIP32ScriptMap { unsafe fn ffi_from_const (ffi : * const dash_spv_crypto_util_params_BIP32ScriptMap) -> dash_spv_crypto :: util :: params :: BIP32ScriptMap { let ffi_ref = & * ffi ; dash_spv_crypto :: util :: params :: BIP32ScriptMap { xprv : < crate :: fermented :: generics :: Arr_u8_4 as ferment :: FFIConversionFrom < [u8 ; 4] >> :: ffi_from (ffi_ref . xprv) , xpub : < crate :: fermented :: generics :: Arr_u8_4 as ferment :: FFIConversionFrom < [u8 ; 4] >> :: ffi_from (ffi_ref . xpub) } } } impl ferment :: FFIConversionTo < dash_spv_crypto :: util :: params :: BIP32ScriptMap > for dash_spv_crypto_util_params_BIP32ScriptMap { unsafe fn ffi_to_const (obj : dash_spv_crypto :: util :: params :: BIP32ScriptMap) -> * const dash_spv_crypto_util_params_BIP32ScriptMap { ferment :: boxed (dash_spv_crypto_util_params_BIP32ScriptMap { xprv : < crate :: fermented :: generics :: Arr_u8_4 as ferment :: FFIConversionTo < [u8 ; 4] >> :: ffi_to (obj . xprv) , xpub : < crate :: fermented :: generics :: Arr_u8_4 as ferment :: FFIConversionTo < [u8 ; 4] >> :: ffi_to (obj . xpub) }) } } impl Drop for dash_spv_crypto_util_params_BIP32ScriptMap { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . xprv) ; ferment :: unbox_any (ffi_ref . xpub) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_BIP32ScriptMap_ctor < > (xprv : * mut crate :: fermented :: generics :: Arr_u8_4 , xpub : * mut crate :: fermented :: generics :: Arr_u8_4) -> * mut dash_spv_crypto_util_params_BIP32ScriptMap { ferment :: boxed (dash_spv_crypto_util_params_BIP32ScriptMap { xprv , xpub }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_BIP32ScriptMap_destroy < > (ffi : * mut dash_spv_crypto_util_params_BIP32ScriptMap) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_BIP32ScriptMap_get_xprv < > (obj : * const dash_spv_crypto_util_params_BIP32ScriptMap) -> * mut crate :: fermented :: generics :: Arr_u8_4 { (* obj) . xprv } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_BIP32ScriptMap_get_xpub < > (obj : * const dash_spv_crypto_util_params_BIP32ScriptMap) -> * mut crate :: fermented :: generics :: Arr_u8_4 { (* obj) . xpub } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_BIP32ScriptMap_set_xprv < > (obj : * const dash_spv_crypto_util_params_BIP32ScriptMap) -> * mut crate :: fermented :: generics :: Arr_u8_4 { (* obj) . xprv } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_BIP32ScriptMap_set_xpub < > (obj : * const dash_spv_crypto_util_params_BIP32ScriptMap) -> * mut crate :: fermented :: generics :: Arr_u8_4 { (* obj) . xpub } # [doc = "FFI-representation of the [`DIP14ScriptMap`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_crypto_util_params_DIP14ScriptMap { pub dps : * mut crate :: fermented :: generics :: Arr_u8_4 , pub dpp : * mut crate :: fermented :: generics :: Arr_u8_4 } impl ferment :: FFIConversionFrom < dash_spv_crypto :: util :: params :: DIP14ScriptMap > for dash_spv_crypto_util_params_DIP14ScriptMap { unsafe fn ffi_from_const (ffi : * const dash_spv_crypto_util_params_DIP14ScriptMap) -> dash_spv_crypto :: util :: params :: DIP14ScriptMap { let ffi_ref = & * ffi ; dash_spv_crypto :: util :: params :: DIP14ScriptMap { dps : < crate :: fermented :: generics :: Arr_u8_4 as ferment :: FFIConversionFrom < [u8 ; 4] >> :: ffi_from (ffi_ref . dps) , dpp : < crate :: fermented :: generics :: Arr_u8_4 as ferment :: FFIConversionFrom < [u8 ; 4] >> :: ffi_from (ffi_ref . dpp) } } } impl ferment :: FFIConversionTo < dash_spv_crypto :: util :: params :: DIP14ScriptMap > for dash_spv_crypto_util_params_DIP14ScriptMap { unsafe fn ffi_to_const (obj : dash_spv_crypto :: util :: params :: DIP14ScriptMap) -> * const dash_spv_crypto_util_params_DIP14ScriptMap { ferment :: boxed (dash_spv_crypto_util_params_DIP14ScriptMap { dps : < crate :: fermented :: generics :: Arr_u8_4 as ferment :: FFIConversionTo < [u8 ; 4] >> :: ffi_to (obj . dps) , dpp : < crate :: fermented :: generics :: Arr_u8_4 as ferment :: FFIConversionTo < [u8 ; 4] >> :: ffi_to (obj . dpp) }) } } impl Drop for dash_spv_crypto_util_params_DIP14ScriptMap { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . dps) ; ferment :: unbox_any (ffi_ref . dpp) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_DIP14ScriptMap_ctor < > (dps : * mut crate :: fermented :: generics :: Arr_u8_4 , dpp : * mut crate :: fermented :: generics :: Arr_u8_4) -> * mut dash_spv_crypto_util_params_DIP14ScriptMap { ferment :: boxed (dash_spv_crypto_util_params_DIP14ScriptMap { dps , dpp }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_DIP14ScriptMap_destroy < > (ffi : * mut dash_spv_crypto_util_params_DIP14ScriptMap) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_DIP14ScriptMap_get_dps < > (obj : * const dash_spv_crypto_util_params_DIP14ScriptMap) -> * mut crate :: fermented :: generics :: Arr_u8_4 { (* obj) . dps } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_DIP14ScriptMap_get_dpp < > (obj : * const dash_spv_crypto_util_params_DIP14ScriptMap) -> * mut crate :: fermented :: generics :: Arr_u8_4 { (* obj) . dpp } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_DIP14ScriptMap_set_dps < > (obj : * const dash_spv_crypto_util_params_DIP14ScriptMap) -> * mut crate :: fermented :: generics :: Arr_u8_4 { (* obj) . dps } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_DIP14ScriptMap_set_dpp < > (obj : * const dash_spv_crypto_util_params_DIP14ScriptMap) -> * mut crate :: fermented :: generics :: Arr_u8_4 { (* obj) . dpp } # [doc = "FFI-representation of the [`ScriptMap`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_crypto_util_params_ScriptMap { pub privkey : u8 , pub pubkey : u8 , pub script : u8 } impl ferment :: FFIConversionFrom < dash_spv_crypto :: util :: params :: ScriptMap > for dash_spv_crypto_util_params_ScriptMap { unsafe fn ffi_from_const (ffi : * const dash_spv_crypto_util_params_ScriptMap) -> dash_spv_crypto :: util :: params :: ScriptMap { let ffi_ref = & * ffi ; dash_spv_crypto :: util :: params :: ScriptMap { privkey : ffi_ref . privkey , pubkey : ffi_ref . pubkey , script : ffi_ref . script } } } impl ferment :: FFIConversionTo < dash_spv_crypto :: util :: params :: ScriptMap > for dash_spv_crypto_util_params_ScriptMap { unsafe fn ffi_to_const (obj : dash_spv_crypto :: util :: params :: ScriptMap) -> * const dash_spv_crypto_util_params_ScriptMap { ferment :: boxed (dash_spv_crypto_util_params_ScriptMap { privkey : obj . privkey , pubkey : obj . pubkey , script : obj . script }) } } impl Drop for dash_spv_crypto_util_params_ScriptMap { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_ScriptMap_ctor < > (privkey : u8 , pubkey : u8 , script : u8) -> * mut dash_spv_crypto_util_params_ScriptMap { ferment :: boxed (dash_spv_crypto_util_params_ScriptMap { privkey , pubkey , script }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_ScriptMap_destroy < > (ffi : * mut dash_spv_crypto_util_params_ScriptMap) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_ScriptMap_get_privkey < > (obj : * const dash_spv_crypto_util_params_ScriptMap) -> u8 { (* obj) . privkey } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_ScriptMap_get_pubkey < > (obj : * const dash_spv_crypto_util_params_ScriptMap) -> u8 { (* obj) . pubkey } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_ScriptMap_get_script < > (obj : * const dash_spv_crypto_util_params_ScriptMap) -> u8 { (* obj) . script } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_ScriptMap_set_privkey < > (obj : * const dash_spv_crypto_util_params_ScriptMap) -> u8 { (* obj) . privkey } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_ScriptMap_set_pubkey < > (obj : * const dash_spv_crypto_util_params_ScriptMap) -> u8 { (* obj) . pubkey } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_ScriptMap_set_script < > (obj : * const dash_spv_crypto_util_params_ScriptMap) -> u8 { (* obj) . script } # [doc = "FFI-representation of the [`Params`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_crypto_util_params_Params { pub chain_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType , pub max_proof_of_work : * mut std :: os :: raw :: c_char , pub max_proof_of_work_target : u32 , pub allow_min_difficulty_blocks : bool , pub base_reward : u64 , pub min_protocol_version : u32 , pub protocol_version : u32 , pub standard_port : u16 , pub standard_dapi_grpc_port : u32 , pub magic_number : u32 , pub headers_max_amount : u32 , pub peer_misbehaving_threshold : u32 , pub transaction_version : u16 , pub is_evolution_enabled : bool , pub fee_per_byte : u64 , pub platform_protocol_version : u32 , pub dpns_contract_id : * mut std :: os :: raw :: c_char , pub dashpay_contract_id : * mut std :: os :: raw :: c_char , pub minimum_difficulty_blocks : u32 , pub standard_dapi_jrpc_port : u32 } impl ferment :: FFIConversionFrom < dash_spv_crypto :: util :: params :: Params > for dash_spv_crypto_util_params_Params { unsafe fn ffi_from_const (ffi : * const dash_spv_crypto_util_params_Params) -> dash_spv_crypto :: util :: params :: Params { let ffi_ref = & * ffi ; dash_spv_crypto :: util :: params :: Params { chain_type : < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (ffi_ref . chain_type) , max_proof_of_work : Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (ffi_ref . max_proof_of_work))) , max_proof_of_work_target : ffi_ref . max_proof_of_work_target , allow_min_difficulty_blocks : ffi_ref . allow_min_difficulty_blocks , base_reward : ffi_ref . base_reward , min_protocol_version : ffi_ref . min_protocol_version , protocol_version : ffi_ref . protocol_version , standard_port : ffi_ref . standard_port , standard_dapi_grpc_port : ffi_ref . standard_dapi_grpc_port , magic_number : ffi_ref . magic_number , headers_max_amount : ffi_ref . headers_max_amount , peer_misbehaving_threshold : ffi_ref . peer_misbehaving_threshold , transaction_version : ffi_ref . transaction_version , is_evolution_enabled : ffi_ref . is_evolution_enabled , fee_per_byte : ffi_ref . fee_per_byte , platform_protocol_version : ffi_ref . platform_protocol_version , dpns_contract_id : Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (ffi_ref . dpns_contract_id))) , dashpay_contract_id : Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (ffi_ref . dashpay_contract_id))) , minimum_difficulty_blocks : ffi_ref . minimum_difficulty_blocks , standard_dapi_jrpc_port : ffi_ref . standard_dapi_jrpc_port } } } impl ferment :: FFIConversionTo < dash_spv_crypto :: util :: params :: Params > for dash_spv_crypto_util_params_Params { unsafe fn ffi_to_const (obj : dash_spv_crypto :: util :: params :: Params) -> * const dash_spv_crypto_util_params_Params { ferment :: boxed (dash_spv_crypto_util_params_Params { chain_type : < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_to (obj . chain_type) , max_proof_of_work : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < & str >> :: ffi_to (obj . max_proof_of_work) , max_proof_of_work_target : obj . max_proof_of_work_target , allow_min_difficulty_blocks : obj . allow_min_difficulty_blocks , base_reward : obj . base_reward , min_protocol_version : obj . min_protocol_version , protocol_version : obj . protocol_version , standard_port : obj . standard_port , standard_dapi_grpc_port : obj . standard_dapi_grpc_port , magic_number : obj . magic_number , headers_max_amount : obj . headers_max_amount , peer_misbehaving_threshold : obj . peer_misbehaving_threshold , transaction_version : obj . transaction_version , is_evolution_enabled : obj . is_evolution_enabled , fee_per_byte : obj . fee_per_byte , platform_protocol_version : obj . platform_protocol_version , dpns_contract_id : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < & str >> :: ffi_to (obj . dpns_contract_id) , dashpay_contract_id : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < & str >> :: ffi_to (obj . dashpay_contract_id) , minimum_difficulty_blocks : obj . minimum_difficulty_blocks , standard_dapi_jrpc_port : obj . standard_dapi_jrpc_port }) } } impl Drop for dash_spv_crypto_util_params_Params { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . chain_type) ; ferment :: unbox_string (ffi_ref . max_proof_of_work) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ferment :: unbox_string (ffi_ref . dpns_contract_id) ; ferment :: unbox_string (ffi_ref . dashpay_contract_id) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_ctor < > (chain_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType , max_proof_of_work : * mut std :: os :: raw :: c_char , max_proof_of_work_target : u32 , allow_min_difficulty_blocks : bool , base_reward : u64 , min_protocol_version : u32 , protocol_version : u32 , standard_port : u16 , standard_dapi_grpc_port : u32 , magic_number : u32 , headers_max_amount : u32 , peer_misbehaving_threshold : u32 , transaction_version : u16 , is_evolution_enabled : bool , fee_per_byte : u64 , platform_protocol_version : u32 , dpns_contract_id : * mut std :: os :: raw :: c_char , dashpay_contract_id : * mut std :: os :: raw :: c_char , minimum_difficulty_blocks : u32 , standard_dapi_jrpc_port : u32) -> * mut dash_spv_crypto_util_params_Params { ferment :: boxed (dash_spv_crypto_util_params_Params { chain_type , max_proof_of_work , max_proof_of_work_target , allow_min_difficulty_blocks , base_reward , min_protocol_version , protocol_version , standard_port , standard_dapi_grpc_port , magic_number , headers_max_amount , peer_misbehaving_threshold , transaction_version , is_evolution_enabled , fee_per_byte , platform_protocol_version , dpns_contract_id , dashpay_contract_id , minimum_difficulty_blocks , standard_dapi_jrpc_port }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_destroy < > (ffi : * mut dash_spv_crypto_util_params_Params) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_get_chain_type < > (obj : * const dash_spv_crypto_util_params_Params) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType { (* obj) . chain_type } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_get_max_proof_of_work < > (obj : * const dash_spv_crypto_util_params_Params) -> * mut std :: os :: raw :: c_char { (* obj) . max_proof_of_work } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_get_max_proof_of_work_target < > (obj : * const dash_spv_crypto_util_params_Params) -> u32 { (* obj) . max_proof_of_work_target } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_get_allow_min_difficulty_blocks < > (obj : * const dash_spv_crypto_util_params_Params) -> bool { (* obj) . allow_min_difficulty_blocks } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_get_base_reward < > (obj : * const dash_spv_crypto_util_params_Params) -> u64 { (* obj) . base_reward } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_get_min_protocol_version < > (obj : * const dash_spv_crypto_util_params_Params) -> u32 { (* obj) . min_protocol_version } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_get_protocol_version < > (obj : * const dash_spv_crypto_util_params_Params) -> u32 { (* obj) . protocol_version } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_get_standard_port < > (obj : * const dash_spv_crypto_util_params_Params) -> u16 { (* obj) . standard_port } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_get_standard_dapi_grpc_port < > (obj : * const dash_spv_crypto_util_params_Params) -> u32 { (* obj) . standard_dapi_grpc_port } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_get_magic_number < > (obj : * const dash_spv_crypto_util_params_Params) -> u32 { (* obj) . magic_number } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_get_headers_max_amount < > (obj : * const dash_spv_crypto_util_params_Params) -> u32 { (* obj) . headers_max_amount } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_get_peer_misbehaving_threshold < > (obj : * const dash_spv_crypto_util_params_Params) -> u32 { (* obj) . peer_misbehaving_threshold } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_get_transaction_version < > (obj : * const dash_spv_crypto_util_params_Params) -> u16 { (* obj) . transaction_version } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_get_is_evolution_enabled < > (obj : * const dash_spv_crypto_util_params_Params) -> bool { (* obj) . is_evolution_enabled } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_get_fee_per_byte < > (obj : * const dash_spv_crypto_util_params_Params) -> u64 { (* obj) . fee_per_byte } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_get_platform_protocol_version < > (obj : * const dash_spv_crypto_util_params_Params) -> u32 { (* obj) . platform_protocol_version } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_get_dpns_contract_id < > (obj : * const dash_spv_crypto_util_params_Params) -> * mut std :: os :: raw :: c_char { (* obj) . dpns_contract_id } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_get_dashpay_contract_id < > (obj : * const dash_spv_crypto_util_params_Params) -> * mut std :: os :: raw :: c_char { (* obj) . dashpay_contract_id } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_get_minimum_difficulty_blocks < > (obj : * const dash_spv_crypto_util_params_Params) -> u32 { (* obj) . minimum_difficulty_blocks } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_get_standard_dapi_jrpc_port < > (obj : * const dash_spv_crypto_util_params_Params) -> u32 { (* obj) . standard_dapi_jrpc_port } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_set_chain_type < > (obj : * const dash_spv_crypto_util_params_Params) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType { (* obj) . chain_type } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_set_max_proof_of_work < > (obj : * const dash_spv_crypto_util_params_Params) -> * mut std :: os :: raw :: c_char { (* obj) . max_proof_of_work } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_set_max_proof_of_work_target < > (obj : * const dash_spv_crypto_util_params_Params) -> u32 { (* obj) . max_proof_of_work_target } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_set_allow_min_difficulty_blocks < > (obj : * const dash_spv_crypto_util_params_Params) -> bool { (* obj) . allow_min_difficulty_blocks } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_set_base_reward < > (obj : * const dash_spv_crypto_util_params_Params) -> u64 { (* obj) . base_reward } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_set_min_protocol_version < > (obj : * const dash_spv_crypto_util_params_Params) -> u32 { (* obj) . min_protocol_version } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_set_protocol_version < > (obj : * const dash_spv_crypto_util_params_Params) -> u32 { (* obj) . protocol_version } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_set_standard_port < > (obj : * const dash_spv_crypto_util_params_Params) -> u16 { (* obj) . standard_port } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_set_standard_dapi_grpc_port < > (obj : * const dash_spv_crypto_util_params_Params) -> u32 { (* obj) . standard_dapi_grpc_port } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_set_magic_number < > (obj : * const dash_spv_crypto_util_params_Params) -> u32 { (* obj) . magic_number } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_set_headers_max_amount < > (obj : * const dash_spv_crypto_util_params_Params) -> u32 { (* obj) . headers_max_amount } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_set_peer_misbehaving_threshold < > (obj : * const dash_spv_crypto_util_params_Params) -> u32 { (* obj) . peer_misbehaving_threshold } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_set_transaction_version < > (obj : * const dash_spv_crypto_util_params_Params) -> u16 { (* obj) . transaction_version } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_set_is_evolution_enabled < > (obj : * const dash_spv_crypto_util_params_Params) -> bool { (* obj) . is_evolution_enabled } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_set_fee_per_byte < > (obj : * const dash_spv_crypto_util_params_Params) -> u64 { (* obj) . fee_per_byte } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_set_platform_protocol_version < > (obj : * const dash_spv_crypto_util_params_Params) -> u32 { (* obj) . platform_protocol_version } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_set_dpns_contract_id < > (obj : * const dash_spv_crypto_util_params_Params) -> * mut std :: os :: raw :: c_char { (* obj) . dpns_contract_id } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_set_dashpay_contract_id < > (obj : * const dash_spv_crypto_util_params_Params) -> * mut std :: os :: raw :: c_char { (* obj) . dashpay_contract_id } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_set_minimum_difficulty_blocks < > (obj : * const dash_spv_crypto_util_params_Params) -> u32 { (* obj) . minimum_difficulty_blocks } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_Params_set_standard_dapi_jrpc_port < > (obj : * const dash_spv_crypto_util_params_Params) -> u32 { (* obj) . standard_dapi_jrpc_port } # [doc = "FFI-representation of the [`SporkParams`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_crypto_util_params_SporkParams { pub public_key_hex_string : * mut std :: os :: raw :: c_char , pub private_key_base58_string : * mut std :: os :: raw :: c_char , pub address : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dash_spv_crypto :: util :: params :: SporkParams > for dash_spv_crypto_util_params_SporkParams { unsafe fn ffi_from_const (ffi : * const dash_spv_crypto_util_params_SporkParams) -> dash_spv_crypto :: util :: params :: SporkParams { let ffi_ref = & * ffi ; dash_spv_crypto :: util :: params :: SporkParams { public_key_hex_string : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from_opt (ffi_ref . public_key_hex_string) , private_key_base58_string : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from_opt (ffi_ref . private_key_base58_string) , address : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . address) } } } impl ferment :: FFIConversionTo < dash_spv_crypto :: util :: params :: SporkParams > for dash_spv_crypto_util_params_SporkParams { unsafe fn ffi_to_const (obj : dash_spv_crypto :: util :: params :: SporkParams) -> * const dash_spv_crypto_util_params_SporkParams { ferment :: boxed (dash_spv_crypto_util_params_SporkParams { public_key_hex_string : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to_opt (obj . public_key_hex_string) , private_key_base58_string : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to_opt (obj . private_key_base58_string) , address : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . address) }) } } impl Drop for dash_spv_crypto_util_params_SporkParams { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any_opt (ffi_ref . public_key_hex_string) ; ferment :: unbox_any_opt (ffi_ref . private_key_base58_string) ; ferment :: unbox_string (ffi_ref . address) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_SporkParams_ctor < > (public_key_hex_string : * mut std :: os :: raw :: c_char , private_key_base58_string : * mut std :: os :: raw :: c_char , address : * mut std :: os :: raw :: c_char) -> * mut dash_spv_crypto_util_params_SporkParams { ferment :: boxed (dash_spv_crypto_util_params_SporkParams { public_key_hex_string , private_key_base58_string , address }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_SporkParams_destroy < > (ffi : * mut dash_spv_crypto_util_params_SporkParams) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_SporkParams_get_public_key_hex_string < > (obj : * const dash_spv_crypto_util_params_SporkParams) -> * mut std :: os :: raw :: c_char { (* obj) . public_key_hex_string } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_SporkParams_get_private_key_base58_string < > (obj : * const dash_spv_crypto_util_params_SporkParams) -> * mut std :: os :: raw :: c_char { (* obj) . private_key_base58_string } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_SporkParams_get_address < > (obj : * const dash_spv_crypto_util_params_SporkParams) -> * mut std :: os :: raw :: c_char { (* obj) . address } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_SporkParams_set_public_key_hex_string < > (obj : * const dash_spv_crypto_util_params_SporkParams) -> * mut std :: os :: raw :: c_char { (* obj) . public_key_hex_string } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_SporkParams_set_private_key_base58_string < > (obj : * const dash_spv_crypto_util_params_SporkParams) -> * mut std :: os :: raw :: c_char { (* obj) . private_key_base58_string } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_params_SporkParams_set_address < > (obj : * const dash_spv_crypto_util_params_SporkParams) -> * mut std :: os :: raw :: c_char { (* obj) . address } } pub mod script { use crate as dash_spv_apple_bindings ; } pub mod base58 { use crate as dash_spv_apple_bindings ; } pub mod endian { use crate as dash_spv_apple_bindings ; } pub mod sec_vec { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_crypto::util::sec_vec::SecVec::to_vec`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_util_sec_vec_SecVec_to_vec (self_ : * mut dash_spv_crypto :: util :: sec_vec :: SecVec) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = dash_spv_crypto :: util :: sec_vec :: SecVec :: to_vec (& * self_) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } } } pub mod blockdata { use crate as dash_spv_apple_bindings ; pub mod opcodes { use crate as dash_spv_apple_bindings ; } } pub mod bip { use crate as dash_spv_apple_bindings ; pub mod bip38 { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_crypto::bip::bip38::is_valid_bip38_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_bip_bip38_is_valid_bip38_key (key : * mut std :: os :: raw :: c_char) -> bool { let obj = dash_spv_crypto :: bip :: bip38 :: is_valid_bip38_key (Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (key)))) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::bip::bip38::is_valid_payment_request_address`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_bip_bip38_is_valid_payment_request_address (key : * mut std :: os :: raw :: c_char , chain_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> bool { let obj = dash_spv_crypto :: bip :: bip38 :: is_valid_payment_request_address (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (key) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain_type)) ; obj } } } pub mod crypto { use crate as dash_spv_apple_bindings ; pub mod byte_util { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`UInt768`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_crypto_crypto_byte_util_UInt768 (* mut crate :: fermented :: generics :: Arr_u8_96) ; impl ferment :: FFIConversionFrom < dash_spv_crypto :: crypto :: byte_util :: UInt768 > for dash_spv_crypto_crypto_byte_util_UInt768 { unsafe fn ffi_from_const (ffi : * const dash_spv_crypto_crypto_byte_util_UInt768) -> dash_spv_crypto :: crypto :: byte_util :: UInt768 { let ffi_ref = & * ffi ; dash_spv_crypto :: crypto :: byte_util :: UInt768 (< crate :: fermented :: generics :: Arr_u8_96 as ferment :: FFIConversionFrom < [u8 ; 96] >> :: ffi_from (ffi_ref . 0)) } } impl ferment :: FFIConversionTo < dash_spv_crypto :: crypto :: byte_util :: UInt768 > for dash_spv_crypto_crypto_byte_util_UInt768 { unsafe fn ffi_to_const (obj : dash_spv_crypto :: crypto :: byte_util :: UInt768) -> * const dash_spv_crypto_crypto_byte_util_UInt768 { ferment :: boxed (dash_spv_crypto_crypto_byte_util_UInt768 (< crate :: fermented :: generics :: Arr_u8_96 as ferment :: FFIConversionTo < [u8 ; 96] >> :: ffi_to (obj . 0))) } } impl Drop for dash_spv_crypto_crypto_byte_util_UInt768 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_crypto_byte_util_UInt768_ctor < > (o_0 : * mut crate :: fermented :: generics :: Arr_u8_96) -> * mut dash_spv_crypto_crypto_byte_util_UInt768 { ferment :: boxed (dash_spv_crypto_crypto_byte_util_UInt768 (o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_crypto_byte_util_UInt768_destroy < > (ffi : * mut dash_spv_crypto_crypto_byte_util_UInt768) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_crypto_byte_util_UInt768_get_0 < > (obj : * const dash_spv_crypto_crypto_byte_util_UInt768) -> * mut crate :: fermented :: generics :: Arr_u8_96 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_crypto_byte_util_UInt768_set_0 < > (obj : * const dash_spv_crypto_crypto_byte_util_UInt768) -> * mut crate :: fermented :: generics :: Arr_u8_96 { (* obj) . 0 } # [doc = "FFI-representation of the [`UInt128`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_crypto_crypto_byte_util_UInt128 (* mut crate :: fermented :: generics :: Arr_u8_16) ; impl ferment :: FFIConversionFrom < dash_spv_crypto :: crypto :: byte_util :: UInt128 > for dash_spv_crypto_crypto_byte_util_UInt128 { unsafe fn ffi_from_const (ffi : * const dash_spv_crypto_crypto_byte_util_UInt128) -> dash_spv_crypto :: crypto :: byte_util :: UInt128 { let ffi_ref = & * ffi ; dash_spv_crypto :: crypto :: byte_util :: UInt128 (< crate :: fermented :: generics :: Arr_u8_16 as ferment :: FFIConversionFrom < [u8 ; 16] >> :: ffi_from (ffi_ref . 0)) } } impl ferment :: FFIConversionTo < dash_spv_crypto :: crypto :: byte_util :: UInt128 > for dash_spv_crypto_crypto_byte_util_UInt128 { unsafe fn ffi_to_const (obj : dash_spv_crypto :: crypto :: byte_util :: UInt128) -> * const dash_spv_crypto_crypto_byte_util_UInt128 { ferment :: boxed (dash_spv_crypto_crypto_byte_util_UInt128 (< crate :: fermented :: generics :: Arr_u8_16 as ferment :: FFIConversionTo < [u8 ; 16] >> :: ffi_to (obj . 0))) } } impl Drop for dash_spv_crypto_crypto_byte_util_UInt128 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_crypto_byte_util_UInt128_ctor < > (o_0 : * mut crate :: fermented :: generics :: Arr_u8_16) -> * mut dash_spv_crypto_crypto_byte_util_UInt128 { ferment :: boxed (dash_spv_crypto_crypto_byte_util_UInt128 (o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_crypto_byte_util_UInt128_destroy < > (ffi : * mut dash_spv_crypto_crypto_byte_util_UInt128) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_crypto_byte_util_UInt128_get_0 < > (obj : * const dash_spv_crypto_crypto_byte_util_UInt128) -> * mut crate :: fermented :: generics :: Arr_u8_16 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_crypto_byte_util_UInt128_set_0 < > (obj : * const dash_spv_crypto_crypto_byte_util_UInt128) -> * mut crate :: fermented :: generics :: Arr_u8_16 { (* obj) . 0 } # [doc = "FFI-representation of the [`UInt160`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_crypto_crypto_byte_util_UInt160 (* mut crate :: fermented :: generics :: Arr_u8_20) ; impl ferment :: FFIConversionFrom < dash_spv_crypto :: crypto :: byte_util :: UInt160 > for dash_spv_crypto_crypto_byte_util_UInt160 { unsafe fn ffi_from_const (ffi : * const dash_spv_crypto_crypto_byte_util_UInt160) -> dash_spv_crypto :: crypto :: byte_util :: UInt160 { let ffi_ref = & * ffi ; dash_spv_crypto :: crypto :: byte_util :: UInt160 (< crate :: fermented :: generics :: Arr_u8_20 as ferment :: FFIConversionFrom < [u8 ; 20] >> :: ffi_from (ffi_ref . 0)) } } impl ferment :: FFIConversionTo < dash_spv_crypto :: crypto :: byte_util :: UInt160 > for dash_spv_crypto_crypto_byte_util_UInt160 { unsafe fn ffi_to_const (obj : dash_spv_crypto :: crypto :: byte_util :: UInt160) -> * const dash_spv_crypto_crypto_byte_util_UInt160 { ferment :: boxed (dash_spv_crypto_crypto_byte_util_UInt160 (< crate :: fermented :: generics :: Arr_u8_20 as ferment :: FFIConversionTo < [u8 ; 20] >> :: ffi_to (obj . 0))) } } impl Drop for dash_spv_crypto_crypto_byte_util_UInt160 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_crypto_byte_util_UInt160_ctor < > (o_0 : * mut crate :: fermented :: generics :: Arr_u8_20) -> * mut dash_spv_crypto_crypto_byte_util_UInt160 { ferment :: boxed (dash_spv_crypto_crypto_byte_util_UInt160 (o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_crypto_byte_util_UInt160_destroy < > (ffi : * mut dash_spv_crypto_crypto_byte_util_UInt160) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_crypto_byte_util_UInt160_get_0 < > (obj : * const dash_spv_crypto_crypto_byte_util_UInt160) -> * mut crate :: fermented :: generics :: Arr_u8_20 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_crypto_byte_util_UInt160_set_0 < > (obj : * const dash_spv_crypto_crypto_byte_util_UInt160) -> * mut crate :: fermented :: generics :: Arr_u8_20 { (* obj) . 0 } # [doc = "FFI-representation of the [`UInt512`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_crypto_crypto_byte_util_UInt512 (* mut crate :: fermented :: generics :: Arr_u8_64) ; impl ferment :: FFIConversionFrom < dash_spv_crypto :: crypto :: byte_util :: UInt512 > for dash_spv_crypto_crypto_byte_util_UInt512 { unsafe fn ffi_from_const (ffi : * const dash_spv_crypto_crypto_byte_util_UInt512) -> dash_spv_crypto :: crypto :: byte_util :: UInt512 { let ffi_ref = & * ffi ; dash_spv_crypto :: crypto :: byte_util :: UInt512 (< crate :: fermented :: generics :: Arr_u8_64 as ferment :: FFIConversionFrom < [u8 ; 64] >> :: ffi_from (ffi_ref . 0)) } } impl ferment :: FFIConversionTo < dash_spv_crypto :: crypto :: byte_util :: UInt512 > for dash_spv_crypto_crypto_byte_util_UInt512 { unsafe fn ffi_to_const (obj : dash_spv_crypto :: crypto :: byte_util :: UInt512) -> * const dash_spv_crypto_crypto_byte_util_UInt512 { ferment :: boxed (dash_spv_crypto_crypto_byte_util_UInt512 (< crate :: fermented :: generics :: Arr_u8_64 as ferment :: FFIConversionTo < [u8 ; 64] >> :: ffi_to (obj . 0))) } } impl Drop for dash_spv_crypto_crypto_byte_util_UInt512 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_crypto_byte_util_UInt512_ctor < > (o_0 : * mut crate :: fermented :: generics :: Arr_u8_64) -> * mut dash_spv_crypto_crypto_byte_util_UInt512 { ferment :: boxed (dash_spv_crypto_crypto_byte_util_UInt512 (o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_crypto_byte_util_UInt512_destroy < > (ffi : * mut dash_spv_crypto_crypto_byte_util_UInt512) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_crypto_byte_util_UInt512_get_0 < > (obj : * const dash_spv_crypto_crypto_byte_util_UInt512) -> * mut crate :: fermented :: generics :: Arr_u8_64 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_crypto_byte_util_UInt512_set_0 < > (obj : * const dash_spv_crypto_crypto_byte_util_UInt512) -> * mut crate :: fermented :: generics :: Arr_u8_64 { (* obj) . 0 } # [doc = "FFI-representation of the [`UInt384`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_crypto_crypto_byte_util_UInt384 (* mut crate :: fermented :: generics :: Arr_u8_48) ; impl ferment :: FFIConversionFrom < dash_spv_crypto :: crypto :: byte_util :: UInt384 > for dash_spv_crypto_crypto_byte_util_UInt384 { unsafe fn ffi_from_const (ffi : * const dash_spv_crypto_crypto_byte_util_UInt384) -> dash_spv_crypto :: crypto :: byte_util :: UInt384 { let ffi_ref = & * ffi ; dash_spv_crypto :: crypto :: byte_util :: UInt384 (< crate :: fermented :: generics :: Arr_u8_48 as ferment :: FFIConversionFrom < [u8 ; 48] >> :: ffi_from (ffi_ref . 0)) } } impl ferment :: FFIConversionTo < dash_spv_crypto :: crypto :: byte_util :: UInt384 > for dash_spv_crypto_crypto_byte_util_UInt384 { unsafe fn ffi_to_const (obj : dash_spv_crypto :: crypto :: byte_util :: UInt384) -> * const dash_spv_crypto_crypto_byte_util_UInt384 { ferment :: boxed (dash_spv_crypto_crypto_byte_util_UInt384 (< crate :: fermented :: generics :: Arr_u8_48 as ferment :: FFIConversionTo < [u8 ; 48] >> :: ffi_to (obj . 0))) } } impl Drop for dash_spv_crypto_crypto_byte_util_UInt384 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_crypto_byte_util_UInt384_ctor < > (o_0 : * mut crate :: fermented :: generics :: Arr_u8_48) -> * mut dash_spv_crypto_crypto_byte_util_UInt384 { ferment :: boxed (dash_spv_crypto_crypto_byte_util_UInt384 (o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_crypto_byte_util_UInt384_destroy < > (ffi : * mut dash_spv_crypto_crypto_byte_util_UInt384) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_crypto_byte_util_UInt384_get_0 < > (obj : * const dash_spv_crypto_crypto_byte_util_UInt384) -> * mut crate :: fermented :: generics :: Arr_u8_48 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_crypto_byte_util_UInt384_set_0 < > (obj : * const dash_spv_crypto_crypto_byte_util_UInt384) -> * mut crate :: fermented :: generics :: Arr_u8_48 { (* obj) . 0 } # [doc = "FFI-representation of the [`UInt256`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_crypto_crypto_byte_util_UInt256 (* mut crate :: fermented :: generics :: Arr_u8_32) ; impl ferment :: FFIConversionFrom < dash_spv_crypto :: crypto :: byte_util :: UInt256 > for dash_spv_crypto_crypto_byte_util_UInt256 { unsafe fn ffi_from_const (ffi : * const dash_spv_crypto_crypto_byte_util_UInt256) -> dash_spv_crypto :: crypto :: byte_util :: UInt256 { let ffi_ref = & * ffi ; dash_spv_crypto :: crypto :: byte_util :: UInt256 (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (ffi_ref . 0)) } } impl ferment :: FFIConversionTo < dash_spv_crypto :: crypto :: byte_util :: UInt256 > for dash_spv_crypto_crypto_byte_util_UInt256 { unsafe fn ffi_to_const (obj : dash_spv_crypto :: crypto :: byte_util :: UInt256) -> * const dash_spv_crypto_crypto_byte_util_UInt256 { ferment :: boxed (dash_spv_crypto_crypto_byte_util_UInt256 (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj . 0))) } } impl Drop for dash_spv_crypto_crypto_byte_util_UInt256 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_crypto_byte_util_UInt256_ctor < > (o_0 : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut dash_spv_crypto_crypto_byte_util_UInt256 { ferment :: boxed (dash_spv_crypto_crypto_byte_util_UInt256 (o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_crypto_byte_util_UInt256_destroy < > (ffi : * mut dash_spv_crypto_crypto_byte_util_UInt256) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_crypto_byte_util_UInt256_get_0 < > (obj : * const dash_spv_crypto_crypto_byte_util_UInt256) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_crypto_byte_util_UInt256_set_0 < > (obj : * const dash_spv_crypto_crypto_byte_util_UInt256) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . 0 } } } # [doc = "FFI-representation of the [`dash_spv_crypto::x11`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_x11 (data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = dash_spv_crypto :: x11 (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } pub mod derivation { use crate as dash_spv_apple_bindings ; } # [doc = "FFI-representation of the [`dash_spv_crypto::blake3`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_blake3 (data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = dash_spv_crypto :: blake3 (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } pub mod network { use crate as dash_spv_apple_bindings ; pub mod constants { use crate as dash_spv_apple_bindings ; } pub mod chain_type { use crate as dash_spv_apple_bindings ; # [repr (C)] # [derive (Clone)] pub struct dash_spv_crypto_network_chain_type_IHaveChainSettings_VTable { # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::IHaveChainSettings::genesis_hash`]"] pub genesis_hash : unsafe extern "C" fn (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: generics :: Arr_u8_32 , # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::IHaveChainSettings::genesis_height`]"] pub genesis_height : unsafe extern "C" fn (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> u32 , # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::IHaveChainSettings::is_llmq_type`]"] pub is_llmq_type : unsafe extern "C" fn (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType , # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::IHaveChainSettings::isd_llmq_type`]"] pub isd_llmq_type : unsafe extern "C" fn (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType , # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::IHaveChainSettings::chain_locks_type`]"] pub chain_locks_type : unsafe extern "C" fn (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType , # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::IHaveChainSettings::platform_type`]"] pub platform_type : unsafe extern "C" fn (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType , # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::IHaveChainSettings::should_process_llmq_of_type`]"] pub should_process_llmq_of_type : unsafe extern "C" fn (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings , llmq_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType) -> bool , # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::IHaveChainSettings::is_evolution_enabled`]"] pub is_evolution_enabled : unsafe extern "C" fn (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> bool , # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::IHaveChainSettings::name`]"] pub name : unsafe extern "C" fn (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> * mut std :: os :: raw :: c_char } # [repr (C)] # [derive (Clone)] pub struct dash_spv_crypto_network_chain_type_IHaveChainSettings { object : * const () , vtable : * const dash_spv_crypto_network_chain_type_IHaveChainSettings_VTable } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`DevnetType`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_crypto_network_chain_type_DevnetType { JackDaniels = 0 , Devnet333 = 1 , Chacha = 2 , Mojito = 3 , WhiteRussian = 4 , MiningTest = 5 , Mobile2 = 6 , Zero = 7 , Screwdriver = 8 , Absinthe = 9 , Bintang = 10 , DRA = 11 } impl ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: DevnetType > for dash_spv_crypto_network_chain_type_DevnetType { unsafe fn ffi_from_const (ffi : * const dash_spv_crypto_network_chain_type_DevnetType) -> dash_spv_crypto :: network :: chain_type :: DevnetType { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_crypto_network_chain_type_DevnetType :: JackDaniels => dash_spv_crypto :: network :: chain_type :: DevnetType :: JackDaniels , dash_spv_crypto_network_chain_type_DevnetType :: Devnet333 => dash_spv_crypto :: network :: chain_type :: DevnetType :: Devnet333 , dash_spv_crypto_network_chain_type_DevnetType :: Chacha => dash_spv_crypto :: network :: chain_type :: DevnetType :: Chacha , dash_spv_crypto_network_chain_type_DevnetType :: Mojito => dash_spv_crypto :: network :: chain_type :: DevnetType :: Mojito , dash_spv_crypto_network_chain_type_DevnetType :: WhiteRussian => dash_spv_crypto :: network :: chain_type :: DevnetType :: WhiteRussian , dash_spv_crypto_network_chain_type_DevnetType :: MiningTest => dash_spv_crypto :: network :: chain_type :: DevnetType :: MiningTest , dash_spv_crypto_network_chain_type_DevnetType :: Mobile2 => dash_spv_crypto :: network :: chain_type :: DevnetType :: Mobile2 , dash_spv_crypto_network_chain_type_DevnetType :: Zero => dash_spv_crypto :: network :: chain_type :: DevnetType :: Zero , dash_spv_crypto_network_chain_type_DevnetType :: Screwdriver => dash_spv_crypto :: network :: chain_type :: DevnetType :: Screwdriver , dash_spv_crypto_network_chain_type_DevnetType :: Absinthe => dash_spv_crypto :: network :: chain_type :: DevnetType :: Absinthe , dash_spv_crypto_network_chain_type_DevnetType :: Bintang => dash_spv_crypto :: network :: chain_type :: DevnetType :: Bintang , dash_spv_crypto_network_chain_type_DevnetType :: DRA => dash_spv_crypto :: network :: chain_type :: DevnetType :: DRA } } } impl ferment :: FFIConversionTo < dash_spv_crypto :: network :: chain_type :: DevnetType > for dash_spv_crypto_network_chain_type_DevnetType { unsafe fn ffi_to_const (obj : dash_spv_crypto :: network :: chain_type :: DevnetType) -> * const dash_spv_crypto_network_chain_type_DevnetType { ferment :: boxed (match obj { dash_spv_crypto :: network :: chain_type :: DevnetType :: JackDaniels => dash_spv_crypto_network_chain_type_DevnetType :: JackDaniels , dash_spv_crypto :: network :: chain_type :: DevnetType :: Devnet333 => dash_spv_crypto_network_chain_type_DevnetType :: Devnet333 , dash_spv_crypto :: network :: chain_type :: DevnetType :: Chacha => dash_spv_crypto_network_chain_type_DevnetType :: Chacha , dash_spv_crypto :: network :: chain_type :: DevnetType :: Mojito => dash_spv_crypto_network_chain_type_DevnetType :: Mojito , dash_spv_crypto :: network :: chain_type :: DevnetType :: WhiteRussian => dash_spv_crypto_network_chain_type_DevnetType :: WhiteRussian , dash_spv_crypto :: network :: chain_type :: DevnetType :: MiningTest => dash_spv_crypto_network_chain_type_DevnetType :: MiningTest , dash_spv_crypto :: network :: chain_type :: DevnetType :: Mobile2 => dash_spv_crypto_network_chain_type_DevnetType :: Mobile2 , dash_spv_crypto :: network :: chain_type :: DevnetType :: Zero => dash_spv_crypto_network_chain_type_DevnetType :: Zero , dash_spv_crypto :: network :: chain_type :: DevnetType :: Screwdriver => dash_spv_crypto_network_chain_type_DevnetType :: Screwdriver , dash_spv_crypto :: network :: chain_type :: DevnetType :: Absinthe => dash_spv_crypto_network_chain_type_DevnetType :: Absinthe , dash_spv_crypto :: network :: chain_type :: DevnetType :: Bintang => dash_spv_crypto_network_chain_type_DevnetType :: Bintang , dash_spv_crypto :: network :: chain_type :: DevnetType :: DRA => dash_spv_crypto_network_chain_type_DevnetType :: DRA , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dash_spv_crypto_network_chain_type_DevnetType { fn drop (& mut self) { unsafe { match self { dash_spv_crypto_network_chain_type_DevnetType :: JackDaniels => { } , dash_spv_crypto_network_chain_type_DevnetType :: Devnet333 => { } , dash_spv_crypto_network_chain_type_DevnetType :: Chacha => { } , dash_spv_crypto_network_chain_type_DevnetType :: Mojito => { } , dash_spv_crypto_network_chain_type_DevnetType :: WhiteRussian => { } , dash_spv_crypto_network_chain_type_DevnetType :: MiningTest => { } , dash_spv_crypto_network_chain_type_DevnetType :: Mobile2 => { } , dash_spv_crypto_network_chain_type_DevnetType :: Zero => { } , dash_spv_crypto_network_chain_type_DevnetType :: Screwdriver => { } , dash_spv_crypto_network_chain_type_DevnetType :: Absinthe => { } , dash_spv_crypto_network_chain_type_DevnetType :: Bintang => { } , dash_spv_crypto_network_chain_type_DevnetType :: DRA => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_JackDaniels_ctor () -> * mut dash_spv_crypto_network_chain_type_DevnetType { ferment :: boxed (dash_spv_crypto_network_chain_type_DevnetType :: JackDaniels { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_Devnet333_ctor () -> * mut dash_spv_crypto_network_chain_type_DevnetType { ferment :: boxed (dash_spv_crypto_network_chain_type_DevnetType :: Devnet333 { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_Chacha_ctor () -> * mut dash_spv_crypto_network_chain_type_DevnetType { ferment :: boxed (dash_spv_crypto_network_chain_type_DevnetType :: Chacha { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_Mojito_ctor () -> * mut dash_spv_crypto_network_chain_type_DevnetType { ferment :: boxed (dash_spv_crypto_network_chain_type_DevnetType :: Mojito { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_WhiteRussian_ctor () -> * mut dash_spv_crypto_network_chain_type_DevnetType { ferment :: boxed (dash_spv_crypto_network_chain_type_DevnetType :: WhiteRussian { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_MiningTest_ctor () -> * mut dash_spv_crypto_network_chain_type_DevnetType { ferment :: boxed (dash_spv_crypto_network_chain_type_DevnetType :: MiningTest { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_Mobile2_ctor () -> * mut dash_spv_crypto_network_chain_type_DevnetType { ferment :: boxed (dash_spv_crypto_network_chain_type_DevnetType :: Mobile2 { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_Zero_ctor () -> * mut dash_spv_crypto_network_chain_type_DevnetType { ferment :: boxed (dash_spv_crypto_network_chain_type_DevnetType :: Zero { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_Screwdriver_ctor () -> * mut dash_spv_crypto_network_chain_type_DevnetType { ferment :: boxed (dash_spv_crypto_network_chain_type_DevnetType :: Screwdriver { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_Absinthe_ctor () -> * mut dash_spv_crypto_network_chain_type_DevnetType { ferment :: boxed (dash_spv_crypto_network_chain_type_DevnetType :: Absinthe { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_Bintang_ctor () -> * mut dash_spv_crypto_network_chain_type_DevnetType { ferment :: boxed (dash_spv_crypto_network_chain_type_DevnetType :: Bintang { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_DRA_ctor () -> * mut dash_spv_crypto_network_chain_type_DevnetType { ferment :: boxed (dash_spv_crypto_network_chain_type_DevnetType :: DRA { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_destroy < > (ffi : * mut dash_spv_crypto_network_chain_type_DevnetType) { ferment :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::DevnetType::identifier`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_identifier (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_DevnetType) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_crypto :: network :: chain_type :: DevnetType :: identifier (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::DevnetType::version`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_version (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_DevnetType) -> u16 { let obj = dash_spv_crypto :: network :: chain_type :: DevnetType :: version (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::DevnetType::index`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_index (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_DevnetType) -> u16 { let obj = dash_spv_crypto :: network :: chain_type :: DevnetType :: index (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::is_mainnet`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_is_mainnet (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> bool { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: is_mainnet (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::is_testnet`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_is_testnet (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> bool { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: is_testnet (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::is_devnet_any`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_is_devnet_any (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> bool { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: is_devnet_any (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::insight_url`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_insight_url (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: insight_url (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::user_agent`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_user_agent (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: user_agent (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::coin_type`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_coin_type (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> u32 { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: coin_type (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::devnet_identifier`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_devnet_identifier (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: devnet_identifier (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::devnet_version`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_devnet_version (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> i16 { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: devnet_version (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::dns_seeds`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_dns_seeds (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut crate :: fermented :: generics :: Vec_String { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: dns_seeds (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: generics :: Vec_String as ferment :: FFIConversionTo < Vec < String > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::script_priv_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_script_priv_key (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> u8 { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: script_priv_key (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::script_map`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_script_map (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut crate :: fermented :: types :: dash_spv_crypto :: util :: params :: dash_spv_crypto_util_params_ScriptMap { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: script_map (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: types :: dash_spv_crypto :: util :: params :: dash_spv_crypto_util_params_ScriptMap as ferment :: FFIConversionTo < dash_spv_crypto :: util :: params :: ScriptMap >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::bip32_script_map`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_bip32_script_map (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut crate :: fermented :: types :: dash_spv_crypto :: util :: params :: dash_spv_crypto_util_params_BIP32ScriptMap { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: bip32_script_map (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: types :: dash_spv_crypto :: util :: params :: dash_spv_crypto_util_params_BIP32ScriptMap as ferment :: FFIConversionTo < dash_spv_crypto :: util :: params :: BIP32ScriptMap >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::dip14_script_map`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_dip14_script_map (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut crate :: fermented :: types :: dash_spv_crypto :: util :: params :: dash_spv_crypto_util_params_DIP14ScriptMap { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: dip14_script_map (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: types :: dash_spv_crypto :: util :: params :: dash_spv_crypto_util_params_DIP14ScriptMap as ferment :: FFIConversionTo < dash_spv_crypto :: util :: params :: DIP14ScriptMap >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::from_magic`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_from_magic (magic : u32) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: from_magic (magic) ; < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::magic`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_magic (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> u32 { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: magic (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::allow_min_difficulty_blocks`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_allow_min_difficulty_blocks (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> bool { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: allow_min_difficulty_blocks (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::max_proof_of_work`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_max_proof_of_work (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut crate :: fermented :: types :: dash_spv_crypto :: crypto :: byte_util :: dash_spv_crypto_crypto_byte_util_UInt256 { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: max_proof_of_work (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: types :: dash_spv_crypto :: crypto :: byte_util :: dash_spv_crypto_crypto_byte_util_UInt256 as ferment :: FFIConversionTo < dash_spv_crypto :: crypto :: byte_util :: UInt256 >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::max_proof_of_work_target`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_max_proof_of_work_target (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> u32 { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: max_proof_of_work_target (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::min_protocol_version`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_min_protocol_version (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> u32 { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: min_protocol_version (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::protocol_version`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_protocol_version (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> u32 { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: protocol_version (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::use_legacy_bls`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_use_legacy_bls (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> bool { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: use_legacy_bls (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::standard_port`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_standard_port (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> u16 { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: standard_port (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::platform_port`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_platform_port (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> u16 { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: platform_port (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::standard_dapi_grpc_port`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_standard_dapi_grpc_port (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> u16 { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: standard_dapi_grpc_port (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::standard_dapi_jrpc_port`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_standard_dapi_jrpc_port (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> u16 { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: standard_dapi_jrpc_port (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::localhost`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_localhost (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut dash_spv_apple_bindings :: custom :: std :: SocketAddr { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: localhost (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < dash_spv_apple_bindings :: custom :: std :: SocketAddr as ferment :: FFIConversionTo < std :: net :: SocketAddr >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::transaction_version`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_transaction_version (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> u16 { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: transaction_version (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::base_reward`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_base_reward (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> u64 { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: base_reward (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::magic_number`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_magic_number (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> u64 { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: magic_number (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::header_max_amount`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_header_max_amount (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> u64 { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: header_max_amount (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::spork_params`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_spork_params (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut crate :: fermented :: types :: dash_spv_crypto :: util :: params :: dash_spv_crypto_util_params_SporkParams { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: spork_params (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: types :: dash_spv_crypto :: util :: params :: dash_spv_crypto_util_params_SporkParams as ferment :: FFIConversionTo < dash_spv_crypto :: util :: params :: SporkParams >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::peer_misbehaving_threshold`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_peer_misbehaving_threshold (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> usize { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: peer_misbehaving_threshold (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::core19_activation_height`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_core19_activation_height (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> u32 { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: core19_activation_height (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::core20_activation_height`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_core20_activation_height (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> u32 { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: core20_activation_height (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::core20_is_active_at`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_core20_is_active_at (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType , height : u32) -> bool { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: core20_is_active_at (& ferment :: FFIConversionFrom :: ffi_from (self_) , height) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::identifier`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_identifier (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: identifier (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::index`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_index (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> u16 { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: index (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::devnet_type`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_devnet_type (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_DevnetType { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: devnet_type (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_DevnetType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: chain_type :: DevnetType >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::unique_id`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_unique_id (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_crypto :: network :: chain_type :: ChainType :: unique_id (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::devnet_type_from_identifier`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_devnet_type_from_identifier (identifier : * mut std :: os :: raw :: c_char) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_DevnetType { let obj = dash_spv_crypto :: network :: chain_type :: devnet_type_from_identifier (Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (identifier)))) ; < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_DevnetType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: chain_type :: DevnetType >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::chain_type_from_index`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_chain_type_from_index (index : u16) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType { let obj = dash_spv_crypto :: network :: chain_type :: chain_type_from_index (index) ; < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_to (obj) } # [no_mangle] pub static dash_spv_crypto_network_chain_type_DevnetType_dash_spv_crypto_network_chain_type_IHaveChainSettings : crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings_VTable = { # [no_mangle] unsafe extern "C" fn dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_DevnetType_genesis_hash (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: network :: chain_type :: DevnetType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: genesis_hash (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: DevnetType)) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_DevnetType_genesis_height (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> u32 { let obj = < dash_spv_crypto :: network :: chain_type :: DevnetType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: genesis_height (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: DevnetType)) ; obj } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_DevnetType_is_llmq_type (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType { let obj = < dash_spv_crypto :: network :: chain_type :: DevnetType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: is_llmq_type (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: DevnetType)) ; < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_DevnetType_isd_llmq_type (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType { let obj = < dash_spv_crypto :: network :: chain_type :: DevnetType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: isd_llmq_type (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: DevnetType)) ; < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_DevnetType_chain_locks_type (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType { let obj = < dash_spv_crypto :: network :: chain_type :: DevnetType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: chain_locks_type (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: DevnetType)) ; < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_DevnetType_platform_type (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType { let obj = < dash_spv_crypto :: network :: chain_type :: DevnetType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: platform_type (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: DevnetType)) ; < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_DevnetType_should_process_llmq_of_type (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings , llmq_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType) -> bool { let obj = < dash_spv_crypto :: network :: chain_type :: DevnetType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: should_process_llmq_of_type (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: DevnetType) , < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_from (llmq_type)) ; obj } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_DevnetType_is_evolution_enabled (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> bool { let obj = < dash_spv_crypto :: network :: chain_type :: DevnetType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: is_evolution_enabled (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: DevnetType)) ; obj } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_DevnetType_name (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: network :: chain_type :: DevnetType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: name (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: DevnetType)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings_VTable { genesis_hash : dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_DevnetType_genesis_hash , genesis_height : dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_DevnetType_genesis_height , is_llmq_type : dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_DevnetType_is_llmq_type , isd_llmq_type : dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_DevnetType_isd_llmq_type , chain_locks_type : dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_DevnetType_chain_locks_type , platform_type : dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_DevnetType_platform_type , should_process_llmq_of_type : dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_DevnetType_should_process_llmq_of_type , is_evolution_enabled : dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_DevnetType_is_evolution_enabled , name : dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_DevnetType_name } } ; # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_as_crate_fermented_types_dash_spv_crypto_network_chain_type_dash_spv_crypto_network_chain_type_IHaveChainSettings (obj : * const dash_spv_crypto :: network :: chain_type :: DevnetType) -> crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings { crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings { object : obj as * const () , vtable : & dash_spv_crypto_network_chain_type_DevnetType_dash_spv_crypto_network_chain_type_IHaveChainSettings } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_as_crate_fermented_types_dash_spv_crypto_network_chain_type_dash_spv_crypto_network_chain_type_IHaveChainSettings_destroy (obj : crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) { ferment :: unbox_any (obj . object as * mut dash_spv_crypto :: network :: chain_type :: DevnetType) ; } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::DevnetType::genesis_hash`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_IHaveChainSettings_genesis_hash (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: network :: chain_type :: DevnetType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: genesis_hash (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: DevnetType)) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::DevnetType::genesis_hash`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_genesis_hash (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_DevnetType) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: network :: chain_type :: DevnetType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: genesis_hash (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::DevnetType::genesis_height`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_IHaveChainSettings_genesis_height (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> u32 { let obj = < dash_spv_crypto :: network :: chain_type :: DevnetType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: genesis_height (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: DevnetType)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::DevnetType::genesis_height`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_genesis_height (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_DevnetType) -> u32 { let obj = < dash_spv_crypto :: network :: chain_type :: DevnetType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: genesis_height (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::DevnetType::is_llmq_type`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_IHaveChainSettings_is_llmq_type (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType { let obj = < dash_spv_crypto :: network :: chain_type :: DevnetType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: is_llmq_type (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: DevnetType)) ; < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::DevnetType::is_llmq_type`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_is_llmq_type (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_DevnetType) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType { let obj = < dash_spv_crypto :: network :: chain_type :: DevnetType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: is_llmq_type (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::DevnetType::isd_llmq_type`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_IHaveChainSettings_isd_llmq_type (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType { let obj = < dash_spv_crypto :: network :: chain_type :: DevnetType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: isd_llmq_type (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: DevnetType)) ; < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::DevnetType::isd_llmq_type`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_isd_llmq_type (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_DevnetType) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType { let obj = < dash_spv_crypto :: network :: chain_type :: DevnetType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: isd_llmq_type (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::DevnetType::chain_locks_type`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_IHaveChainSettings_chain_locks_type (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType { let obj = < dash_spv_crypto :: network :: chain_type :: DevnetType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: chain_locks_type (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: DevnetType)) ; < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::DevnetType::chain_locks_type`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_chain_locks_type (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_DevnetType) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType { let obj = < dash_spv_crypto :: network :: chain_type :: DevnetType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: chain_locks_type (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::DevnetType::platform_type`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_IHaveChainSettings_platform_type (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType { let obj = < dash_spv_crypto :: network :: chain_type :: DevnetType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: platform_type (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: DevnetType)) ; < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::DevnetType::platform_type`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_platform_type (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_DevnetType) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType { let obj = < dash_spv_crypto :: network :: chain_type :: DevnetType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: platform_type (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::DevnetType::should_process_llmq_of_type`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_IHaveChainSettings_should_process_llmq_of_type (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings , llmq_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType) -> bool { let obj = < dash_spv_crypto :: network :: chain_type :: DevnetType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: should_process_llmq_of_type (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: DevnetType) , < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_from (llmq_type)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::DevnetType::should_process_llmq_of_type`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_should_process_llmq_of_type (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_DevnetType , llmq_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType) -> bool { let obj = < dash_spv_crypto :: network :: chain_type :: DevnetType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: should_process_llmq_of_type (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_from (llmq_type)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::DevnetType::is_evolution_enabled`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_IHaveChainSettings_is_evolution_enabled (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> bool { let obj = < dash_spv_crypto :: network :: chain_type :: DevnetType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: is_evolution_enabled (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: DevnetType)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::DevnetType::is_evolution_enabled`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_is_evolution_enabled (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_DevnetType) -> bool { let obj = < dash_spv_crypto :: network :: chain_type :: DevnetType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: is_evolution_enabled (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::DevnetType::name`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_IHaveChainSettings_name (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: network :: chain_type :: DevnetType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: name (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: DevnetType)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::DevnetType::name`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_DevnetType_name (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_DevnetType) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: network :: chain_type :: DevnetType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: name (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`ChainType`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_crypto_network_chain_type_ChainType { MainNet , TestNet , DevNet (* mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_DevnetType) } impl ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType > for dash_spv_crypto_network_chain_type_ChainType { unsafe fn ffi_from_const (ffi : * const dash_spv_crypto_network_chain_type_ChainType) -> dash_spv_crypto :: network :: chain_type :: ChainType { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_crypto_network_chain_type_ChainType :: MainNet => dash_spv_crypto :: network :: chain_type :: ChainType :: MainNet , dash_spv_crypto_network_chain_type_ChainType :: TestNet => dash_spv_crypto :: network :: chain_type :: ChainType :: TestNet , dash_spv_crypto_network_chain_type_ChainType :: DevNet (o_0) => dash_spv_crypto :: network :: chain_type :: ChainType :: DevNet (< crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_DevnetType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: DevnetType >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dash_spv_crypto :: network :: chain_type :: ChainType > for dash_spv_crypto_network_chain_type_ChainType { unsafe fn ffi_to_const (obj : dash_spv_crypto :: network :: chain_type :: ChainType) -> * const dash_spv_crypto_network_chain_type_ChainType { ferment :: boxed (match obj { dash_spv_crypto :: network :: chain_type :: ChainType :: MainNet => dash_spv_crypto_network_chain_type_ChainType :: MainNet , dash_spv_crypto :: network :: chain_type :: ChainType :: TestNet => dash_spv_crypto_network_chain_type_ChainType :: TestNet , dash_spv_crypto :: network :: chain_type :: ChainType :: DevNet (o_0) => dash_spv_crypto_network_chain_type_ChainType :: DevNet (< crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_DevnetType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: chain_type :: DevnetType >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dash_spv_crypto_network_chain_type_ChainType { fn drop (& mut self) { unsafe { match self { dash_spv_crypto_network_chain_type_ChainType :: MainNet => { } , dash_spv_crypto_network_chain_type_ChainType :: TestNet => { } , dash_spv_crypto_network_chain_type_ChainType :: DevNet (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_MainNet_ctor () -> * mut dash_spv_crypto_network_chain_type_ChainType { ferment :: boxed (dash_spv_crypto_network_chain_type_ChainType :: MainNet { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_TestNet_ctor () -> * mut dash_spv_crypto_network_chain_type_ChainType { ferment :: boxed (dash_spv_crypto_network_chain_type_ChainType :: TestNet { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_DevNet_ctor (o_o_0 : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_DevnetType) -> * mut dash_spv_crypto_network_chain_type_ChainType { ferment :: boxed (dash_spv_crypto_network_chain_type_ChainType :: DevNet (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_destroy < > (ffi : * mut dash_spv_crypto_network_chain_type_ChainType) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub static dash_spv_crypto_network_chain_type_ChainType_dash_spv_crypto_network_chain_type_IHaveChainSettings : crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings_VTable = { # [no_mangle] unsafe extern "C" fn dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_ChainType_genesis_hash (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: network :: chain_type :: ChainType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: genesis_hash (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: ChainType)) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_ChainType_genesis_height (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> u32 { let obj = < dash_spv_crypto :: network :: chain_type :: ChainType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: genesis_height (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: ChainType)) ; obj } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_ChainType_is_llmq_type (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType { let obj = < dash_spv_crypto :: network :: chain_type :: ChainType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: is_llmq_type (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: ChainType)) ; < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_ChainType_isd_llmq_type (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType { let obj = < dash_spv_crypto :: network :: chain_type :: ChainType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: isd_llmq_type (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: ChainType)) ; < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_ChainType_chain_locks_type (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType { let obj = < dash_spv_crypto :: network :: chain_type :: ChainType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: chain_locks_type (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: ChainType)) ; < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_ChainType_platform_type (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType { let obj = < dash_spv_crypto :: network :: chain_type :: ChainType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: platform_type (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: ChainType)) ; < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_ChainType_should_process_llmq_of_type (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings , llmq_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType) -> bool { let obj = < dash_spv_crypto :: network :: chain_type :: ChainType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: should_process_llmq_of_type (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: ChainType) , < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_from (llmq_type)) ; obj } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_ChainType_is_evolution_enabled (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> bool { let obj = < dash_spv_crypto :: network :: chain_type :: ChainType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: is_evolution_enabled (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: ChainType)) ; obj } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_ChainType_name (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: network :: chain_type :: ChainType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: name (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: ChainType)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings_VTable { genesis_hash : dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_ChainType_genesis_hash , genesis_height : dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_ChainType_genesis_height , is_llmq_type : dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_ChainType_is_llmq_type , isd_llmq_type : dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_ChainType_isd_llmq_type , chain_locks_type : dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_ChainType_chain_locks_type , platform_type : dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_ChainType_platform_type , should_process_llmq_of_type : dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_ChainType_should_process_llmq_of_type , is_evolution_enabled : dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_ChainType_is_evolution_enabled , name : dash_spv_crypto_network_chain_type_IHaveChainSettings_dash_spv_crypto_network_chain_type_ChainType_name } } ; # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_as_crate_fermented_types_dash_spv_crypto_network_chain_type_dash_spv_crypto_network_chain_type_IHaveChainSettings (obj : * const dash_spv_crypto :: network :: chain_type :: ChainType) -> crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings { crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings { object : obj as * const () , vtable : & dash_spv_crypto_network_chain_type_ChainType_dash_spv_crypto_network_chain_type_IHaveChainSettings } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_as_crate_fermented_types_dash_spv_crypto_network_chain_type_dash_spv_crypto_network_chain_type_IHaveChainSettings_destroy (obj : crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) { ferment :: unbox_any (obj . object as * mut dash_spv_crypto :: network :: chain_type :: ChainType) ; } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::genesis_hash`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_IHaveChainSettings_genesis_hash (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: network :: chain_type :: ChainType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: genesis_hash (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: ChainType)) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::genesis_hash`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_genesis_hash (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: network :: chain_type :: ChainType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: genesis_hash (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::genesis_height`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_IHaveChainSettings_genesis_height (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> u32 { let obj = < dash_spv_crypto :: network :: chain_type :: ChainType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: genesis_height (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: ChainType)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::genesis_height`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_genesis_height (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> u32 { let obj = < dash_spv_crypto :: network :: chain_type :: ChainType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: genesis_height (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::is_llmq_type`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_IHaveChainSettings_is_llmq_type (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType { let obj = < dash_spv_crypto :: network :: chain_type :: ChainType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: is_llmq_type (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: ChainType)) ; < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::is_llmq_type`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_is_llmq_type (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType { let obj = < dash_spv_crypto :: network :: chain_type :: ChainType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: is_llmq_type (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::isd_llmq_type`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_IHaveChainSettings_isd_llmq_type (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType { let obj = < dash_spv_crypto :: network :: chain_type :: ChainType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: isd_llmq_type (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: ChainType)) ; < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::isd_llmq_type`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_isd_llmq_type (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType { let obj = < dash_spv_crypto :: network :: chain_type :: ChainType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: isd_llmq_type (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::chain_locks_type`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_IHaveChainSettings_chain_locks_type (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType { let obj = < dash_spv_crypto :: network :: chain_type :: ChainType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: chain_locks_type (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: ChainType)) ; < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::chain_locks_type`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_chain_locks_type (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType { let obj = < dash_spv_crypto :: network :: chain_type :: ChainType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: chain_locks_type (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::platform_type`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_IHaveChainSettings_platform_type (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType { let obj = < dash_spv_crypto :: network :: chain_type :: ChainType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: platform_type (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: ChainType)) ; < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::platform_type`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_platform_type (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType { let obj = < dash_spv_crypto :: network :: chain_type :: ChainType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: platform_type (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::should_process_llmq_of_type`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_IHaveChainSettings_should_process_llmq_of_type (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings , llmq_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType) -> bool { let obj = < dash_spv_crypto :: network :: chain_type :: ChainType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: should_process_llmq_of_type (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: ChainType) , < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_from (llmq_type)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::should_process_llmq_of_type`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_should_process_llmq_of_type (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType , llmq_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType) -> bool { let obj = < dash_spv_crypto :: network :: chain_type :: ChainType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: should_process_llmq_of_type (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_from (llmq_type)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::is_evolution_enabled`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_IHaveChainSettings_is_evolution_enabled (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> bool { let obj = < dash_spv_crypto :: network :: chain_type :: ChainType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: is_evolution_enabled (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: ChainType)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::is_evolution_enabled`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_is_evolution_enabled (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> bool { let obj = < dash_spv_crypto :: network :: chain_type :: ChainType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: is_evolution_enabled (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::name`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_IHaveChainSettings_name (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_IHaveChainSettings) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: network :: chain_type :: ChainType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: name (& * ((* self_) . object as * const dash_spv_crypto :: network :: chain_type :: ChainType)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::ChainType::name`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_ChainType_name (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: network :: chain_type :: ChainType as dash_spv_crypto :: network :: chain_type :: IHaveChainSettings > :: name (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::chain_type::devnet_type_from_index`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_chain_type_devnet_type_from_index (index : u16) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_DevnetType { let obj = dash_spv_crypto :: network :: chain_type :: devnet_type_from_index (index) ; < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_DevnetType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: chain_type :: DevnetType >> :: ffi_to (obj) } } pub mod llmq_type { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`LLMQParams`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_crypto_network_llmq_type_LLMQParams { pub r#type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType , pub name : * mut std :: os :: raw :: c_char , pub size : u32 , pub min_size : u32 , pub threshold : u32 , pub dkg_params : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_DKGParams , pub signing_active_quorum_count : u32 , pub keep_old_connections : u32 , pub recovery_members : u32 } impl ferment :: FFIConversionFrom < dash_spv_crypto :: network :: llmq_type :: LLMQParams > for dash_spv_crypto_network_llmq_type_LLMQParams { unsafe fn ffi_from_const (ffi : * const dash_spv_crypto_network_llmq_type_LLMQParams) -> dash_spv_crypto :: network :: llmq_type :: LLMQParams { let ffi_ref = & * ffi ; dash_spv_crypto :: network :: llmq_type :: LLMQParams { r#type : < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_from (ffi_ref . r#type) , name : Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (ffi_ref . name))) , size : ffi_ref . size , min_size : ffi_ref . min_size , threshold : ffi_ref . threshold , dkg_params : < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_DKGParams as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: llmq_type :: DKGParams >> :: ffi_from (ffi_ref . dkg_params) , signing_active_quorum_count : ffi_ref . signing_active_quorum_count , keep_old_connections : ffi_ref . keep_old_connections , recovery_members : ffi_ref . recovery_members } } } impl ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: LLMQParams > for dash_spv_crypto_network_llmq_type_LLMQParams { unsafe fn ffi_to_const (obj : dash_spv_crypto :: network :: llmq_type :: LLMQParams) -> * const dash_spv_crypto_network_llmq_type_LLMQParams { ferment :: boxed (dash_spv_crypto_network_llmq_type_LLMQParams { r#type : < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_to (obj . r#type) , name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < & str >> :: ffi_to (obj . name) , size : obj . size , min_size : obj . min_size , threshold : obj . threshold , dkg_params : < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_DKGParams as ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: DKGParams >> :: ffi_to (obj . dkg_params) , signing_active_quorum_count : obj . signing_active_quorum_count , keep_old_connections : obj . keep_old_connections , recovery_members : obj . recovery_members }) } } impl Drop for dash_spv_crypto_network_llmq_type_LLMQParams { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . r#type) ; ferment :: unbox_string (ffi_ref . name) ; ; ; ; ferment :: unbox_any (ffi_ref . dkg_params) ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQParams_ctor < > (r#type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType , name : * mut std :: os :: raw :: c_char , size : u32 , min_size : u32 , threshold : u32 , dkg_params : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_DKGParams , signing_active_quorum_count : u32 , keep_old_connections : u32 , recovery_members : u32) -> * mut dash_spv_crypto_network_llmq_type_LLMQParams { ferment :: boxed (dash_spv_crypto_network_llmq_type_LLMQParams { r#type , name , size , min_size , threshold , dkg_params , signing_active_quorum_count , keep_old_connections , recovery_members }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQParams_destroy < > (ffi : * mut dash_spv_crypto_network_llmq_type_LLMQParams) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQParams_get_type < > (obj : * const dash_spv_crypto_network_llmq_type_LLMQParams) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType { (* obj) . r#type } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQParams_get_name < > (obj : * const dash_spv_crypto_network_llmq_type_LLMQParams) -> * mut std :: os :: raw :: c_char { (* obj) . name } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQParams_get_size < > (obj : * const dash_spv_crypto_network_llmq_type_LLMQParams) -> u32 { (* obj) . size } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQParams_get_min_size < > (obj : * const dash_spv_crypto_network_llmq_type_LLMQParams) -> u32 { (* obj) . min_size } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQParams_get_threshold < > (obj : * const dash_spv_crypto_network_llmq_type_LLMQParams) -> u32 { (* obj) . threshold } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQParams_get_dkg_params < > (obj : * const dash_spv_crypto_network_llmq_type_LLMQParams) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_DKGParams { (* obj) . dkg_params } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQParams_get_signing_active_quorum_count < > (obj : * const dash_spv_crypto_network_llmq_type_LLMQParams) -> u32 { (* obj) . signing_active_quorum_count } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQParams_get_keep_old_connections < > (obj : * const dash_spv_crypto_network_llmq_type_LLMQParams) -> u32 { (* obj) . keep_old_connections } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQParams_get_recovery_members < > (obj : * const dash_spv_crypto_network_llmq_type_LLMQParams) -> u32 { (* obj) . recovery_members } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQParams_set_type < > (obj : * const dash_spv_crypto_network_llmq_type_LLMQParams) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType { (* obj) . r#type } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQParams_set_name < > (obj : * const dash_spv_crypto_network_llmq_type_LLMQParams) -> * mut std :: os :: raw :: c_char { (* obj) . name } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQParams_set_size < > (obj : * const dash_spv_crypto_network_llmq_type_LLMQParams) -> u32 { (* obj) . size } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQParams_set_min_size < > (obj : * const dash_spv_crypto_network_llmq_type_LLMQParams) -> u32 { (* obj) . min_size } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQParams_set_threshold < > (obj : * const dash_spv_crypto_network_llmq_type_LLMQParams) -> u32 { (* obj) . threshold } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQParams_set_dkg_params < > (obj : * const dash_spv_crypto_network_llmq_type_LLMQParams) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_DKGParams { (* obj) . dkg_params } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQParams_set_signing_active_quorum_count < > (obj : * const dash_spv_crypto_network_llmq_type_LLMQParams) -> u32 { (* obj) . signing_active_quorum_count } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQParams_set_keep_old_connections < > (obj : * const dash_spv_crypto_network_llmq_type_LLMQParams) -> u32 { (* obj) . keep_old_connections } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQParams_set_recovery_members < > (obj : * const dash_spv_crypto_network_llmq_type_LLMQParams) -> u32 { (* obj) . recovery_members } # [doc = "FFI-representation of the [`dash_spv_crypto::network::llmq_type::dkg_rotation_params`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_dkg_rotation_params (chain_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_DKGParams { let obj = dash_spv_crypto :: network :: llmq_type :: dkg_rotation_params (< crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain_type)) ; < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_DKGParams as ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: DKGParams >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`DKGParams`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_crypto_network_llmq_type_DKGParams { pub interval : u32 , pub phase_blocks : u32 , pub mining_window_start : u32 , pub mining_window_end : u32 , pub bad_votes_threshold : u32 } impl ferment :: FFIConversionFrom < dash_spv_crypto :: network :: llmq_type :: DKGParams > for dash_spv_crypto_network_llmq_type_DKGParams { unsafe fn ffi_from_const (ffi : * const dash_spv_crypto_network_llmq_type_DKGParams) -> dash_spv_crypto :: network :: llmq_type :: DKGParams { let ffi_ref = & * ffi ; dash_spv_crypto :: network :: llmq_type :: DKGParams { interval : ffi_ref . interval , phase_blocks : ffi_ref . phase_blocks , mining_window_start : ffi_ref . mining_window_start , mining_window_end : ffi_ref . mining_window_end , bad_votes_threshold : ffi_ref . bad_votes_threshold } } } impl ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: DKGParams > for dash_spv_crypto_network_llmq_type_DKGParams { unsafe fn ffi_to_const (obj : dash_spv_crypto :: network :: llmq_type :: DKGParams) -> * const dash_spv_crypto_network_llmq_type_DKGParams { ferment :: boxed (dash_spv_crypto_network_llmq_type_DKGParams { interval : obj . interval , phase_blocks : obj . phase_blocks , mining_window_start : obj . mining_window_start , mining_window_end : obj . mining_window_end , bad_votes_threshold : obj . bad_votes_threshold }) } } impl Drop for dash_spv_crypto_network_llmq_type_DKGParams { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_DKGParams_ctor < > (interval : u32 , phase_blocks : u32 , mining_window_start : u32 , mining_window_end : u32 , bad_votes_threshold : u32) -> * mut dash_spv_crypto_network_llmq_type_DKGParams { ferment :: boxed (dash_spv_crypto_network_llmq_type_DKGParams { interval , phase_blocks , mining_window_start , mining_window_end , bad_votes_threshold }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_DKGParams_destroy < > (ffi : * mut dash_spv_crypto_network_llmq_type_DKGParams) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_DKGParams_get_interval < > (obj : * const dash_spv_crypto_network_llmq_type_DKGParams) -> u32 { (* obj) . interval } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_DKGParams_get_phase_blocks < > (obj : * const dash_spv_crypto_network_llmq_type_DKGParams) -> u32 { (* obj) . phase_blocks } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_DKGParams_get_mining_window_start < > (obj : * const dash_spv_crypto_network_llmq_type_DKGParams) -> u32 { (* obj) . mining_window_start } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_DKGParams_get_mining_window_end < > (obj : * const dash_spv_crypto_network_llmq_type_DKGParams) -> u32 { (* obj) . mining_window_end } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_DKGParams_get_bad_votes_threshold < > (obj : * const dash_spv_crypto_network_llmq_type_DKGParams) -> u32 { (* obj) . bad_votes_threshold } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_DKGParams_set_interval < > (obj : * const dash_spv_crypto_network_llmq_type_DKGParams) -> u32 { (* obj) . interval } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_DKGParams_set_phase_blocks < > (obj : * const dash_spv_crypto_network_llmq_type_DKGParams) -> u32 { (* obj) . phase_blocks } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_DKGParams_set_mining_window_start < > (obj : * const dash_spv_crypto_network_llmq_type_DKGParams) -> u32 { (* obj) . mining_window_start } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_DKGParams_set_mining_window_end < > (obj : * const dash_spv_crypto_network_llmq_type_DKGParams) -> u32 { (* obj) . mining_window_end } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_DKGParams_set_bad_votes_threshold < > (obj : * const dash_spv_crypto_network_llmq_type_DKGParams) -> u32 { (* obj) . bad_votes_threshold } # [doc = "FFI-representation of the [`dash_spv_crypto::network::llmq_type::LLMQType::index`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQType_index (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType) -> u8 { let obj = dash_spv_crypto :: network :: llmq_type :: LLMQType :: index (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::network::llmq_type::LLMQType::from_u16`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQType_from_u16 (index : u16) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType { let obj = dash_spv_crypto :: network :: llmq_type :: LLMQType :: from_u16 (index) ; < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::network::llmq_type::LLMQType::from_u8`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQType_from_u8 (index : u8) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType { let obj = dash_spv_crypto :: network :: llmq_type :: LLMQType :: from_u8 (index) ; < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`LLMQType`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_crypto_network_llmq_type_LLMQType { LlmqtypeUnknown = 0 , Llmqtype50_60 = 1 , Llmqtype400_60 = 2 , Llmqtype400_85 = 3 , Llmqtype100_67 = 4 , Llmqtype60_75 = 5 , Llmqtype25_67 = 6 , LlmqtypeTest = 100 , LlmqtypeDevnet = 101 , LlmqtypeTestV17 = 102 , LlmqtypeTestDIP0024 = 103 , LlmqtypeTestInstantSend = 104 , LlmqtypeDevnetDIP0024 = 105 , LlmqtypeTestnetPlatform = 106 , LlmqtypeDevnetPlatform = 107 } impl ferment :: FFIConversionFrom < dash_spv_crypto :: network :: llmq_type :: LLMQType > for dash_spv_crypto_network_llmq_type_LLMQType { unsafe fn ffi_from_const (ffi : * const dash_spv_crypto_network_llmq_type_LLMQType) -> dash_spv_crypto :: network :: llmq_type :: LLMQType { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeUnknown => dash_spv_crypto :: network :: llmq_type :: LLMQType :: LlmqtypeUnknown , dash_spv_crypto_network_llmq_type_LLMQType :: Llmqtype50_60 => dash_spv_crypto :: network :: llmq_type :: LLMQType :: Llmqtype50_60 , dash_spv_crypto_network_llmq_type_LLMQType :: Llmqtype400_60 => dash_spv_crypto :: network :: llmq_type :: LLMQType :: Llmqtype400_60 , dash_spv_crypto_network_llmq_type_LLMQType :: Llmqtype400_85 => dash_spv_crypto :: network :: llmq_type :: LLMQType :: Llmqtype400_85 , dash_spv_crypto_network_llmq_type_LLMQType :: Llmqtype100_67 => dash_spv_crypto :: network :: llmq_type :: LLMQType :: Llmqtype100_67 , dash_spv_crypto_network_llmq_type_LLMQType :: Llmqtype60_75 => dash_spv_crypto :: network :: llmq_type :: LLMQType :: Llmqtype60_75 , dash_spv_crypto_network_llmq_type_LLMQType :: Llmqtype25_67 => dash_spv_crypto :: network :: llmq_type :: LLMQType :: Llmqtype25_67 , dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeTest => dash_spv_crypto :: network :: llmq_type :: LLMQType :: LlmqtypeTest , dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeDevnet => dash_spv_crypto :: network :: llmq_type :: LLMQType :: LlmqtypeDevnet , dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeTestV17 => dash_spv_crypto :: network :: llmq_type :: LLMQType :: LlmqtypeTestV17 , dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeTestDIP0024 => dash_spv_crypto :: network :: llmq_type :: LLMQType :: LlmqtypeTestDIP0024 , dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeTestInstantSend => dash_spv_crypto :: network :: llmq_type :: LLMQType :: LlmqtypeTestInstantSend , dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeDevnetDIP0024 => dash_spv_crypto :: network :: llmq_type :: LLMQType :: LlmqtypeDevnetDIP0024 , dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeTestnetPlatform => dash_spv_crypto :: network :: llmq_type :: LLMQType :: LlmqtypeTestnetPlatform , dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeDevnetPlatform => dash_spv_crypto :: network :: llmq_type :: LLMQType :: LlmqtypeDevnetPlatform } } } impl ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: LLMQType > for dash_spv_crypto_network_llmq_type_LLMQType { unsafe fn ffi_to_const (obj : dash_spv_crypto :: network :: llmq_type :: LLMQType) -> * const dash_spv_crypto_network_llmq_type_LLMQType { ferment :: boxed (match obj { dash_spv_crypto :: network :: llmq_type :: LLMQType :: LlmqtypeUnknown => dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeUnknown , dash_spv_crypto :: network :: llmq_type :: LLMQType :: Llmqtype50_60 => dash_spv_crypto_network_llmq_type_LLMQType :: Llmqtype50_60 , dash_spv_crypto :: network :: llmq_type :: LLMQType :: Llmqtype400_60 => dash_spv_crypto_network_llmq_type_LLMQType :: Llmqtype400_60 , dash_spv_crypto :: network :: llmq_type :: LLMQType :: Llmqtype400_85 => dash_spv_crypto_network_llmq_type_LLMQType :: Llmqtype400_85 , dash_spv_crypto :: network :: llmq_type :: LLMQType :: Llmqtype100_67 => dash_spv_crypto_network_llmq_type_LLMQType :: Llmqtype100_67 , dash_spv_crypto :: network :: llmq_type :: LLMQType :: Llmqtype60_75 => dash_spv_crypto_network_llmq_type_LLMQType :: Llmqtype60_75 , dash_spv_crypto :: network :: llmq_type :: LLMQType :: Llmqtype25_67 => dash_spv_crypto_network_llmq_type_LLMQType :: Llmqtype25_67 , dash_spv_crypto :: network :: llmq_type :: LLMQType :: LlmqtypeTest => dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeTest , dash_spv_crypto :: network :: llmq_type :: LLMQType :: LlmqtypeDevnet => dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeDevnet , dash_spv_crypto :: network :: llmq_type :: LLMQType :: LlmqtypeTestV17 => dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeTestV17 , dash_spv_crypto :: network :: llmq_type :: LLMQType :: LlmqtypeTestDIP0024 => dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeTestDIP0024 , dash_spv_crypto :: network :: llmq_type :: LLMQType :: LlmqtypeTestInstantSend => dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeTestInstantSend , dash_spv_crypto :: network :: llmq_type :: LLMQType :: LlmqtypeDevnetDIP0024 => dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeDevnetDIP0024 , dash_spv_crypto :: network :: llmq_type :: LLMQType :: LlmqtypeTestnetPlatform => dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeTestnetPlatform , dash_spv_crypto :: network :: llmq_type :: LLMQType :: LlmqtypeDevnetPlatform => dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeDevnetPlatform , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dash_spv_crypto_network_llmq_type_LLMQType { fn drop (& mut self) { unsafe { match self { dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeUnknown => { } , dash_spv_crypto_network_llmq_type_LLMQType :: Llmqtype50_60 => { } , dash_spv_crypto_network_llmq_type_LLMQType :: Llmqtype400_60 => { } , dash_spv_crypto_network_llmq_type_LLMQType :: Llmqtype400_85 => { } , dash_spv_crypto_network_llmq_type_LLMQType :: Llmqtype100_67 => { } , dash_spv_crypto_network_llmq_type_LLMQType :: Llmqtype60_75 => { } , dash_spv_crypto_network_llmq_type_LLMQType :: Llmqtype25_67 => { } , dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeTest => { } , dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeDevnet => { } , dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeTestV17 => { } , dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeTestDIP0024 => { } , dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeTestInstantSend => { } , dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeDevnetDIP0024 => { } , dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeTestnetPlatform => { } , dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeDevnetPlatform => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQType_LlmqtypeUnknown_ctor () -> * mut dash_spv_crypto_network_llmq_type_LLMQType { ferment :: boxed (dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeUnknown { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQType_Llmqtype50_60_ctor () -> * mut dash_spv_crypto_network_llmq_type_LLMQType { ferment :: boxed (dash_spv_crypto_network_llmq_type_LLMQType :: Llmqtype50_60 { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQType_Llmqtype400_60_ctor () -> * mut dash_spv_crypto_network_llmq_type_LLMQType { ferment :: boxed (dash_spv_crypto_network_llmq_type_LLMQType :: Llmqtype400_60 { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQType_Llmqtype400_85_ctor () -> * mut dash_spv_crypto_network_llmq_type_LLMQType { ferment :: boxed (dash_spv_crypto_network_llmq_type_LLMQType :: Llmqtype400_85 { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQType_Llmqtype100_67_ctor () -> * mut dash_spv_crypto_network_llmq_type_LLMQType { ferment :: boxed (dash_spv_crypto_network_llmq_type_LLMQType :: Llmqtype100_67 { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQType_Llmqtype60_75_ctor () -> * mut dash_spv_crypto_network_llmq_type_LLMQType { ferment :: boxed (dash_spv_crypto_network_llmq_type_LLMQType :: Llmqtype60_75 { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQType_Llmqtype25_67_ctor () -> * mut dash_spv_crypto_network_llmq_type_LLMQType { ferment :: boxed (dash_spv_crypto_network_llmq_type_LLMQType :: Llmqtype25_67 { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQType_LlmqtypeTest_ctor () -> * mut dash_spv_crypto_network_llmq_type_LLMQType { ferment :: boxed (dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeTest { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQType_LlmqtypeDevnet_ctor () -> * mut dash_spv_crypto_network_llmq_type_LLMQType { ferment :: boxed (dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeDevnet { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQType_LlmqtypeTestV17_ctor () -> * mut dash_spv_crypto_network_llmq_type_LLMQType { ferment :: boxed (dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeTestV17 { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQType_LlmqtypeTestDIP0024_ctor () -> * mut dash_spv_crypto_network_llmq_type_LLMQType { ferment :: boxed (dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeTestDIP0024 { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQType_LlmqtypeTestInstantSend_ctor () -> * mut dash_spv_crypto_network_llmq_type_LLMQType { ferment :: boxed (dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeTestInstantSend { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQType_LlmqtypeDevnetDIP0024_ctor () -> * mut dash_spv_crypto_network_llmq_type_LLMQType { ferment :: boxed (dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeDevnetDIP0024 { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQType_LlmqtypeTestnetPlatform_ctor () -> * mut dash_spv_crypto_network_llmq_type_LLMQType { ferment :: boxed (dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeTestnetPlatform { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQType_LlmqtypeDevnetPlatform_ctor () -> * mut dash_spv_crypto_network_llmq_type_LLMQType { ferment :: boxed (dash_spv_crypto_network_llmq_type_LLMQType :: LlmqtypeDevnetPlatform { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_network_llmq_type_LLMQType_destroy < > (ffi : * mut dash_spv_crypto_network_llmq_type_LLMQType) { ferment :: unbox_any (ffi) ; } } } pub mod tx { use crate as dash_spv_apple_bindings ; pub mod output { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`TransactionOutput`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_crypto_tx_output_TransactionOutput { pub amount : u64 , pub script : * mut crate :: fermented :: generics :: Vec_u8 , pub address : * mut crate :: fermented :: generics :: Vec_u8 } impl ferment :: FFIConversionFrom < dash_spv_crypto :: tx :: output :: TransactionOutput > for dash_spv_crypto_tx_output_TransactionOutput { unsafe fn ffi_from_const (ffi : * const dash_spv_crypto_tx_output_TransactionOutput) -> dash_spv_crypto :: tx :: output :: TransactionOutput { let ffi_ref = & * ffi ; dash_spv_crypto :: tx :: output :: TransactionOutput { amount : ffi_ref . amount , script : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from_opt (ffi_ref . script) , address : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from_opt (ffi_ref . address) } } } impl ferment :: FFIConversionTo < dash_spv_crypto :: tx :: output :: TransactionOutput > for dash_spv_crypto_tx_output_TransactionOutput { unsafe fn ffi_to_const (obj : dash_spv_crypto :: tx :: output :: TransactionOutput) -> * const dash_spv_crypto_tx_output_TransactionOutput { ferment :: boxed (dash_spv_crypto_tx_output_TransactionOutput { amount : obj . amount , script : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to_opt (obj . script) , address : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to_opt (obj . address) }) } } impl Drop for dash_spv_crypto_tx_output_TransactionOutput { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment :: unbox_any_opt (ffi_ref . script) ; ferment :: unbox_any_opt (ffi_ref . address) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_output_TransactionOutput_ctor < > (amount : u64 , script : * mut crate :: fermented :: generics :: Vec_u8 , address : * mut crate :: fermented :: generics :: Vec_u8) -> * mut dash_spv_crypto_tx_output_TransactionOutput { ferment :: boxed (dash_spv_crypto_tx_output_TransactionOutput { amount , script , address }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_output_TransactionOutput_destroy < > (ffi : * mut dash_spv_crypto_tx_output_TransactionOutput) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_output_TransactionOutput_get_amount < > (obj : * const dash_spv_crypto_tx_output_TransactionOutput) -> u64 { (* obj) . amount } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_output_TransactionOutput_get_script < > (obj : * const dash_spv_crypto_tx_output_TransactionOutput) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . script } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_output_TransactionOutput_get_address < > (obj : * const dash_spv_crypto_tx_output_TransactionOutput) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . address } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_output_TransactionOutput_set_amount < > (obj : * const dash_spv_crypto_tx_output_TransactionOutput) -> u64 { (* obj) . amount } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_output_TransactionOutput_set_script < > (obj : * const dash_spv_crypto_tx_output_TransactionOutput) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . script } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_output_TransactionOutput_set_address < > (obj : * const dash_spv_crypto_tx_output_TransactionOutput) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . address } } pub mod input { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`TransactionInput`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_crypto_tx_input_TransactionInput { pub input_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , pub index : u32 , pub script : * mut crate :: fermented :: generics :: Vec_u8 , pub signature : * mut crate :: fermented :: generics :: Vec_u8 , pub sequence : u32 } impl ferment :: FFIConversionFrom < dash_spv_crypto :: tx :: input :: TransactionInput > for dash_spv_crypto_tx_input_TransactionInput { unsafe fn ffi_from_const (ffi : * const dash_spv_crypto_tx_input_TransactionInput) -> dash_spv_crypto :: tx :: input :: TransactionInput { let ffi_ref = & * ffi ; dash_spv_crypto :: tx :: input :: TransactionInput { input_hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (ffi_ref . input_hash) , index : ffi_ref . index , script : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from_opt (ffi_ref . script) , signature : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from_opt (ffi_ref . signature) , sequence : ffi_ref . sequence } } } impl ferment :: FFIConversionTo < dash_spv_crypto :: tx :: input :: TransactionInput > for dash_spv_crypto_tx_input_TransactionInput { unsafe fn ffi_to_const (obj : dash_spv_crypto :: tx :: input :: TransactionInput) -> * const dash_spv_crypto_tx_input_TransactionInput { ferment :: boxed (dash_spv_crypto_tx_input_TransactionInput { input_hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj . input_hash) , index : obj . index , script : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to_opt (obj . script) , signature : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to_opt (obj . signature) , sequence : obj . sequence }) } } impl Drop for dash_spv_crypto_tx_input_TransactionInput { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . input_hash) ; ; ferment :: unbox_any_opt (ffi_ref . script) ; ferment :: unbox_any_opt (ffi_ref . signature) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_input_TransactionInput_ctor < > (input_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , index : u32 , script : * mut crate :: fermented :: generics :: Vec_u8 , signature : * mut crate :: fermented :: generics :: Vec_u8 , sequence : u32) -> * mut dash_spv_crypto_tx_input_TransactionInput { ferment :: boxed (dash_spv_crypto_tx_input_TransactionInput { input_hash , index , script , signature , sequence }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_input_TransactionInput_destroy < > (ffi : * mut dash_spv_crypto_tx_input_TransactionInput) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_input_TransactionInput_get_input_hash < > (obj : * const dash_spv_crypto_tx_input_TransactionInput) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . input_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_input_TransactionInput_get_index < > (obj : * const dash_spv_crypto_tx_input_TransactionInput) -> u32 { (* obj) . index } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_input_TransactionInput_get_script < > (obj : * const dash_spv_crypto_tx_input_TransactionInput) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . script } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_input_TransactionInput_get_signature < > (obj : * const dash_spv_crypto_tx_input_TransactionInput) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_input_TransactionInput_get_sequence < > (obj : * const dash_spv_crypto_tx_input_TransactionInput) -> u32 { (* obj) . sequence } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_input_TransactionInput_set_input_hash < > (obj : * const dash_spv_crypto_tx_input_TransactionInput) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . input_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_input_TransactionInput_set_index < > (obj : * const dash_spv_crypto_tx_input_TransactionInput) -> u32 { (* obj) . index } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_input_TransactionInput_set_script < > (obj : * const dash_spv_crypto_tx_input_TransactionInput) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . script } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_input_TransactionInput_set_signature < > (obj : * const dash_spv_crypto_tx_input_TransactionInput) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_input_TransactionInput_set_sequence < > (obj : * const dash_spv_crypto_tx_input_TransactionInput) -> u32 { (* obj) . sequence } } pub mod coinbase { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`CoinbaseTransaction`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_crypto_tx_coinbase_CoinbaseTransaction { pub base : * mut crate :: fermented :: types :: dash_spv_crypto :: tx :: tx :: dash_spv_crypto_tx_tx_Transaction , pub coinbase_transaction_version : u16 , pub height : u32 , pub merkle_root_mn_list : * mut crate :: fermented :: generics :: Arr_u8_32 , pub merkle_root_llmq_list : * mut crate :: fermented :: generics :: Arr_u8_32 , pub best_cl_height_diff : u64 , pub best_cl_signature : * mut crate :: fermented :: generics :: Arr_u8_96 , pub credit_pool_balance : * mut i64 } impl ferment :: FFIConversionFrom < dash_spv_crypto :: tx :: coinbase :: CoinbaseTransaction > for dash_spv_crypto_tx_coinbase_CoinbaseTransaction { unsafe fn ffi_from_const (ffi : * const dash_spv_crypto_tx_coinbase_CoinbaseTransaction) -> dash_spv_crypto :: tx :: coinbase :: CoinbaseTransaction { let ffi_ref = & * ffi ; dash_spv_crypto :: tx :: coinbase :: CoinbaseTransaction { base : < crate :: fermented :: types :: dash_spv_crypto :: tx :: tx :: dash_spv_crypto_tx_tx_Transaction as ferment :: FFIConversionFrom < dash_spv_crypto :: tx :: tx :: Transaction >> :: ffi_from (ffi_ref . base) , coinbase_transaction_version : ffi_ref . coinbase_transaction_version , height : ffi_ref . height , merkle_root_mn_list : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (ffi_ref . merkle_root_mn_list) , merkle_root_llmq_list : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from_opt (ffi_ref . merkle_root_llmq_list) , best_cl_height_diff : ffi_ref . best_cl_height_diff , best_cl_signature : < crate :: fermented :: generics :: Arr_u8_96 as ferment :: FFIConversionFrom < [u8 ; 96] >> :: ffi_from_opt (ffi_ref . best_cl_signature) , credit_pool_balance : ferment :: from_opt_primitive (ffi_ref . credit_pool_balance) } } } impl ferment :: FFIConversionTo < dash_spv_crypto :: tx :: coinbase :: CoinbaseTransaction > for dash_spv_crypto_tx_coinbase_CoinbaseTransaction { unsafe fn ffi_to_const (obj : dash_spv_crypto :: tx :: coinbase :: CoinbaseTransaction) -> * const dash_spv_crypto_tx_coinbase_CoinbaseTransaction { ferment :: boxed (dash_spv_crypto_tx_coinbase_CoinbaseTransaction { base : < crate :: fermented :: types :: dash_spv_crypto :: tx :: tx :: dash_spv_crypto_tx_tx_Transaction as ferment :: FFIConversionTo < dash_spv_crypto :: tx :: tx :: Transaction >> :: ffi_to (obj . base) , coinbase_transaction_version : obj . coinbase_transaction_version , height : obj . height , merkle_root_mn_list : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj . merkle_root_mn_list) , merkle_root_llmq_list : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to_opt (obj . merkle_root_llmq_list) , best_cl_height_diff : obj . best_cl_height_diff , best_cl_signature : < crate :: fermented :: generics :: Arr_u8_96 as ferment :: FFIConversionTo < [u8 ; 96] >> :: ffi_to_opt (obj . best_cl_signature) , credit_pool_balance : ferment :: to_opt_primitive (obj . credit_pool_balance) }) } } impl Drop for dash_spv_crypto_tx_coinbase_CoinbaseTransaction { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . base) ; ; ; ferment :: unbox_any (ffi_ref . merkle_root_mn_list) ; ferment :: unbox_any_opt (ffi_ref . merkle_root_llmq_list) ; ; ferment :: unbox_any_opt (ffi_ref . best_cl_signature) ; ferment :: destroy_opt_primitive (ffi_ref . credit_pool_balance) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_coinbase_CoinbaseTransaction_ctor < > (base : * mut crate :: fermented :: types :: dash_spv_crypto :: tx :: tx :: dash_spv_crypto_tx_tx_Transaction , coinbase_transaction_version : u16 , height : u32 , merkle_root_mn_list : * mut crate :: fermented :: generics :: Arr_u8_32 , merkle_root_llmq_list : * mut crate :: fermented :: generics :: Arr_u8_32 , best_cl_height_diff : u64 , best_cl_signature : * mut crate :: fermented :: generics :: Arr_u8_96 , credit_pool_balance : * mut i64) -> * mut dash_spv_crypto_tx_coinbase_CoinbaseTransaction { ferment :: boxed (dash_spv_crypto_tx_coinbase_CoinbaseTransaction { base , coinbase_transaction_version , height , merkle_root_mn_list , merkle_root_llmq_list , best_cl_height_diff , best_cl_signature , credit_pool_balance }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_coinbase_CoinbaseTransaction_destroy < > (ffi : * mut dash_spv_crypto_tx_coinbase_CoinbaseTransaction) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_coinbase_CoinbaseTransaction_get_base < > (obj : * const dash_spv_crypto_tx_coinbase_CoinbaseTransaction) -> * mut crate :: fermented :: types :: dash_spv_crypto :: tx :: tx :: dash_spv_crypto_tx_tx_Transaction { (* obj) . base } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_coinbase_CoinbaseTransaction_get_coinbase_transaction_version < > (obj : * const dash_spv_crypto_tx_coinbase_CoinbaseTransaction) -> u16 { (* obj) . coinbase_transaction_version } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_coinbase_CoinbaseTransaction_get_height < > (obj : * const dash_spv_crypto_tx_coinbase_CoinbaseTransaction) -> u32 { (* obj) . height } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_coinbase_CoinbaseTransaction_get_merkle_root_mn_list < > (obj : * const dash_spv_crypto_tx_coinbase_CoinbaseTransaction) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . merkle_root_mn_list } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_coinbase_CoinbaseTransaction_get_merkle_root_llmq_list < > (obj : * const dash_spv_crypto_tx_coinbase_CoinbaseTransaction) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . merkle_root_llmq_list } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_coinbase_CoinbaseTransaction_get_best_cl_height_diff < > (obj : * const dash_spv_crypto_tx_coinbase_CoinbaseTransaction) -> u64 { (* obj) . best_cl_height_diff } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_coinbase_CoinbaseTransaction_get_best_cl_signature < > (obj : * const dash_spv_crypto_tx_coinbase_CoinbaseTransaction) -> * mut crate :: fermented :: generics :: Arr_u8_96 { (* obj) . best_cl_signature } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_coinbase_CoinbaseTransaction_get_credit_pool_balance < > (obj : * const dash_spv_crypto_tx_coinbase_CoinbaseTransaction) -> * mut i64 { (* obj) . credit_pool_balance } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_coinbase_CoinbaseTransaction_set_base < > (obj : * const dash_spv_crypto_tx_coinbase_CoinbaseTransaction) -> * mut crate :: fermented :: types :: dash_spv_crypto :: tx :: tx :: dash_spv_crypto_tx_tx_Transaction { (* obj) . base } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_coinbase_CoinbaseTransaction_set_coinbase_transaction_version < > (obj : * const dash_spv_crypto_tx_coinbase_CoinbaseTransaction) -> u16 { (* obj) . coinbase_transaction_version } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_coinbase_CoinbaseTransaction_set_height < > (obj : * const dash_spv_crypto_tx_coinbase_CoinbaseTransaction) -> u32 { (* obj) . height } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_coinbase_CoinbaseTransaction_set_merkle_root_mn_list < > (obj : * const dash_spv_crypto_tx_coinbase_CoinbaseTransaction) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . merkle_root_mn_list } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_coinbase_CoinbaseTransaction_set_merkle_root_llmq_list < > (obj : * const dash_spv_crypto_tx_coinbase_CoinbaseTransaction) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . merkle_root_llmq_list } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_coinbase_CoinbaseTransaction_set_best_cl_height_diff < > (obj : * const dash_spv_crypto_tx_coinbase_CoinbaseTransaction) -> u64 { (* obj) . best_cl_height_diff } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_coinbase_CoinbaseTransaction_set_best_cl_signature < > (obj : * const dash_spv_crypto_tx_coinbase_CoinbaseTransaction) -> * mut crate :: fermented :: generics :: Arr_u8_96 { (* obj) . best_cl_signature } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_coinbase_CoinbaseTransaction_set_credit_pool_balance < > (obj : * const dash_spv_crypto_tx_coinbase_CoinbaseTransaction) -> * mut i64 { (* obj) . credit_pool_balance } } pub mod tx { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`TransactionType`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_crypto_tx_tx_TransactionType { Classic = 0 , ProviderRegistration = 1 , ProviderUpdateService = 2 , ProviderUpdateRegistrar = 3 , ProviderUpdateRevocation = 4 , Coinbase = 5 , QuorumCommitment = 6 , AssetLock = 8 , AssetUnlock = 9 , TypeMax = 10 , SubscriptionCloseAccount = 11 , Transition = 12 , CreditFunding = 255 } impl ferment :: FFIConversionFrom < dash_spv_crypto :: tx :: tx :: TransactionType > for dash_spv_crypto_tx_tx_TransactionType { unsafe fn ffi_from_const (ffi : * const dash_spv_crypto_tx_tx_TransactionType) -> dash_spv_crypto :: tx :: tx :: TransactionType { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_crypto_tx_tx_TransactionType :: Classic => dash_spv_crypto :: tx :: tx :: TransactionType :: Classic , dash_spv_crypto_tx_tx_TransactionType :: ProviderRegistration => dash_spv_crypto :: tx :: tx :: TransactionType :: ProviderRegistration , dash_spv_crypto_tx_tx_TransactionType :: ProviderUpdateService => dash_spv_crypto :: tx :: tx :: TransactionType :: ProviderUpdateService , dash_spv_crypto_tx_tx_TransactionType :: ProviderUpdateRegistrar => dash_spv_crypto :: tx :: tx :: TransactionType :: ProviderUpdateRegistrar , dash_spv_crypto_tx_tx_TransactionType :: ProviderUpdateRevocation => dash_spv_crypto :: tx :: tx :: TransactionType :: ProviderUpdateRevocation , dash_spv_crypto_tx_tx_TransactionType :: Coinbase => dash_spv_crypto :: tx :: tx :: TransactionType :: Coinbase , dash_spv_crypto_tx_tx_TransactionType :: QuorumCommitment => dash_spv_crypto :: tx :: tx :: TransactionType :: QuorumCommitment , dash_spv_crypto_tx_tx_TransactionType :: AssetLock => dash_spv_crypto :: tx :: tx :: TransactionType :: AssetLock , dash_spv_crypto_tx_tx_TransactionType :: AssetUnlock => dash_spv_crypto :: tx :: tx :: TransactionType :: AssetUnlock , dash_spv_crypto_tx_tx_TransactionType :: TypeMax => dash_spv_crypto :: tx :: tx :: TransactionType :: TypeMax , dash_spv_crypto_tx_tx_TransactionType :: SubscriptionCloseAccount => dash_spv_crypto :: tx :: tx :: TransactionType :: SubscriptionCloseAccount , dash_spv_crypto_tx_tx_TransactionType :: Transition => dash_spv_crypto :: tx :: tx :: TransactionType :: Transition , dash_spv_crypto_tx_tx_TransactionType :: CreditFunding => dash_spv_crypto :: tx :: tx :: TransactionType :: CreditFunding } } } impl ferment :: FFIConversionTo < dash_spv_crypto :: tx :: tx :: TransactionType > for dash_spv_crypto_tx_tx_TransactionType { unsafe fn ffi_to_const (obj : dash_spv_crypto :: tx :: tx :: TransactionType) -> * const dash_spv_crypto_tx_tx_TransactionType { ferment :: boxed (match obj { dash_spv_crypto :: tx :: tx :: TransactionType :: Classic => dash_spv_crypto_tx_tx_TransactionType :: Classic , dash_spv_crypto :: tx :: tx :: TransactionType :: ProviderRegistration => dash_spv_crypto_tx_tx_TransactionType :: ProviderRegistration , dash_spv_crypto :: tx :: tx :: TransactionType :: ProviderUpdateService => dash_spv_crypto_tx_tx_TransactionType :: ProviderUpdateService , dash_spv_crypto :: tx :: tx :: TransactionType :: ProviderUpdateRegistrar => dash_spv_crypto_tx_tx_TransactionType :: ProviderUpdateRegistrar , dash_spv_crypto :: tx :: tx :: TransactionType :: ProviderUpdateRevocation => dash_spv_crypto_tx_tx_TransactionType :: ProviderUpdateRevocation , dash_spv_crypto :: tx :: tx :: TransactionType :: Coinbase => dash_spv_crypto_tx_tx_TransactionType :: Coinbase , dash_spv_crypto :: tx :: tx :: TransactionType :: QuorumCommitment => dash_spv_crypto_tx_tx_TransactionType :: QuorumCommitment , dash_spv_crypto :: tx :: tx :: TransactionType :: AssetLock => dash_spv_crypto_tx_tx_TransactionType :: AssetLock , dash_spv_crypto :: tx :: tx :: TransactionType :: AssetUnlock => dash_spv_crypto_tx_tx_TransactionType :: AssetUnlock , dash_spv_crypto :: tx :: tx :: TransactionType :: TypeMax => dash_spv_crypto_tx_tx_TransactionType :: TypeMax , dash_spv_crypto :: tx :: tx :: TransactionType :: SubscriptionCloseAccount => dash_spv_crypto_tx_tx_TransactionType :: SubscriptionCloseAccount , dash_spv_crypto :: tx :: tx :: TransactionType :: Transition => dash_spv_crypto_tx_tx_TransactionType :: Transition , dash_spv_crypto :: tx :: tx :: TransactionType :: CreditFunding => dash_spv_crypto_tx_tx_TransactionType :: CreditFunding , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dash_spv_crypto_tx_tx_TransactionType { fn drop (& mut self) { unsafe { match self { dash_spv_crypto_tx_tx_TransactionType :: Classic => { } , dash_spv_crypto_tx_tx_TransactionType :: ProviderRegistration => { } , dash_spv_crypto_tx_tx_TransactionType :: ProviderUpdateService => { } , dash_spv_crypto_tx_tx_TransactionType :: ProviderUpdateRegistrar => { } , dash_spv_crypto_tx_tx_TransactionType :: ProviderUpdateRevocation => { } , dash_spv_crypto_tx_tx_TransactionType :: Coinbase => { } , dash_spv_crypto_tx_tx_TransactionType :: QuorumCommitment => { } , dash_spv_crypto_tx_tx_TransactionType :: AssetLock => { } , dash_spv_crypto_tx_tx_TransactionType :: AssetUnlock => { } , dash_spv_crypto_tx_tx_TransactionType :: TypeMax => { } , dash_spv_crypto_tx_tx_TransactionType :: SubscriptionCloseAccount => { } , dash_spv_crypto_tx_tx_TransactionType :: Transition => { } , dash_spv_crypto_tx_tx_TransactionType :: CreditFunding => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_tx_TransactionType_Classic_ctor () -> * mut dash_spv_crypto_tx_tx_TransactionType { ferment :: boxed (dash_spv_crypto_tx_tx_TransactionType :: Classic { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_tx_TransactionType_ProviderRegistration_ctor () -> * mut dash_spv_crypto_tx_tx_TransactionType { ferment :: boxed (dash_spv_crypto_tx_tx_TransactionType :: ProviderRegistration { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_tx_TransactionType_ProviderUpdateService_ctor () -> * mut dash_spv_crypto_tx_tx_TransactionType { ferment :: boxed (dash_spv_crypto_tx_tx_TransactionType :: ProviderUpdateService { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_tx_TransactionType_ProviderUpdateRegistrar_ctor () -> * mut dash_spv_crypto_tx_tx_TransactionType { ferment :: boxed (dash_spv_crypto_tx_tx_TransactionType :: ProviderUpdateRegistrar { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_tx_TransactionType_ProviderUpdateRevocation_ctor () -> * mut dash_spv_crypto_tx_tx_TransactionType { ferment :: boxed (dash_spv_crypto_tx_tx_TransactionType :: ProviderUpdateRevocation { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_tx_TransactionType_Coinbase_ctor () -> * mut dash_spv_crypto_tx_tx_TransactionType { ferment :: boxed (dash_spv_crypto_tx_tx_TransactionType :: Coinbase { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_tx_TransactionType_QuorumCommitment_ctor () -> * mut dash_spv_crypto_tx_tx_TransactionType { ferment :: boxed (dash_spv_crypto_tx_tx_TransactionType :: QuorumCommitment { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_tx_TransactionType_AssetLock_ctor () -> * mut dash_spv_crypto_tx_tx_TransactionType { ferment :: boxed (dash_spv_crypto_tx_tx_TransactionType :: AssetLock { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_tx_TransactionType_AssetUnlock_ctor () -> * mut dash_spv_crypto_tx_tx_TransactionType { ferment :: boxed (dash_spv_crypto_tx_tx_TransactionType :: AssetUnlock { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_tx_TransactionType_TypeMax_ctor () -> * mut dash_spv_crypto_tx_tx_TransactionType { ferment :: boxed (dash_spv_crypto_tx_tx_TransactionType :: TypeMax { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_tx_TransactionType_SubscriptionCloseAccount_ctor () -> * mut dash_spv_crypto_tx_tx_TransactionType { ferment :: boxed (dash_spv_crypto_tx_tx_TransactionType :: SubscriptionCloseAccount { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_tx_TransactionType_Transition_ctor () -> * mut dash_spv_crypto_tx_tx_TransactionType { ferment :: boxed (dash_spv_crypto_tx_tx_TransactionType :: Transition { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_tx_TransactionType_CreditFunding_ctor () -> * mut dash_spv_crypto_tx_tx_TransactionType { ferment :: boxed (dash_spv_crypto_tx_tx_TransactionType :: CreditFunding { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_tx_TransactionType_destroy < > (ffi : * mut dash_spv_crypto_tx_tx_TransactionType) { ferment :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`Transaction`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_crypto_tx_tx_Transaction { pub inputs : * mut crate :: fermented :: generics :: Vec_dash_spv_crypto_tx_input_TransactionInput , pub outputs : * mut crate :: fermented :: generics :: Vec_dash_spv_crypto_tx_output_TransactionOutput , pub lock_time : u32 , pub version : u16 , pub tx_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , pub tx_type : * mut crate :: fermented :: types :: dash_spv_crypto :: tx :: tx :: dash_spv_crypto_tx_tx_TransactionType , pub payload_offset : usize , pub block_height : u32 } impl ferment :: FFIConversionFrom < dash_spv_crypto :: tx :: tx :: Transaction > for dash_spv_crypto_tx_tx_Transaction { unsafe fn ffi_from_const (ffi : * const dash_spv_crypto_tx_tx_Transaction) -> dash_spv_crypto :: tx :: tx :: Transaction { let ffi_ref = & * ffi ; dash_spv_crypto :: tx :: tx :: Transaction { inputs : < crate :: fermented :: generics :: Vec_dash_spv_crypto_tx_input_TransactionInput as ferment :: FFIConversionFrom < Vec < dash_spv_crypto :: tx :: input :: TransactionInput > >> :: ffi_from (ffi_ref . inputs) , outputs : < crate :: fermented :: generics :: Vec_dash_spv_crypto_tx_output_TransactionOutput as ferment :: FFIConversionFrom < Vec < dash_spv_crypto :: tx :: output :: TransactionOutput > >> :: ffi_from (ffi_ref . outputs) , lock_time : ffi_ref . lock_time , version : ffi_ref . version , tx_hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from_opt (ffi_ref . tx_hash) , tx_type : < crate :: fermented :: types :: dash_spv_crypto :: tx :: tx :: dash_spv_crypto_tx_tx_TransactionType as ferment :: FFIConversionFrom < dash_spv_crypto :: tx :: tx :: TransactionType >> :: ffi_from (ffi_ref . tx_type) , payload_offset : ffi_ref . payload_offset , block_height : ffi_ref . block_height } } } impl ferment :: FFIConversionTo < dash_spv_crypto :: tx :: tx :: Transaction > for dash_spv_crypto_tx_tx_Transaction { unsafe fn ffi_to_const (obj : dash_spv_crypto :: tx :: tx :: Transaction) -> * const dash_spv_crypto_tx_tx_Transaction { ferment :: boxed (dash_spv_crypto_tx_tx_Transaction { inputs : < crate :: fermented :: generics :: Vec_dash_spv_crypto_tx_input_TransactionInput as ferment :: FFIConversionTo < Vec < dash_spv_crypto :: tx :: input :: TransactionInput > >> :: ffi_to (obj . inputs) , outputs : < crate :: fermented :: generics :: Vec_dash_spv_crypto_tx_output_TransactionOutput as ferment :: FFIConversionTo < Vec < dash_spv_crypto :: tx :: output :: TransactionOutput > >> :: ffi_to (obj . outputs) , lock_time : obj . lock_time , version : obj . version , tx_hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to_opt (obj . tx_hash) , tx_type : < crate :: fermented :: types :: dash_spv_crypto :: tx :: tx :: dash_spv_crypto_tx_tx_TransactionType as ferment :: FFIConversionTo < dash_spv_crypto :: tx :: tx :: TransactionType >> :: ffi_to (obj . tx_type) , payload_offset : obj . payload_offset , block_height : obj . block_height }) } } impl Drop for dash_spv_crypto_tx_tx_Transaction { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . inputs) ; ferment :: unbox_any (ffi_ref . outputs) ; ; ; ferment :: unbox_any_opt (ffi_ref . tx_hash) ; ferment :: unbox_any (ffi_ref . tx_type) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_tx_Transaction_ctor < > (inputs : * mut crate :: fermented :: generics :: Vec_dash_spv_crypto_tx_input_TransactionInput , outputs : * mut crate :: fermented :: generics :: Vec_dash_spv_crypto_tx_output_TransactionOutput , lock_time : u32 , version : u16 , tx_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , tx_type : * mut crate :: fermented :: types :: dash_spv_crypto :: tx :: tx :: dash_spv_crypto_tx_tx_TransactionType , payload_offset : usize , block_height : u32) -> * mut dash_spv_crypto_tx_tx_Transaction { ferment :: boxed (dash_spv_crypto_tx_tx_Transaction { inputs , outputs , lock_time , version , tx_hash , tx_type , payload_offset , block_height }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_tx_Transaction_destroy < > (ffi : * mut dash_spv_crypto_tx_tx_Transaction) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_tx_Transaction_get_inputs < > (obj : * const dash_spv_crypto_tx_tx_Transaction) -> * mut crate :: fermented :: generics :: Vec_dash_spv_crypto_tx_input_TransactionInput { (* obj) . inputs } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_tx_Transaction_get_outputs < > (obj : * const dash_spv_crypto_tx_tx_Transaction) -> * mut crate :: fermented :: generics :: Vec_dash_spv_crypto_tx_output_TransactionOutput { (* obj) . outputs } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_tx_Transaction_get_lock_time < > (obj : * const dash_spv_crypto_tx_tx_Transaction) -> u32 { (* obj) . lock_time } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_tx_Transaction_get_version < > (obj : * const dash_spv_crypto_tx_tx_Transaction) -> u16 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_tx_Transaction_get_tx_hash < > (obj : * const dash_spv_crypto_tx_tx_Transaction) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . tx_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_tx_Transaction_get_tx_type < > (obj : * const dash_spv_crypto_tx_tx_Transaction) -> * mut crate :: fermented :: types :: dash_spv_crypto :: tx :: tx :: dash_spv_crypto_tx_tx_TransactionType { (* obj) . tx_type } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_tx_Transaction_get_payload_offset < > (obj : * const dash_spv_crypto_tx_tx_Transaction) -> usize { (* obj) . payload_offset } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_tx_Transaction_get_block_height < > (obj : * const dash_spv_crypto_tx_tx_Transaction) -> u32 { (* obj) . block_height } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_tx_Transaction_set_inputs < > (obj : * const dash_spv_crypto_tx_tx_Transaction) -> * mut crate :: fermented :: generics :: Vec_dash_spv_crypto_tx_input_TransactionInput { (* obj) . inputs } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_tx_Transaction_set_outputs < > (obj : * const dash_spv_crypto_tx_tx_Transaction) -> * mut crate :: fermented :: generics :: Vec_dash_spv_crypto_tx_output_TransactionOutput { (* obj) . outputs } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_tx_Transaction_set_lock_time < > (obj : * const dash_spv_crypto_tx_tx_Transaction) -> u32 { (* obj) . lock_time } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_tx_Transaction_set_version < > (obj : * const dash_spv_crypto_tx_tx_Transaction) -> u16 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_tx_Transaction_set_tx_hash < > (obj : * const dash_spv_crypto_tx_tx_Transaction) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . tx_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_tx_Transaction_set_tx_type < > (obj : * const dash_spv_crypto_tx_tx_Transaction) -> * mut crate :: fermented :: types :: dash_spv_crypto :: tx :: tx :: dash_spv_crypto_tx_tx_TransactionType { (* obj) . tx_type } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_tx_Transaction_set_payload_offset < > (obj : * const dash_spv_crypto_tx_tx_Transaction) -> usize { (* obj) . payload_offset } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_tx_tx_Transaction_set_block_height < > (obj : * const dash_spv_crypto_tx_tx_Transaction) -> u32 { (* obj) . block_height } } } # [doc = "FFI-representation of the [`dash_spv_crypto::devnet_genesis_coinbase_message`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_devnet_genesis_coinbase_message (devnet_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_DevnetType , protocol_version : u32) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = dash_spv_crypto :: devnet_genesis_coinbase_message (< crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_DevnetType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: DevnetType >> :: ffi_from (devnet_type) , protocol_version) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } pub mod llmq { use crate as dash_spv_apple_bindings ; pub mod entry { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_crypto::llmq::entry::new`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_new (version : u16 , llmq_type : u8 , llmq_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , index : u16 , signers : * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: bitset :: dash_spv_crypto_llmq_bitset_Bitset , valid_members : * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: bitset :: dash_spv_crypto_llmq_bitset_Bitset , public_key : * mut crate :: fermented :: generics :: Arr_u8_48 , verification_vector_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , threshold_signature : * mut crate :: fermented :: generics :: Arr_u8_96 , all_commitment_aggregated_signature : * mut crate :: fermented :: generics :: Arr_u8_96) -> * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry { let obj = dash_spv_crypto :: llmq :: entry :: new (version , llmq_type , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (llmq_hash) , index , < crate :: fermented :: types :: dash_spv_crypto :: llmq :: bitset :: dash_spv_crypto_llmq_bitset_Bitset as ferment :: FFIConversionFrom < dash_spv_crypto :: llmq :: bitset :: Bitset >> :: ffi_from (signers) , < crate :: fermented :: types :: dash_spv_crypto :: llmq :: bitset :: dash_spv_crypto_llmq_bitset_Bitset as ferment :: FFIConversionFrom < dash_spv_crypto :: llmq :: bitset :: Bitset >> :: ffi_from (valid_members) , < crate :: fermented :: generics :: Arr_u8_48 as ferment :: FFIConversionFrom < [u8 ; 48] >> :: ffi_from (public_key) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (verification_vector_hash) , < crate :: fermented :: generics :: Arr_u8_96 as ferment :: FFIConversionFrom < [u8 ; 96] >> :: ffi_from (threshold_signature) , < crate :: fermented :: generics :: Arr_u8_96 as ferment :: FFIConversionFrom < [u8 ; 96] >> :: ffi_from (all_commitment_aggregated_signature)) ; < crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry as ferment :: FFIConversionTo < dash_spv_crypto :: llmq :: entry :: LLMQEntry >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`LLMQEntry`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_crypto_llmq_entry_LLMQEntry { pub version : * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: version :: dash_spv_crypto_llmq_version_LLMQVersion , pub llmq_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , pub index : u16 , pub public_key : * mut crate :: fermented :: generics :: Arr_u8_48 , pub threshold_signature : * mut crate :: fermented :: generics :: Arr_u8_96 , pub verification_vector_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , pub all_commitment_aggregated_signature : * mut crate :: fermented :: generics :: Arr_u8_96 , pub llmq_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType , pub signers : * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: bitset :: dash_spv_crypto_llmq_bitset_Bitset , pub valid_members : * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: bitset :: dash_spv_crypto_llmq_bitset_Bitset , pub entry_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , pub verified : * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: validation_status :: dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus , pub saved : bool , pub commitment_hash : * mut crate :: fermented :: generics :: Arr_u8_32 } impl ferment :: FFIConversionFrom < dash_spv_crypto :: llmq :: entry :: LLMQEntry > for dash_spv_crypto_llmq_entry_LLMQEntry { unsafe fn ffi_from_const (ffi : * const dash_spv_crypto_llmq_entry_LLMQEntry) -> dash_spv_crypto :: llmq :: entry :: LLMQEntry { let ffi_ref = & * ffi ; dash_spv_crypto :: llmq :: entry :: LLMQEntry { version : < crate :: fermented :: types :: dash_spv_crypto :: llmq :: version :: dash_spv_crypto_llmq_version_LLMQVersion as ferment :: FFIConversionFrom < dash_spv_crypto :: llmq :: version :: LLMQVersion >> :: ffi_from (ffi_ref . version) , llmq_hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (ffi_ref . llmq_hash) , index : ffi_ref . index , public_key : < crate :: fermented :: generics :: Arr_u8_48 as ferment :: FFIConversionFrom < [u8 ; 48] >> :: ffi_from (ffi_ref . public_key) , threshold_signature : < crate :: fermented :: generics :: Arr_u8_96 as ferment :: FFIConversionFrom < [u8 ; 96] >> :: ffi_from (ffi_ref . threshold_signature) , verification_vector_hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (ffi_ref . verification_vector_hash) , all_commitment_aggregated_signature : < crate :: fermented :: generics :: Arr_u8_96 as ferment :: FFIConversionFrom < [u8 ; 96] >> :: ffi_from (ffi_ref . all_commitment_aggregated_signature) , llmq_type : < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_from (ffi_ref . llmq_type) , signers : < crate :: fermented :: types :: dash_spv_crypto :: llmq :: bitset :: dash_spv_crypto_llmq_bitset_Bitset as ferment :: FFIConversionFrom < dash_spv_crypto :: llmq :: bitset :: Bitset >> :: ffi_from (ffi_ref . signers) , valid_members : < crate :: fermented :: types :: dash_spv_crypto :: llmq :: bitset :: dash_spv_crypto_llmq_bitset_Bitset as ferment :: FFIConversionFrom < dash_spv_crypto :: llmq :: bitset :: Bitset >> :: ffi_from (ffi_ref . valid_members) , entry_hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (ffi_ref . entry_hash) , verified : < crate :: fermented :: types :: dash_spv_crypto :: llmq :: validation_status :: dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus as ferment :: FFIConversionFrom < dash_spv_crypto :: llmq :: validation_status :: LLMQEntryValidationStatus >> :: ffi_from (ffi_ref . verified) , saved : ffi_ref . saved , commitment_hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from_opt (ffi_ref . commitment_hash) } } } impl ferment :: FFIConversionTo < dash_spv_crypto :: llmq :: entry :: LLMQEntry > for dash_spv_crypto_llmq_entry_LLMQEntry { unsafe fn ffi_to_const (obj : dash_spv_crypto :: llmq :: entry :: LLMQEntry) -> * const dash_spv_crypto_llmq_entry_LLMQEntry { ferment :: boxed (dash_spv_crypto_llmq_entry_LLMQEntry { version : < crate :: fermented :: types :: dash_spv_crypto :: llmq :: version :: dash_spv_crypto_llmq_version_LLMQVersion as ferment :: FFIConversionTo < dash_spv_crypto :: llmq :: version :: LLMQVersion >> :: ffi_to (obj . version) , llmq_hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj . llmq_hash) , index : obj . index , public_key : < crate :: fermented :: generics :: Arr_u8_48 as ferment :: FFIConversionTo < [u8 ; 48] >> :: ffi_to (obj . public_key) , threshold_signature : < crate :: fermented :: generics :: Arr_u8_96 as ferment :: FFIConversionTo < [u8 ; 96] >> :: ffi_to (obj . threshold_signature) , verification_vector_hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj . verification_vector_hash) , all_commitment_aggregated_signature : < crate :: fermented :: generics :: Arr_u8_96 as ferment :: FFIConversionTo < [u8 ; 96] >> :: ffi_to (obj . all_commitment_aggregated_signature) , llmq_type : < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_to (obj . llmq_type) , signers : < crate :: fermented :: types :: dash_spv_crypto :: llmq :: bitset :: dash_spv_crypto_llmq_bitset_Bitset as ferment :: FFIConversionTo < dash_spv_crypto :: llmq :: bitset :: Bitset >> :: ffi_to (obj . signers) , valid_members : < crate :: fermented :: types :: dash_spv_crypto :: llmq :: bitset :: dash_spv_crypto_llmq_bitset_Bitset as ferment :: FFIConversionTo < dash_spv_crypto :: llmq :: bitset :: Bitset >> :: ffi_to (obj . valid_members) , entry_hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj . entry_hash) , verified : < crate :: fermented :: types :: dash_spv_crypto :: llmq :: validation_status :: dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus as ferment :: FFIConversionTo < dash_spv_crypto :: llmq :: validation_status :: LLMQEntryValidationStatus >> :: ffi_to (obj . verified) , saved : obj . saved , commitment_hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to_opt (obj . commitment_hash) }) } } impl Drop for dash_spv_crypto_llmq_entry_LLMQEntry { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . version) ; ferment :: unbox_any (ffi_ref . llmq_hash) ; ; ferment :: unbox_any (ffi_ref . public_key) ; ferment :: unbox_any (ffi_ref . threshold_signature) ; ferment :: unbox_any (ffi_ref . verification_vector_hash) ; ferment :: unbox_any (ffi_ref . all_commitment_aggregated_signature) ; ferment :: unbox_any (ffi_ref . llmq_type) ; ferment :: unbox_any (ffi_ref . signers) ; ferment :: unbox_any (ffi_ref . valid_members) ; ferment :: unbox_any (ffi_ref . entry_hash) ; ferment :: unbox_any (ffi_ref . verified) ; ; ferment :: unbox_any_opt (ffi_ref . commitment_hash) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_ctor < > (version : * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: version :: dash_spv_crypto_llmq_version_LLMQVersion , llmq_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , index : u16 , public_key : * mut crate :: fermented :: generics :: Arr_u8_48 , threshold_signature : * mut crate :: fermented :: generics :: Arr_u8_96 , verification_vector_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , all_commitment_aggregated_signature : * mut crate :: fermented :: generics :: Arr_u8_96 , llmq_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType , signers : * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: bitset :: dash_spv_crypto_llmq_bitset_Bitset , valid_members : * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: bitset :: dash_spv_crypto_llmq_bitset_Bitset , entry_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , verified : * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: validation_status :: dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus , saved : bool , commitment_hash : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut dash_spv_crypto_llmq_entry_LLMQEntry { ferment :: boxed (dash_spv_crypto_llmq_entry_LLMQEntry { version , llmq_hash , index , public_key , threshold_signature , verification_vector_hash , all_commitment_aggregated_signature , llmq_type , signers , valid_members , entry_hash , verified , saved , commitment_hash }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_destroy < > (ffi : * mut dash_spv_crypto_llmq_entry_LLMQEntry) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_get_version < > (obj : * const dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: version :: dash_spv_crypto_llmq_version_LLMQVersion { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_get_llmq_hash < > (obj : * const dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . llmq_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_get_index < > (obj : * const dash_spv_crypto_llmq_entry_LLMQEntry) -> u16 { (* obj) . index } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_get_public_key < > (obj : * const dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: generics :: Arr_u8_48 { (* obj) . public_key } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_get_threshold_signature < > (obj : * const dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: generics :: Arr_u8_96 { (* obj) . threshold_signature } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_get_verification_vector_hash < > (obj : * const dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . verification_vector_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_get_all_commitment_aggregated_signature < > (obj : * const dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: generics :: Arr_u8_96 { (* obj) . all_commitment_aggregated_signature } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_get_llmq_type < > (obj : * const dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType { (* obj) . llmq_type } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_get_signers < > (obj : * const dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: bitset :: dash_spv_crypto_llmq_bitset_Bitset { (* obj) . signers } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_get_valid_members < > (obj : * const dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: bitset :: dash_spv_crypto_llmq_bitset_Bitset { (* obj) . valid_members } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_get_entry_hash < > (obj : * const dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . entry_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_get_verified < > (obj : * const dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: validation_status :: dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus { (* obj) . verified } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_get_saved < > (obj : * const dash_spv_crypto_llmq_entry_LLMQEntry) -> bool { (* obj) . saved } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_get_commitment_hash < > (obj : * const dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . commitment_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_set_version < > (obj : * const dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: version :: dash_spv_crypto_llmq_version_LLMQVersion { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_set_llmq_hash < > (obj : * const dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . llmq_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_set_index < > (obj : * const dash_spv_crypto_llmq_entry_LLMQEntry) -> u16 { (* obj) . index } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_set_public_key < > (obj : * const dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: generics :: Arr_u8_48 { (* obj) . public_key } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_set_threshold_signature < > (obj : * const dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: generics :: Arr_u8_96 { (* obj) . threshold_signature } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_set_verification_vector_hash < > (obj : * const dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . verification_vector_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_set_all_commitment_aggregated_signature < > (obj : * const dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: generics :: Arr_u8_96 { (* obj) . all_commitment_aggregated_signature } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_set_llmq_type < > (obj : * const dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType { (* obj) . llmq_type } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_set_signers < > (obj : * const dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: bitset :: dash_spv_crypto_llmq_bitset_Bitset { (* obj) . signers } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_set_valid_members < > (obj : * const dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: bitset :: dash_spv_crypto_llmq_bitset_Bitset { (* obj) . valid_members } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_set_entry_hash < > (obj : * const dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . entry_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_set_verified < > (obj : * const dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: validation_status :: dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus { (* obj) . verified } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_set_saved < > (obj : * const dash_spv_crypto_llmq_entry_LLMQEntry) -> bool { (* obj) . saved } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_set_commitment_hash < > (obj : * const dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . commitment_hash } # [doc = "FFI-representation of the [`dash_spv_crypto::llmq::entry::from_entity`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_from_entity (version : u16 , llmq_type : u8 , llmq_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , index : u16 , signers : * mut crate :: fermented :: generics :: Vec_u8 , signers_count : usize , valid_members : * mut crate :: fermented :: generics :: Vec_u8 , valid_members_count : usize , public_key : * mut crate :: fermented :: generics :: Arr_u8_48 , verification_vector_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , threshold_signature : * mut crate :: fermented :: generics :: Arr_u8_96 , all_commitment_aggregated_signature : * mut crate :: fermented :: generics :: Arr_u8_96 , verified : * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: validation_status :: dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus , entry_hash : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry { let obj = dash_spv_crypto :: llmq :: entry :: from_entity (version , llmq_type , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (llmq_hash) , index , < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (signers) , signers_count , < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (valid_members) , valid_members_count , < crate :: fermented :: generics :: Arr_u8_48 as ferment :: FFIConversionFrom < [u8 ; 48] >> :: ffi_from (public_key) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (verification_vector_hash) , < crate :: fermented :: generics :: Arr_u8_96 as ferment :: FFIConversionFrom < [u8 ; 96] >> :: ffi_from (threshold_signature) , < crate :: fermented :: generics :: Arr_u8_96 as ferment :: FFIConversionFrom < [u8 ; 96] >> :: ffi_from (all_commitment_aggregated_signature) , < crate :: fermented :: types :: dash_spv_crypto :: llmq :: validation_status :: dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus as ferment :: FFIConversionFrom < dash_spv_crypto :: llmq :: validation_status :: LLMQEntryValidationStatus >> :: ffi_from (verified) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from_opt (entry_hash)) ; < crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry as ferment :: FFIConversionTo < dash_spv_crypto :: llmq :: entry :: LLMQEntry >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::llmq::entry::LLMQEntry::to_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_to_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = dash_spv_crypto :: llmq :: entry :: LLMQEntry :: to_data (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::llmq::entry::LLMQEntry::commitment_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_commitment_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = dash_spv_crypto :: llmq :: entry :: LLMQEntry :: commitment_data (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::llmq::entry::LLMQEntry::ordering_hash_for_request_id`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_ordering_hash_for_request_id (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry , request_id : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = dash_spv_crypto :: llmq :: entry :: LLMQEntry :: ordering_hash_for_request_id (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (request_id)) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::llmq::entry::LLMQEntry::sign_id`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_sign_id (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry , request_id : * mut crate :: fermented :: generics :: Arr_u8_32 , payload : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = dash_spv_crypto :: llmq :: entry :: LLMQEntry :: sign_id (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (request_id) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (payload)) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::llmq::entry::LLMQEntry::platform_sign_id`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_platform_sign_id (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry , height : u32 , state_msg_hash : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = dash_spv_crypto :: llmq :: entry :: LLMQEntry :: platform_sign_id (& ferment :: FFIConversionFrom :: ffi_from (self_) , height , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (state_msg_hash)) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::llmq::entry::LLMQEntry::verify_signature`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_verify_signature (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry , sign_id : * mut crate :: fermented :: generics :: Arr_u8_32 , signature : * mut crate :: fermented :: generics :: Arr_u8_96) -> bool { let obj = dash_spv_crypto :: llmq :: entry :: LLMQEntry :: verify_signature (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (sign_id) , < crate :: fermented :: generics :: Arr_u8_96 as ferment :: FFIConversionFrom < [u8 ; 96] >> :: ffi_from (signature)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::llmq::entry::LLMQEntry::verify_cl_signature`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_verify_cl_signature (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry , request_id : * mut crate :: fermented :: generics :: Arr_u8_32 , block_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , signature : * mut crate :: fermented :: generics :: Arr_u8_96) -> bool { let obj = dash_spv_crypto :: llmq :: entry :: LLMQEntry :: verify_cl_signature (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (request_id) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (block_hash) , < crate :: fermented :: generics :: Arr_u8_96 as ferment :: FFIConversionFrom < [u8 ; 96] >> :: ffi_from (signature)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::llmq::entry::LLMQEntry::llmq_hash_hex`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_llmq_hash_hex (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_crypto :: llmq :: entry :: LLMQEntry :: llmq_hash_hex (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::llmq::entry::LLMQEntry::print_description`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_print_description (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry) { let obj = dash_spv_crypto :: llmq :: entry :: LLMQEntry :: print_description (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; ; } # [doc = "FFI-representation of the [`dash_spv_crypto::llmq::entry::LLMQEntry::is_verified`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_is_verified (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry) -> bool { let obj = dash_spv_crypto :: llmq :: entry :: LLMQEntry :: is_verified (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::llmq::entry::LLMQEntry::is_not_verified`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_entry_LLMQEntry_is_not_verified (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry) -> bool { let obj = dash_spv_crypto :: llmq :: entry :: LLMQEntry :: is_not_verified (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } } pub mod validation_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`LLMQValidationError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_crypto_llmq_validation_error_LLMQValidationError { InvalidAggregatedSignature { block_height : u32 , operator_keys_count : usize , valid_masternodes_count : usize , llmq_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType , llmq_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , aggregated_signature : * mut crate :: fermented :: generics :: Arr_u8_96 } , InvalidQuorumSignature { block_height : u32 , llmq_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType , llmq_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , threshold_signature : * mut crate :: fermented :: generics :: Arr_u8_96 } , InvalidSigners (* mut std :: os :: raw :: c_char) , InvalidMembers (* mut std :: os :: raw :: c_char) , SignersBelowThreshold { actual : u64 , threshold : u64 } , MembersBelowThreshold { actual : u64 , threshold : u64 } } impl ferment :: FFIConversionFrom < dash_spv_crypto :: llmq :: validation_error :: LLMQValidationError > for dash_spv_crypto_llmq_validation_error_LLMQValidationError { unsafe fn ffi_from_const (ffi : * const dash_spv_crypto_llmq_validation_error_LLMQValidationError) -> dash_spv_crypto :: llmq :: validation_error :: LLMQValidationError { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_crypto_llmq_validation_error_LLMQValidationError :: InvalidAggregatedSignature { block_height , operator_keys_count , valid_masternodes_count , llmq_type , llmq_hash , aggregated_signature } => dash_spv_crypto :: llmq :: validation_error :: LLMQValidationError :: InvalidAggregatedSignature { block_height : * block_height , operator_keys_count : * operator_keys_count , valid_masternodes_count : * valid_masternodes_count , llmq_type : < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_from (* llmq_type) , llmq_hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (* llmq_hash) , aggregated_signature : < crate :: fermented :: generics :: Arr_u8_96 as ferment :: FFIConversionFrom < [u8 ; 96] >> :: ffi_from (* aggregated_signature) } , dash_spv_crypto_llmq_validation_error_LLMQValidationError :: InvalidQuorumSignature { block_height , llmq_type , llmq_hash , threshold_signature } => dash_spv_crypto :: llmq :: validation_error :: LLMQValidationError :: InvalidQuorumSignature { block_height : * block_height , llmq_type : < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_from (* llmq_type) , llmq_hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (* llmq_hash) , threshold_signature : < crate :: fermented :: generics :: Arr_u8_96 as ferment :: FFIConversionFrom < [u8 ; 96] >> :: ffi_from (* threshold_signature) } , dash_spv_crypto_llmq_validation_error_LLMQValidationError :: InvalidSigners (o_0) => dash_spv_crypto :: llmq :: validation_error :: LLMQValidationError :: InvalidSigners (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dash_spv_crypto_llmq_validation_error_LLMQValidationError :: InvalidMembers (o_0) => dash_spv_crypto :: llmq :: validation_error :: LLMQValidationError :: InvalidMembers (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dash_spv_crypto_llmq_validation_error_LLMQValidationError :: SignersBelowThreshold { actual , threshold } => dash_spv_crypto :: llmq :: validation_error :: LLMQValidationError :: SignersBelowThreshold { actual : * actual , threshold : * threshold } , dash_spv_crypto_llmq_validation_error_LLMQValidationError :: MembersBelowThreshold { actual , threshold } => dash_spv_crypto :: llmq :: validation_error :: LLMQValidationError :: MembersBelowThreshold { actual : * actual , threshold : * threshold } } } } impl ferment :: FFIConversionTo < dash_spv_crypto :: llmq :: validation_error :: LLMQValidationError > for dash_spv_crypto_llmq_validation_error_LLMQValidationError { unsafe fn ffi_to_const (obj : dash_spv_crypto :: llmq :: validation_error :: LLMQValidationError) -> * const dash_spv_crypto_llmq_validation_error_LLMQValidationError { ferment :: boxed (match obj { dash_spv_crypto :: llmq :: validation_error :: LLMQValidationError :: InvalidAggregatedSignature { block_height , operator_keys_count , valid_masternodes_count , llmq_type , llmq_hash , aggregated_signature } => dash_spv_crypto_llmq_validation_error_LLMQValidationError :: InvalidAggregatedSignature { block_height : block_height , operator_keys_count : operator_keys_count , valid_masternodes_count : valid_masternodes_count , llmq_type : < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_to (llmq_type) , llmq_hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (llmq_hash) , aggregated_signature : < crate :: fermented :: generics :: Arr_u8_96 as ferment :: FFIConversionTo < [u8 ; 96] >> :: ffi_to (aggregated_signature) } , dash_spv_crypto :: llmq :: validation_error :: LLMQValidationError :: InvalidQuorumSignature { block_height , llmq_type , llmq_hash , threshold_signature } => dash_spv_crypto_llmq_validation_error_LLMQValidationError :: InvalidQuorumSignature { block_height : block_height , llmq_type : < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_to (llmq_type) , llmq_hash : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (llmq_hash) , threshold_signature : < crate :: fermented :: generics :: Arr_u8_96 as ferment :: FFIConversionTo < [u8 ; 96] >> :: ffi_to (threshold_signature) } , dash_spv_crypto :: llmq :: validation_error :: LLMQValidationError :: InvalidSigners (o_0) => dash_spv_crypto_llmq_validation_error_LLMQValidationError :: InvalidSigners (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dash_spv_crypto :: llmq :: validation_error :: LLMQValidationError :: InvalidMembers (o_0) => dash_spv_crypto_llmq_validation_error_LLMQValidationError :: InvalidMembers (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dash_spv_crypto :: llmq :: validation_error :: LLMQValidationError :: SignersBelowThreshold { actual , threshold } => dash_spv_crypto_llmq_validation_error_LLMQValidationError :: SignersBelowThreshold { actual : actual , threshold : threshold } , dash_spv_crypto :: llmq :: validation_error :: LLMQValidationError :: MembersBelowThreshold { actual , threshold } => dash_spv_crypto_llmq_validation_error_LLMQValidationError :: MembersBelowThreshold { actual : actual , threshold : threshold } , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dash_spv_crypto_llmq_validation_error_LLMQValidationError { fn drop (& mut self) { unsafe { match self { dash_spv_crypto_llmq_validation_error_LLMQValidationError :: InvalidAggregatedSignature { block_height , operator_keys_count , valid_masternodes_count , llmq_type , llmq_hash , aggregated_signature } => { ; ; ; ; ; ; ferment :: unbox_any (* llmq_type) ; ; ferment :: unbox_any (* llmq_hash) ; ; ferment :: unbox_any (* aggregated_signature) ; } , dash_spv_crypto_llmq_validation_error_LLMQValidationError :: InvalidQuorumSignature { block_height , llmq_type , llmq_hash , threshold_signature } => { ; ; ferment :: unbox_any (* llmq_type) ; ; ferment :: unbox_any (* llmq_hash) ; ; ferment :: unbox_any (* threshold_signature) ; } , dash_spv_crypto_llmq_validation_error_LLMQValidationError :: InvalidSigners (o_0) => { ferment :: unbox_string (* o_0) ; } , dash_spv_crypto_llmq_validation_error_LLMQValidationError :: InvalidMembers (o_0) => { ferment :: unbox_string (* o_0) ; } , dash_spv_crypto_llmq_validation_error_LLMQValidationError :: SignersBelowThreshold { actual , threshold } => { ; ; ; } , dash_spv_crypto_llmq_validation_error_LLMQValidationError :: MembersBelowThreshold { actual , threshold } => { ; ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_validation_error_LLMQValidationError_InvalidAggregatedSignature_ctor (block_height : u32 , operator_keys_count : usize , valid_masternodes_count : usize , llmq_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType , llmq_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , aggregated_signature : * mut crate :: fermented :: generics :: Arr_u8_96) -> * mut dash_spv_crypto_llmq_validation_error_LLMQValidationError { ferment :: boxed (dash_spv_crypto_llmq_validation_error_LLMQValidationError :: InvalidAggregatedSignature { block_height , operator_keys_count , valid_masternodes_count , llmq_type , llmq_hash , aggregated_signature }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_validation_error_LLMQValidationError_InvalidQuorumSignature_ctor (block_height : u32 , llmq_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType , llmq_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , threshold_signature : * mut crate :: fermented :: generics :: Arr_u8_96) -> * mut dash_spv_crypto_llmq_validation_error_LLMQValidationError { ferment :: boxed (dash_spv_crypto_llmq_validation_error_LLMQValidationError :: InvalidQuorumSignature { block_height , llmq_type , llmq_hash , threshold_signature }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_validation_error_LLMQValidationError_InvalidSigners_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dash_spv_crypto_llmq_validation_error_LLMQValidationError { ferment :: boxed (dash_spv_crypto_llmq_validation_error_LLMQValidationError :: InvalidSigners (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_validation_error_LLMQValidationError_InvalidMembers_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dash_spv_crypto_llmq_validation_error_LLMQValidationError { ferment :: boxed (dash_spv_crypto_llmq_validation_error_LLMQValidationError :: InvalidMembers (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_validation_error_LLMQValidationError_SignersBelowThreshold_ctor (actual : u64 , threshold : u64) -> * mut dash_spv_crypto_llmq_validation_error_LLMQValidationError { ferment :: boxed (dash_spv_crypto_llmq_validation_error_LLMQValidationError :: SignersBelowThreshold { actual , threshold }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_validation_error_LLMQValidationError_MembersBelowThreshold_ctor (actual : u64 , threshold : u64) -> * mut dash_spv_crypto_llmq_validation_error_LLMQValidationError { ferment :: boxed (dash_spv_crypto_llmq_validation_error_LLMQValidationError :: MembersBelowThreshold { actual , threshold }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_validation_error_LLMQValidationError_destroy < > (ffi : * mut dash_spv_crypto_llmq_validation_error_LLMQValidationError) { ferment :: unbox_any (ffi) ; } } pub mod version { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_crypto::llmq::version::from_u16`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_version_from_u16 (value : u16) -> * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: version :: dash_spv_crypto_llmq_version_LLMQVersion { let obj = dash_spv_crypto :: llmq :: version :: from_u16 (value) ; < crate :: fermented :: types :: dash_spv_crypto :: llmq :: version :: dash_spv_crypto_llmq_version_LLMQVersion as ferment :: FFIConversionTo < dash_spv_crypto :: llmq :: version :: LLMQVersion >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`LLMQVersion`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_crypto_llmq_version_LLMQVersion { Default = 1 , Indexed = 2 , BLSBasicDefault = 3 , BLSBasicIndexed = 4 } impl ferment :: FFIConversionFrom < dash_spv_crypto :: llmq :: version :: LLMQVersion > for dash_spv_crypto_llmq_version_LLMQVersion { unsafe fn ffi_from_const (ffi : * const dash_spv_crypto_llmq_version_LLMQVersion) -> dash_spv_crypto :: llmq :: version :: LLMQVersion { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_crypto_llmq_version_LLMQVersion :: Default => dash_spv_crypto :: llmq :: version :: LLMQVersion :: Default , dash_spv_crypto_llmq_version_LLMQVersion :: Indexed => dash_spv_crypto :: llmq :: version :: LLMQVersion :: Indexed , dash_spv_crypto_llmq_version_LLMQVersion :: BLSBasicDefault => dash_spv_crypto :: llmq :: version :: LLMQVersion :: BLSBasicDefault , dash_spv_crypto_llmq_version_LLMQVersion :: BLSBasicIndexed => dash_spv_crypto :: llmq :: version :: LLMQVersion :: BLSBasicIndexed } } } impl ferment :: FFIConversionTo < dash_spv_crypto :: llmq :: version :: LLMQVersion > for dash_spv_crypto_llmq_version_LLMQVersion { unsafe fn ffi_to_const (obj : dash_spv_crypto :: llmq :: version :: LLMQVersion) -> * const dash_spv_crypto_llmq_version_LLMQVersion { ferment :: boxed (match obj { dash_spv_crypto :: llmq :: version :: LLMQVersion :: Default => dash_spv_crypto_llmq_version_LLMQVersion :: Default , dash_spv_crypto :: llmq :: version :: LLMQVersion :: Indexed => dash_spv_crypto_llmq_version_LLMQVersion :: Indexed , dash_spv_crypto :: llmq :: version :: LLMQVersion :: BLSBasicDefault => dash_spv_crypto_llmq_version_LLMQVersion :: BLSBasicDefault , dash_spv_crypto :: llmq :: version :: LLMQVersion :: BLSBasicIndexed => dash_spv_crypto_llmq_version_LLMQVersion :: BLSBasicIndexed , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dash_spv_crypto_llmq_version_LLMQVersion { fn drop (& mut self) { unsafe { match self { dash_spv_crypto_llmq_version_LLMQVersion :: Default => { } , dash_spv_crypto_llmq_version_LLMQVersion :: Indexed => { } , dash_spv_crypto_llmq_version_LLMQVersion :: BLSBasicDefault => { } , dash_spv_crypto_llmq_version_LLMQVersion :: BLSBasicIndexed => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_version_LLMQVersion_Default_ctor () -> * mut dash_spv_crypto_llmq_version_LLMQVersion { ferment :: boxed (dash_spv_crypto_llmq_version_LLMQVersion :: Default { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_version_LLMQVersion_Indexed_ctor () -> * mut dash_spv_crypto_llmq_version_LLMQVersion { ferment :: boxed (dash_spv_crypto_llmq_version_LLMQVersion :: Indexed { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_version_LLMQVersion_BLSBasicDefault_ctor () -> * mut dash_spv_crypto_llmq_version_LLMQVersion { ferment :: boxed (dash_spv_crypto_llmq_version_LLMQVersion :: BLSBasicDefault { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_version_LLMQVersion_BLSBasicIndexed_ctor () -> * mut dash_spv_crypto_llmq_version_LLMQVersion { ferment :: boxed (dash_spv_crypto_llmq_version_LLMQVersion :: BLSBasicIndexed { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_version_LLMQVersion_destroy < > (ffi : * mut dash_spv_crypto_llmq_version_LLMQVersion) { ferment :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`dash_spv_crypto::llmq::version::LLMQVersion::use_bls_legacy`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_version_LLMQVersion_use_bls_legacy (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: version :: dash_spv_crypto_llmq_version_LLMQVersion) -> bool { let obj = dash_spv_crypto :: llmq :: version :: LLMQVersion :: use_bls_legacy (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::llmq::version::LLMQVersion::use_rotated_quorums`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_version_LLMQVersion_use_rotated_quorums (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: version :: dash_spv_crypto_llmq_version_LLMQVersion) -> bool { let obj = dash_spv_crypto :: llmq :: version :: LLMQVersion :: use_rotated_quorums (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::llmq::version::LLMQVersion::index`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_version_LLMQVersion_index (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: version :: dash_spv_crypto_llmq_version_LLMQVersion) -> u16 { let obj = dash_spv_crypto :: llmq :: version :: LLMQVersion :: index (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } } pub mod validation_skip_status { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`LLMQEntryValidationSkipStatus`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_crypto_llmq_validation_skip_status_LLMQEntryValidationSkipStatus { MissedList (* mut crate :: fermented :: generics :: Arr_u8_32) , UnknownBlock (* mut crate :: fermented :: generics :: Arr_u8_32) , OtherContext (* mut std :: os :: raw :: c_char) } impl ferment :: FFIConversionFrom < dash_spv_crypto :: llmq :: validation_skip_status :: LLMQEntryValidationSkipStatus > for dash_spv_crypto_llmq_validation_skip_status_LLMQEntryValidationSkipStatus { unsafe fn ffi_from_const (ffi : * const dash_spv_crypto_llmq_validation_skip_status_LLMQEntryValidationSkipStatus) -> dash_spv_crypto :: llmq :: validation_skip_status :: LLMQEntryValidationSkipStatus { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_crypto_llmq_validation_skip_status_LLMQEntryValidationSkipStatus :: MissedList (o_0) => dash_spv_crypto :: llmq :: validation_skip_status :: LLMQEntryValidationSkipStatus :: MissedList (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (* o_0)) , dash_spv_crypto_llmq_validation_skip_status_LLMQEntryValidationSkipStatus :: UnknownBlock (o_0) => dash_spv_crypto :: llmq :: validation_skip_status :: LLMQEntryValidationSkipStatus :: UnknownBlock (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (* o_0)) , dash_spv_crypto_llmq_validation_skip_status_LLMQEntryValidationSkipStatus :: OtherContext (o_0) => dash_spv_crypto :: llmq :: validation_skip_status :: LLMQEntryValidationSkipStatus :: OtherContext (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dash_spv_crypto :: llmq :: validation_skip_status :: LLMQEntryValidationSkipStatus > for dash_spv_crypto_llmq_validation_skip_status_LLMQEntryValidationSkipStatus { unsafe fn ffi_to_const (obj : dash_spv_crypto :: llmq :: validation_skip_status :: LLMQEntryValidationSkipStatus) -> * const dash_spv_crypto_llmq_validation_skip_status_LLMQEntryValidationSkipStatus { ferment :: boxed (match obj { dash_spv_crypto :: llmq :: validation_skip_status :: LLMQEntryValidationSkipStatus :: MissedList (o_0) => dash_spv_crypto_llmq_validation_skip_status_LLMQEntryValidationSkipStatus :: MissedList (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (o_0)) , dash_spv_crypto :: llmq :: validation_skip_status :: LLMQEntryValidationSkipStatus :: UnknownBlock (o_0) => dash_spv_crypto_llmq_validation_skip_status_LLMQEntryValidationSkipStatus :: UnknownBlock (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (o_0)) , dash_spv_crypto :: llmq :: validation_skip_status :: LLMQEntryValidationSkipStatus :: OtherContext (o_0) => dash_spv_crypto_llmq_validation_skip_status_LLMQEntryValidationSkipStatus :: OtherContext (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dash_spv_crypto_llmq_validation_skip_status_LLMQEntryValidationSkipStatus { fn drop (& mut self) { unsafe { match self { dash_spv_crypto_llmq_validation_skip_status_LLMQEntryValidationSkipStatus :: MissedList (o_0) => { ferment :: unbox_any (* o_0) ; } , dash_spv_crypto_llmq_validation_skip_status_LLMQEntryValidationSkipStatus :: UnknownBlock (o_0) => { ferment :: unbox_any (* o_0) ; } , dash_spv_crypto_llmq_validation_skip_status_LLMQEntryValidationSkipStatus :: OtherContext (o_0) => { ferment :: unbox_string (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_validation_skip_status_LLMQEntryValidationSkipStatus_MissedList_ctor (o_o_0 : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut dash_spv_crypto_llmq_validation_skip_status_LLMQEntryValidationSkipStatus { ferment :: boxed (dash_spv_crypto_llmq_validation_skip_status_LLMQEntryValidationSkipStatus :: MissedList (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_validation_skip_status_LLMQEntryValidationSkipStatus_UnknownBlock_ctor (o_o_0 : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut dash_spv_crypto_llmq_validation_skip_status_LLMQEntryValidationSkipStatus { ferment :: boxed (dash_spv_crypto_llmq_validation_skip_status_LLMQEntryValidationSkipStatus :: UnknownBlock (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_validation_skip_status_LLMQEntryValidationSkipStatus_OtherContext_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dash_spv_crypto_llmq_validation_skip_status_LLMQEntryValidationSkipStatus { ferment :: boxed (dash_spv_crypto_llmq_validation_skip_status_LLMQEntryValidationSkipStatus :: OtherContext (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_validation_skip_status_LLMQEntryValidationSkipStatus_destroy < > (ffi : * mut dash_spv_crypto_llmq_validation_skip_status_LLMQEntryValidationSkipStatus) { ferment :: unbox_any (ffi) ; } } pub mod bitset { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`Bitset`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_crypto_llmq_bitset_Bitset { pub count : usize , pub bitset : * mut crate :: fermented :: generics :: Vec_u8 } impl ferment :: FFIConversionFrom < dash_spv_crypto :: llmq :: bitset :: Bitset > for dash_spv_crypto_llmq_bitset_Bitset { unsafe fn ffi_from_const (ffi : * const dash_spv_crypto_llmq_bitset_Bitset) -> dash_spv_crypto :: llmq :: bitset :: Bitset { let ffi_ref = & * ffi ; dash_spv_crypto :: llmq :: bitset :: Bitset { count : ffi_ref . count , bitset : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (ffi_ref . bitset) } } } impl ferment :: FFIConversionTo < dash_spv_crypto :: llmq :: bitset :: Bitset > for dash_spv_crypto_llmq_bitset_Bitset { unsafe fn ffi_to_const (obj : dash_spv_crypto :: llmq :: bitset :: Bitset) -> * const dash_spv_crypto_llmq_bitset_Bitset { ferment :: boxed (dash_spv_crypto_llmq_bitset_Bitset { count : obj . count , bitset : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj . bitset) }) } } impl Drop for dash_spv_crypto_llmq_bitset_Bitset { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment :: unbox_any (ffi_ref . bitset) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_bitset_Bitset_ctor < > (count : usize , bitset : * mut crate :: fermented :: generics :: Vec_u8) -> * mut dash_spv_crypto_llmq_bitset_Bitset { ferment :: boxed (dash_spv_crypto_llmq_bitset_Bitset { count , bitset }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_bitset_Bitset_destroy < > (ffi : * mut dash_spv_crypto_llmq_bitset_Bitset) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_bitset_Bitset_get_count < > (obj : * const dash_spv_crypto_llmq_bitset_Bitset) -> usize { (* obj) . count } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_bitset_Bitset_get_bitset < > (obj : * const dash_spv_crypto_llmq_bitset_Bitset) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . bitset } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_bitset_Bitset_set_count < > (obj : * const dash_spv_crypto_llmq_bitset_Bitset) -> usize { (* obj) . count } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_bitset_Bitset_set_bitset < > (obj : * const dash_spv_crypto_llmq_bitset_Bitset) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . bitset } } pub mod validation_status { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`LLMQEntryValidationStatus`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus { Unknown , Verified , Skipped (* mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: validation_skip_status :: dash_spv_crypto_llmq_validation_skip_status_LLMQEntryValidationSkipStatus) , Invalid (* mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: validation_error :: dash_spv_crypto_llmq_validation_error_LLMQValidationError) } impl ferment :: FFIConversionFrom < dash_spv_crypto :: llmq :: validation_status :: LLMQEntryValidationStatus > for dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus { unsafe fn ffi_from_const (ffi : * const dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus) -> dash_spv_crypto :: llmq :: validation_status :: LLMQEntryValidationStatus { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus :: Unknown => dash_spv_crypto :: llmq :: validation_status :: LLMQEntryValidationStatus :: Unknown , dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus :: Verified => dash_spv_crypto :: llmq :: validation_status :: LLMQEntryValidationStatus :: Verified , dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus :: Skipped (o_0) => dash_spv_crypto :: llmq :: validation_status :: LLMQEntryValidationStatus :: Skipped (< crate :: fermented :: types :: dash_spv_crypto :: llmq :: validation_skip_status :: dash_spv_crypto_llmq_validation_skip_status_LLMQEntryValidationSkipStatus as ferment :: FFIConversionFrom < dash_spv_crypto :: llmq :: validation_skip_status :: LLMQEntryValidationSkipStatus >> :: ffi_from (* o_0)) , dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus :: Invalid (o_0) => dash_spv_crypto :: llmq :: validation_status :: LLMQEntryValidationStatus :: Invalid (< crate :: fermented :: types :: dash_spv_crypto :: llmq :: validation_error :: dash_spv_crypto_llmq_validation_error_LLMQValidationError as ferment :: FFIConversionFrom < dash_spv_crypto :: llmq :: validation_error :: LLMQValidationError >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dash_spv_crypto :: llmq :: validation_status :: LLMQEntryValidationStatus > for dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus { unsafe fn ffi_to_const (obj : dash_spv_crypto :: llmq :: validation_status :: LLMQEntryValidationStatus) -> * const dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus { ferment :: boxed (match obj { dash_spv_crypto :: llmq :: validation_status :: LLMQEntryValidationStatus :: Unknown => dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus :: Unknown , dash_spv_crypto :: llmq :: validation_status :: LLMQEntryValidationStatus :: Verified => dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus :: Verified , dash_spv_crypto :: llmq :: validation_status :: LLMQEntryValidationStatus :: Skipped (o_0) => dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus :: Skipped (< crate :: fermented :: types :: dash_spv_crypto :: llmq :: validation_skip_status :: dash_spv_crypto_llmq_validation_skip_status_LLMQEntryValidationSkipStatus as ferment :: FFIConversionTo < dash_spv_crypto :: llmq :: validation_skip_status :: LLMQEntryValidationSkipStatus >> :: ffi_to (o_0)) , dash_spv_crypto :: llmq :: validation_status :: LLMQEntryValidationStatus :: Invalid (o_0) => dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus :: Invalid (< crate :: fermented :: types :: dash_spv_crypto :: llmq :: validation_error :: dash_spv_crypto_llmq_validation_error_LLMQValidationError as ferment :: FFIConversionTo < dash_spv_crypto :: llmq :: validation_error :: LLMQValidationError >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus { fn drop (& mut self) { unsafe { match self { dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus :: Unknown => { } , dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus :: Verified => { } , dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus :: Skipped (o_0) => { ferment :: unbox_any (* o_0) ; } , dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus :: Invalid (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus_Unknown_ctor () -> * mut dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus { ferment :: boxed (dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus :: Unknown { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus_Verified_ctor () -> * mut dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus { ferment :: boxed (dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus :: Verified { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus_Skipped_ctor (o_o_0 : * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: validation_skip_status :: dash_spv_crypto_llmq_validation_skip_status_LLMQEntryValidationSkipStatus) -> * mut dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus { ferment :: boxed (dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus :: Skipped (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus_Invalid_ctor (o_o_0 : * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: validation_error :: dash_spv_crypto_llmq_validation_error_LLMQValidationError) -> * mut dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus { ferment :: boxed (dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus :: Invalid (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus_destroy < > (ffi : * mut dash_spv_crypto_llmq_validation_status_LLMQEntryValidationStatus) { ferment :: unbox_any (ffi) ; } } } pub mod keys { use crate as dash_spv_apple_bindings ; pub mod operator_public_key { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`OperatorPublicKey`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_crypto_keys_operator_public_key_OperatorPublicKey { pub data : * mut crate :: fermented :: generics :: Arr_u8_48 , pub version : u16 } impl ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: operator_public_key :: OperatorPublicKey > for dash_spv_crypto_keys_operator_public_key_OperatorPublicKey { unsafe fn ffi_from_const (ffi : * const dash_spv_crypto_keys_operator_public_key_OperatorPublicKey) -> dash_spv_crypto :: keys :: operator_public_key :: OperatorPublicKey { let ffi_ref = & * ffi ; dash_spv_crypto :: keys :: operator_public_key :: OperatorPublicKey { data : < crate :: fermented :: generics :: Arr_u8_48 as ferment :: FFIConversionFrom < [u8 ; 48] >> :: ffi_from (ffi_ref . data) , version : ffi_ref . version } } } impl ferment :: FFIConversionTo < dash_spv_crypto :: keys :: operator_public_key :: OperatorPublicKey > for dash_spv_crypto_keys_operator_public_key_OperatorPublicKey { unsafe fn ffi_to_const (obj : dash_spv_crypto :: keys :: operator_public_key :: OperatorPublicKey) -> * const dash_spv_crypto_keys_operator_public_key_OperatorPublicKey { ferment :: boxed (dash_spv_crypto_keys_operator_public_key_OperatorPublicKey { data : < crate :: fermented :: generics :: Arr_u8_48 as ferment :: FFIConversionTo < [u8 ; 48] >> :: ffi_to (obj . data) , version : obj . version }) } } impl Drop for dash_spv_crypto_keys_operator_public_key_OperatorPublicKey { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . data) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_operator_public_key_OperatorPublicKey_ctor < > (data : * mut crate :: fermented :: generics :: Arr_u8_48 , version : u16) -> * mut dash_spv_crypto_keys_operator_public_key_OperatorPublicKey { ferment :: boxed (dash_spv_crypto_keys_operator_public_key_OperatorPublicKey { data , version }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_operator_public_key_OperatorPublicKey_destroy < > (ffi : * mut dash_spv_crypto_keys_operator_public_key_OperatorPublicKey) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_operator_public_key_OperatorPublicKey_get_data < > (obj : * const dash_spv_crypto_keys_operator_public_key_OperatorPublicKey) -> * mut crate :: fermented :: generics :: Arr_u8_48 { (* obj) . data } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_operator_public_key_OperatorPublicKey_get_version < > (obj : * const dash_spv_crypto_keys_operator_public_key_OperatorPublicKey) -> u16 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_operator_public_key_OperatorPublicKey_set_data < > (obj : * const dash_spv_crypto_keys_operator_public_key_OperatorPublicKey) -> * mut crate :: fermented :: generics :: Arr_u8_48 { (* obj) . data } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_operator_public_key_OperatorPublicKey_set_version < > (obj : * const dash_spv_crypto_keys_operator_public_key_OperatorPublicKey) -> u16 { (* obj) . version } } pub mod ecdsa_key { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::key_with_secret_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_key_with_secret_data (data : * mut crate :: fermented :: generics :: Slice_u8 , compressed : bool) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: key_with_secret_data (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data))) , compressed) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::key_with_extended_public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_key_with_extended_public_key_data (bytes : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: key_with_extended_public_key_data (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (bytes)))) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::public_key_data_from_seed`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_public_key_data_from_seed (seed : * mut crate :: fermented :: generics :: Slice_u8 , compressed : bool) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: public_key_data_from_seed (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (seed))) , compressed) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::key_with_secret`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_key_with_secret (secret : * mut crate :: fermented :: types :: dash_spv_crypto :: crypto :: byte_util :: dash_spv_crypto_crypto_byte_util_UInt256 , compressed : bool) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: key_with_secret (Box :: leak (Box :: new (< crate :: fermented :: types :: dash_spv_crypto :: crypto :: byte_util :: dash_spv_crypto_crypto_byte_util_UInt256 as ferment :: FFIConversionFrom < dash_spv_crypto :: crypto :: byte_util :: UInt256 >> :: ffi_from (secret))) , compressed) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::key_with_combined_secret`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_key_with_combined_secret (data : * mut crate :: fermented :: types :: dash_spv_crypto :: crypto :: byte_util :: dash_spv_crypto_crypto_byte_util_UInt512 , compressed : bool) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: key_with_combined_secret (Box :: leak (Box :: new (< crate :: fermented :: types :: dash_spv_crypto :: crypto :: byte_util :: dash_spv_crypto_crypto_byte_util_UInt512 as ferment :: FFIConversionFrom < dash_spv_crypto :: crypto :: byte_util :: UInt512 >> :: ffi_from (data))) , compressed) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::key_with_secret_hex`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_key_with_secret_hex (string : * mut std :: os :: raw :: c_char , compressed : bool) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: key_with_secret_hex (Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (string))) , compressed) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::key_recovered_from_compact_sig`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_key_recovered_from_compact_sig (compact_sig : * mut crate :: fermented :: generics :: Slice_u8 , message_digest : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: key_recovered_from_compact_sig (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (compact_sig))) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (message_digest)) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::key_with_private_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_key_with_private_key (private_key_string : * mut std :: os :: raw :: c_char , chain_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: key_with_private_key (Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (private_key_string))) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain_type)) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::key_with_public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_key_with_public_key_data (data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: key_with_public_key_data (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::init_with_compact_sig`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_init_with_compact_sig (compact_sig : * mut crate :: fermented :: generics :: Slice_u8 , message_digest : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: init_with_compact_sig (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (compact_sig))) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (message_digest)) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::init_with_seed_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_init_with_seed_data (seed : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: init_with_seed_data (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (seed)))) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::init_with_secret`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_init_with_secret (secret : * mut crate :: fermented :: types :: dash_spv_crypto :: crypto :: byte_util :: dash_spv_crypto_crypto_byte_util_UInt256 , compressed : bool) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: init_with_secret (< crate :: fermented :: types :: dash_spv_crypto :: crypto :: byte_util :: dash_spv_crypto_crypto_byte_util_UInt256 as ferment :: FFIConversionFrom < dash_spv_crypto :: crypto :: byte_util :: UInt256 >> :: ffi_from (secret) , compressed) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::init_with_extended_private_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_init_with_extended_private_key_data (data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: init_with_extended_private_key_data (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::init_with_extended_public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_init_with_extended_public_key_data (data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: init_with_extended_public_key_data (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::init_with_private_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_init_with_private_key (private_key : * mut std :: os :: raw :: c_char , chain_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: init_with_private_key (Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (private_key))) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain_type)) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::init_with_public_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_init_with_public_key (public_key : * mut crate :: fermented :: generics :: Vec_u8) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: init_with_public_key (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (public_key)) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::key_with_extended_private_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_key_with_extended_private_key_data (bytes : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: key_with_extended_private_key_data (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (bytes)))) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::compact_sign`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_compact_sign (self_ : * mut dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , message_digest : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Arr_u8_65 { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: compact_sign (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (message_digest)) ; < crate :: fermented :: generics :: Arr_u8_65 as ferment :: FFIConversionTo < [u8 ; 65] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::key_with_compact_sig`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_key_with_compact_sig (compact_sig : * mut crate :: fermented :: generics :: Slice_u8 , message_digest : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: key_with_compact_sig (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (compact_sig))) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (message_digest)) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::deprecated_incorrect_extended_public_key_from_seed`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_deprecated_incorrect_extended_public_key_from_seed (secret : * mut crate :: fermented :: generics :: Slice_u8 , chaincode : * mut crate :: fermented :: generics :: Slice_u8 , hashes : * mut crate :: fermented :: generics :: Slice_u8 , derivation_len : usize) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: deprecated_incorrect_extended_public_key_from_seed (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (secret))) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (chaincode))) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (hashes))) , derivation_len) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::deprecated_incorrect_extended_public_key_from_seed_as_opaque`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_deprecated_incorrect_extended_public_key_from_seed_as_opaque (secret : * mut crate :: fermented :: generics :: Slice_u8 , chaincode : * mut crate :: fermented :: generics :: Slice_u8 , hashes : * mut crate :: fermented :: generics :: Slice_u8 , derivation_len : usize) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: deprecated_incorrect_extended_public_key_from_seed_as_opaque (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (secret))) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (chaincode))) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (hashes))) , derivation_len) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: key :: OpaqueKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::hash160`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_hash160 (self_ : * mut dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) -> * mut crate :: fermented :: generics :: Arr_u8_20 { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: hash160 (& * self_) ; < crate :: fermented :: generics :: Arr_u8_20 as ferment :: FFIConversionTo < [u8 ; 20] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::public_key_from_extended_public_key_data_at_u32_path`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_public_key_from_extended_public_key_data_at_u32_path (self_ : * mut dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , index_path : * mut crate :: fermented :: generics :: Vec_u32) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: public_key_from_extended_public_key_data_at_u32_path (& * self_ , < crate :: fermented :: generics :: Vec_u32 as ferment :: FFIConversionFrom < Vec < u32 > >> :: ffi_from (index_path)) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::serialized_extended_private_key_from_seed_at_u256_path`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_serialized_extended_private_key_from_seed_at_u256_path (seed : * mut crate :: fermented :: generics :: Slice_u8 , index_path : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_IndexPathU256 , chain_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut crate :: fermented :: generics :: Result_ok_String_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: serialized_extended_private_key_from_seed_at_u256_path (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (seed))) , < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_IndexPathU256 as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: IndexPathU256 >> :: ffi_from (index_path) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain_type)) ; < crate :: fermented :: generics :: Result_ok_String_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < String , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::serialized_private_master_key_from_seed`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_serialized_private_master_key_from_seed (seed : * mut crate :: fermented :: generics :: Slice_u8 , chain_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: serialized_private_master_key_from_seed (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (seed))) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain_type)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::public_key_unique_id_from_derived_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_public_key_unique_id_from_derived_key_data (derived_key_data : * mut crate :: fermented :: generics :: Slice_u8 , chain_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> u64 { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: public_key_unique_id_from_derived_key_data (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (derived_key_data))) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain_type)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::serialized_auth_private_key_from_seed_for_chain`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_serialized_auth_private_key_from_seed_for_chain (seed : * mut crate :: fermented :: generics :: Slice_u8 , chain_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: serialized_auth_private_key_from_seed_for_chain (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (seed))) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain_type)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::serialized_from_bip38_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_serialized_from_bip38_key (key_string : * mut std :: os :: raw :: c_char , passphrase : * mut std :: os :: raw :: c_char , chain_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut crate :: fermented :: generics :: Result_ok_String_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: serialized_from_bip38_key (Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (key_string))) , Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (passphrase))) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain_type)) ; < crate :: fermented :: generics :: Result_ok_String_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < String , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::is_valid_bip38_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_is_valid_bip38_key (key_string : * mut std :: os :: raw :: c_char) -> bool { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: is_valid_bip38_key (Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (key_string)))) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::is_empty_secret_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_is_empty_secret_key (self_ : * mut dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) -> bool { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: is_empty_secret_key (& * self_) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::contains_secret_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_contains_secret_key (string_key : * mut std :: os :: raw :: c_char , chain_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> bool { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: contains_secret_key (Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (string_key))) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain_type)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::public_key_data_for_private_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_public_key_data_for_private_key (string_key : * mut std :: os :: raw :: c_char , chain_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: public_key_data_for_private_key (Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (string_key))) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain_type)) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::address_from_public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_address_from_public_key_data (data : * mut crate :: fermented :: generics :: Slice_u8 , chain_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: address_from_public_key_data (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data))) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain_type)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::address_from_recovered_compact_sig`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_address_from_recovered_compact_sig (compact_sig : * mut crate :: fermented :: generics :: Slice_u8 , digest : * mut crate :: fermented :: generics :: Arr_u8_32 , chain_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut crate :: fermented :: generics :: Result_ok_String_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: address_from_recovered_compact_sig (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (compact_sig))) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (digest) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain_type)) ; < crate :: fermented :: generics :: Result_ok_String_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < String , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::pro_reg_tx_verify_payload_signature`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_pro_reg_tx_verify_payload_signature (signature : * mut crate :: fermented :: generics :: Slice_u8 , payload : * mut crate :: fermented :: generics :: Slice_u8 , owner_key_hash : * mut crate :: fermented :: generics :: Arr_u8_20) -> bool { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: pro_reg_tx_verify_payload_signature (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (signature))) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (payload))) , < crate :: fermented :: generics :: Arr_u8_20 as ferment :: FFIConversionFrom < [u8 ; 20] >> :: ffi_from (owner_key_hash)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::pro_reg_tx_payload_collateral_digest`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_pro_reg_tx_payload_collateral_digest (payload : * mut crate :: fermented :: generics :: Slice_u8 , script_payout : * mut crate :: fermented :: generics :: Slice_u8 , operator_reward : u16 , owner_key_hash : * mut crate :: fermented :: generics :: Arr_u8_20 , voter_key_hash : * mut crate :: fermented :: generics :: Arr_u8_20 , chain_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey :: pro_reg_tx_payload_collateral_digest (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (payload))) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (script_payout))) , operator_reward , < crate :: fermented :: generics :: Arr_u8_20 as ferment :: FFIConversionFrom < [u8 ; 20] >> :: ffi_from (owner_key_hash) , < crate :: fermented :: generics :: Arr_u8_20 as ferment :: FFIConversionFrom < [u8 ; 20] >> :: ffi_from (voter_key_hash) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain_type)) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [no_mangle] pub static dash_spv_crypto_keys_ecdsa_key_ECDSAKey_dash_spv_crypto_keys_IKey : crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey_VTable = { # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_kind (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: kind (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey)) ; < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind as ferment :: FFIConversionTo < dash_spv_crypto :: keys :: key :: KeyKind >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_secret_key_string (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: secret_key_string (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_has_private_key (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> bool { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: has_private_key (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey)) ; obj } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_address_with_public_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , chain : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: address_with_public_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_sign (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: sign (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_verify (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , message_digest : * mut crate :: fermented :: generics :: Slice_u8 , signature : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: verify (& mut * ((* self_) . object as * mut dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (message_digest))) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (signature)))) ; < crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < bool , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_secret_key (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: secret_key (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey)) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_chaincode (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: chaincode (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey)) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_fingerprint (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> u32 { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: fingerprint (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey)) ; obj } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_private_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: private_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey)) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_public_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: public_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey)) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_extended_private_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: extended_private_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey)) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: util :: sec_vec :: SecVec , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_extended_public_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: extended_public_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey)) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_serialized_private_key_for_script (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , chain_prefix : u8) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: serialized_private_key_for_script (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) , chain_prefix) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_hmac_256_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: hmac_256_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_forget_private_key (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: forget_private_key (& mut * ((* self_) . object as * mut dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey)) ; ; } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_create_signature (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , tx_input_script : * mut crate :: fermented :: generics :: Vec_u8 , tx_data : * mut crate :: fermented :: generics :: Vec_u8) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: create_signature (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (tx_input_script))) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (tx_data)))) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_sign_message_digest (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , digest : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: sign_message_digest (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (digest)) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_private_key_data_equal_to (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , other_private_key_data : * mut crate :: fermented :: generics :: Arr_u8_32) -> bool { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: private_key_data_equal_to (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (other_private_key_data)))) ; obj } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_public_key_data_equal_to (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , other_public_key_data : * mut crate :: fermented :: generics :: Vec_u8) -> bool { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: public_key_data_equal_to (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (other_public_key_data)))) ; obj } crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey_VTable { kind : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_kind , secret_key_string : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_secret_key_string , has_private_key : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_has_private_key , address_with_public_key_data : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_address_with_public_key_data , sign : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_sign , verify : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_verify , secret_key : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_secret_key , chaincode : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_chaincode , fingerprint : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_fingerprint , private_key_data : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_private_key_data , public_key_data : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_public_key_data , extended_private_key_data : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_extended_private_key_data , extended_public_key_data : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_extended_public_key_data , serialized_private_key_for_script : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_serialized_private_key_for_script , hmac_256_data : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_hmac_256_data , forget_private_key : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_forget_private_key , create_signature : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_create_signature , sign_message_digest : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_sign_message_digest , private_key_data_equal_to : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_private_key_data_equal_to , public_key_data_equal_to : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_public_key_data_equal_to } } ; # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_as_crate_fermented_types_dash_spv_crypto_keys_dash_spv_crypto_keys_IKey (obj : * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) -> crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey { crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey { object : obj as * const () , vtable : & dash_spv_crypto_keys_ecdsa_key_ECDSAKey_dash_spv_crypto_keys_IKey } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_as_crate_fermented_types_dash_spv_crypto_keys_dash_spv_crypto_keys_IKey_destroy (obj : crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) { ferment :: unbox_any (obj . object as * mut dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) ; } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::kind`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_IKey_kind (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: kind (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey)) ; < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind as ferment :: FFIConversionTo < dash_spv_crypto :: keys :: key :: KeyKind >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::kind`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_kind (self_ : * mut dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) -> * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: kind (& * self_) ; < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind as ferment :: FFIConversionTo < dash_spv_crypto :: keys :: key :: KeyKind >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::secret_key_string`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_IKey_secret_key_string (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: secret_key_string (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::secret_key_string`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_secret_key_string (self_ : * mut dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: secret_key_string (& * self_) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::has_private_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_IKey_has_private_key (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> bool { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: has_private_key (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::has_private_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_has_private_key (self_ : * mut dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) -> bool { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: has_private_key (& * self_) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::address_with_public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_IKey_address_with_public_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , chain : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: address_with_public_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::address_with_public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_address_with_public_key_data (self_ : * mut dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , chain : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: address_with_public_key_data (& * self_ , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::sign`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_IKey_sign (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: sign (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::sign`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_sign (self_ : * mut dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: sign (& * self_ , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::verify`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_IKey_verify (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , message_digest : * mut crate :: fermented :: generics :: Slice_u8 , signature : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: verify (& mut * ((* self_) . object as * mut dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (message_digest))) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (signature)))) ; < crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < bool , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::verify`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_verify (self_ : * mut dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , message_digest : * mut crate :: fermented :: generics :: Slice_u8 , signature : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: verify (& mut * self_ , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (message_digest))) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (signature)))) ; < crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < bool , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::secret_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_IKey_secret_key (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: secret_key (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey)) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::secret_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_secret_key (self_ : * mut dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: secret_key (& * self_) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::chaincode`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_IKey_chaincode (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: chaincode (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey)) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::chaincode`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_chaincode (self_ : * mut dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: chaincode (& * self_) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::fingerprint`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_IKey_fingerprint (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> u32 { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: fingerprint (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::fingerprint`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_fingerprint (self_ : * mut dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) -> u32 { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: fingerprint (& * self_) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::private_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_IKey_private_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: private_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey)) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::private_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_private_key_data (self_ : * mut dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: private_key_data (& * self_) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_IKey_public_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: public_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey)) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_public_key_data (self_ : * mut dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: public_key_data (& * self_) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::extended_private_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_IKey_extended_private_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: extended_private_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey)) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: util :: sec_vec :: SecVec , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::extended_private_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_extended_private_key_data (self_ : * mut dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: extended_private_key_data (& * self_) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: util :: sec_vec :: SecVec , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::extended_public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_IKey_extended_public_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: extended_public_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey)) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::extended_public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_extended_public_key_data (self_ : * mut dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: extended_public_key_data (& * self_) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::serialized_private_key_for_script`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_IKey_serialized_private_key_for_script (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , chain_prefix : u8) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: serialized_private_key_for_script (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) , chain_prefix) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::serialized_private_key_for_script`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_serialized_private_key_for_script (self_ : * mut dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , chain_prefix : u8) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: serialized_private_key_for_script (& * self_ , chain_prefix) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::hmac_256_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_IKey_hmac_256_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: hmac_256_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::hmac_256_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_hmac_256_data (self_ : * mut dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: hmac_256_data (& * self_ , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::forget_private_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_IKey_forget_private_key (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: forget_private_key (& mut * ((* self_) . object as * mut dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey)) ; ; } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::forget_private_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_forget_private_key (self_ : * mut dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: forget_private_key (& mut * self_) ; ; } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::sign_message_digest`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_IKey_sign_message_digest (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , digest : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: sign_message_digest (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (digest)) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::sign_message_digest`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_sign_message_digest (self_ : * mut dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , digest : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: sign_message_digest (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (digest)) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::private_key_data_equal_to`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_IKey_private_key_data_equal_to (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , other_private_key_data : * mut crate :: fermented :: generics :: Arr_u8_32) -> bool { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: private_key_data_equal_to (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (other_private_key_data)))) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::private_key_data_equal_to`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_private_key_data_equal_to (self_ : * mut dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , other_private_key_data : * mut crate :: fermented :: generics :: Arr_u8_32) -> bool { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: private_key_data_equal_to (& * self_ , Box :: leak (Box :: new (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (other_private_key_data)))) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::public_key_data_equal_to`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_IKey_public_key_data_equal_to (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , other_public_key_data : * mut crate :: fermented :: generics :: Vec_u8) -> bool { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: public_key_data_equal_to (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (other_public_key_data)))) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ecdsa_key::ECDSAKey::public_key_data_equal_to`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ecdsa_key_ECDSAKey_public_key_data_equal_to (self_ : * mut dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , other_public_key_data : * mut crate :: fermented :: generics :: Vec_u8) -> bool { let obj = < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey as dash_spv_crypto :: keys :: IKey > :: public_key_data_equal_to (& * self_ , Box :: leak (Box :: new (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (other_public_key_data)))) ; obj } } pub mod key { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::KeyKind::equal_to_kind`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_KeyKind_equal_to_kind (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind , kind : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind) -> bool { let obj = dash_spv_crypto :: keys :: key :: KeyKind :: equal_to_kind (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: KeyKind >> :: ffi_from (kind)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::KeyKind::index`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_KeyKind_index (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind) -> i16 { let obj = dash_spv_crypto :: keys :: key :: KeyKind :: index (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::KeyKind::public_key_from_extended_public_key_data_at_index_path`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_KeyKind_public_key_from_extended_public_key_data_at_index_path (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind , data : * mut crate :: fermented :: generics :: Slice_u8 , index_path : * mut crate :: fermented :: generics :: Vec_u32) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: key :: KeyKind :: public_key_from_extended_public_key_data_at_index_path (& ferment :: FFIConversionFrom :: ffi_from (self_) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data))) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Vec_u32 as ferment :: FFIConversionFrom < Vec < u32 > >> :: ffi_from (index_path)))) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::KeyKind::public_key_from_extended_public_key_data_at_index_path_256`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_KeyKind_public_key_from_extended_public_key_data_at_index_path_256 (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind , data : * mut crate :: fermented :: generics :: Slice_u8 , index_path : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_IndexPathU256) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: key :: KeyKind :: public_key_from_extended_public_key_data_at_index_path_256 (& ferment :: FFIConversionFrom :: ffi_from (self_) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data))) , Box :: leak (Box :: new (< crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_IndexPathU256 as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: IndexPathU256 >> :: ffi_from (index_path)))) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: key :: OpaqueKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::KeyKind::private_key_at_index_path_wrapped`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_KeyKind_private_key_at_index_path_wrapped (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind , seed : * mut crate :: fermented :: generics :: Slice_u8 , index_path : * mut crate :: fermented :: generics :: Vec_u32 , derivation_path : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_IndexPathU256) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: key :: KeyKind :: private_key_at_index_path_wrapped (& ferment :: FFIConversionFrom :: ffi_from (self_) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (seed))) , < crate :: fermented :: generics :: Vec_u32 as ferment :: FFIConversionFrom < Vec < u32 > >> :: ffi_from (index_path) , < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_IndexPathU256 as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: IndexPathU256 >> :: ffi_from (derivation_path)) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: key :: OpaqueKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::KeyKind::derive_key_from_seed_wrapped`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_KeyKind_derive_key_from_seed_wrapped (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind , seed : * mut crate :: fermented :: generics :: Slice_u8 , derivation_path : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_IndexPathU256) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: key :: KeyKind :: derive_key_from_seed_wrapped (& ferment :: FFIConversionFrom :: ffi_from (self_) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (seed))) , < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_IndexPathU256 as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: IndexPathU256 >> :: ffi_from (derivation_path)) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: key :: OpaqueKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::KeyKind::key_with_private_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_KeyKind_key_with_private_key (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind , secret : * mut std :: os :: raw :: c_char , chain_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: key :: KeyKind :: key_with_private_key (& ferment :: FFIConversionFrom :: ffi_from (self_) , Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (secret))) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain_type)) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: key :: OpaqueKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::KeyKind::private_keys_at_index_paths_wrapped`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_KeyKind_private_keys_at_index_paths_wrapped (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind , seed : * mut crate :: fermented :: generics :: Slice_u8 , index_paths : * mut crate :: fermented :: generics :: Vec_Vec_u32 , derivation_path : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_IndexPathU256) -> * mut crate :: fermented :: generics :: Result_ok_Vec_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: key :: KeyKind :: private_keys_at_index_paths_wrapped (& ferment :: FFIConversionFrom :: ffi_from (self_) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (seed))) , < crate :: fermented :: generics :: Vec_Vec_u32 as ferment :: FFIConversionFrom < Vec < Vec < u32 > > >> :: ffi_from (index_paths) , < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_IndexPathU256 as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: IndexPathU256 >> :: ffi_from (derivation_path)) ; < crate :: fermented :: generics :: Result_ok_Vec_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < dash_spv_crypto :: keys :: key :: OpaqueKey > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::KeyKind::serialized_private_keys_at_index_paths_wrapper`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_KeyKind_serialized_private_keys_at_index_paths_wrapper (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind , seed : * mut crate :: fermented :: generics :: Slice_u8 , index_paths : * mut crate :: fermented :: generics :: Vec_Vec_u32 , derivation_path : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_IndexPathU256 , chain_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut crate :: fermented :: generics :: Result_ok_Vec_String_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: key :: KeyKind :: serialized_private_keys_at_index_paths_wrapper (& ferment :: FFIConversionFrom :: ffi_from (self_) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (seed))) , < crate :: fermented :: generics :: Vec_Vec_u32 as ferment :: FFIConversionFrom < Vec < Vec < u32 > > >> :: ffi_from (index_paths) , < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_IndexPathU256 as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: IndexPathU256 >> :: ffi_from (derivation_path) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain_type)) ; < crate :: fermented :: generics :: Result_ok_Vec_String_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < String > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::KeyKind::derivation_string`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_KeyKind_derivation_string (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_crypto :: keys :: key :: KeyKind :: derivation_string (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::KeyKind::key_storage_prefix`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_KeyKind_key_storage_prefix (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_crypto :: keys :: key :: KeyKind :: key_storage_prefix (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::KeyKind::private_key_from_extended_private_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_KeyKind_private_key_from_extended_private_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: key :: KeyKind :: private_key_from_extended_private_key_data (& ferment :: FFIConversionFrom :: ffi_from (self_) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: key :: OpaqueKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::KeyKind::key_with_private_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_KeyKind_key_with_private_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: key :: KeyKind :: key_with_private_key_data (& ferment :: FFIConversionFrom :: ffi_from (self_) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: key :: OpaqueKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::KeyKind::key_with_seed_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_KeyKind_key_with_seed_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind , seed : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: key :: KeyKind :: key_with_seed_data (& ferment :: FFIConversionFrom :: ffi_from (self_) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (seed)))) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: key :: OpaqueKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::KeyKind::key_with_public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_KeyKind_key_with_public_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: key :: KeyKind :: key_with_public_key_data (& ferment :: FFIConversionFrom :: ffi_from (self_) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: key :: OpaqueKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::KeyKind::key_init_with_extended_public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_KeyKind_key_init_with_extended_public_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: key :: KeyKind :: key_init_with_extended_public_key_data (& ferment :: FFIConversionFrom :: ffi_from (self_) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: key :: OpaqueKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::KeyKind::key_with_extended_public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_KeyKind_key_with_extended_public_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: key :: KeyKind :: key_with_extended_public_key_data (& ferment :: FFIConversionFrom :: ffi_from (self_) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: key :: OpaqueKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::KeyKind::key_with_extended_private_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_KeyKind_key_with_extended_private_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: key :: KeyKind :: key_with_extended_private_key_data (& ferment :: FFIConversionFrom :: ffi_from (self_) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: key :: OpaqueKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::KeyKind::derive_key_from_extended_private_key_data_for_index_path`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_KeyKind_derive_key_from_extended_private_key_data_for_index_path (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind , data : * mut crate :: fermented :: generics :: Slice_u8 , index_path : * mut crate :: fermented :: generics :: Vec_u32) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: key :: KeyKind :: derive_key_from_extended_private_key_data_for_index_path (& ferment :: FFIConversionFrom :: ffi_from (self_) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data))) , < crate :: fermented :: generics :: Vec_u32 as ferment :: FFIConversionFrom < Vec < u32 > >> :: ffi_from (index_path)) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: key :: OpaqueKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::maybe_opaque_key_used_in_tx_input_script`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_maybe_opaque_key_used_in_tx_input_script (tx_input_script : * mut crate :: fermented :: generics :: Vec_u8 , keys : * mut crate :: fermented :: generics :: Vec_dash_spv_crypto_keys_key_OpaqueKey , chain : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey { let obj = dash_spv_crypto :: keys :: key :: maybe_opaque_key_used_in_tx_input_script (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (tx_input_script) , < crate :: fermented :: generics :: Vec_dash_spv_crypto_keys_key_OpaqueKey as ferment :: FFIConversionFrom < Vec < dash_spv_crypto :: keys :: key :: OpaqueKey > >> :: ffi_from (keys) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain)) ; < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey as ferment :: FFIConversionTo < dash_spv_crypto :: keys :: key :: OpaqueKey >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`KeyKind`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_crypto_keys_key_KeyKind { ECDSA = 0 , BLS = 1 , BLSBasic = 2 , ED25519 = 3 } impl ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: KeyKind > for dash_spv_crypto_keys_key_KeyKind { unsafe fn ffi_from_const (ffi : * const dash_spv_crypto_keys_key_KeyKind) -> dash_spv_crypto :: keys :: key :: KeyKind { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_crypto_keys_key_KeyKind :: ECDSA => dash_spv_crypto :: keys :: key :: KeyKind :: ECDSA , dash_spv_crypto_keys_key_KeyKind :: BLS => dash_spv_crypto :: keys :: key :: KeyKind :: BLS , dash_spv_crypto_keys_key_KeyKind :: BLSBasic => dash_spv_crypto :: keys :: key :: KeyKind :: BLSBasic , dash_spv_crypto_keys_key_KeyKind :: ED25519 => dash_spv_crypto :: keys :: key :: KeyKind :: ED25519 } } } impl ferment :: FFIConversionTo < dash_spv_crypto :: keys :: key :: KeyKind > for dash_spv_crypto_keys_key_KeyKind { unsafe fn ffi_to_const (obj : dash_spv_crypto :: keys :: key :: KeyKind) -> * const dash_spv_crypto_keys_key_KeyKind { ferment :: boxed (match obj { dash_spv_crypto :: keys :: key :: KeyKind :: ECDSA => dash_spv_crypto_keys_key_KeyKind :: ECDSA , dash_spv_crypto :: keys :: key :: KeyKind :: BLS => dash_spv_crypto_keys_key_KeyKind :: BLS , dash_spv_crypto :: keys :: key :: KeyKind :: BLSBasic => dash_spv_crypto_keys_key_KeyKind :: BLSBasic , dash_spv_crypto :: keys :: key :: KeyKind :: ED25519 => dash_spv_crypto_keys_key_KeyKind :: ED25519 , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dash_spv_crypto_keys_key_KeyKind { fn drop (& mut self) { unsafe { match self { dash_spv_crypto_keys_key_KeyKind :: ECDSA => { } , dash_spv_crypto_keys_key_KeyKind :: BLS => { } , dash_spv_crypto_keys_key_KeyKind :: BLSBasic => { } , dash_spv_crypto_keys_key_KeyKind :: ED25519 => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_KeyKind_ECDSA_ctor () -> * mut dash_spv_crypto_keys_key_KeyKind { ferment :: boxed (dash_spv_crypto_keys_key_KeyKind :: ECDSA { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_KeyKind_BLS_ctor () -> * mut dash_spv_crypto_keys_key_KeyKind { ferment :: boxed (dash_spv_crypto_keys_key_KeyKind :: BLS { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_KeyKind_BLSBasic_ctor () -> * mut dash_spv_crypto_keys_key_KeyKind { ferment :: boxed (dash_spv_crypto_keys_key_KeyKind :: BLSBasic { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_KeyKind_ED25519_ctor () -> * mut dash_spv_crypto_keys_key_KeyKind { ferment :: boxed (dash_spv_crypto_keys_key_KeyKind :: ED25519 { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_KeyKind_destroy < > (ffi : * mut dash_spv_crypto_keys_key_KeyKind) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub static dash_spv_crypto_keys_key_OpaqueKey_dash_spv_crypto_keys_IKey : crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey_VTable = { # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_kind (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: kind (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey)) ; < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind as ferment :: FFIConversionTo < dash_spv_crypto :: keys :: key :: KeyKind >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_secret_key_string (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: secret_key_string (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_has_private_key (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> bool { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: has_private_key (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey)) ; obj } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_address_with_public_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , chain : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: address_with_public_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_sign (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: sign (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_verify (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , message_digest : * mut crate :: fermented :: generics :: Slice_u8 , signature : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: verify (& mut * ((* self_) . object as * mut dash_spv_crypto :: keys :: key :: OpaqueKey) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (message_digest))) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (signature)))) ; < crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < bool , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_secret_key (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: secret_key (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey)) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_chaincode (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: chaincode (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey)) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_fingerprint (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> u32 { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: fingerprint (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey)) ; obj } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_private_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: private_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey)) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_public_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: public_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey)) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_extended_private_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: extended_private_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey)) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: util :: sec_vec :: SecVec , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_extended_public_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: extended_public_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey)) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_serialized_private_key_for_script (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , chain_prefix : u8) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: serialized_private_key_for_script (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey) , chain_prefix) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_hmac_256_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: hmac_256_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_forget_private_key (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: forget_private_key (& mut * ((* self_) . object as * mut dash_spv_crypto :: keys :: key :: OpaqueKey)) ; ; } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_create_signature (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , tx_input_script : * mut crate :: fermented :: generics :: Vec_u8 , tx_data : * mut crate :: fermented :: generics :: Vec_u8) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: create_signature (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (tx_input_script))) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (tx_data)))) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_sign_message_digest (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , digest : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: sign_message_digest (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (digest)) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_private_key_data_equal_to (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , other_private_key_data : * mut crate :: fermented :: generics :: Arr_u8_32) -> bool { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: private_key_data_equal_to (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (other_private_key_data)))) ; obj } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_public_key_data_equal_to (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , other_public_key_data : * mut crate :: fermented :: generics :: Vec_u8) -> bool { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: public_key_data_equal_to (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (other_public_key_data)))) ; obj } crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey_VTable { kind : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_kind , secret_key_string : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_secret_key_string , has_private_key : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_has_private_key , address_with_public_key_data : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_address_with_public_key_data , sign : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_sign , verify : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_verify , secret_key : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_secret_key , chaincode : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_chaincode , fingerprint : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_fingerprint , private_key_data : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_private_key_data , public_key_data : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_public_key_data , extended_private_key_data : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_extended_private_key_data , extended_public_key_data : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_extended_public_key_data , serialized_private_key_for_script : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_serialized_private_key_for_script , hmac_256_data : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_hmac_256_data , forget_private_key : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_forget_private_key , create_signature : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_create_signature , sign_message_digest : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_sign_message_digest , private_key_data_equal_to : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_private_key_data_equal_to , public_key_data_equal_to : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_key_OpaqueKey_public_key_data_equal_to } } ; # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_as_crate_fermented_types_dash_spv_crypto_keys_dash_spv_crypto_keys_IKey (obj : * const dash_spv_crypto :: keys :: key :: OpaqueKey) -> crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey { crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey { object : obj as * const () , vtable : & dash_spv_crypto_keys_key_OpaqueKey_dash_spv_crypto_keys_IKey } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_as_crate_fermented_types_dash_spv_crypto_keys_dash_spv_crypto_keys_IKey_destroy (obj : crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) { ferment :: unbox_any (obj . object as * mut dash_spv_crypto :: keys :: key :: OpaqueKey) ; } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::kind`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_IKey_kind (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: kind (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey)) ; < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind as ferment :: FFIConversionTo < dash_spv_crypto :: keys :: key :: KeyKind >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::kind`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_kind (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey) -> * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: kind (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind as ferment :: FFIConversionTo < dash_spv_crypto :: keys :: key :: KeyKind >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::secret_key_string`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_IKey_secret_key_string (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: secret_key_string (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::secret_key_string`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_secret_key_string (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: secret_key_string (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::has_private_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_IKey_has_private_key (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> bool { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: has_private_key (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::has_private_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_has_private_key (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey) -> bool { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: has_private_key (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::address_with_public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_IKey_address_with_public_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , chain : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: address_with_public_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::address_with_public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_address_with_public_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , chain : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: address_with_public_key_data (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::sign`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_IKey_sign (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: sign (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::sign`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_sign (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: sign (& ferment :: FFIConversionFrom :: ffi_from (self_) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::verify`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_IKey_verify (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , message_digest : * mut crate :: fermented :: generics :: Slice_u8 , signature : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: verify (& mut * ((* self_) . object as * mut dash_spv_crypto :: keys :: key :: OpaqueKey) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (message_digest))) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (signature)))) ; < crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < bool , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::verify`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_verify (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , message_digest : * mut crate :: fermented :: generics :: Slice_u8 , signature : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: verify (& mut ferment :: FFIConversionFrom :: ffi_from (self_) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (message_digest))) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (signature)))) ; < crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < bool , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::secret_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_IKey_secret_key (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: secret_key (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey)) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::secret_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_secret_key (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: secret_key (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::chaincode`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_IKey_chaincode (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: chaincode (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey)) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::chaincode`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_chaincode (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: chaincode (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::fingerprint`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_IKey_fingerprint (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> u32 { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: fingerprint (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::fingerprint`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_fingerprint (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey) -> u32 { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: fingerprint (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::private_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_IKey_private_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: private_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey)) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::private_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_private_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: private_key_data (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_IKey_public_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: public_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey)) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_public_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: public_key_data (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::extended_private_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_IKey_extended_private_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: extended_private_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey)) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: util :: sec_vec :: SecVec , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::extended_private_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_extended_private_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: extended_private_key_data (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: util :: sec_vec :: SecVec , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::extended_public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_IKey_extended_public_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: extended_public_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey)) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::extended_public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_extended_public_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: extended_public_key_data (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::serialized_private_key_for_script`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_IKey_serialized_private_key_for_script (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , chain_prefix : u8) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: serialized_private_key_for_script (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey) , chain_prefix) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::serialized_private_key_for_script`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_serialized_private_key_for_script (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , chain_prefix : u8) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: serialized_private_key_for_script (& ferment :: FFIConversionFrom :: ffi_from (self_) , chain_prefix) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::hmac_256_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_IKey_hmac_256_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: hmac_256_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::hmac_256_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_hmac_256_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: hmac_256_data (& ferment :: FFIConversionFrom :: ffi_from (self_) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::forget_private_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_IKey_forget_private_key (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: forget_private_key (& mut * ((* self_) . object as * mut dash_spv_crypto :: keys :: key :: OpaqueKey)) ; ; } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::forget_private_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_forget_private_key (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey) { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: forget_private_key (& mut ferment :: FFIConversionFrom :: ffi_from (self_)) ; ; } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::sign_message_digest`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_IKey_sign_message_digest (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , digest : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: sign_message_digest (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (digest)) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::sign_message_digest`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_sign_message_digest (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , digest : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: sign_message_digest (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (digest)) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::private_key_data_equal_to`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_IKey_private_key_data_equal_to (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , other_private_key_data : * mut crate :: fermented :: generics :: Arr_u8_32) -> bool { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: private_key_data_equal_to (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (other_private_key_data)))) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::private_key_data_equal_to`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_private_key_data_equal_to (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , other_private_key_data : * mut crate :: fermented :: generics :: Arr_u8_32) -> bool { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: private_key_data_equal_to (& ferment :: FFIConversionFrom :: ffi_from (self_) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (other_private_key_data)))) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::public_key_data_equal_to`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_IKey_public_key_data_equal_to (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , other : * mut crate :: fermented :: generics :: Vec_u8) -> bool { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: public_key_data_equal_to (& * ((* self_) . object as * const dash_spv_crypto :: keys :: key :: OpaqueKey) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (other)))) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::public_key_data_equal_to`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_public_key_data_equal_to (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , other : * mut crate :: fermented :: generics :: Vec_u8) -> bool { let obj = < dash_spv_crypto :: keys :: key :: OpaqueKey as dash_spv_crypto :: keys :: IKey > :: public_key_data_equal_to (& ferment :: FFIConversionFrom :: ffi_from (self_) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (other)))) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::has_kind`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_has_kind (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , kind : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind) -> bool { let obj = dash_spv_crypto :: keys :: key :: OpaqueKey :: has_kind (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: KeyKind >> :: ffi_from (kind)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::hash160`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_hash160 (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey) -> * mut crate :: fermented :: generics :: Arr_u8_20 { let obj = dash_spv_crypto :: keys :: key :: OpaqueKey :: hash160 (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: generics :: Arr_u8_20 as ferment :: FFIConversionTo < [u8 ; 20] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::check_payload_signature`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_check_payload_signature (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , key_hash : * mut crate :: fermented :: generics :: Arr_u8_20) -> bool { let obj = dash_spv_crypto :: keys :: key :: OpaqueKey :: check_payload_signature (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: generics :: Arr_u8_20 as ferment :: FFIConversionFrom < [u8 ; 20] >> :: ffi_from (key_hash)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::create_tx_signature`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_create_tx_signature (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , data : * mut crate :: fermented :: generics :: Slice_u8 , tx_input_script : * mut crate :: fermented :: generics :: Vec_u8) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = dash_spv_crypto :: keys :: key :: OpaqueKey :: create_tx_signature (& ferment :: FFIConversionFrom :: ffi_from (self_) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data))) , < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (tx_input_script)) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::create_account_reference`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_create_account_reference (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , extended_public_key : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , account_number : usize) -> u32 { let obj = dash_spv_crypto :: keys :: key :: OpaqueKey :: create_account_reference (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: OpaqueKey >> :: ffi_from (extended_public_key) , account_number) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::create_identifier`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_create_identifier (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey) -> * mut crate :: fermented :: generics :: Result_ok_u8_arr_32_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: key :: OpaqueKey :: create_identifier (& ferment :: FFIConversionFrom :: ffi_from (self_)) ; < crate :: fermented :: generics :: Result_ok_u8_arr_32_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < [u8 ; 32] , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::public_derive_to_256_path_with_offset`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_public_derive_to_256_path_with_offset (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , path : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_IndexPathU256 , offset : usize) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: key :: OpaqueKey :: public_derive_to_256_path_with_offset (& mut ferment :: FFIConversionFrom :: ffi_from (self_) , Box :: leak (Box :: new (< crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_IndexPathU256 as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: IndexPathU256 >> :: ffi_from (path))) , offset) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: key :: OpaqueKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::public_key_from_extended_public_key_data_at_index_path`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_public_key_from_extended_public_key_data_at_index_path (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , index_path : * mut crate :: fermented :: generics :: Vec_u32) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: key :: OpaqueKey :: public_key_from_extended_public_key_data_at_index_path (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: generics :: Vec_u32 as ferment :: FFIConversionFrom < Vec < u32 > >> :: ffi_from (index_path)) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: key :: OpaqueKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::public_key_data_at_index_path`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_public_key_data_at_index_path (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , index_path : * mut crate :: fermented :: generics :: Vec_u32) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: key :: OpaqueKey :: public_key_data_at_index_path (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: generics :: Vec_u32 as ferment :: FFIConversionFrom < Vec < u32 > >> :: ffi_from (index_path)) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::encrypt_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_encrypt_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , public_key : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: key :: OpaqueKey :: encrypt_data (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: OpaqueKey >> :: ffi_from (public_key) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::encrypt_data_vec`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_encrypt_data_vec (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , public_key : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , data : * mut crate :: fermented :: generics :: Vec_u8) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: key :: OpaqueKey :: encrypt_data_vec (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: OpaqueKey >> :: ffi_from (public_key) , < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::encrypt_data_using_iv`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_encrypt_data_using_iv (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , public_key : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , data : * mut crate :: fermented :: generics :: Slice_u8 , iv : * mut crate :: fermented :: generics :: Vec_u8) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: key :: OpaqueKey :: encrypt_data_using_iv (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: OpaqueKey >> :: ffi_from (public_key) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data))) , < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (iv)) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::decrypt_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_decrypt_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , public_key : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: key :: OpaqueKey :: decrypt_data (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: OpaqueKey >> :: ffi_from (public_key) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::decrypt_data_vec`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_decrypt_data_vec (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , public_key : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , data : * mut crate :: fermented :: generics :: Vec_u8) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: key :: OpaqueKey :: decrypt_data_vec (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: OpaqueKey >> :: ffi_from (public_key) , < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::decrypt_data_using_iv_size`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_decrypt_data_using_iv_size (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , public_key : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , data : * mut crate :: fermented :: generics :: Slice_u8 , iv_size : usize) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: key :: OpaqueKey :: decrypt_data_using_iv_size (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: OpaqueKey >> :: ffi_from (public_key) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data))) , iv_size) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::encrypt_data_with_dh_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_encrypt_data_with_dh_key (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , data : * mut crate :: fermented :: generics :: Vec_u8) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: key :: OpaqueKey :: encrypt_data_with_dh_key (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::decrypt_data_with_dh_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_decrypt_data_with_dh_key (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , data : * mut crate :: fermented :: generics :: Vec_u8) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: key :: OpaqueKey :: decrypt_data_with_dh_key (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::encrypt_data_with_dh_key_using_iv`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_encrypt_data_with_dh_key_using_iv (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , data : * mut crate :: fermented :: generics :: Vec_u8 , iv : * mut crate :: fermented :: generics :: Vec_u8) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: key :: OpaqueKey :: encrypt_data_with_dh_key_using_iv (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data) , < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (iv)) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::OpaqueKey::decrypt_data_with_dh_key_using_iv_size`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_decrypt_data_with_dh_key_using_iv_size (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , data : * mut crate :: fermented :: generics :: Vec_u8 , iv_size : usize) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: key :: OpaqueKey :: decrypt_data_with_dh_key_using_iv_size (& ferment :: FFIConversionFrom :: ffi_from (self_) , < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data) , iv_size) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`IndexPathU256`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_crypto_keys_key_IndexPathU256 { pub indexes : * mut crate :: fermented :: generics :: Vec_u8_32 , pub hardened : * mut crate :: fermented :: generics :: Vec_bool } impl ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: IndexPathU256 > for dash_spv_crypto_keys_key_IndexPathU256 { unsafe fn ffi_from_const (ffi : * const dash_spv_crypto_keys_key_IndexPathU256) -> dash_spv_crypto :: keys :: key :: IndexPathU256 { let ffi_ref = & * ffi ; dash_spv_crypto :: keys :: key :: IndexPathU256 { indexes : < crate :: fermented :: generics :: Vec_u8_32 as ferment :: FFIConversionFrom < Vec < [u8 ; 32] > >> :: ffi_from (ffi_ref . indexes) , hardened : < crate :: fermented :: generics :: Vec_bool as ferment :: FFIConversionFrom < Vec < bool > >> :: ffi_from (ffi_ref . hardened) } } } impl ferment :: FFIConversionTo < dash_spv_crypto :: keys :: key :: IndexPathU256 > for dash_spv_crypto_keys_key_IndexPathU256 { unsafe fn ffi_to_const (obj : dash_spv_crypto :: keys :: key :: IndexPathU256) -> * const dash_spv_crypto_keys_key_IndexPathU256 { ferment :: boxed (dash_spv_crypto_keys_key_IndexPathU256 { indexes : < crate :: fermented :: generics :: Vec_u8_32 as ferment :: FFIConversionTo < Vec < [u8 ; 32] > >> :: ffi_to (obj . indexes) , hardened : < crate :: fermented :: generics :: Vec_bool as ferment :: FFIConversionTo < Vec < bool > >> :: ffi_to (obj . hardened) }) } } impl Drop for dash_spv_crypto_keys_key_IndexPathU256 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . indexes) ; ferment :: unbox_any (ffi_ref . hardened) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_IndexPathU256_ctor < > (indexes : * mut crate :: fermented :: generics :: Vec_u8_32 , hardened : * mut crate :: fermented :: generics :: Vec_bool) -> * mut dash_spv_crypto_keys_key_IndexPathU256 { ferment :: boxed (dash_spv_crypto_keys_key_IndexPathU256 { indexes , hardened }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_IndexPathU256_destroy < > (ffi : * mut dash_spv_crypto_keys_key_IndexPathU256) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_IndexPathU256_get_indexes < > (obj : * const dash_spv_crypto_keys_key_IndexPathU256) -> * mut crate :: fermented :: generics :: Vec_u8_32 { (* obj) . indexes } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_IndexPathU256_get_hardened < > (obj : * const dash_spv_crypto_keys_key_IndexPathU256) -> * mut crate :: fermented :: generics :: Vec_bool { (* obj) . hardened } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_IndexPathU256_set_indexes < > (obj : * const dash_spv_crypto_keys_key_IndexPathU256) -> * mut crate :: fermented :: generics :: Vec_u8_32 { (* obj) . indexes } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_IndexPathU256_set_hardened < > (obj : * const dash_spv_crypto_keys_key_IndexPathU256) -> * mut crate :: fermented :: generics :: Vec_bool { (* obj) . hardened } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`OpaqueKey`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_crypto_keys_key_OpaqueKey { ECDSA (* mut dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) , BLS (* mut dash_spv_crypto :: keys :: bls_key :: BLSKey) , ED25519 (* mut dash_spv_crypto :: keys :: ed25519_key :: ED25519Key) } impl ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: OpaqueKey > for dash_spv_crypto_keys_key_OpaqueKey { unsafe fn ffi_from_const (ffi : * const dash_spv_crypto_keys_key_OpaqueKey) -> dash_spv_crypto :: keys :: key :: OpaqueKey { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_crypto_keys_key_OpaqueKey :: ECDSA (o_0) => dash_spv_crypto :: keys :: key :: OpaqueKey :: ECDSA ((& * * o_0) . clone ()) , dash_spv_crypto_keys_key_OpaqueKey :: BLS (o_0) => dash_spv_crypto :: keys :: key :: OpaqueKey :: BLS ((& * * o_0) . clone ()) , dash_spv_crypto_keys_key_OpaqueKey :: ED25519 (o_0) => dash_spv_crypto :: keys :: key :: OpaqueKey :: ED25519 ((& * * o_0) . clone ()) } } } impl ferment :: FFIConversionTo < dash_spv_crypto :: keys :: key :: OpaqueKey > for dash_spv_crypto_keys_key_OpaqueKey { unsafe fn ffi_to_const (obj : dash_spv_crypto :: keys :: key :: OpaqueKey) -> * const dash_spv_crypto_keys_key_OpaqueKey { ferment :: boxed (match obj { dash_spv_crypto :: keys :: key :: OpaqueKey :: ECDSA (o_0) => dash_spv_crypto_keys_key_OpaqueKey :: ECDSA (ferment :: boxed (o_0)) , dash_spv_crypto :: keys :: key :: OpaqueKey :: BLS (o_0) => dash_spv_crypto_keys_key_OpaqueKey :: BLS (ferment :: boxed (o_0)) , dash_spv_crypto :: keys :: key :: OpaqueKey :: ED25519 (o_0) => dash_spv_crypto_keys_key_OpaqueKey :: ED25519 (ferment :: boxed (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dash_spv_crypto_keys_key_OpaqueKey { fn drop (& mut self) { unsafe { match self { dash_spv_crypto_keys_key_OpaqueKey :: ECDSA (o_0) => { ferment :: unbox_any (* o_0) ; } , dash_spv_crypto_keys_key_OpaqueKey :: BLS (o_0) => { ferment :: unbox_any (* o_0) ; } , dash_spv_crypto_keys_key_OpaqueKey :: ED25519 (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_ECDSA_ctor (o_o_0 : * mut dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey) -> * mut dash_spv_crypto_keys_key_OpaqueKey { ferment :: boxed (dash_spv_crypto_keys_key_OpaqueKey :: ECDSA (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_BLS_ctor (o_o_0 : * mut dash_spv_crypto :: keys :: bls_key :: BLSKey) -> * mut dash_spv_crypto_keys_key_OpaqueKey { ferment :: boxed (dash_spv_crypto_keys_key_OpaqueKey :: BLS (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_ED25519_ctor (o_o_0 : * mut dash_spv_crypto :: keys :: ed25519_key :: ED25519Key) -> * mut dash_spv_crypto_keys_key_OpaqueKey { ferment :: boxed (dash_spv_crypto_keys_key_OpaqueKey :: ED25519 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_OpaqueKey_destroy < > (ffi : * mut dash_spv_crypto_keys_key_OpaqueKey) { ferment :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::key::key_kind_from_index`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_key_key_kind_from_index (index : i16) -> * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind { let obj = dash_spv_crypto :: keys :: key :: key_kind_from_index (index) ; < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind as ferment :: FFIConversionTo < dash_spv_crypto :: keys :: key :: KeyKind >> :: ffi_to (obj) } } # [repr (C)] # [derive (Clone)] pub struct dash_spv_crypto_keys_IKey_VTable { # [doc = "FFI-representation of the [`dash_spv_crypto::keys::IKey::kind`]"] pub kind : unsafe extern "C" fn (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind , # [doc = "FFI-representation of the [`dash_spv_crypto::keys::IKey::secret_key_string`]"] pub secret_key_string : unsafe extern "C" fn (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut std :: os :: raw :: c_char , # [doc = "FFI-representation of the [`dash_spv_crypto::keys::IKey::has_private_key`]"] pub has_private_key : unsafe extern "C" fn (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> bool , # [doc = "FFI-representation of the [`dash_spv_crypto::keys::IKey::address_with_public_key_data`]"] pub address_with_public_key_data : unsafe extern "C" fn (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , chain : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut std :: os :: raw :: c_char , # [doc = "FFI-representation of the [`dash_spv_crypto::keys::IKey::sign`]"] pub sign : unsafe extern "C" fn (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Vec_u8 , # [doc = "FFI-representation of the [`dash_spv_crypto::keys::IKey::verify`]"] pub verify : unsafe extern "C" fn (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , message_digest : * mut crate :: fermented :: generics :: Slice_u8 , signature : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_crypto_keys_KeyError , # [doc = "FFI-representation of the [`dash_spv_crypto::keys::IKey::secret_key`]"] pub secret_key : unsafe extern "C" fn (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Arr_u8_32 , # [doc = "FFI-representation of the [`dash_spv_crypto::keys::IKey::chaincode`]"] pub chaincode : unsafe extern "C" fn (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Arr_u8_32 , # [doc = "FFI-representation of the [`dash_spv_crypto::keys::IKey::fingerprint`]"] pub fingerprint : unsafe extern "C" fn (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> u32 , # [doc = "FFI-representation of the [`dash_spv_crypto::keys::IKey::private_key_data`]"] pub private_key_data : unsafe extern "C" fn (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError , # [doc = "FFI-representation of the [`dash_spv_crypto::keys::IKey::public_key_data`]"] pub public_key_data : unsafe extern "C" fn (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Vec_u8 , # [doc = "FFI-representation of the [`dash_spv_crypto::keys::IKey::extended_private_key_data`]"] pub extended_private_key_data : unsafe extern "C" fn (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError , # [doc = "FFI-representation of the [`dash_spv_crypto::keys::IKey::extended_public_key_data`]"] pub extended_public_key_data : unsafe extern "C" fn (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError , # [doc = "FFI-representation of the [`dash_spv_crypto::keys::IKey::serialized_private_key_for_script`]"] pub serialized_private_key_for_script : unsafe extern "C" fn (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , chain_prefix : u8) -> * mut std :: os :: raw :: c_char , # [doc = "FFI-representation of the [`dash_spv_crypto::keys::IKey::hmac_256_data`]"] pub hmac_256_data : unsafe extern "C" fn (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Arr_u8_32 , # [doc = "FFI-representation of the [`dash_spv_crypto::keys::IKey::forget_private_key`]"] pub forget_private_key : unsafe extern "C" fn (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) , # [doc = "FFI-representation of the [`dash_spv_crypto::keys::IKey::create_signature`]"] pub create_signature : unsafe extern "C" fn (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , tx_input_script : * mut crate :: fermented :: generics :: Vec_u8 , tx_data : * mut crate :: fermented :: generics :: Vec_u8) -> * mut crate :: fermented :: generics :: Vec_u8 , # [doc = "FFI-representation of the [`dash_spv_crypto::keys::IKey::sign_message_digest`]"] pub sign_message_digest : unsafe extern "C" fn (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , digest : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Vec_u8 , # [doc = "FFI-representation of the [`dash_spv_crypto::keys::IKey::private_key_data_equal_to`]"] pub private_key_data_equal_to : unsafe extern "C" fn (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , other_private_key_data : * mut crate :: fermented :: generics :: Arr_u8_32) -> bool , # [doc = "FFI-representation of the [`dash_spv_crypto::keys::IKey::public_key_data_equal_to`]"] pub public_key_data_equal_to : unsafe extern "C" fn (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , other_public_key_data : * mut crate :: fermented :: generics :: Vec_u8) -> bool } # [repr (C)] # [derive (Clone)] pub struct dash_spv_crypto_keys_IKey { object : * const () , vtable : * const dash_spv_crypto_keys_IKey_VTable } pub mod bls_key { use crate as dash_spv_apple_bindings ; # [no_mangle] pub static dash_spv_crypto_keys_bls_key_BLSKey_dash_spv_crypto_keys_IKey : crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey_VTable = { # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_kind (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: kind (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey)) ; < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind as ferment :: FFIConversionTo < dash_spv_crypto :: keys :: key :: KeyKind >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_secret_key_string (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: secret_key_string (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_has_private_key (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> bool { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: has_private_key (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey)) ; obj } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_address_with_public_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , chain : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: address_with_public_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_sign (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: sign (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_verify (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , message_digest : * mut crate :: fermented :: generics :: Slice_u8 , signature : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: verify (& mut * ((* self_) . object as * mut dash_spv_crypto :: keys :: bls_key :: BLSKey) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (message_digest))) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (signature)))) ; < crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < bool , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_secret_key (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: secret_key (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey)) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_chaincode (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: chaincode (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey)) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_fingerprint (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> u32 { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: fingerprint (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey)) ; obj } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_private_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: private_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey)) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_public_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: public_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey)) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_extended_private_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: extended_private_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey)) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: util :: sec_vec :: SecVec , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_extended_public_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: extended_public_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey)) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_serialized_private_key_for_script (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , chain_prefix : u8) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: serialized_private_key_for_script (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey) , chain_prefix) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_hmac_256_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: hmac_256_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_forget_private_key (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: forget_private_key (& mut * ((* self_) . object as * mut dash_spv_crypto :: keys :: bls_key :: BLSKey)) ; ; } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_create_signature (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , tx_input_script : * mut crate :: fermented :: generics :: Vec_u8 , tx_data : * mut crate :: fermented :: generics :: Vec_u8) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: create_signature (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (tx_input_script))) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (tx_data)))) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_sign_message_digest (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , digest : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: sign_message_digest (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (digest)) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_private_key_data_equal_to (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , other_private_key_data : * mut crate :: fermented :: generics :: Arr_u8_32) -> bool { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: private_key_data_equal_to (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (other_private_key_data)))) ; obj } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_public_key_data_equal_to (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , other_public_key_data : * mut crate :: fermented :: generics :: Vec_u8) -> bool { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: public_key_data_equal_to (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (other_public_key_data)))) ; obj } crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey_VTable { kind : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_kind , secret_key_string : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_secret_key_string , has_private_key : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_has_private_key , address_with_public_key_data : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_address_with_public_key_data , sign : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_sign , verify : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_verify , secret_key : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_secret_key , chaincode : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_chaincode , fingerprint : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_fingerprint , private_key_data : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_private_key_data , public_key_data : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_public_key_data , extended_private_key_data : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_extended_private_key_data , extended_public_key_data : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_extended_public_key_data , serialized_private_key_for_script : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_serialized_private_key_for_script , hmac_256_data : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_hmac_256_data , forget_private_key : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_forget_private_key , create_signature : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_create_signature , sign_message_digest : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_sign_message_digest , private_key_data_equal_to : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_private_key_data_equal_to , public_key_data_equal_to : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_bls_key_BLSKey_public_key_data_equal_to } } ; # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_as_crate_fermented_types_dash_spv_crypto_keys_dash_spv_crypto_keys_IKey (obj : * const dash_spv_crypto :: keys :: bls_key :: BLSKey) -> crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey { crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey { object : obj as * const () , vtable : & dash_spv_crypto_keys_bls_key_BLSKey_dash_spv_crypto_keys_IKey } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_as_crate_fermented_types_dash_spv_crypto_keys_dash_spv_crypto_keys_IKey_destroy (obj : crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) { ferment :: unbox_any (obj . object as * mut dash_spv_crypto :: keys :: bls_key :: BLSKey) ; } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::kind`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_IKey_kind (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: kind (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey)) ; < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind as ferment :: FFIConversionTo < dash_spv_crypto :: keys :: key :: KeyKind >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::kind`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_kind (self_ : * mut dash_spv_crypto :: keys :: bls_key :: BLSKey) -> * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: kind (& * self_) ; < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind as ferment :: FFIConversionTo < dash_spv_crypto :: keys :: key :: KeyKind >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::secret_key_string`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_IKey_secret_key_string (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: secret_key_string (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::secret_key_string`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_secret_key_string (self_ : * mut dash_spv_crypto :: keys :: bls_key :: BLSKey) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: secret_key_string (& * self_) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::has_private_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_IKey_has_private_key (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> bool { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: has_private_key (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::has_private_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_has_private_key (self_ : * mut dash_spv_crypto :: keys :: bls_key :: BLSKey) -> bool { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: has_private_key (& * self_) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::address_with_public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_IKey_address_with_public_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , chain : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: address_with_public_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::address_with_public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_address_with_public_key_data (self_ : * mut dash_spv_crypto :: keys :: bls_key :: BLSKey , chain : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: address_with_public_key_data (& * self_ , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::sign`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_IKey_sign (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: sign (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::sign`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_sign (self_ : * mut dash_spv_crypto :: keys :: bls_key :: BLSKey , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: sign (& * self_ , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::verify`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_IKey_verify (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , message_digest : * mut crate :: fermented :: generics :: Slice_u8 , signature : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: verify (& mut * ((* self_) . object as * mut dash_spv_crypto :: keys :: bls_key :: BLSKey) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (message_digest))) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (signature)))) ; < crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < bool , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::verify`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_verify (self_ : * mut dash_spv_crypto :: keys :: bls_key :: BLSKey , message_digest : * mut crate :: fermented :: generics :: Slice_u8 , signature : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: verify (& mut * self_ , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (message_digest))) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (signature)))) ; < crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < bool , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::secret_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_IKey_secret_key (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: secret_key (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey)) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::secret_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_secret_key (self_ : * mut dash_spv_crypto :: keys :: bls_key :: BLSKey) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: secret_key (& * self_) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::chaincode`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_IKey_chaincode (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: chaincode (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey)) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::chaincode`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_chaincode (self_ : * mut dash_spv_crypto :: keys :: bls_key :: BLSKey) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: chaincode (& * self_) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::fingerprint`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_IKey_fingerprint (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> u32 { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: fingerprint (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::fingerprint`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_fingerprint (self_ : * mut dash_spv_crypto :: keys :: bls_key :: BLSKey) -> u32 { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: fingerprint (& * self_) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::private_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_IKey_private_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: private_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey)) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::private_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_private_key_data (self_ : * mut dash_spv_crypto :: keys :: bls_key :: BLSKey) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: private_key_data (& * self_) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_IKey_public_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: public_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey)) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_public_key_data (self_ : * mut dash_spv_crypto :: keys :: bls_key :: BLSKey) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: public_key_data (& * self_) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::extended_private_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_IKey_extended_private_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: extended_private_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey)) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: util :: sec_vec :: SecVec , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::extended_private_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_extended_private_key_data (self_ : * mut dash_spv_crypto :: keys :: bls_key :: BLSKey) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: extended_private_key_data (& * self_) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: util :: sec_vec :: SecVec , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::extended_public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_IKey_extended_public_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: extended_public_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey)) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::extended_public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_extended_public_key_data (self_ : * mut dash_spv_crypto :: keys :: bls_key :: BLSKey) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: extended_public_key_data (& * self_) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::serialized_private_key_for_script`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_IKey_serialized_private_key_for_script (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , chain_prefix : u8) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: serialized_private_key_for_script (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey) , chain_prefix) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::serialized_private_key_for_script`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_serialized_private_key_for_script (self_ : * mut dash_spv_crypto :: keys :: bls_key :: BLSKey , chain_prefix : u8) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: serialized_private_key_for_script (& * self_ , chain_prefix) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::hmac_256_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_IKey_hmac_256_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: hmac_256_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::hmac_256_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_hmac_256_data (self_ : * mut dash_spv_crypto :: keys :: bls_key :: BLSKey , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: hmac_256_data (& * self_ , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::forget_private_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_IKey_forget_private_key (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: forget_private_key (& mut * ((* self_) . object as * mut dash_spv_crypto :: keys :: bls_key :: BLSKey)) ; ; } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::forget_private_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_forget_private_key (self_ : * mut dash_spv_crypto :: keys :: bls_key :: BLSKey) { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: forget_private_key (& mut * self_) ; ; } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::sign_message_digest`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_IKey_sign_message_digest (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , digest : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: sign_message_digest (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (digest)) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::sign_message_digest`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_sign_message_digest (self_ : * mut dash_spv_crypto :: keys :: bls_key :: BLSKey , digest : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: sign_message_digest (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (digest)) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::private_key_data_equal_to`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_IKey_private_key_data_equal_to (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , other_private_key_data : * mut crate :: fermented :: generics :: Arr_u8_32) -> bool { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: private_key_data_equal_to (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (other_private_key_data)))) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::private_key_data_equal_to`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_private_key_data_equal_to (self_ : * mut dash_spv_crypto :: keys :: bls_key :: BLSKey , other_private_key_data : * mut crate :: fermented :: generics :: Arr_u8_32) -> bool { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: private_key_data_equal_to (& * self_ , Box :: leak (Box :: new (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (other_private_key_data)))) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::public_key_data_equal_to`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_IKey_public_key_data_equal_to (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , other_public_key_data : * mut crate :: fermented :: generics :: Vec_u8) -> bool { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: public_key_data_equal_to (& * ((* self_) . object as * const dash_spv_crypto :: keys :: bls_key :: BLSKey) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (other_public_key_data)))) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::public_key_data_equal_to`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_public_key_data_equal_to (self_ : * mut dash_spv_crypto :: keys :: bls_key :: BLSKey , other_public_key_data : * mut crate :: fermented :: generics :: Vec_u8) -> bool { let obj = < dash_spv_crypto :: keys :: bls_key :: BLSKey as dash_spv_crypto :: keys :: IKey > :: public_key_data_equal_to (& * self_ , Box :: leak (Box :: new (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (other_public_key_data)))) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::verify_signature`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_verify_signature (pubkey : * mut crate :: fermented :: generics :: Arr_u8_48 , use_legacy : bool , digest : * mut crate :: fermented :: generics :: Slice_u8 , signature : * mut crate :: fermented :: generics :: Arr_u8_96) -> bool { let obj = dash_spv_crypto :: keys :: bls_key :: BLSKey :: verify_signature (< crate :: fermented :: generics :: Arr_u8_48 as ferment :: FFIConversionFrom < [u8 ; 48] >> :: ffi_from (pubkey) , use_legacy , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (digest))) , < crate :: fermented :: generics :: Arr_u8_96 as ferment :: FFIConversionFrom < [u8 ; 96] >> :: ffi_from (signature)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::key_with_seed_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_key_with_seed_data (seed : * mut crate :: fermented :: generics :: Slice_u8 , use_legacy : bool) -> * mut dash_spv_crypto :: keys :: bls_key :: BLSKey { let obj = dash_spv_crypto :: keys :: bls_key :: BLSKey :: key_with_seed_data (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (seed))) , use_legacy) ; ferment :: boxed (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::key_with_secret_hex`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_key_with_secret_hex (string : * mut std :: os :: raw :: c_char , use_legacy : bool) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_hashes_hex_Error { let obj = dash_spv_crypto :: keys :: bls_key :: BLSKey :: key_with_secret_hex (Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (string))) , use_legacy) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_hashes_hex_Error as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: bls_key :: BLSKey , hashes :: hex :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::key_with_private_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_key_with_private_key (string : * mut std :: os :: raw :: c_char , use_legacy : bool) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: bls_key :: BLSKey :: key_with_private_key (Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (string))) , use_legacy) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: bls_key :: BLSKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::key_with_private_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_key_with_private_key_data (data : * mut crate :: fermented :: generics :: Slice_u8 , use_legacy : bool) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: bls_key :: BLSKey :: key_with_private_key_data (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data))) , use_legacy) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: bls_key :: BLSKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::key_with_public_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_key_with_public_key (pubkey : * mut crate :: fermented :: generics :: Arr_u8_48 , use_legacy : bool) -> * mut dash_spv_crypto :: keys :: bls_key :: BLSKey { let obj = dash_spv_crypto :: keys :: bls_key :: BLSKey :: key_with_public_key (< crate :: fermented :: generics :: Arr_u8_48 as ferment :: FFIConversionFrom < [u8 ; 48] >> :: ffi_from (pubkey) , use_legacy) ; ferment :: boxed (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::key_with_extended_private_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_key_with_extended_private_key_data (bytes : * mut crate :: fermented :: generics :: Slice_u8 , use_legacy : bool) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: bls_key :: BLSKey :: key_with_extended_private_key_data (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (bytes))) , use_legacy) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: bls_key :: BLSKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::migrate_from_legacy_extended_public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_migrate_from_legacy_extended_public_key_data (bytes : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: bls_key :: BLSKey :: migrate_from_legacy_extended_public_key_data (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (bytes)))) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: bls_key :: BLSKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::migrate_from_basic_extended_public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_migrate_from_basic_extended_public_key_data (bytes : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: bls_key :: BLSKey :: migrate_from_basic_extended_public_key_data (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (bytes)))) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: bls_key :: BLSKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::product`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_product (self_ : * mut dash_spv_crypto :: keys :: bls_key :: BLSKey , public_key : * mut dash_spv_crypto :: keys :: bls_key :: BLSKey) -> * mut crate :: fermented :: generics :: Result_ok_u8_arr_48_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: bls_key :: BLSKey :: product (& * self_ , Box :: leak (Box :: new ((& * public_key) . clone ()))) ; < crate :: fermented :: generics :: Result_ok_u8_arr_48_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < [u8 ; 48] , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::key_with_extended_public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_key_with_extended_public_key_data (bytes : * mut crate :: fermented :: generics :: Slice_u8 , use_legacy : bool) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: bls_key :: BLSKey :: key_with_extended_public_key_data (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (bytes))) , use_legacy) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: bls_key :: BLSKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::sign_digest`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_sign_digest (self_ : * mut dash_spv_crypto :: keys :: bls_key :: BLSKey , md : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Arr_u8_96 { let obj = dash_spv_crypto :: keys :: bls_key :: BLSKey :: sign_digest (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (md)) ; < crate :: fermented :: generics :: Arr_u8_96 as ferment :: FFIConversionTo < [u8 ; 96] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::sign_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_sign_data (self_ : * mut dash_spv_crypto :: keys :: bls_key :: BLSKey , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Arr_u8_96 { let obj = dash_spv_crypto :: keys :: bls_key :: BLSKey :: sign_data (& * self_ , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Arr_u8_96 as ferment :: FFIConversionTo < [u8 ; 96] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::extended_private_key_with_seed_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_extended_private_key_with_seed_data (seed : * mut crate :: fermented :: generics :: Slice_u8 , use_legacy : bool) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: bls_key :: BLSKey :: extended_private_key_with_seed_data (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (seed))) , use_legacy) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: bls_key :: BLSKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::hash160`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_hash160 (self_ : * mut dash_spv_crypto :: keys :: bls_key :: BLSKey) -> * mut crate :: fermented :: generics :: Arr_u8_20 { let obj = dash_spv_crypto :: keys :: bls_key :: BLSKey :: hash160 (& * self_) ; < crate :: fermented :: generics :: Arr_u8_20 as ferment :: FFIConversionTo < [u8 ; 20] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::bls_key::BLSKey::public_key_serialized`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_bls_key_BLSKey_public_key_serialized (self_ : * mut dash_spv_crypto :: keys :: bls_key :: BLSKey , use_legacy : bool) -> * mut crate :: fermented :: generics :: Result_ok_String_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: bls_key :: BLSKey :: public_key_serialized (& * self_ , use_legacy) ; < crate :: fermented :: generics :: Result_ok_String_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < String , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } } pub mod ed25519_key { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::key_with_extended_public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_key_with_extended_public_key_data (bytes : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ed25519_key_ED25519Key_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: ed25519_key :: ED25519Key :: key_with_extended_public_key_data (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (bytes)))) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ed25519_key_ED25519Key_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::key_with_extended_private_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_key_with_extended_private_key_data (bytes : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ed25519_key_ED25519Key_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: ed25519_key :: ED25519Key :: key_with_extended_private_key_data (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (bytes)))) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ed25519_key_ED25519Key_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::key_with_private_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_key_with_private_key (string : * mut std :: os :: raw :: c_char) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ed25519_key_ED25519Key_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: ed25519_key :: ED25519Key :: key_with_private_key (Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (string)))) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ed25519_key_ED25519Key_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::key_with_secret_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_key_with_secret_data (data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ed25519_key_ED25519Key_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_crypto :: keys :: ed25519_key :: ED25519Key :: key_with_secret_data (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_ed25519_key_ED25519Key_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::hash160`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_hash160 (self_ : * mut dash_spv_crypto :: keys :: ed25519_key :: ED25519Key) -> * mut crate :: fermented :: generics :: Arr_u8_20 { let obj = dash_spv_crypto :: keys :: ed25519_key :: ED25519Key :: hash160 (& * self_) ; < crate :: fermented :: generics :: Arr_u8_20 as ferment :: FFIConversionTo < [u8 ; 20] >> :: ffi_to (obj) } # [no_mangle] pub static dash_spv_crypto_keys_ed25519_key_ED25519Key_dash_spv_crypto_keys_IKey : crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey_VTable = { # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_kind (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: kind (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key)) ; < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind as ferment :: FFIConversionTo < dash_spv_crypto :: keys :: key :: KeyKind >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_secret_key_string (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: secret_key_string (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_has_private_key (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> bool { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: has_private_key (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key)) ; obj } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_address_with_public_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , chain : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: address_with_public_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_sign (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: sign (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_verify (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , message_digest : * mut crate :: fermented :: generics :: Slice_u8 , signature : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: verify (& mut * ((* self_) . object as * mut dash_spv_crypto :: keys :: ed25519_key :: ED25519Key) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (message_digest))) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (signature)))) ; < crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < bool , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_secret_key (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: secret_key (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key)) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_chaincode (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: chaincode (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key)) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_fingerprint (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> u32 { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: fingerprint (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key)) ; obj } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_private_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: private_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key)) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_public_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: public_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key)) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_extended_private_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: extended_private_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key)) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: util :: sec_vec :: SecVec , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_extended_public_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: extended_public_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key)) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_serialized_private_key_for_script (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , chain_prefix : u8) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: serialized_private_key_for_script (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key) , chain_prefix) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_hmac_256_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: hmac_256_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_forget_private_key (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: forget_private_key (& mut * ((* self_) . object as * mut dash_spv_crypto :: keys :: ed25519_key :: ED25519Key)) ; ; } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_create_signature (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , tx_input_script : * mut crate :: fermented :: generics :: Vec_u8 , tx_data : * mut crate :: fermented :: generics :: Vec_u8) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: create_signature (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (tx_input_script))) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (tx_data)))) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_sign_message_digest (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , digest : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: sign_message_digest (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (digest)) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_private_key_data_equal_to (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , other_private_key_data : * mut crate :: fermented :: generics :: Arr_u8_32) -> bool { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: private_key_data_equal_to (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (other_private_key_data)))) ; obj } # [no_mangle] unsafe extern "C" fn dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_public_key_data_equal_to (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , other_public_key_data : * mut crate :: fermented :: generics :: Vec_u8) -> bool { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: public_key_data_equal_to (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (other_public_key_data)))) ; obj } crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey_VTable { kind : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_kind , secret_key_string : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_secret_key_string , has_private_key : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_has_private_key , address_with_public_key_data : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_address_with_public_key_data , sign : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_sign , verify : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_verify , secret_key : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_secret_key , chaincode : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_chaincode , fingerprint : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_fingerprint , private_key_data : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_private_key_data , public_key_data : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_public_key_data , extended_private_key_data : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_extended_private_key_data , extended_public_key_data : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_extended_public_key_data , serialized_private_key_for_script : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_serialized_private_key_for_script , hmac_256_data : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_hmac_256_data , forget_private_key : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_forget_private_key , create_signature : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_create_signature , sign_message_digest : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_sign_message_digest , private_key_data_equal_to : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_private_key_data_equal_to , public_key_data_equal_to : dash_spv_crypto_keys_IKey_dash_spv_crypto_keys_ed25519_key_ED25519Key_public_key_data_equal_to } } ; # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_as_crate_fermented_types_dash_spv_crypto_keys_dash_spv_crypto_keys_IKey (obj : * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key) -> crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey { crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey { object : obj as * const () , vtable : & dash_spv_crypto_keys_ed25519_key_ED25519Key_dash_spv_crypto_keys_IKey } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_as_crate_fermented_types_dash_spv_crypto_keys_dash_spv_crypto_keys_IKey_destroy (obj : crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) { ferment :: unbox_any (obj . object as * mut dash_spv_crypto :: keys :: ed25519_key :: ED25519Key) ; } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::kind`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_IKey_kind (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: kind (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key)) ; < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind as ferment :: FFIConversionTo < dash_spv_crypto :: keys :: key :: KeyKind >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::kind`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_kind (self_ : * mut dash_spv_crypto :: keys :: ed25519_key :: ED25519Key) -> * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: kind (& * self_) ; < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_KeyKind as ferment :: FFIConversionTo < dash_spv_crypto :: keys :: key :: KeyKind >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::secret_key_string`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_IKey_secret_key_string (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: secret_key_string (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::secret_key_string`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_secret_key_string (self_ : * mut dash_spv_crypto :: keys :: ed25519_key :: ED25519Key) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: secret_key_string (& * self_) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::has_private_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_IKey_has_private_key (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> bool { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: has_private_key (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::has_private_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_has_private_key (self_ : * mut dash_spv_crypto :: keys :: ed25519_key :: ED25519Key) -> bool { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: has_private_key (& * self_) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::address_with_public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_IKey_address_with_public_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , chain : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: address_with_public_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::address_with_public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_address_with_public_key_data (self_ : * mut dash_spv_crypto :: keys :: ed25519_key :: ED25519Key , chain : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: address_with_public_key_data (& * self_ , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::sign`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_IKey_sign (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: sign (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::sign`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_sign (self_ : * mut dash_spv_crypto :: keys :: ed25519_key :: ED25519Key , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: sign (& * self_ , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::verify`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_IKey_verify (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , message_digest : * mut crate :: fermented :: generics :: Slice_u8 , signature : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: verify (& mut * ((* self_) . object as * mut dash_spv_crypto :: keys :: ed25519_key :: ED25519Key) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (message_digest))) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (signature)))) ; < crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < bool , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::verify`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_verify (self_ : * mut dash_spv_crypto :: keys :: ed25519_key :: ED25519Key , message_digest : * mut crate :: fermented :: generics :: Slice_u8 , signature : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: verify (& mut * self_ , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (message_digest))) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (signature)))) ; < crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < bool , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::secret_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_IKey_secret_key (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: secret_key (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key)) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::secret_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_secret_key (self_ : * mut dash_spv_crypto :: keys :: ed25519_key :: ED25519Key) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: secret_key (& * self_) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::chaincode`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_IKey_chaincode (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: chaincode (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key)) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::chaincode`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_chaincode (self_ : * mut dash_spv_crypto :: keys :: ed25519_key :: ED25519Key) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: chaincode (& * self_) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::fingerprint`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_IKey_fingerprint (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> u32 { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: fingerprint (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key)) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::fingerprint`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_fingerprint (self_ : * mut dash_spv_crypto :: keys :: ed25519_key :: ED25519Key) -> u32 { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: fingerprint (& * self_) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::private_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_IKey_private_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: private_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key)) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::private_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_private_key_data (self_ : * mut dash_spv_crypto :: keys :: ed25519_key :: ED25519Key) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: private_key_data (& * self_) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_IKey_public_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: public_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key)) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_public_key_data (self_ : * mut dash_spv_crypto :: keys :: ed25519_key :: ED25519Key) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: public_key_data (& * self_) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::extended_private_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_IKey_extended_private_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: extended_private_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key)) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: util :: sec_vec :: SecVec , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::extended_private_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_extended_private_key_data (self_ : * mut dash_spv_crypto :: keys :: ed25519_key :: ED25519Key) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: extended_private_key_data (& * self_) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: util :: sec_vec :: SecVec , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::extended_public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_IKey_extended_public_key_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: extended_public_key_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key)) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::extended_public_key_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_extended_public_key_data (self_ : * mut dash_spv_crypto :: keys :: ed25519_key :: ED25519Key) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: extended_public_key_data (& * self_) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::serialized_private_key_for_script`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_IKey_serialized_private_key_for_script (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , chain_prefix : u8) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: serialized_private_key_for_script (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key) , chain_prefix) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::serialized_private_key_for_script`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_serialized_private_key_for_script (self_ : * mut dash_spv_crypto :: keys :: ed25519_key :: ED25519Key , chain_prefix : u8) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: serialized_private_key_for_script (& * self_ , chain_prefix) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::hmac_256_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_IKey_hmac_256_data (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: hmac_256_data (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::hmac_256_data`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_hmac_256_data (self_ : * mut dash_spv_crypto :: keys :: ed25519_key :: ED25519Key , data : * mut crate :: fermented :: generics :: Slice_u8) -> * mut crate :: fermented :: generics :: Arr_u8_32 { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: hmac_256_data (& * self_ , Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (data)))) ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::forget_private_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_IKey_forget_private_key (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey) { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: forget_private_key (& mut * ((* self_) . object as * mut dash_spv_crypto :: keys :: ed25519_key :: ED25519Key)) ; ; } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::forget_private_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_forget_private_key (self_ : * mut dash_spv_crypto :: keys :: ed25519_key :: ED25519Key) { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: forget_private_key (& mut * self_) ; ; } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::sign_message_digest`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_IKey_sign_message_digest (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , digest : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: sign_message_digest (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (digest)) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::sign_message_digest`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_sign_message_digest (self_ : * mut dash_spv_crypto :: keys :: ed25519_key :: ED25519Key , digest : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: sign_message_digest (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (digest)) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::private_key_data_equal_to`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_IKey_private_key_data_equal_to (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , other_private_key_data : * mut crate :: fermented :: generics :: Arr_u8_32) -> bool { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: private_key_data_equal_to (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (other_private_key_data)))) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::private_key_data_equal_to`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_private_key_data_equal_to (self_ : * mut dash_spv_crypto :: keys :: ed25519_key :: ED25519Key , other_private_key_data : * mut crate :: fermented :: generics :: Arr_u8_32) -> bool { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: private_key_data_equal_to (& * self_ , Box :: leak (Box :: new (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (other_private_key_data)))) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::public_key_data_equal_to`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_IKey_public_key_data_equal_to (self_ : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_IKey , other_public_key_data : * mut crate :: fermented :: generics :: Vec_u8) -> bool { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: public_key_data_equal_to (& * ((* self_) . object as * const dash_spv_crypto :: keys :: ed25519_key :: ED25519Key) , Box :: leak (Box :: new (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (other_public_key_data)))) ; obj } # [doc = "FFI-representation of the [`dash_spv_crypto::keys::ed25519_key::ED25519Key::public_key_data_equal_to`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_ed25519_key_ED25519Key_public_key_data_equal_to (self_ : * mut dash_spv_crypto :: keys :: ed25519_key :: ED25519Key , other_public_key_data : * mut crate :: fermented :: generics :: Vec_u8) -> bool { let obj = < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key as dash_spv_crypto :: keys :: IKey > :: public_key_data_equal_to (& * self_ , Box :: leak (Box :: new (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (other_public_key_data)))) ; obj } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`KeyError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_crypto_keys_KeyError { WrongFormat , WrongLength (usize) , Extended (bool) , UnableToDerive , DHKeyExchange , CCCrypt (i32) , EmptySecKey , Product , Any (* mut std :: os :: raw :: c_char) } impl ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: KeyError > for dash_spv_crypto_keys_KeyError { unsafe fn ffi_from_const (ffi : * const dash_spv_crypto_keys_KeyError) -> dash_spv_crypto :: keys :: KeyError { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_crypto_keys_KeyError :: WrongFormat => dash_spv_crypto :: keys :: KeyError :: WrongFormat , dash_spv_crypto_keys_KeyError :: WrongLength (o_0) => dash_spv_crypto :: keys :: KeyError :: WrongLength (* o_0) , dash_spv_crypto_keys_KeyError :: Extended (o_0) => dash_spv_crypto :: keys :: KeyError :: Extended (* o_0) , dash_spv_crypto_keys_KeyError :: UnableToDerive => dash_spv_crypto :: keys :: KeyError :: UnableToDerive , dash_spv_crypto_keys_KeyError :: DHKeyExchange => dash_spv_crypto :: keys :: KeyError :: DHKeyExchange , dash_spv_crypto_keys_KeyError :: CCCrypt (o_0) => dash_spv_crypto :: keys :: KeyError :: CCCrypt (* o_0) , dash_spv_crypto_keys_KeyError :: EmptySecKey => dash_spv_crypto :: keys :: KeyError :: EmptySecKey , dash_spv_crypto_keys_KeyError :: Product => dash_spv_crypto :: keys :: KeyError :: Product , dash_spv_crypto_keys_KeyError :: Any (o_0) => dash_spv_crypto :: keys :: KeyError :: Any (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dash_spv_crypto :: keys :: KeyError > for dash_spv_crypto_keys_KeyError { unsafe fn ffi_to_const (obj : dash_spv_crypto :: keys :: KeyError) -> * const dash_spv_crypto_keys_KeyError { ferment :: boxed (match obj { dash_spv_crypto :: keys :: KeyError :: WrongFormat => dash_spv_crypto_keys_KeyError :: WrongFormat , dash_spv_crypto :: keys :: KeyError :: WrongLength (o_0) => dash_spv_crypto_keys_KeyError :: WrongLength (o_0) , dash_spv_crypto :: keys :: KeyError :: Extended (o_0) => dash_spv_crypto_keys_KeyError :: Extended (o_0) , dash_spv_crypto :: keys :: KeyError :: UnableToDerive => dash_spv_crypto_keys_KeyError :: UnableToDerive , dash_spv_crypto :: keys :: KeyError :: DHKeyExchange => dash_spv_crypto_keys_KeyError :: DHKeyExchange , dash_spv_crypto :: keys :: KeyError :: CCCrypt (o_0) => dash_spv_crypto_keys_KeyError :: CCCrypt (o_0) , dash_spv_crypto :: keys :: KeyError :: EmptySecKey => dash_spv_crypto_keys_KeyError :: EmptySecKey , dash_spv_crypto :: keys :: KeyError :: Product => dash_spv_crypto_keys_KeyError :: Product , dash_spv_crypto :: keys :: KeyError :: Any (o_0) => dash_spv_crypto_keys_KeyError :: Any (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dash_spv_crypto_keys_KeyError { fn drop (& mut self) { unsafe { match self { dash_spv_crypto_keys_KeyError :: WrongFormat => { } , dash_spv_crypto_keys_KeyError :: WrongLength (o_0) => { ; } , dash_spv_crypto_keys_KeyError :: Extended (o_0) => { ; } , dash_spv_crypto_keys_KeyError :: UnableToDerive => { } , dash_spv_crypto_keys_KeyError :: DHKeyExchange => { } , dash_spv_crypto_keys_KeyError :: CCCrypt (o_0) => { ; } , dash_spv_crypto_keys_KeyError :: EmptySecKey => { } , dash_spv_crypto_keys_KeyError :: Product => { } , dash_spv_crypto_keys_KeyError :: Any (o_0) => { ferment :: unbox_string (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_KeyError_WrongFormat_ctor () -> * mut dash_spv_crypto_keys_KeyError { ferment :: boxed (dash_spv_crypto_keys_KeyError :: WrongFormat { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_KeyError_WrongLength_ctor (o_o_0 : usize) -> * mut dash_spv_crypto_keys_KeyError { ferment :: boxed (dash_spv_crypto_keys_KeyError :: WrongLength (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_KeyError_Extended_ctor (o_o_0 : bool) -> * mut dash_spv_crypto_keys_KeyError { ferment :: boxed (dash_spv_crypto_keys_KeyError :: Extended (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_KeyError_UnableToDerive_ctor () -> * mut dash_spv_crypto_keys_KeyError { ferment :: boxed (dash_spv_crypto_keys_KeyError :: UnableToDerive { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_KeyError_DHKeyExchange_ctor () -> * mut dash_spv_crypto_keys_KeyError { ferment :: boxed (dash_spv_crypto_keys_KeyError :: DHKeyExchange { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_KeyError_CCCrypt_ctor (o_o_0 : i32) -> * mut dash_spv_crypto_keys_KeyError { ferment :: boxed (dash_spv_crypto_keys_KeyError :: CCCrypt (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_KeyError_EmptySecKey_ctor () -> * mut dash_spv_crypto_keys_KeyError { ferment :: boxed (dash_spv_crypto_keys_KeyError :: EmptySecKey { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_KeyError_Product_ctor () -> * mut dash_spv_crypto_keys_KeyError { ferment :: boxed (dash_spv_crypto_keys_KeyError :: Product { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_KeyError_Any_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dash_spv_crypto_keys_KeyError { ferment :: boxed (dash_spv_crypto_keys_KeyError :: Any (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_crypto_keys_KeyError_destroy < > (ffi : * mut dash_spv_crypto_keys_KeyError) { ferment :: unbox_any (ffi) ; } } } pub mod drive_proof_verifier { use crate as dash_spv_apple_bindings ; pub mod types { use crate as dash_spv_apple_bindings ; } pub mod error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`ContextProviderError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum drive_proof_verifier_error_ContextProviderError { Generic (* mut std :: os :: raw :: c_char) , Config (* mut std :: os :: raw :: c_char) , DataContractFailure (* mut std :: os :: raw :: c_char) , InvalidQuorum (* mut std :: os :: raw :: c_char) , ActivationForkError (* mut std :: os :: raw :: c_char) , AsyncError (* mut std :: os :: raw :: c_char) } impl ferment :: FFIConversionFrom < drive_proof_verifier :: error :: ContextProviderError > for drive_proof_verifier_error_ContextProviderError { unsafe fn ffi_from_const (ffi : * const drive_proof_verifier_error_ContextProviderError) -> drive_proof_verifier :: error :: ContextProviderError { let ffi_ref = & * ffi ; match ffi_ref { drive_proof_verifier_error_ContextProviderError :: Generic (o_0) => drive_proof_verifier :: error :: ContextProviderError :: Generic (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , drive_proof_verifier_error_ContextProviderError :: Config (o_0) => drive_proof_verifier :: error :: ContextProviderError :: Config (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , drive_proof_verifier_error_ContextProviderError :: DataContractFailure (o_0) => drive_proof_verifier :: error :: ContextProviderError :: DataContractFailure (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , drive_proof_verifier_error_ContextProviderError :: InvalidQuorum (o_0) => drive_proof_verifier :: error :: ContextProviderError :: InvalidQuorum (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , drive_proof_verifier_error_ContextProviderError :: ActivationForkError (o_0) => drive_proof_verifier :: error :: ContextProviderError :: ActivationForkError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , drive_proof_verifier_error_ContextProviderError :: AsyncError (o_0) => drive_proof_verifier :: error :: ContextProviderError :: AsyncError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < drive_proof_verifier :: error :: ContextProviderError > for drive_proof_verifier_error_ContextProviderError { unsafe fn ffi_to_const (obj : drive_proof_verifier :: error :: ContextProviderError) -> * const drive_proof_verifier_error_ContextProviderError { ferment :: boxed (match obj { drive_proof_verifier :: error :: ContextProviderError :: Generic (o_0) => drive_proof_verifier_error_ContextProviderError :: Generic (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , drive_proof_verifier :: error :: ContextProviderError :: Config (o_0) => drive_proof_verifier_error_ContextProviderError :: Config (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , drive_proof_verifier :: error :: ContextProviderError :: DataContractFailure (o_0) => drive_proof_verifier_error_ContextProviderError :: DataContractFailure (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , drive_proof_verifier :: error :: ContextProviderError :: InvalidQuorum (o_0) => drive_proof_verifier_error_ContextProviderError :: InvalidQuorum (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , drive_proof_verifier :: error :: ContextProviderError :: ActivationForkError (o_0) => drive_proof_verifier_error_ContextProviderError :: ActivationForkError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , drive_proof_verifier :: error :: ContextProviderError :: AsyncError (o_0) => drive_proof_verifier_error_ContextProviderError :: AsyncError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for drive_proof_verifier_error_ContextProviderError { fn drop (& mut self) { unsafe { match self { drive_proof_verifier_error_ContextProviderError :: Generic (o_0) => { ferment :: unbox_string (* o_0) ; } , drive_proof_verifier_error_ContextProviderError :: Config (o_0) => { ferment :: unbox_string (* o_0) ; } , drive_proof_verifier_error_ContextProviderError :: DataContractFailure (o_0) => { ferment :: unbox_string (* o_0) ; } , drive_proof_verifier_error_ContextProviderError :: InvalidQuorum (o_0) => { ferment :: unbox_string (* o_0) ; } , drive_proof_verifier_error_ContextProviderError :: ActivationForkError (o_0) => { ferment :: unbox_string (* o_0) ; } , drive_proof_verifier_error_ContextProviderError :: AsyncError (o_0) => { ferment :: unbox_string (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn drive_proof_verifier_error_ContextProviderError_Generic_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut drive_proof_verifier_error_ContextProviderError { ferment :: boxed (drive_proof_verifier_error_ContextProviderError :: Generic (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn drive_proof_verifier_error_ContextProviderError_Config_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut drive_proof_verifier_error_ContextProviderError { ferment :: boxed (drive_proof_verifier_error_ContextProviderError :: Config (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn drive_proof_verifier_error_ContextProviderError_DataContractFailure_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut drive_proof_verifier_error_ContextProviderError { ferment :: boxed (drive_proof_verifier_error_ContextProviderError :: DataContractFailure (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn drive_proof_verifier_error_ContextProviderError_InvalidQuorum_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut drive_proof_verifier_error_ContextProviderError { ferment :: boxed (drive_proof_verifier_error_ContextProviderError :: InvalidQuorum (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn drive_proof_verifier_error_ContextProviderError_ActivationForkError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut drive_proof_verifier_error_ContextProviderError { ferment :: boxed (drive_proof_verifier_error_ContextProviderError :: ActivationForkError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn drive_proof_verifier_error_ContextProviderError_AsyncError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut drive_proof_verifier_error_ContextProviderError { ferment :: boxed (drive_proof_verifier_error_ContextProviderError :: AsyncError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn drive_proof_verifier_error_ContextProviderError_destroy < > (ffi : * mut drive_proof_verifier_error_ContextProviderError) { ferment :: unbox_any (ffi) ; } } } pub mod data_contracts { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`SystemDataContract`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum data_contracts_SystemDataContract { Withdrawals = 0 , MasternodeRewards = 1 , FeatureFlags = 2 , DPNS = 3 , Dashpay = 4 , WalletUtils = 5 } impl ferment :: FFIConversionFrom < data_contracts :: SystemDataContract > for data_contracts_SystemDataContract { unsafe fn ffi_from_const (ffi : * const data_contracts_SystemDataContract) -> data_contracts :: SystemDataContract { let ffi_ref = & * ffi ; match ffi_ref { data_contracts_SystemDataContract :: Withdrawals => data_contracts :: SystemDataContract :: Withdrawals , data_contracts_SystemDataContract :: MasternodeRewards => data_contracts :: SystemDataContract :: MasternodeRewards , data_contracts_SystemDataContract :: FeatureFlags => data_contracts :: SystemDataContract :: FeatureFlags , data_contracts_SystemDataContract :: DPNS => data_contracts :: SystemDataContract :: DPNS , data_contracts_SystemDataContract :: Dashpay => data_contracts :: SystemDataContract :: Dashpay , data_contracts_SystemDataContract :: WalletUtils => data_contracts :: SystemDataContract :: WalletUtils } } } impl ferment :: FFIConversionTo < data_contracts :: SystemDataContract > for data_contracts_SystemDataContract { unsafe fn ffi_to_const (obj : data_contracts :: SystemDataContract) -> * const data_contracts_SystemDataContract { ferment :: boxed (match obj { data_contracts :: SystemDataContract :: Withdrawals => data_contracts_SystemDataContract :: Withdrawals , data_contracts :: SystemDataContract :: MasternodeRewards => data_contracts_SystemDataContract :: MasternodeRewards , data_contracts :: SystemDataContract :: FeatureFlags => data_contracts_SystemDataContract :: FeatureFlags , data_contracts :: SystemDataContract :: DPNS => data_contracts_SystemDataContract :: DPNS , data_contracts :: SystemDataContract :: Dashpay => data_contracts_SystemDataContract :: Dashpay , data_contracts :: SystemDataContract :: WalletUtils => data_contracts_SystemDataContract :: WalletUtils , _ => unreachable ! ("This is unreachable") }) } } impl Drop for data_contracts_SystemDataContract { fn drop (& mut self) { unsafe { match self { data_contracts_SystemDataContract :: Withdrawals => { } , data_contracts_SystemDataContract :: MasternodeRewards => { } , data_contracts_SystemDataContract :: FeatureFlags => { } , data_contracts_SystemDataContract :: DPNS => { } , data_contracts_SystemDataContract :: Dashpay => { } , data_contracts_SystemDataContract :: WalletUtils => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn data_contracts_SystemDataContract_Withdrawals_ctor () -> * mut data_contracts_SystemDataContract { ferment :: boxed (data_contracts_SystemDataContract :: Withdrawals { }) } # [no_mangle] pub unsafe extern "C" fn data_contracts_SystemDataContract_MasternodeRewards_ctor () -> * mut data_contracts_SystemDataContract { ferment :: boxed (data_contracts_SystemDataContract :: MasternodeRewards { }) } # [no_mangle] pub unsafe extern "C" fn data_contracts_SystemDataContract_FeatureFlags_ctor () -> * mut data_contracts_SystemDataContract { ferment :: boxed (data_contracts_SystemDataContract :: FeatureFlags { }) } # [no_mangle] pub unsafe extern "C" fn data_contracts_SystemDataContract_DPNS_ctor () -> * mut data_contracts_SystemDataContract { ferment :: boxed (data_contracts_SystemDataContract :: DPNS { }) } # [no_mangle] pub unsafe extern "C" fn data_contracts_SystemDataContract_Dashpay_ctor () -> * mut data_contracts_SystemDataContract { ferment :: boxed (data_contracts_SystemDataContract :: Dashpay { }) } # [no_mangle] pub unsafe extern "C" fn data_contracts_SystemDataContract_WalletUtils_ctor () -> * mut data_contracts_SystemDataContract { ferment :: boxed (data_contracts_SystemDataContract :: WalletUtils { }) } # [no_mangle] pub unsafe extern "C" fn data_contracts_SystemDataContract_destroy < > (ffi : * mut data_contracts_SystemDataContract) { ferment :: unbox_any (ffi) ; } } pub mod platform_value { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`Value`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum platform_value_Value { U128 (* mut [u8 ; 16]) , I128 (* mut [u8 ; 16]) , U64 (u64) , I64 (i64) , U32 (u32) , I32 (i32) , U16 (u16) , I16 (i16) , U8 (u8) , I8 (i8) , Bytes (* mut crate :: fermented :: generics :: Vec_u8) , Bytes20 (* mut crate :: fermented :: generics :: Arr_u8_20) , Bytes32 (* mut crate :: fermented :: generics :: Arr_u8_32) , Bytes36 (* mut crate :: fermented :: generics :: Arr_u8_36) , EnumU8 (* mut crate :: fermented :: generics :: Vec_u8) , EnumString (* mut crate :: fermented :: generics :: Vec_String) , Identifier (* mut crate :: fermented :: types :: platform_value :: platform_value_Hash256) , Float (f64) , Text (* mut std :: os :: raw :: c_char) , Bool (bool) , Null , Array (* mut crate :: fermented :: generics :: Vec_platform_value_Value) , Map (* mut crate :: fermented :: types :: platform_value :: value_map :: platform_value_value_map_ValueMap) } impl ferment :: FFIConversionFrom < platform_value :: Value > for platform_value_Value { unsafe fn ffi_from_const (ffi : * const platform_value_Value) -> platform_value :: Value { let ffi_ref = & * ffi ; match ffi_ref { platform_value_Value :: U128 (o_0) => platform_value :: Value :: U128 (< [u8 ; 16] as ferment :: FFIConversionFrom < u128 >> :: ffi_from (* o_0)) , platform_value_Value :: I128 (o_0) => platform_value :: Value :: I128 (< [u8 ; 16] as ferment :: FFIConversionFrom < i128 >> :: ffi_from (* o_0)) , platform_value_Value :: U64 (o_0) => platform_value :: Value :: U64 (* o_0) , platform_value_Value :: I64 (o_0) => platform_value :: Value :: I64 (* o_0) , platform_value_Value :: U32 (o_0) => platform_value :: Value :: U32 (* o_0) , platform_value_Value :: I32 (o_0) => platform_value :: Value :: I32 (* o_0) , platform_value_Value :: U16 (o_0) => platform_value :: Value :: U16 (* o_0) , platform_value_Value :: I16 (o_0) => platform_value :: Value :: I16 (* o_0) , platform_value_Value :: U8 (o_0) => platform_value :: Value :: U8 (* o_0) , platform_value_Value :: I8 (o_0) => platform_value :: Value :: I8 (* o_0) , platform_value_Value :: Bytes (o_0) => platform_value :: Value :: Bytes (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (* o_0)) , platform_value_Value :: Bytes20 (o_0) => platform_value :: Value :: Bytes20 (< crate :: fermented :: generics :: Arr_u8_20 as ferment :: FFIConversionFrom < [u8 ; 20] >> :: ffi_from (* o_0)) , platform_value_Value :: Bytes32 (o_0) => platform_value :: Value :: Bytes32 (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (* o_0)) , platform_value_Value :: Bytes36 (o_0) => platform_value :: Value :: Bytes36 (< crate :: fermented :: generics :: Arr_u8_36 as ferment :: FFIConversionFrom < [u8 ; 36] >> :: ffi_from (* o_0)) , platform_value_Value :: EnumU8 (o_0) => platform_value :: Value :: EnumU8 (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (* o_0)) , platform_value_Value :: EnumString (o_0) => platform_value :: Value :: EnumString (< crate :: fermented :: generics :: Vec_String as ferment :: FFIConversionFrom < Vec < String > >> :: ffi_from (* o_0)) , platform_value_Value :: Identifier (o_0) => platform_value :: Value :: Identifier (< crate :: fermented :: types :: platform_value :: platform_value_Hash256 as ferment :: FFIConversionFrom < platform_value :: Hash256 >> :: ffi_from (* o_0)) , platform_value_Value :: Float (o_0) => platform_value :: Value :: Float (* o_0) , platform_value_Value :: Text (o_0) => platform_value :: Value :: Text (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , platform_value_Value :: Bool (o_0) => platform_value :: Value :: Bool (* o_0) , platform_value_Value :: Null => platform_value :: Value :: Null , platform_value_Value :: Array (o_0) => platform_value :: Value :: Array (< crate :: fermented :: generics :: Vec_platform_value_Value as ferment :: FFIConversionFrom < Vec < platform_value :: Value > >> :: ffi_from (* o_0)) , platform_value_Value :: Map (o_0) => platform_value :: Value :: Map (< crate :: fermented :: types :: platform_value :: value_map :: platform_value_value_map_ValueMap as ferment :: FFIConversionFrom < platform_value :: value_map :: ValueMap >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < platform_value :: Value > for platform_value_Value { unsafe fn ffi_to_const (obj : platform_value :: Value) -> * const platform_value_Value { ferment :: boxed (match obj { platform_value :: Value :: U128 (o_0) => platform_value_Value :: U128 (< [u8 ; 16] as ferment :: FFIConversionTo < u128 >> :: ffi_to (o_0)) , platform_value :: Value :: I128 (o_0) => platform_value_Value :: I128 (< [u8 ; 16] as ferment :: FFIConversionTo < i128 >> :: ffi_to (o_0)) , platform_value :: Value :: U64 (o_0) => platform_value_Value :: U64 (o_0) , platform_value :: Value :: I64 (o_0) => platform_value_Value :: I64 (o_0) , platform_value :: Value :: U32 (o_0) => platform_value_Value :: U32 (o_0) , platform_value :: Value :: I32 (o_0) => platform_value_Value :: I32 (o_0) , platform_value :: Value :: U16 (o_0) => platform_value_Value :: U16 (o_0) , platform_value :: Value :: I16 (o_0) => platform_value_Value :: I16 (o_0) , platform_value :: Value :: U8 (o_0) => platform_value_Value :: U8 (o_0) , platform_value :: Value :: I8 (o_0) => platform_value_Value :: I8 (o_0) , platform_value :: Value :: Bytes (o_0) => platform_value_Value :: Bytes (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (o_0)) , platform_value :: Value :: Bytes20 (o_0) => platform_value_Value :: Bytes20 (< crate :: fermented :: generics :: Arr_u8_20 as ferment :: FFIConversionTo < [u8 ; 20] >> :: ffi_to (o_0)) , platform_value :: Value :: Bytes32 (o_0) => platform_value_Value :: Bytes32 (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (o_0)) , platform_value :: Value :: Bytes36 (o_0) => platform_value_Value :: Bytes36 (< crate :: fermented :: generics :: Arr_u8_36 as ferment :: FFIConversionTo < [u8 ; 36] >> :: ffi_to (o_0)) , platform_value :: Value :: EnumU8 (o_0) => platform_value_Value :: EnumU8 (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (o_0)) , platform_value :: Value :: EnumString (o_0) => platform_value_Value :: EnumString (< crate :: fermented :: generics :: Vec_String as ferment :: FFIConversionTo < Vec < String > >> :: ffi_to (o_0)) , platform_value :: Value :: Identifier (o_0) => platform_value_Value :: Identifier (< crate :: fermented :: types :: platform_value :: platform_value_Hash256 as ferment :: FFIConversionTo < platform_value :: Hash256 >> :: ffi_to (o_0)) , platform_value :: Value :: Float (o_0) => platform_value_Value :: Float (o_0) , platform_value :: Value :: Text (o_0) => platform_value_Value :: Text (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , platform_value :: Value :: Bool (o_0) => platform_value_Value :: Bool (o_0) , platform_value :: Value :: Null => platform_value_Value :: Null , platform_value :: Value :: Array (o_0) => platform_value_Value :: Array (< crate :: fermented :: generics :: Vec_platform_value_Value as ferment :: FFIConversionTo < Vec < platform_value :: Value > >> :: ffi_to (o_0)) , platform_value :: Value :: Map (o_0) => platform_value_Value :: Map (< crate :: fermented :: types :: platform_value :: value_map :: platform_value_value_map_ValueMap as ferment :: FFIConversionTo < platform_value :: value_map :: ValueMap >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for platform_value_Value { fn drop (& mut self) { unsafe { match self { platform_value_Value :: U128 (o_0) => { ferment :: unbox_any_opt (* o_0) ; } , platform_value_Value :: I128 (o_0) => { ferment :: unbox_any_opt (* o_0) ; } , platform_value_Value :: U64 (o_0) => { ; } , platform_value_Value :: I64 (o_0) => { ; } , platform_value_Value :: U32 (o_0) => { ; } , platform_value_Value :: I32 (o_0) => { ; } , platform_value_Value :: U16 (o_0) => { ; } , platform_value_Value :: I16 (o_0) => { ; } , platform_value_Value :: U8 (o_0) => { ; } , platform_value_Value :: I8 (o_0) => { ; } , platform_value_Value :: Bytes (o_0) => { ferment :: unbox_any (* o_0) ; } , platform_value_Value :: Bytes20 (o_0) => { ferment :: unbox_any (* o_0) ; } , platform_value_Value :: Bytes32 (o_0) => { ferment :: unbox_any (* o_0) ; } , platform_value_Value :: Bytes36 (o_0) => { ferment :: unbox_any (* o_0) ; } , platform_value_Value :: EnumU8 (o_0) => { ferment :: unbox_any (* o_0) ; } , platform_value_Value :: EnumString (o_0) => { ferment :: unbox_any (* o_0) ; } , platform_value_Value :: Identifier (o_0) => { ferment :: unbox_any (* o_0) ; } , platform_value_Value :: Float (o_0) => { ; } , platform_value_Value :: Text (o_0) => { ferment :: unbox_string (* o_0) ; } , platform_value_Value :: Bool (o_0) => { ; } , platform_value_Value :: Null => { } , platform_value_Value :: Array (o_0) => { ferment :: unbox_any (* o_0) ; } , platform_value_Value :: Map (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_U128_ctor (o_o_0 : * mut [u8 ; 16]) -> * mut platform_value_Value { ferment :: boxed (platform_value_Value :: U128 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_I128_ctor (o_o_0 : * mut [u8 ; 16]) -> * mut platform_value_Value { ferment :: boxed (platform_value_Value :: I128 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_U64_ctor (o_o_0 : u64) -> * mut platform_value_Value { ferment :: boxed (platform_value_Value :: U64 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_I64_ctor (o_o_0 : i64) -> * mut platform_value_Value { ferment :: boxed (platform_value_Value :: I64 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_U32_ctor (o_o_0 : u32) -> * mut platform_value_Value { ferment :: boxed (platform_value_Value :: U32 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_I32_ctor (o_o_0 : i32) -> * mut platform_value_Value { ferment :: boxed (platform_value_Value :: I32 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_U16_ctor (o_o_0 : u16) -> * mut platform_value_Value { ferment :: boxed (platform_value_Value :: U16 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_I16_ctor (o_o_0 : i16) -> * mut platform_value_Value { ferment :: boxed (platform_value_Value :: I16 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_U8_ctor (o_o_0 : u8) -> * mut platform_value_Value { ferment :: boxed (platform_value_Value :: U8 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_I8_ctor (o_o_0 : i8) -> * mut platform_value_Value { ferment :: boxed (platform_value_Value :: I8 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_Bytes_ctor (o_o_0 : * mut crate :: fermented :: generics :: Vec_u8) -> * mut platform_value_Value { ferment :: boxed (platform_value_Value :: Bytes (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_Bytes20_ctor (o_o_0 : * mut crate :: fermented :: generics :: Arr_u8_20) -> * mut platform_value_Value { ferment :: boxed (platform_value_Value :: Bytes20 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_Bytes32_ctor (o_o_0 : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut platform_value_Value { ferment :: boxed (platform_value_Value :: Bytes32 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_Bytes36_ctor (o_o_0 : * mut crate :: fermented :: generics :: Arr_u8_36) -> * mut platform_value_Value { ferment :: boxed (platform_value_Value :: Bytes36 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_EnumU8_ctor (o_o_0 : * mut crate :: fermented :: generics :: Vec_u8) -> * mut platform_value_Value { ferment :: boxed (platform_value_Value :: EnumU8 (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_EnumString_ctor (o_o_0 : * mut crate :: fermented :: generics :: Vec_String) -> * mut platform_value_Value { ferment :: boxed (platform_value_Value :: EnumString (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_Identifier_ctor (o_o_0 : * mut crate :: fermented :: types :: platform_value :: platform_value_Hash256) -> * mut platform_value_Value { ferment :: boxed (platform_value_Value :: Identifier (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_Float_ctor (o_o_0 : f64) -> * mut platform_value_Value { ferment :: boxed (platform_value_Value :: Float (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_Text_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_value_Value { ferment :: boxed (platform_value_Value :: Text (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_Bool_ctor (o_o_0 : bool) -> * mut platform_value_Value { ferment :: boxed (platform_value_Value :: Bool (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_Null_ctor () -> * mut platform_value_Value { ferment :: boxed (platform_value_Value :: Null { }) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_Array_ctor (o_o_0 : * mut crate :: fermented :: generics :: Vec_platform_value_Value) -> * mut platform_value_Value { ferment :: boxed (platform_value_Value :: Array (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_Map_ctor (o_o_0 : * mut crate :: fermented :: types :: platform_value :: value_map :: platform_value_value_map_ValueMap) -> * mut platform_value_Value { ferment :: boxed (platform_value_Value :: Map (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Value_destroy < > (ffi : * mut platform_value_Value) { ferment :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`Hash256`]"] # [repr (C)] # [derive (Clone)] pub struct platform_value_Hash256 (* mut crate :: fermented :: generics :: Arr_u8_32) ; impl ferment :: FFIConversionFrom < platform_value :: Hash256 > for platform_value_Hash256 { unsafe fn ffi_from_const (ffi : * const platform_value_Hash256) -> platform_value :: Hash256 { let ffi_ref = & * ffi ; < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (ffi_ref . 0) } } impl ferment :: FFIConversionTo < platform_value :: Hash256 > for platform_value_Hash256 { unsafe fn ffi_to_const (obj : platform_value :: Hash256) -> * const platform_value_Hash256 { ferment :: boxed (platform_value_Hash256 (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj))) } } impl Drop for platform_value_Hash256 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn platform_value_Hash256_ctor < > (o_0 : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut platform_value_Hash256 { ferment :: boxed (platform_value_Hash256 (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_Hash256_destroy < > (ffi : * mut platform_value_Hash256) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_value_Hash256_get_0 < > (obj : * const platform_value_Hash256) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn platform_value_Hash256_set_0 < > (obj : * const platform_value_Hash256) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . 0 } pub mod converter { use crate as dash_spv_apple_bindings ; # [cfg (feature = "json")] pub mod serde_json { use crate as dash_spv_apple_bindings ; } } pub mod inner_value_at_path { use crate as dash_spv_apple_bindings ; } pub mod value_serialization { use crate as dash_spv_apple_bindings ; } pub mod patch { use crate as dash_spv_apple_bindings ; pub mod diff { use crate as dash_spv_apple_bindings ; } } pub mod macros { use crate as dash_spv_apple_bindings ; } pub mod index { use crate as dash_spv_apple_bindings ; } pub mod btreemap_extensions { use crate as dash_spv_apple_bindings ; } pub mod types { use crate as dash_spv_apple_bindings ; pub mod bytes_20 { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`Bytes20`]"] # [repr (C)] # [derive (Clone)] pub struct platform_value_types_bytes_20_Bytes20 (* mut crate :: fermented :: generics :: Arr_u8_20) ; impl ferment :: FFIConversionFrom < platform_value :: types :: bytes_20 :: Bytes20 > for platform_value_types_bytes_20_Bytes20 { unsafe fn ffi_from_const (ffi : * const platform_value_types_bytes_20_Bytes20) -> platform_value :: types :: bytes_20 :: Bytes20 { let ffi_ref = & * ffi ; platform_value :: types :: bytes_20 :: Bytes20 (< crate :: fermented :: generics :: Arr_u8_20 as ferment :: FFIConversionFrom < [u8 ; 20] >> :: ffi_from (ffi_ref . 0)) } } impl ferment :: FFIConversionTo < platform_value :: types :: bytes_20 :: Bytes20 > for platform_value_types_bytes_20_Bytes20 { unsafe fn ffi_to_const (obj : platform_value :: types :: bytes_20 :: Bytes20) -> * const platform_value_types_bytes_20_Bytes20 { ferment :: boxed (platform_value_types_bytes_20_Bytes20 (< crate :: fermented :: generics :: Arr_u8_20 as ferment :: FFIConversionTo < [u8 ; 20] >> :: ffi_to (obj . 0))) } } impl Drop for platform_value_types_bytes_20_Bytes20 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn platform_value_types_bytes_20_Bytes20_ctor < > (o_0 : * mut crate :: fermented :: generics :: Arr_u8_20) -> * mut platform_value_types_bytes_20_Bytes20 { ferment :: boxed (platform_value_types_bytes_20_Bytes20 (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_types_bytes_20_Bytes20_destroy < > (ffi : * mut platform_value_types_bytes_20_Bytes20) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_value_types_bytes_20_Bytes20_get_0 < > (obj : * const platform_value_types_bytes_20_Bytes20) -> * mut crate :: fermented :: generics :: Arr_u8_20 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn platform_value_types_bytes_20_Bytes20_set_0 < > (obj : * const platform_value_types_bytes_20_Bytes20) -> * mut crate :: fermented :: generics :: Arr_u8_20 { (* obj) . 0 } } pub mod identifier { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`Identifier`]"] # [repr (C)] # [derive (Clone)] pub struct platform_value_types_identifier_Identifier (* mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_IdentifierBytes32) ; impl ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier > for platform_value_types_identifier_Identifier { unsafe fn ffi_from_const (ffi : * const platform_value_types_identifier_Identifier) -> platform_value :: types :: identifier :: Identifier { let ffi_ref = & * ffi ; platform_value :: types :: identifier :: Identifier (< crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_IdentifierBytes32 as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: IdentifierBytes32 >> :: ffi_from (ffi_ref . 0)) } } impl ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier > for platform_value_types_identifier_Identifier { unsafe fn ffi_to_const (obj : platform_value :: types :: identifier :: Identifier) -> * const platform_value_types_identifier_Identifier { ferment :: boxed (platform_value_types_identifier_Identifier (< crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_IdentifierBytes32 as ferment :: FFIConversionTo < platform_value :: types :: identifier :: IdentifierBytes32 >> :: ffi_to (obj . 0))) } } impl Drop for platform_value_types_identifier_Identifier { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn platform_value_types_identifier_Identifier_ctor < > (o_0 : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_IdentifierBytes32) -> * mut platform_value_types_identifier_Identifier { ferment :: boxed (platform_value_types_identifier_Identifier (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_types_identifier_Identifier_destroy < > (ffi : * mut platform_value_types_identifier_Identifier) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_value_types_identifier_Identifier_get_0 < > (obj : * const platform_value_types_identifier_Identifier) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_IdentifierBytes32 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn platform_value_types_identifier_Identifier_set_0 < > (obj : * const platform_value_types_identifier_Identifier) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_IdentifierBytes32 { (* obj) . 0 } # [doc = "FFI-representation of the [`IdentifierBytes32`]"] # [repr (C)] # [derive (Clone)] pub struct platform_value_types_identifier_IdentifierBytes32 (* mut crate :: fermented :: generics :: Arr_u8_32) ; impl ferment :: FFIConversionFrom < platform_value :: types :: identifier :: IdentifierBytes32 > for platform_value_types_identifier_IdentifierBytes32 { unsafe fn ffi_from_const (ffi : * const platform_value_types_identifier_IdentifierBytes32) -> platform_value :: types :: identifier :: IdentifierBytes32 { let ffi_ref = & * ffi ; platform_value :: types :: identifier :: IdentifierBytes32 (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (ffi_ref . 0)) } } impl ferment :: FFIConversionTo < platform_value :: types :: identifier :: IdentifierBytes32 > for platform_value_types_identifier_IdentifierBytes32 { unsafe fn ffi_to_const (obj : platform_value :: types :: identifier :: IdentifierBytes32) -> * const platform_value_types_identifier_IdentifierBytes32 { ferment :: boxed (platform_value_types_identifier_IdentifierBytes32 (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj . 0))) } } impl Drop for platform_value_types_identifier_IdentifierBytes32 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn platform_value_types_identifier_IdentifierBytes32_ctor < > (o_0 : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut platform_value_types_identifier_IdentifierBytes32 { ferment :: boxed (platform_value_types_identifier_IdentifierBytes32 (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_types_identifier_IdentifierBytes32_destroy < > (ffi : * mut platform_value_types_identifier_IdentifierBytes32) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_value_types_identifier_IdentifierBytes32_get_0 < > (obj : * const platform_value_types_identifier_IdentifierBytes32) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn platform_value_types_identifier_IdentifierBytes32_set_0 < > (obj : * const platform_value_types_identifier_IdentifierBytes32) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . 0 } } pub mod binary_data { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`BinaryData`]"] # [repr (C)] # [derive (Clone)] pub struct platform_value_types_binary_data_BinaryData (* mut crate :: fermented :: generics :: Vec_u8) ; impl ferment :: FFIConversionFrom < platform_value :: types :: binary_data :: BinaryData > for platform_value_types_binary_data_BinaryData { unsafe fn ffi_from_const (ffi : * const platform_value_types_binary_data_BinaryData) -> platform_value :: types :: binary_data :: BinaryData { let ffi_ref = & * ffi ; platform_value :: types :: binary_data :: BinaryData (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (ffi_ref . 0)) } } impl ferment :: FFIConversionTo < platform_value :: types :: binary_data :: BinaryData > for platform_value_types_binary_data_BinaryData { unsafe fn ffi_to_const (obj : platform_value :: types :: binary_data :: BinaryData) -> * const platform_value_types_binary_data_BinaryData { ferment :: boxed (platform_value_types_binary_data_BinaryData (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj . 0))) } } impl Drop for platform_value_types_binary_data_BinaryData { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn platform_value_types_binary_data_BinaryData_ctor < > (o_0 : * mut crate :: fermented :: generics :: Vec_u8) -> * mut platform_value_types_binary_data_BinaryData { ferment :: boxed (platform_value_types_binary_data_BinaryData (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_types_binary_data_BinaryData_destroy < > (ffi : * mut platform_value_types_binary_data_BinaryData) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_value_types_binary_data_BinaryData_get_0 < > (obj : * const platform_value_types_binary_data_BinaryData) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn platform_value_types_binary_data_BinaryData_set_0 < > (obj : * const platform_value_types_binary_data_BinaryData) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . 0 } } pub mod bytes_32 { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`Bytes32`]"] # [repr (C)] # [derive (Clone)] pub struct platform_value_types_bytes_32_Bytes32 (* mut crate :: fermented :: generics :: Arr_u8_32) ; impl ferment :: FFIConversionFrom < platform_value :: types :: bytes_32 :: Bytes32 > for platform_value_types_bytes_32_Bytes32 { unsafe fn ffi_from_const (ffi : * const platform_value_types_bytes_32_Bytes32) -> platform_value :: types :: bytes_32 :: Bytes32 { let ffi_ref = & * ffi ; platform_value :: types :: bytes_32 :: Bytes32 (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (ffi_ref . 0)) } } impl ferment :: FFIConversionTo < platform_value :: types :: bytes_32 :: Bytes32 > for platform_value_types_bytes_32_Bytes32 { unsafe fn ffi_to_const (obj : platform_value :: types :: bytes_32 :: Bytes32) -> * const platform_value_types_bytes_32_Bytes32 { ferment :: boxed (platform_value_types_bytes_32_Bytes32 (< crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj . 0))) } } impl Drop for platform_value_types_bytes_32_Bytes32 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn platform_value_types_bytes_32_Bytes32_ctor < > (o_0 : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut platform_value_types_bytes_32_Bytes32 { ferment :: boxed (platform_value_types_bytes_32_Bytes32 (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_types_bytes_32_Bytes32_destroy < > (ffi : * mut platform_value_types_bytes_32_Bytes32) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_value_types_bytes_32_Bytes32_get_0 < > (obj : * const platform_value_types_bytes_32_Bytes32) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn platform_value_types_bytes_32_Bytes32_set_0 < > (obj : * const platform_value_types_bytes_32_Bytes32) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . 0 } } } pub mod value_map { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`ValueMap`]"] # [repr (C)] # [derive (Clone)] pub struct platform_value_value_map_ValueMap (* mut crate :: fermented :: generics :: Vec_Tuple_platform_value_Value_platform_value_Value) ; impl ferment :: FFIConversionFrom < platform_value :: value_map :: ValueMap > for platform_value_value_map_ValueMap { unsafe fn ffi_from_const (ffi : * const platform_value_value_map_ValueMap) -> platform_value :: value_map :: ValueMap { let ffi_ref = & * ffi ; < crate :: fermented :: generics :: Vec_Tuple_platform_value_Value_platform_value_Value as ferment :: FFIConversionFrom < Vec < (platform_value :: Value , platform_value :: Value) > >> :: ffi_from (ffi_ref . 0) } } impl ferment :: FFIConversionTo < platform_value :: value_map :: ValueMap > for platform_value_value_map_ValueMap { unsafe fn ffi_to_const (obj : platform_value :: value_map :: ValueMap) -> * const platform_value_value_map_ValueMap { ferment :: boxed (platform_value_value_map_ValueMap (< crate :: fermented :: generics :: Vec_Tuple_platform_value_Value_platform_value_Value as ferment :: FFIConversionTo < Vec < (platform_value :: Value , platform_value :: Value) > >> :: ffi_to (obj))) } } impl Drop for platform_value_value_map_ValueMap { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn platform_value_value_map_ValueMap_ctor < > (o_0 : * mut crate :: fermented :: generics :: Vec_Tuple_platform_value_Value_platform_value_Value) -> * mut platform_value_value_map_ValueMap { ferment :: boxed (platform_value_value_map_ValueMap (o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_value_map_ValueMap_destroy < > (ffi : * mut platform_value_value_map_ValueMap) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_value_value_map_ValueMap_get_0 < > (obj : * const platform_value_value_map_ValueMap) -> * mut crate :: fermented :: generics :: Vec_Tuple_platform_value_Value_platform_value_Value { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn platform_value_value_map_ValueMap_set_0 < > (obj : * const platform_value_value_map_ValueMap) -> * mut crate :: fermented :: generics :: Vec_Tuple_platform_value_Value_platform_value_Value { (* obj) . 0 } } pub mod error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`Error`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum platform_value_error_Error { Unsupported (* mut std :: os :: raw :: c_char) , StructureError (* mut std :: os :: raw :: c_char) , PathError (* mut std :: os :: raw :: c_char) , IntegerSizeError , IntegerParsingError , StringDecodingError (* mut std :: os :: raw :: c_char) , KeyMustBeAString , ByteLengthNot20BytesError (* mut std :: os :: raw :: c_char) , ByteLengthNot32BytesError (* mut std :: os :: raw :: c_char) , ByteLengthNot36BytesError (* mut std :: os :: raw :: c_char) , SerdeSerializationError (* mut std :: os :: raw :: c_char) , SerdeDeserializationError (* mut std :: os :: raw :: c_char) , CborSerializationError (* mut std :: os :: raw :: c_char) } impl ferment :: FFIConversionFrom < platform_value :: error :: Error > for platform_value_error_Error { unsafe fn ffi_from_const (ffi : * const platform_value_error_Error) -> platform_value :: error :: Error { let ffi_ref = & * ffi ; match ffi_ref { platform_value_error_Error :: Unsupported (o_0) => platform_value :: error :: Error :: Unsupported (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , platform_value_error_Error :: StructureError (o_0) => platform_value :: error :: Error :: StructureError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , platform_value_error_Error :: PathError (o_0) => platform_value :: error :: Error :: PathError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , platform_value_error_Error :: IntegerSizeError => platform_value :: error :: Error :: IntegerSizeError , platform_value_error_Error :: IntegerParsingError => platform_value :: error :: Error :: IntegerParsingError , platform_value_error_Error :: StringDecodingError (o_0) => platform_value :: error :: Error :: StringDecodingError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , platform_value_error_Error :: KeyMustBeAString => platform_value :: error :: Error :: KeyMustBeAString , platform_value_error_Error :: ByteLengthNot20BytesError (o_0) => platform_value :: error :: Error :: ByteLengthNot20BytesError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , platform_value_error_Error :: ByteLengthNot32BytesError (o_0) => platform_value :: error :: Error :: ByteLengthNot32BytesError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , platform_value_error_Error :: ByteLengthNot36BytesError (o_0) => platform_value :: error :: Error :: ByteLengthNot36BytesError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , platform_value_error_Error :: SerdeSerializationError (o_0) => platform_value :: error :: Error :: SerdeSerializationError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , platform_value_error_Error :: SerdeDeserializationError (o_0) => platform_value :: error :: Error :: SerdeDeserializationError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , platform_value_error_Error :: CborSerializationError (o_0) => platform_value :: error :: Error :: CborSerializationError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < platform_value :: error :: Error > for platform_value_error_Error { unsafe fn ffi_to_const (obj : platform_value :: error :: Error) -> * const platform_value_error_Error { ferment :: boxed (match obj { platform_value :: error :: Error :: Unsupported (o_0) => platform_value_error_Error :: Unsupported (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , platform_value :: error :: Error :: StructureError (o_0) => platform_value_error_Error :: StructureError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , platform_value :: error :: Error :: PathError (o_0) => platform_value_error_Error :: PathError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , platform_value :: error :: Error :: IntegerSizeError => platform_value_error_Error :: IntegerSizeError , platform_value :: error :: Error :: IntegerParsingError => platform_value_error_Error :: IntegerParsingError , platform_value :: error :: Error :: StringDecodingError (o_0) => platform_value_error_Error :: StringDecodingError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , platform_value :: error :: Error :: KeyMustBeAString => platform_value_error_Error :: KeyMustBeAString , platform_value :: error :: Error :: ByteLengthNot20BytesError (o_0) => platform_value_error_Error :: ByteLengthNot20BytesError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , platform_value :: error :: Error :: ByteLengthNot32BytesError (o_0) => platform_value_error_Error :: ByteLengthNot32BytesError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , platform_value :: error :: Error :: ByteLengthNot36BytesError (o_0) => platform_value_error_Error :: ByteLengthNot36BytesError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , platform_value :: error :: Error :: SerdeSerializationError (o_0) => platform_value_error_Error :: SerdeSerializationError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , platform_value :: error :: Error :: SerdeDeserializationError (o_0) => platform_value_error_Error :: SerdeDeserializationError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , platform_value :: error :: Error :: CborSerializationError (o_0) => platform_value_error_Error :: CborSerializationError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for platform_value_error_Error { fn drop (& mut self) { unsafe { match self { platform_value_error_Error :: Unsupported (o_0) => { ferment :: unbox_string (* o_0) ; } , platform_value_error_Error :: StructureError (o_0) => { ferment :: unbox_string (* o_0) ; } , platform_value_error_Error :: PathError (o_0) => { ferment :: unbox_string (* o_0) ; } , platform_value_error_Error :: IntegerSizeError => { } , platform_value_error_Error :: IntegerParsingError => { } , platform_value_error_Error :: StringDecodingError (o_0) => { ferment :: unbox_string (* o_0) ; } , platform_value_error_Error :: KeyMustBeAString => { } , platform_value_error_Error :: ByteLengthNot20BytesError (o_0) => { ferment :: unbox_string (* o_0) ; } , platform_value_error_Error :: ByteLengthNot32BytesError (o_0) => { ferment :: unbox_string (* o_0) ; } , platform_value_error_Error :: ByteLengthNot36BytesError (o_0) => { ferment :: unbox_string (* o_0) ; } , platform_value_error_Error :: SerdeSerializationError (o_0) => { ferment :: unbox_string (* o_0) ; } , platform_value_error_Error :: SerdeDeserializationError (o_0) => { ferment :: unbox_string (* o_0) ; } , platform_value_error_Error :: CborSerializationError (o_0) => { ferment :: unbox_string (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_Unsupported_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_value_error_Error { ferment :: boxed (platform_value_error_Error :: Unsupported (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_StructureError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_value_error_Error { ferment :: boxed (platform_value_error_Error :: StructureError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_PathError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_value_error_Error { ferment :: boxed (platform_value_error_Error :: PathError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_IntegerSizeError_ctor () -> * mut platform_value_error_Error { ferment :: boxed (platform_value_error_Error :: IntegerSizeError { }) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_IntegerParsingError_ctor () -> * mut platform_value_error_Error { ferment :: boxed (platform_value_error_Error :: IntegerParsingError { }) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_StringDecodingError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_value_error_Error { ferment :: boxed (platform_value_error_Error :: StringDecodingError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_KeyMustBeAString_ctor () -> * mut platform_value_error_Error { ferment :: boxed (platform_value_error_Error :: KeyMustBeAString { }) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_ByteLengthNot20BytesError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_value_error_Error { ferment :: boxed (platform_value_error_Error :: ByteLengthNot20BytesError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_ByteLengthNot32BytesError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_value_error_Error { ferment :: boxed (platform_value_error_Error :: ByteLengthNot32BytesError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_ByteLengthNot36BytesError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_value_error_Error { ferment :: boxed (platform_value_error_Error :: ByteLengthNot36BytesError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_SerdeSerializationError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_value_error_Error { ferment :: boxed (platform_value_error_Error :: SerdeSerializationError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_SerdeDeserializationError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_value_error_Error { ferment :: boxed (platform_value_error_Error :: SerdeDeserializationError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_CborSerializationError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_value_error_Error { ferment :: boxed (platform_value_error_Error :: CborSerializationError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_value_error_Error_destroy < > (ffi : * mut platform_value_error_Error) { ferment :: unbox_any (ffi) ; } } } pub mod dashcore { use crate as dash_spv_apple_bindings ; pub mod hash_types { use crate as dash_spv_apple_bindings ; } pub mod sign_message { use crate as dash_spv_apple_bindings ; } pub mod bip158 { use crate as dash_spv_apple_bindings ; } pub mod merkle_tree { use crate as dash_spv_apple_bindings ; pub mod block { use crate as dash_spv_apple_bindings ; } } pub mod signer { use crate as dash_spv_apple_bindings ; } pub mod bls_sig_utils { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`BLSPublicKey`]"] # [repr (C)] # [derive (Clone)] pub struct dashcore_bls_sig_utils_BLSPublicKey (* mut crate :: fermented :: generics :: Arr_u8_48) ; impl ferment :: FFIConversionFrom < dashcore :: bls_sig_utils :: BLSPublicKey > for dashcore_bls_sig_utils_BLSPublicKey { unsafe fn ffi_from_const (ffi : * const dashcore_bls_sig_utils_BLSPublicKey) -> dashcore :: bls_sig_utils :: BLSPublicKey { let ffi_ref = & * ffi ; dashcore :: bls_sig_utils :: BLSPublicKey (< crate :: fermented :: generics :: Arr_u8_48 as ferment :: FFIConversionFrom < [u8 ; 48] >> :: ffi_from (ffi_ref . 0)) } } impl ferment :: FFIConversionTo < dashcore :: bls_sig_utils :: BLSPublicKey > for dashcore_bls_sig_utils_BLSPublicKey { unsafe fn ffi_to_const (obj : dashcore :: bls_sig_utils :: BLSPublicKey) -> * const dashcore_bls_sig_utils_BLSPublicKey { ferment :: boxed (dashcore_bls_sig_utils_BLSPublicKey (< crate :: fermented :: generics :: Arr_u8_48 as ferment :: FFIConversionTo < [u8 ; 48] >> :: ffi_to (obj . 0))) } } impl Drop for dashcore_bls_sig_utils_BLSPublicKey { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn dashcore_bls_sig_utils_BLSPublicKey_ctor < > (o_0 : * mut crate :: fermented :: generics :: Arr_u8_48) -> * mut dashcore_bls_sig_utils_BLSPublicKey { ferment :: boxed (dashcore_bls_sig_utils_BLSPublicKey (o_0)) } # [no_mangle] pub unsafe extern "C" fn dashcore_bls_sig_utils_BLSPublicKey_destroy < > (ffi : * mut dashcore_bls_sig_utils_BLSPublicKey) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dashcore_bls_sig_utils_BLSPublicKey_get_0 < > (obj : * const dashcore_bls_sig_utils_BLSPublicKey) -> * mut crate :: fermented :: generics :: Arr_u8_48 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dashcore_bls_sig_utils_BLSPublicKey_set_0 < > (obj : * const dashcore_bls_sig_utils_BLSPublicKey) -> * mut crate :: fermented :: generics :: Arr_u8_48 { (* obj) . 0 } # [doc = "FFI-representation of the [`BLSSignature`]"] # [repr (C)] # [derive (Clone)] pub struct dashcore_bls_sig_utils_BLSSignature (* mut crate :: fermented :: generics :: Arr_u8_96) ; impl ferment :: FFIConversionFrom < dashcore :: bls_sig_utils :: BLSSignature > for dashcore_bls_sig_utils_BLSSignature { unsafe fn ffi_from_const (ffi : * const dashcore_bls_sig_utils_BLSSignature) -> dashcore :: bls_sig_utils :: BLSSignature { let ffi_ref = & * ffi ; dashcore :: bls_sig_utils :: BLSSignature (< crate :: fermented :: generics :: Arr_u8_96 as ferment :: FFIConversionFrom < [u8 ; 96] >> :: ffi_from (ffi_ref . 0)) } } impl ferment :: FFIConversionTo < dashcore :: bls_sig_utils :: BLSSignature > for dashcore_bls_sig_utils_BLSSignature { unsafe fn ffi_to_const (obj : dashcore :: bls_sig_utils :: BLSSignature) -> * const dashcore_bls_sig_utils_BLSSignature { ferment :: boxed (dashcore_bls_sig_utils_BLSSignature (< crate :: fermented :: generics :: Arr_u8_96 as ferment :: FFIConversionTo < [u8 ; 96] >> :: ffi_to (obj . 0))) } } impl Drop for dashcore_bls_sig_utils_BLSSignature { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn dashcore_bls_sig_utils_BLSSignature_ctor < > (o_0 : * mut crate :: fermented :: generics :: Arr_u8_96) -> * mut dashcore_bls_sig_utils_BLSSignature { ferment :: boxed (dashcore_bls_sig_utils_BLSSignature (o_0)) } # [no_mangle] pub unsafe extern "C" fn dashcore_bls_sig_utils_BLSSignature_destroy < > (ffi : * mut dashcore_bls_sig_utils_BLSSignature) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dashcore_bls_sig_utils_BLSSignature_get_0 < > (obj : * const dashcore_bls_sig_utils_BLSSignature) -> * mut crate :: fermented :: generics :: Arr_u8_96 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dashcore_bls_sig_utils_BLSSignature_set_0 < > (obj : * const dashcore_bls_sig_utils_BLSSignature) -> * mut crate :: fermented :: generics :: Arr_u8_96 { (* obj) . 0 } } pub mod crypto { use crate as dash_spv_apple_bindings ; pub mod sighash { use crate as dash_spv_apple_bindings ; } pub mod key { use crate as dash_spv_apple_bindings ; } } pub mod bip32 { use crate as dash_spv_apple_bindings ; } # [cfg (feature = "serde")] pub mod serde_utils { use crate as dash_spv_apple_bindings ; } pub mod consensus { use crate as dash_spv_apple_bindings ; # [cfg (feature = "serde")] pub mod serde { use crate as dash_spv_apple_bindings ; pub mod hex { use crate as dash_spv_apple_bindings ; } } pub mod encode { use crate as dash_spv_apple_bindings ; } } pub mod amount { use crate as dash_spv_apple_bindings ; # [cfg (feature = "serde")] pub mod serde { use crate as dash_spv_apple_bindings ; pub mod as_sat { use crate as dash_spv_apple_bindings ; } pub mod as_btc { use crate as dash_spv_apple_bindings ; } } } pub mod blockdata { use crate as dash_spv_apple_bindings ; pub mod block { use crate as dash_spv_apple_bindings ; } pub mod script { use crate as dash_spv_apple_bindings ; pub mod push_bytes { use crate as dash_spv_apple_bindings ; } pub mod owned { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`ScriptBuf`]"] # [repr (C)] # [derive (Clone)] pub struct dashcore_blockdata_script_owned_ScriptBuf (* mut crate :: fermented :: generics :: Vec_u8) ; impl ferment :: FFIConversionFrom < dashcore :: blockdata :: script :: owned :: ScriptBuf > for dashcore_blockdata_script_owned_ScriptBuf { unsafe fn ffi_from_const (ffi : * const dashcore_blockdata_script_owned_ScriptBuf) -> dashcore :: blockdata :: script :: owned :: ScriptBuf { let ffi_ref = & * ffi ; dashcore :: blockdata :: script :: owned :: ScriptBuf (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (ffi_ref . 0)) } } impl ferment :: FFIConversionTo < dashcore :: blockdata :: script :: owned :: ScriptBuf > for dashcore_blockdata_script_owned_ScriptBuf { unsafe fn ffi_to_const (obj : dashcore :: blockdata :: script :: owned :: ScriptBuf) -> * const dashcore_blockdata_script_owned_ScriptBuf { ferment :: boxed (dashcore_blockdata_script_owned_ScriptBuf (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj . 0))) } } impl Drop for dashcore_blockdata_script_owned_ScriptBuf { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_script_owned_ScriptBuf_ctor < > (o_0 : * mut crate :: fermented :: generics :: Vec_u8) -> * mut dashcore_blockdata_script_owned_ScriptBuf { ferment :: boxed (dashcore_blockdata_script_owned_ScriptBuf (o_0)) } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_script_owned_ScriptBuf_destroy < > (ffi : * mut dashcore_blockdata_script_owned_ScriptBuf) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_script_owned_ScriptBuf_get_0 < > (obj : * const dashcore_blockdata_script_owned_ScriptBuf) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_script_owned_ScriptBuf_set_0 < > (obj : * const dashcore_blockdata_script_owned_ScriptBuf) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . 0 } } } pub mod weight { use crate as dash_spv_apple_bindings ; } pub mod transaction { use crate as dash_spv_apple_bindings ; pub mod hash_type { use crate as dash_spv_apple_bindings ; } pub mod txout { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`TxOut`]"] # [repr (C)] # [derive (Clone)] pub struct dashcore_blockdata_transaction_txout_TxOut { pub value : u64 , pub script_pubkey : * mut dashcore :: blockdata :: script :: ScriptBuf } impl ferment :: FFIConversionFrom < dashcore :: blockdata :: transaction :: txout :: TxOut > for dashcore_blockdata_transaction_txout_TxOut { unsafe fn ffi_from_const (ffi : * const dashcore_blockdata_transaction_txout_TxOut) -> dashcore :: blockdata :: transaction :: txout :: TxOut { let ffi_ref = & * ffi ; dashcore :: blockdata :: transaction :: txout :: TxOut { value : ffi_ref . value , script_pubkey : (& * ffi_ref . script_pubkey) . clone () } } } impl ferment :: FFIConversionTo < dashcore :: blockdata :: transaction :: txout :: TxOut > for dashcore_blockdata_transaction_txout_TxOut { unsafe fn ffi_to_const (obj : dashcore :: blockdata :: transaction :: txout :: TxOut) -> * const dashcore_blockdata_transaction_txout_TxOut { ferment :: boxed (dashcore_blockdata_transaction_txout_TxOut { value : obj . value , script_pubkey : ferment :: boxed (obj . script_pubkey) }) } } impl Drop for dashcore_blockdata_transaction_txout_TxOut { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment :: unbox_any (ffi_ref . script_pubkey) ; } } } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_txout_TxOut_ctor < > (value : u64 , script_pubkey : * mut dashcore :: blockdata :: script :: ScriptBuf) -> * mut dashcore_blockdata_transaction_txout_TxOut { ferment :: boxed (dashcore_blockdata_transaction_txout_TxOut { value , script_pubkey }) } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_txout_TxOut_destroy < > (ffi : * mut dashcore_blockdata_transaction_txout_TxOut) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_txout_TxOut_get_value < > (obj : * const dashcore_blockdata_transaction_txout_TxOut) -> u64 { (* obj) . value } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_txout_TxOut_get_script_pubkey < > (obj : * const dashcore_blockdata_transaction_txout_TxOut) -> * mut dashcore :: blockdata :: script :: ScriptBuf { (* obj) . script_pubkey } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_txout_TxOut_set_value < > (obj : * const dashcore_blockdata_transaction_txout_TxOut) -> u64 { (* obj) . value } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_txout_TxOut_set_script_pubkey < > (obj : * const dashcore_blockdata_transaction_txout_TxOut) -> * mut dashcore :: blockdata :: script :: ScriptBuf { (* obj) . script_pubkey } } pub mod special_transaction { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`TransactionPayload`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dashcore_blockdata_transaction_special_transaction_TransactionPayload { ProviderRegistrationPayloadType (* mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: provider_registration :: dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload) , ProviderUpdateServicePayloadType (* mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: provider_update_service :: dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload) , ProviderUpdateRegistrarPayloadType (* mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: provider_update_registrar :: dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload) , ProviderUpdateRevocationPayloadType (* mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: provider_update_revocation :: dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload) , CoinbasePayloadType (* mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: coinbase :: dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload) , QuorumCommitmentPayloadType (* mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: quorum_commitment :: dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumCommitmentPayload) , AssetLockPayloadType (* mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: asset_lock :: dashcore_blockdata_transaction_special_transaction_asset_lock_AssetLockPayload) , AssetUnlockPayloadType (* mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: qualified_asset_unlock :: dashcore_blockdata_transaction_special_transaction_asset_unlock_qualified_asset_unlock_AssetUnlockPayload) } impl ferment :: FFIConversionFrom < dashcore :: blockdata :: transaction :: special_transaction :: TransactionPayload > for dashcore_blockdata_transaction_special_transaction_TransactionPayload { unsafe fn ffi_from_const (ffi : * const dashcore_blockdata_transaction_special_transaction_TransactionPayload) -> dashcore :: blockdata :: transaction :: special_transaction :: TransactionPayload { let ffi_ref = & * ffi ; match ffi_ref { dashcore_blockdata_transaction_special_transaction_TransactionPayload :: ProviderRegistrationPayloadType (o_0) => dashcore :: blockdata :: transaction :: special_transaction :: TransactionPayload :: ProviderRegistrationPayloadType (< crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: provider_registration :: dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload as ferment :: FFIConversionFrom < dashcore :: blockdata :: transaction :: special_transaction :: provider_registration :: ProviderRegistrationPayload >> :: ffi_from (* o_0)) , dashcore_blockdata_transaction_special_transaction_TransactionPayload :: ProviderUpdateServicePayloadType (o_0) => dashcore :: blockdata :: transaction :: special_transaction :: TransactionPayload :: ProviderUpdateServicePayloadType (< crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: provider_update_service :: dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload as ferment :: FFIConversionFrom < dashcore :: blockdata :: transaction :: special_transaction :: provider_update_service :: ProviderUpdateServicePayload >> :: ffi_from (* o_0)) , dashcore_blockdata_transaction_special_transaction_TransactionPayload :: ProviderUpdateRegistrarPayloadType (o_0) => dashcore :: blockdata :: transaction :: special_transaction :: TransactionPayload :: ProviderUpdateRegistrarPayloadType (< crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: provider_update_registrar :: dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload as ferment :: FFIConversionFrom < dashcore :: blockdata :: transaction :: special_transaction :: provider_update_registrar :: ProviderUpdateRegistrarPayload >> :: ffi_from (* o_0)) , dashcore_blockdata_transaction_special_transaction_TransactionPayload :: ProviderUpdateRevocationPayloadType (o_0) => dashcore :: blockdata :: transaction :: special_transaction :: TransactionPayload :: ProviderUpdateRevocationPayloadType (< crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: provider_update_revocation :: dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload as ferment :: FFIConversionFrom < dashcore :: blockdata :: transaction :: special_transaction :: provider_update_revocation :: ProviderUpdateRevocationPayload >> :: ffi_from (* o_0)) , dashcore_blockdata_transaction_special_transaction_TransactionPayload :: CoinbasePayloadType (o_0) => dashcore :: blockdata :: transaction :: special_transaction :: TransactionPayload :: CoinbasePayloadType (< crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: coinbase :: dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload as ferment :: FFIConversionFrom < dashcore :: blockdata :: transaction :: special_transaction :: coinbase :: CoinbasePayload >> :: ffi_from (* o_0)) , dashcore_blockdata_transaction_special_transaction_TransactionPayload :: QuorumCommitmentPayloadType (o_0) => dashcore :: blockdata :: transaction :: special_transaction :: TransactionPayload :: QuorumCommitmentPayloadType (< crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: quorum_commitment :: dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumCommitmentPayload as ferment :: FFIConversionFrom < dashcore :: blockdata :: transaction :: special_transaction :: quorum_commitment :: QuorumCommitmentPayload >> :: ffi_from (* o_0)) , dashcore_blockdata_transaction_special_transaction_TransactionPayload :: AssetLockPayloadType (o_0) => dashcore :: blockdata :: transaction :: special_transaction :: TransactionPayload :: AssetLockPayloadType (< crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: asset_lock :: dashcore_blockdata_transaction_special_transaction_asset_lock_AssetLockPayload as ferment :: FFIConversionFrom < dashcore :: blockdata :: transaction :: special_transaction :: asset_lock :: AssetLockPayload >> :: ffi_from (* o_0)) , dashcore_blockdata_transaction_special_transaction_TransactionPayload :: AssetUnlockPayloadType (o_0) => dashcore :: blockdata :: transaction :: special_transaction :: TransactionPayload :: AssetUnlockPayloadType (< crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: qualified_asset_unlock :: dashcore_blockdata_transaction_special_transaction_asset_unlock_qualified_asset_unlock_AssetUnlockPayload as ferment :: FFIConversionFrom < dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: qualified_asset_unlock :: AssetUnlockPayload >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dashcore :: blockdata :: transaction :: special_transaction :: TransactionPayload > for dashcore_blockdata_transaction_special_transaction_TransactionPayload { unsafe fn ffi_to_const (obj : dashcore :: blockdata :: transaction :: special_transaction :: TransactionPayload) -> * const dashcore_blockdata_transaction_special_transaction_TransactionPayload { ferment :: boxed (match obj { dashcore :: blockdata :: transaction :: special_transaction :: TransactionPayload :: ProviderRegistrationPayloadType (o_0) => dashcore_blockdata_transaction_special_transaction_TransactionPayload :: ProviderRegistrationPayloadType (< crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: provider_registration :: dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload as ferment :: FFIConversionTo < dashcore :: blockdata :: transaction :: special_transaction :: provider_registration :: ProviderRegistrationPayload >> :: ffi_to (o_0)) , dashcore :: blockdata :: transaction :: special_transaction :: TransactionPayload :: ProviderUpdateServicePayloadType (o_0) => dashcore_blockdata_transaction_special_transaction_TransactionPayload :: ProviderUpdateServicePayloadType (< crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: provider_update_service :: dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload as ferment :: FFIConversionTo < dashcore :: blockdata :: transaction :: special_transaction :: provider_update_service :: ProviderUpdateServicePayload >> :: ffi_to (o_0)) , dashcore :: blockdata :: transaction :: special_transaction :: TransactionPayload :: ProviderUpdateRegistrarPayloadType (o_0) => dashcore_blockdata_transaction_special_transaction_TransactionPayload :: ProviderUpdateRegistrarPayloadType (< crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: provider_update_registrar :: dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload as ferment :: FFIConversionTo < dashcore :: blockdata :: transaction :: special_transaction :: provider_update_registrar :: ProviderUpdateRegistrarPayload >> :: ffi_to (o_0)) , dashcore :: blockdata :: transaction :: special_transaction :: TransactionPayload :: ProviderUpdateRevocationPayloadType (o_0) => dashcore_blockdata_transaction_special_transaction_TransactionPayload :: ProviderUpdateRevocationPayloadType (< crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: provider_update_revocation :: dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload as ferment :: FFIConversionTo < dashcore :: blockdata :: transaction :: special_transaction :: provider_update_revocation :: ProviderUpdateRevocationPayload >> :: ffi_to (o_0)) , dashcore :: blockdata :: transaction :: special_transaction :: TransactionPayload :: CoinbasePayloadType (o_0) => dashcore_blockdata_transaction_special_transaction_TransactionPayload :: CoinbasePayloadType (< crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: coinbase :: dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload as ferment :: FFIConversionTo < dashcore :: blockdata :: transaction :: special_transaction :: coinbase :: CoinbasePayload >> :: ffi_to (o_0)) , dashcore :: blockdata :: transaction :: special_transaction :: TransactionPayload :: QuorumCommitmentPayloadType (o_0) => dashcore_blockdata_transaction_special_transaction_TransactionPayload :: QuorumCommitmentPayloadType (< crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: quorum_commitment :: dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumCommitmentPayload as ferment :: FFIConversionTo < dashcore :: blockdata :: transaction :: special_transaction :: quorum_commitment :: QuorumCommitmentPayload >> :: ffi_to (o_0)) , dashcore :: blockdata :: transaction :: special_transaction :: TransactionPayload :: AssetLockPayloadType (o_0) => dashcore_blockdata_transaction_special_transaction_TransactionPayload :: AssetLockPayloadType (< crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: asset_lock :: dashcore_blockdata_transaction_special_transaction_asset_lock_AssetLockPayload as ferment :: FFIConversionTo < dashcore :: blockdata :: transaction :: special_transaction :: asset_lock :: AssetLockPayload >> :: ffi_to (o_0)) , dashcore :: blockdata :: transaction :: special_transaction :: TransactionPayload :: AssetUnlockPayloadType (o_0) => dashcore_blockdata_transaction_special_transaction_TransactionPayload :: AssetUnlockPayloadType (< crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: qualified_asset_unlock :: dashcore_blockdata_transaction_special_transaction_asset_unlock_qualified_asset_unlock_AssetUnlockPayload as ferment :: FFIConversionTo < dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: qualified_asset_unlock :: AssetUnlockPayload >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dashcore_blockdata_transaction_special_transaction_TransactionPayload { fn drop (& mut self) { unsafe { match self { dashcore_blockdata_transaction_special_transaction_TransactionPayload :: ProviderRegistrationPayloadType (o_0) => { ferment :: unbox_any (* o_0) ; } , dashcore_blockdata_transaction_special_transaction_TransactionPayload :: ProviderUpdateServicePayloadType (o_0) => { ferment :: unbox_any (* o_0) ; } , dashcore_blockdata_transaction_special_transaction_TransactionPayload :: ProviderUpdateRegistrarPayloadType (o_0) => { ferment :: unbox_any (* o_0) ; } , dashcore_blockdata_transaction_special_transaction_TransactionPayload :: ProviderUpdateRevocationPayloadType (o_0) => { ferment :: unbox_any (* o_0) ; } , dashcore_blockdata_transaction_special_transaction_TransactionPayload :: CoinbasePayloadType (o_0) => { ferment :: unbox_any (* o_0) ; } , dashcore_blockdata_transaction_special_transaction_TransactionPayload :: QuorumCommitmentPayloadType (o_0) => { ferment :: unbox_any (* o_0) ; } , dashcore_blockdata_transaction_special_transaction_TransactionPayload :: AssetLockPayloadType (o_0) => { ferment :: unbox_any (* o_0) ; } , dashcore_blockdata_transaction_special_transaction_TransactionPayload :: AssetUnlockPayloadType (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_TransactionPayload_ProviderRegistrationPayloadType_ctor (o_o_0 : * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: provider_registration :: dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload) -> * mut dashcore_blockdata_transaction_special_transaction_TransactionPayload { ferment :: boxed (dashcore_blockdata_transaction_special_transaction_TransactionPayload :: ProviderRegistrationPayloadType (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_TransactionPayload_ProviderUpdateServicePayloadType_ctor (o_o_0 : * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: provider_update_service :: dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload) -> * mut dashcore_blockdata_transaction_special_transaction_TransactionPayload { ferment :: boxed (dashcore_blockdata_transaction_special_transaction_TransactionPayload :: ProviderUpdateServicePayloadType (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_TransactionPayload_ProviderUpdateRegistrarPayloadType_ctor (o_o_0 : * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: provider_update_registrar :: dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload) -> * mut dashcore_blockdata_transaction_special_transaction_TransactionPayload { ferment :: boxed (dashcore_blockdata_transaction_special_transaction_TransactionPayload :: ProviderUpdateRegistrarPayloadType (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_TransactionPayload_ProviderUpdateRevocationPayloadType_ctor (o_o_0 : * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: provider_update_revocation :: dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload) -> * mut dashcore_blockdata_transaction_special_transaction_TransactionPayload { ferment :: boxed (dashcore_blockdata_transaction_special_transaction_TransactionPayload :: ProviderUpdateRevocationPayloadType (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_TransactionPayload_CoinbasePayloadType_ctor (o_o_0 : * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: coinbase :: dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload) -> * mut dashcore_blockdata_transaction_special_transaction_TransactionPayload { ferment :: boxed (dashcore_blockdata_transaction_special_transaction_TransactionPayload :: CoinbasePayloadType (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_TransactionPayload_QuorumCommitmentPayloadType_ctor (o_o_0 : * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: quorum_commitment :: dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumCommitmentPayload) -> * mut dashcore_blockdata_transaction_special_transaction_TransactionPayload { ferment :: boxed (dashcore_blockdata_transaction_special_transaction_TransactionPayload :: QuorumCommitmentPayloadType (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_TransactionPayload_AssetLockPayloadType_ctor (o_o_0 : * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: asset_lock :: dashcore_blockdata_transaction_special_transaction_asset_lock_AssetLockPayload) -> * mut dashcore_blockdata_transaction_special_transaction_TransactionPayload { ferment :: boxed (dashcore_blockdata_transaction_special_transaction_TransactionPayload :: AssetLockPayloadType (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_TransactionPayload_AssetUnlockPayloadType_ctor (o_o_0 : * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: qualified_asset_unlock :: dashcore_blockdata_transaction_special_transaction_asset_unlock_qualified_asset_unlock_AssetUnlockPayload) -> * mut dashcore_blockdata_transaction_special_transaction_TransactionPayload { ferment :: boxed (dashcore_blockdata_transaction_special_transaction_TransactionPayload :: AssetUnlockPayloadType (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_TransactionPayload_destroy < > (ffi : * mut dashcore_blockdata_transaction_special_transaction_TransactionPayload) { ferment :: unbox_any (ffi) ; } pub mod quorum_commitment { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`QuorumFinalizationCommitment`]"] # [repr (C)] # [derive (Clone)] pub struct dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment { pub version : u16 , pub llmq_type : u8 , pub quorum_hash : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_QuorumHash , pub quorum_index : * mut i16 , pub signers : * mut crate :: fermented :: generics :: Vec_bool , pub valid_members : * mut crate :: fermented :: generics :: Vec_bool , pub quorum_public_key : * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSPublicKey , pub quorum_vvec_hash : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_QuorumVVecHash , pub quorum_sig : * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature , pub sig : * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature } impl ferment :: FFIConversionFrom < dashcore :: blockdata :: transaction :: special_transaction :: quorum_commitment :: QuorumFinalizationCommitment > for dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment { unsafe fn ffi_from_const (ffi : * const dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment) -> dashcore :: blockdata :: transaction :: special_transaction :: quorum_commitment :: QuorumFinalizationCommitment { let ffi_ref = & * ffi ; dashcore :: blockdata :: transaction :: special_transaction :: quorum_commitment :: QuorumFinalizationCommitment { version : ffi_ref . version , llmq_type : ffi_ref . llmq_type , quorum_hash : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_QuorumHash as ferment :: FFIConversionFrom < dashcore :: hash_types :: QuorumHash >> :: ffi_from (ffi_ref . quorum_hash) , quorum_index : ferment :: from_opt_primitive (ffi_ref . quorum_index) , signers : < crate :: fermented :: generics :: Vec_bool as ferment :: FFIConversionFrom < Vec < bool > >> :: ffi_from (ffi_ref . signers) , valid_members : < crate :: fermented :: generics :: Vec_bool as ferment :: FFIConversionFrom < Vec < bool > >> :: ffi_from (ffi_ref . valid_members) , quorum_public_key : < crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSPublicKey as ferment :: FFIConversionFrom < dashcore :: bls_sig_utils :: BLSPublicKey >> :: ffi_from (ffi_ref . quorum_public_key) , quorum_vvec_hash : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_QuorumVVecHash as ferment :: FFIConversionFrom < dashcore :: hash_types :: QuorumVVecHash >> :: ffi_from (ffi_ref . quorum_vvec_hash) , quorum_sig : < crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature as ferment :: FFIConversionFrom < dashcore :: bls_sig_utils :: BLSSignature >> :: ffi_from (ffi_ref . quorum_sig) , sig : < crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature as ferment :: FFIConversionFrom < dashcore :: bls_sig_utils :: BLSSignature >> :: ffi_from (ffi_ref . sig) } } } impl ferment :: FFIConversionTo < dashcore :: blockdata :: transaction :: special_transaction :: quorum_commitment :: QuorumFinalizationCommitment > for dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment { unsafe fn ffi_to_const (obj : dashcore :: blockdata :: transaction :: special_transaction :: quorum_commitment :: QuorumFinalizationCommitment) -> * const dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment { ferment :: boxed (dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment { version : obj . version , llmq_type : obj . llmq_type , quorum_hash : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_QuorumHash as ferment :: FFIConversionTo < dashcore :: hash_types :: QuorumHash >> :: ffi_to (obj . quorum_hash) , quorum_index : ferment :: to_opt_primitive (obj . quorum_index) , signers : < crate :: fermented :: generics :: Vec_bool as ferment :: FFIConversionTo < Vec < bool > >> :: ffi_to (obj . signers) , valid_members : < crate :: fermented :: generics :: Vec_bool as ferment :: FFIConversionTo < Vec < bool > >> :: ffi_to (obj . valid_members) , quorum_public_key : < crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSPublicKey as ferment :: FFIConversionTo < dashcore :: bls_sig_utils :: BLSPublicKey >> :: ffi_to (obj . quorum_public_key) , quorum_vvec_hash : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_QuorumVVecHash as ferment :: FFIConversionTo < dashcore :: hash_types :: QuorumVVecHash >> :: ffi_to (obj . quorum_vvec_hash) , quorum_sig : < crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature as ferment :: FFIConversionTo < dashcore :: bls_sig_utils :: BLSSignature >> :: ffi_to (obj . quorum_sig) , sig : < crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature as ferment :: FFIConversionTo < dashcore :: bls_sig_utils :: BLSSignature >> :: ffi_to (obj . sig) }) } } impl Drop for dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ferment :: unbox_any (ffi_ref . quorum_hash) ; ferment :: destroy_opt_primitive (ffi_ref . quorum_index) ; ferment :: unbox_any (ffi_ref . signers) ; ferment :: unbox_any (ffi_ref . valid_members) ; ferment :: unbox_any (ffi_ref . quorum_public_key) ; ferment :: unbox_any (ffi_ref . quorum_vvec_hash) ; ferment :: unbox_any (ffi_ref . quorum_sig) ; ferment :: unbox_any (ffi_ref . sig) ; } } } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment_ctor < > (version : u16 , llmq_type : u8 , quorum_hash : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_QuorumHash , quorum_index : * mut i16 , signers : * mut crate :: fermented :: generics :: Vec_bool , valid_members : * mut crate :: fermented :: generics :: Vec_bool , quorum_public_key : * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSPublicKey , quorum_vvec_hash : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_QuorumVVecHash , quorum_sig : * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature , sig : * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature) -> * mut dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment { ferment :: boxed (dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment { version , llmq_type , quorum_hash , quorum_index , signers , valid_members , quorum_public_key , quorum_vvec_hash , quorum_sig , sig }) } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment_destroy < > (ffi : * mut dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment_get_version < > (obj : * const dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment) -> u16 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment_get_llmq_type < > (obj : * const dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment) -> u8 { (* obj) . llmq_type } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment_get_quorum_hash < > (obj : * const dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_QuorumHash { (* obj) . quorum_hash } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment_get_quorum_index < > (obj : * const dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment) -> * mut i16 { (* obj) . quorum_index } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment_get_signers < > (obj : * const dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment) -> * mut crate :: fermented :: generics :: Vec_bool { (* obj) . signers } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment_get_valid_members < > (obj : * const dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment) -> * mut crate :: fermented :: generics :: Vec_bool { (* obj) . valid_members } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment_get_quorum_public_key < > (obj : * const dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment) -> * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSPublicKey { (* obj) . quorum_public_key } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment_get_quorum_vvec_hash < > (obj : * const dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_QuorumVVecHash { (* obj) . quorum_vvec_hash } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment_get_quorum_sig < > (obj : * const dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment) -> * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature { (* obj) . quorum_sig } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment_get_sig < > (obj : * const dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment) -> * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature { (* obj) . sig } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment_set_version < > (obj : * const dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment) -> u16 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment_set_llmq_type < > (obj : * const dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment) -> u8 { (* obj) . llmq_type } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment_set_quorum_hash < > (obj : * const dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_QuorumHash { (* obj) . quorum_hash } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment_set_quorum_index < > (obj : * const dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment) -> * mut i16 { (* obj) . quorum_index } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment_set_signers < > (obj : * const dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment) -> * mut crate :: fermented :: generics :: Vec_bool { (* obj) . signers } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment_set_valid_members < > (obj : * const dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment) -> * mut crate :: fermented :: generics :: Vec_bool { (* obj) . valid_members } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment_set_quorum_public_key < > (obj : * const dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment) -> * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSPublicKey { (* obj) . quorum_public_key } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment_set_quorum_vvec_hash < > (obj : * const dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_QuorumVVecHash { (* obj) . quorum_vvec_hash } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment_set_quorum_sig < > (obj : * const dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment) -> * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature { (* obj) . quorum_sig } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment_set_sig < > (obj : * const dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment) -> * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature { (* obj) . sig } # [doc = "FFI-representation of the [`QuorumCommitmentPayload`]"] # [repr (C)] # [derive (Clone)] pub struct dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumCommitmentPayload { pub version : u16 , pub height : u32 , pub finalization_commitment : * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: quorum_commitment :: dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment } impl ferment :: FFIConversionFrom < dashcore :: blockdata :: transaction :: special_transaction :: quorum_commitment :: QuorumCommitmentPayload > for dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumCommitmentPayload { unsafe fn ffi_from_const (ffi : * const dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumCommitmentPayload) -> dashcore :: blockdata :: transaction :: special_transaction :: quorum_commitment :: QuorumCommitmentPayload { let ffi_ref = & * ffi ; dashcore :: blockdata :: transaction :: special_transaction :: quorum_commitment :: QuorumCommitmentPayload { version : ffi_ref . version , height : ffi_ref . height , finalization_commitment : < crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: quorum_commitment :: dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment as ferment :: FFIConversionFrom < dashcore :: blockdata :: transaction :: special_transaction :: quorum_commitment :: QuorumFinalizationCommitment >> :: ffi_from (ffi_ref . finalization_commitment) } } } impl ferment :: FFIConversionTo < dashcore :: blockdata :: transaction :: special_transaction :: quorum_commitment :: QuorumCommitmentPayload > for dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumCommitmentPayload { unsafe fn ffi_to_const (obj : dashcore :: blockdata :: transaction :: special_transaction :: quorum_commitment :: QuorumCommitmentPayload) -> * const dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumCommitmentPayload { ferment :: boxed (dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumCommitmentPayload { version : obj . version , height : obj . height , finalization_commitment : < crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: quorum_commitment :: dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment as ferment :: FFIConversionTo < dashcore :: blockdata :: transaction :: special_transaction :: quorum_commitment :: QuorumFinalizationCommitment >> :: ffi_to (obj . finalization_commitment) }) } } impl Drop for dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumCommitmentPayload { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ferment :: unbox_any (ffi_ref . finalization_commitment) ; } } } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumCommitmentPayload_ctor < > (version : u16 , height : u32 , finalization_commitment : * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: quorum_commitment :: dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment) -> * mut dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumCommitmentPayload { ferment :: boxed (dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumCommitmentPayload { version , height , finalization_commitment }) } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumCommitmentPayload_destroy < > (ffi : * mut dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumCommitmentPayload) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumCommitmentPayload_get_version < > (obj : * const dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumCommitmentPayload) -> u16 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumCommitmentPayload_get_height < > (obj : * const dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumCommitmentPayload) -> u32 { (* obj) . height } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumCommitmentPayload_get_finalization_commitment < > (obj : * const dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumCommitmentPayload) -> * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: quorum_commitment :: dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment { (* obj) . finalization_commitment } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumCommitmentPayload_set_version < > (obj : * const dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumCommitmentPayload) -> u16 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumCommitmentPayload_set_height < > (obj : * const dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumCommitmentPayload) -> u32 { (* obj) . height } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumCommitmentPayload_set_finalization_commitment < > (obj : * const dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumCommitmentPayload) -> * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: quorum_commitment :: dashcore_blockdata_transaction_special_transaction_quorum_commitment_QuorumFinalizationCommitment { (* obj) . finalization_commitment } } pub mod coinbase { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`CoinbasePayload`]"] # [repr (C)] # [derive (Clone)] pub struct dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload { pub version : u16 , pub height : u32 , pub merkle_root_masternode_list : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_MerkleRootMasternodeList , pub merkle_root_quorums : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_MerkleRootQuorums , pub best_cl_height : * mut u32 , pub best_cl_signature : * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature , pub asset_locked_amount : * mut u64 } impl ferment :: FFIConversionFrom < dashcore :: blockdata :: transaction :: special_transaction :: coinbase :: CoinbasePayload > for dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload { unsafe fn ffi_from_const (ffi : * const dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload) -> dashcore :: blockdata :: transaction :: special_transaction :: coinbase :: CoinbasePayload { let ffi_ref = & * ffi ; dashcore :: blockdata :: transaction :: special_transaction :: coinbase :: CoinbasePayload { version : ffi_ref . version , height : ffi_ref . height , merkle_root_masternode_list : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_MerkleRootMasternodeList as ferment :: FFIConversionFrom < dashcore :: hash_types :: MerkleRootMasternodeList >> :: ffi_from (ffi_ref . merkle_root_masternode_list) , merkle_root_quorums : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_MerkleRootQuorums as ferment :: FFIConversionFrom < dashcore :: hash_types :: MerkleRootQuorums >> :: ffi_from (ffi_ref . merkle_root_quorums) , best_cl_height : ferment :: from_opt_primitive (ffi_ref . best_cl_height) , best_cl_signature : < crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature as ferment :: FFIConversionFrom < dashcore :: bls_sig_utils :: BLSSignature >> :: ffi_from_opt (ffi_ref . best_cl_signature) , asset_locked_amount : ferment :: from_opt_primitive (ffi_ref . asset_locked_amount) } } } impl ferment :: FFIConversionTo < dashcore :: blockdata :: transaction :: special_transaction :: coinbase :: CoinbasePayload > for dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload { unsafe fn ffi_to_const (obj : dashcore :: blockdata :: transaction :: special_transaction :: coinbase :: CoinbasePayload) -> * const dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload { ferment :: boxed (dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload { version : obj . version , height : obj . height , merkle_root_masternode_list : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_MerkleRootMasternodeList as ferment :: FFIConversionTo < dashcore :: hash_types :: MerkleRootMasternodeList >> :: ffi_to (obj . merkle_root_masternode_list) , merkle_root_quorums : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_MerkleRootQuorums as ferment :: FFIConversionTo < dashcore :: hash_types :: MerkleRootQuorums >> :: ffi_to (obj . merkle_root_quorums) , best_cl_height : ferment :: to_opt_primitive (obj . best_cl_height) , best_cl_signature : < crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature as ferment :: FFIConversionTo < dashcore :: bls_sig_utils :: BLSSignature >> :: ffi_to_opt (obj . best_cl_signature) , asset_locked_amount : ferment :: to_opt_primitive (obj . asset_locked_amount) }) } } impl Drop for dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ferment :: unbox_any (ffi_ref . merkle_root_masternode_list) ; ferment :: unbox_any (ffi_ref . merkle_root_quorums) ; ferment :: destroy_opt_primitive (ffi_ref . best_cl_height) ; ferment :: unbox_any_opt (ffi_ref . best_cl_signature) ; ferment :: destroy_opt_primitive (ffi_ref . asset_locked_amount) ; } } } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload_ctor < > (version : u16 , height : u32 , merkle_root_masternode_list : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_MerkleRootMasternodeList , merkle_root_quorums : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_MerkleRootQuorums , best_cl_height : * mut u32 , best_cl_signature : * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature , asset_locked_amount : * mut u64) -> * mut dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload { ferment :: boxed (dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload { version , height , merkle_root_masternode_list , merkle_root_quorums , best_cl_height , best_cl_signature , asset_locked_amount }) } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload_destroy < > (ffi : * mut dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload_get_version < > (obj : * const dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload) -> u16 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload_get_height < > (obj : * const dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload) -> u32 { (* obj) . height } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload_get_merkle_root_masternode_list < > (obj : * const dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_MerkleRootMasternodeList { (* obj) . merkle_root_masternode_list } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload_get_merkle_root_quorums < > (obj : * const dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_MerkleRootQuorums { (* obj) . merkle_root_quorums } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload_get_best_cl_height < > (obj : * const dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload) -> * mut u32 { (* obj) . best_cl_height } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload_get_best_cl_signature < > (obj : * const dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload) -> * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature { (* obj) . best_cl_signature } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload_get_asset_locked_amount < > (obj : * const dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload) -> * mut u64 { (* obj) . asset_locked_amount } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload_set_version < > (obj : * const dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload) -> u16 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload_set_height < > (obj : * const dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload) -> u32 { (* obj) . height } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload_set_merkle_root_masternode_list < > (obj : * const dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_MerkleRootMasternodeList { (* obj) . merkle_root_masternode_list } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload_set_merkle_root_quorums < > (obj : * const dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_MerkleRootQuorums { (* obj) . merkle_root_quorums } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload_set_best_cl_height < > (obj : * const dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload) -> * mut u32 { (* obj) . best_cl_height } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload_set_best_cl_signature < > (obj : * const dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload) -> * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature { (* obj) . best_cl_signature } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload_set_asset_locked_amount < > (obj : * const dashcore_blockdata_transaction_special_transaction_coinbase_CoinbasePayload) -> * mut u64 { (* obj) . asset_locked_amount } } pub mod provider_update_revocation { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`ProviderUpdateRevocationPayload`]"] # [repr (C)] # [derive (Clone)] pub struct dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload { pub version : u16 , pub pro_tx_hash : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid , pub reason : u16 , pub inputs_hash : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_InputsHash , pub payload_sig : * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature } impl ferment :: FFIConversionFrom < dashcore :: blockdata :: transaction :: special_transaction :: provider_update_revocation :: ProviderUpdateRevocationPayload > for dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload { unsafe fn ffi_from_const (ffi : * const dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload) -> dashcore :: blockdata :: transaction :: special_transaction :: provider_update_revocation :: ProviderUpdateRevocationPayload { let ffi_ref = & * ffi ; dashcore :: blockdata :: transaction :: special_transaction :: provider_update_revocation :: ProviderUpdateRevocationPayload { version : ffi_ref . version , pro_tx_hash : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid as ferment :: FFIConversionFrom < dashcore :: hash_types :: Txid >> :: ffi_from (ffi_ref . pro_tx_hash) , reason : ffi_ref . reason , inputs_hash : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_InputsHash as ferment :: FFIConversionFrom < dashcore :: hash_types :: InputsHash >> :: ffi_from (ffi_ref . inputs_hash) , payload_sig : < crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature as ferment :: FFIConversionFrom < dashcore :: bls_sig_utils :: BLSSignature >> :: ffi_from (ffi_ref . payload_sig) } } } impl ferment :: FFIConversionTo < dashcore :: blockdata :: transaction :: special_transaction :: provider_update_revocation :: ProviderUpdateRevocationPayload > for dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload { unsafe fn ffi_to_const (obj : dashcore :: blockdata :: transaction :: special_transaction :: provider_update_revocation :: ProviderUpdateRevocationPayload) -> * const dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload { ferment :: boxed (dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload { version : obj . version , pro_tx_hash : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid as ferment :: FFIConversionTo < dashcore :: hash_types :: Txid >> :: ffi_to (obj . pro_tx_hash) , reason : obj . reason , inputs_hash : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_InputsHash as ferment :: FFIConversionTo < dashcore :: hash_types :: InputsHash >> :: ffi_to (obj . inputs_hash) , payload_sig : < crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature as ferment :: FFIConversionTo < dashcore :: bls_sig_utils :: BLSSignature >> :: ffi_to (obj . payload_sig) }) } } impl Drop for dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment :: unbox_any (ffi_ref . pro_tx_hash) ; ; ferment :: unbox_any (ffi_ref . inputs_hash) ; ferment :: unbox_any (ffi_ref . payload_sig) ; } } } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload_ctor < > (version : u16 , pro_tx_hash : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid , reason : u16 , inputs_hash : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_InputsHash , payload_sig : * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature) -> * mut dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload { ferment :: boxed (dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload { version , pro_tx_hash , reason , inputs_hash , payload_sig }) } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload_destroy < > (ffi : * mut dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload_get_version < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload) -> u16 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload_get_pro_tx_hash < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid { (* obj) . pro_tx_hash } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload_get_reason < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload) -> u16 { (* obj) . reason } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload_get_inputs_hash < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_InputsHash { (* obj) . inputs_hash } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload_get_payload_sig < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload) -> * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature { (* obj) . payload_sig } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload_set_version < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload) -> u16 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload_set_pro_tx_hash < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid { (* obj) . pro_tx_hash } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload_set_reason < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload) -> u16 { (* obj) . reason } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload_set_inputs_hash < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_InputsHash { (* obj) . inputs_hash } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload_set_payload_sig < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_revocation_ProviderUpdateRevocationPayload) -> * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature { (* obj) . payload_sig } } pub mod provider_registration { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`ProviderRegistrationPayload`]"] # [repr (C)] # [derive (Clone)] pub struct dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload { pub version : u16 , pub provider_type : u16 , pub provider_mode : u16 , pub collateral_outpoint : * mut dashcore :: transaction :: outpoint :: OutPoint , pub ip_address : * mut [u8 ; 16] , pub port : u16 , pub owner_key_hash : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_PubkeyHash , pub operator_public_key : * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSPublicKey , pub voting_key_hash : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_PubkeyHash , pub operator_reward : u16 , pub script_payout : * mut dashcore :: blockdata :: script :: ScriptBuf , pub inputs_hash : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_InputsHash , pub payload_sig : * mut crate :: fermented :: generics :: Vec_u8 } impl ferment :: FFIConversionFrom < dashcore :: blockdata :: transaction :: special_transaction :: provider_registration :: ProviderRegistrationPayload > for dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload { unsafe fn ffi_from_const (ffi : * const dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload) -> dashcore :: blockdata :: transaction :: special_transaction :: provider_registration :: ProviderRegistrationPayload { let ffi_ref = & * ffi ; dashcore :: blockdata :: transaction :: special_transaction :: provider_registration :: ProviderRegistrationPayload { version : ffi_ref . version , provider_type : ffi_ref . provider_type , provider_mode : ffi_ref . provider_mode , collateral_outpoint : (& * ffi_ref . collateral_outpoint) . clone () , ip_address : < [u8 ; 16] as ferment :: FFIConversionFrom < u128 >> :: ffi_from (ffi_ref . ip_address) , port : ffi_ref . port , owner_key_hash : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_PubkeyHash as ferment :: FFIConversionFrom < dashcore :: hash_types :: PubkeyHash >> :: ffi_from (ffi_ref . owner_key_hash) , operator_public_key : < crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSPublicKey as ferment :: FFIConversionFrom < dashcore :: bls_sig_utils :: BLSPublicKey >> :: ffi_from (ffi_ref . operator_public_key) , voting_key_hash : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_PubkeyHash as ferment :: FFIConversionFrom < dashcore :: hash_types :: PubkeyHash >> :: ffi_from (ffi_ref . voting_key_hash) , operator_reward : ffi_ref . operator_reward , script_payout : (& * ffi_ref . script_payout) . clone () , inputs_hash : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_InputsHash as ferment :: FFIConversionFrom < dashcore :: hash_types :: InputsHash >> :: ffi_from (ffi_ref . inputs_hash) , payload_sig : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (ffi_ref . payload_sig) } } } impl ferment :: FFIConversionTo < dashcore :: blockdata :: transaction :: special_transaction :: provider_registration :: ProviderRegistrationPayload > for dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload { unsafe fn ffi_to_const (obj : dashcore :: blockdata :: transaction :: special_transaction :: provider_registration :: ProviderRegistrationPayload) -> * const dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload { ferment :: boxed (dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload { version : obj . version , provider_type : obj . provider_type , provider_mode : obj . provider_mode , collateral_outpoint : ferment :: boxed (obj . collateral_outpoint) , ip_address : < [u8 ; 16] as ferment :: FFIConversionTo < u128 >> :: ffi_to (obj . ip_address) , port : obj . port , owner_key_hash : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_PubkeyHash as ferment :: FFIConversionTo < dashcore :: hash_types :: PubkeyHash >> :: ffi_to (obj . owner_key_hash) , operator_public_key : < crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSPublicKey as ferment :: FFIConversionTo < dashcore :: bls_sig_utils :: BLSPublicKey >> :: ffi_to (obj . operator_public_key) , voting_key_hash : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_PubkeyHash as ferment :: FFIConversionTo < dashcore :: hash_types :: PubkeyHash >> :: ffi_to (obj . voting_key_hash) , operator_reward : obj . operator_reward , script_payout : ferment :: boxed (obj . script_payout) , inputs_hash : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_InputsHash as ferment :: FFIConversionTo < dashcore :: hash_types :: InputsHash >> :: ffi_to (obj . inputs_hash) , payload_sig : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj . payload_sig) }) } } impl Drop for dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ; ferment :: unbox_any (ffi_ref . collateral_outpoint) ; ferment :: unbox_any_opt (ffi_ref . ip_address) ; ; ferment :: unbox_any (ffi_ref . owner_key_hash) ; ferment :: unbox_any (ffi_ref . operator_public_key) ; ferment :: unbox_any (ffi_ref . voting_key_hash) ; ; ferment :: unbox_any (ffi_ref . script_payout) ; ferment :: unbox_any (ffi_ref . inputs_hash) ; ferment :: unbox_any (ffi_ref . payload_sig) ; } } } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload_ctor < > (version : u16 , provider_type : u16 , provider_mode : u16 , collateral_outpoint : * mut dashcore :: transaction :: outpoint :: OutPoint , ip_address : * mut [u8 ; 16] , port : u16 , owner_key_hash : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_PubkeyHash , operator_public_key : * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSPublicKey , voting_key_hash : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_PubkeyHash , operator_reward : u16 , script_payout : * mut dashcore :: blockdata :: script :: ScriptBuf , inputs_hash : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_InputsHash , payload_sig : * mut crate :: fermented :: generics :: Vec_u8) -> * mut dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload { ferment :: boxed (dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload { version , provider_type , provider_mode , collateral_outpoint , ip_address , port , owner_key_hash , operator_public_key , voting_key_hash , operator_reward , script_payout , inputs_hash , payload_sig }) } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload_destroy < > (ffi : * mut dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload_get_version < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload) -> u16 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload_get_provider_type < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload) -> u16 { (* obj) . provider_type } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload_get_provider_mode < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload) -> u16 { (* obj) . provider_mode } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload_get_collateral_outpoint < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload) -> * mut dashcore :: transaction :: outpoint :: OutPoint { (* obj) . collateral_outpoint } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload_get_ip_address < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload) -> * mut [u8 ; 16] { (* obj) . ip_address } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload_get_port < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload) -> u16 { (* obj) . port } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload_get_owner_key_hash < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_PubkeyHash { (* obj) . owner_key_hash } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload_get_operator_public_key < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload) -> * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSPublicKey { (* obj) . operator_public_key } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload_get_voting_key_hash < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_PubkeyHash { (* obj) . voting_key_hash } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload_get_operator_reward < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload) -> u16 { (* obj) . operator_reward } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload_get_script_payout < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload) -> * mut dashcore :: blockdata :: script :: ScriptBuf { (* obj) . script_payout } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload_get_inputs_hash < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_InputsHash { (* obj) . inputs_hash } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload_get_payload_sig < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . payload_sig } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload_set_version < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload) -> u16 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload_set_provider_type < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload) -> u16 { (* obj) . provider_type } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload_set_provider_mode < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload) -> u16 { (* obj) . provider_mode } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload_set_collateral_outpoint < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload) -> * mut dashcore :: transaction :: outpoint :: OutPoint { (* obj) . collateral_outpoint } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload_set_ip_address < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload) -> * mut [u8 ; 16] { (* obj) . ip_address } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload_set_port < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload) -> u16 { (* obj) . port } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload_set_owner_key_hash < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_PubkeyHash { (* obj) . owner_key_hash } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload_set_operator_public_key < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload) -> * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSPublicKey { (* obj) . operator_public_key } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload_set_voting_key_hash < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_PubkeyHash { (* obj) . voting_key_hash } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload_set_operator_reward < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload) -> u16 { (* obj) . operator_reward } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload_set_script_payout < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload) -> * mut dashcore :: blockdata :: script :: ScriptBuf { (* obj) . script_payout } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload_set_inputs_hash < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_InputsHash { (* obj) . inputs_hash } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload_set_payload_sig < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_registration_ProviderRegistrationPayload) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . payload_sig } } pub mod asset_lock { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`AssetLockPayload`]"] # [repr (C)] # [derive (Clone)] pub struct dashcore_blockdata_transaction_special_transaction_asset_lock_AssetLockPayload { pub version : u8 , pub credit_outputs : * mut crate :: fermented :: generics :: Vec_dashcore_blockdata_transaction_txout_TxOut } impl ferment :: FFIConversionFrom < dashcore :: blockdata :: transaction :: special_transaction :: asset_lock :: AssetLockPayload > for dashcore_blockdata_transaction_special_transaction_asset_lock_AssetLockPayload { unsafe fn ffi_from_const (ffi : * const dashcore_blockdata_transaction_special_transaction_asset_lock_AssetLockPayload) -> dashcore :: blockdata :: transaction :: special_transaction :: asset_lock :: AssetLockPayload { let ffi_ref = & * ffi ; dashcore :: blockdata :: transaction :: special_transaction :: asset_lock :: AssetLockPayload { version : ffi_ref . version , credit_outputs : < crate :: fermented :: generics :: Vec_dashcore_blockdata_transaction_txout_TxOut as ferment :: FFIConversionFrom < Vec < dashcore :: blockdata :: transaction :: txout :: TxOut > >> :: ffi_from (ffi_ref . credit_outputs) } } } impl ferment :: FFIConversionTo < dashcore :: blockdata :: transaction :: special_transaction :: asset_lock :: AssetLockPayload > for dashcore_blockdata_transaction_special_transaction_asset_lock_AssetLockPayload { unsafe fn ffi_to_const (obj : dashcore :: blockdata :: transaction :: special_transaction :: asset_lock :: AssetLockPayload) -> * const dashcore_blockdata_transaction_special_transaction_asset_lock_AssetLockPayload { ferment :: boxed (dashcore_blockdata_transaction_special_transaction_asset_lock_AssetLockPayload { version : obj . version , credit_outputs : < crate :: fermented :: generics :: Vec_dashcore_blockdata_transaction_txout_TxOut as ferment :: FFIConversionTo < Vec < dashcore :: blockdata :: transaction :: txout :: TxOut > >> :: ffi_to (obj . credit_outputs) }) } } impl Drop for dashcore_blockdata_transaction_special_transaction_asset_lock_AssetLockPayload { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment :: unbox_any (ffi_ref . credit_outputs) ; } } } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_asset_lock_AssetLockPayload_ctor < > (version : u8 , credit_outputs : * mut crate :: fermented :: generics :: Vec_dashcore_blockdata_transaction_txout_TxOut) -> * mut dashcore_blockdata_transaction_special_transaction_asset_lock_AssetLockPayload { ferment :: boxed (dashcore_blockdata_transaction_special_transaction_asset_lock_AssetLockPayload { version , credit_outputs }) } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_asset_lock_AssetLockPayload_destroy < > (ffi : * mut dashcore_blockdata_transaction_special_transaction_asset_lock_AssetLockPayload) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_asset_lock_AssetLockPayload_get_version < > (obj : * const dashcore_blockdata_transaction_special_transaction_asset_lock_AssetLockPayload) -> u8 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_asset_lock_AssetLockPayload_get_credit_outputs < > (obj : * const dashcore_blockdata_transaction_special_transaction_asset_lock_AssetLockPayload) -> * mut crate :: fermented :: generics :: Vec_dashcore_blockdata_transaction_txout_TxOut { (* obj) . credit_outputs } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_asset_lock_AssetLockPayload_set_version < > (obj : * const dashcore_blockdata_transaction_special_transaction_asset_lock_AssetLockPayload) -> u8 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_asset_lock_AssetLockPayload_set_credit_outputs < > (obj : * const dashcore_blockdata_transaction_special_transaction_asset_lock_AssetLockPayload) -> * mut crate :: fermented :: generics :: Vec_dashcore_blockdata_transaction_txout_TxOut { (* obj) . credit_outputs } } pub mod asset_unlock { use crate as dash_spv_apple_bindings ; pub mod unqualified_asset_unlock { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`AssetUnlockBasePayload`]"] # [repr (C)] # [derive (Clone)] pub struct dashcore_blockdata_transaction_special_transaction_asset_unlock_unqualified_asset_unlock_AssetUnlockBasePayload { pub version : u8 , pub index : u64 , pub fee : u32 } impl ferment :: FFIConversionFrom < dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: unqualified_asset_unlock :: AssetUnlockBasePayload > for dashcore_blockdata_transaction_special_transaction_asset_unlock_unqualified_asset_unlock_AssetUnlockBasePayload { unsafe fn ffi_from_const (ffi : * const dashcore_blockdata_transaction_special_transaction_asset_unlock_unqualified_asset_unlock_AssetUnlockBasePayload) -> dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: unqualified_asset_unlock :: AssetUnlockBasePayload { let ffi_ref = & * ffi ; dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: unqualified_asset_unlock :: AssetUnlockBasePayload { version : ffi_ref . version , index : ffi_ref . index , fee : ffi_ref . fee } } } impl ferment :: FFIConversionTo < dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: unqualified_asset_unlock :: AssetUnlockBasePayload > for dashcore_blockdata_transaction_special_transaction_asset_unlock_unqualified_asset_unlock_AssetUnlockBasePayload { unsafe fn ffi_to_const (obj : dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: unqualified_asset_unlock :: AssetUnlockBasePayload) -> * const dashcore_blockdata_transaction_special_transaction_asset_unlock_unqualified_asset_unlock_AssetUnlockBasePayload { ferment :: boxed (dashcore_blockdata_transaction_special_transaction_asset_unlock_unqualified_asset_unlock_AssetUnlockBasePayload { version : obj . version , index : obj . index , fee : obj . fee }) } } impl Drop for dashcore_blockdata_transaction_special_transaction_asset_unlock_unqualified_asset_unlock_AssetUnlockBasePayload { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_asset_unlock_unqualified_asset_unlock_AssetUnlockBasePayload_ctor < > (version : u8 , index : u64 , fee : u32) -> * mut dashcore_blockdata_transaction_special_transaction_asset_unlock_unqualified_asset_unlock_AssetUnlockBasePayload { ferment :: boxed (dashcore_blockdata_transaction_special_transaction_asset_unlock_unqualified_asset_unlock_AssetUnlockBasePayload { version , index , fee }) } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_asset_unlock_unqualified_asset_unlock_AssetUnlockBasePayload_destroy < > (ffi : * mut dashcore_blockdata_transaction_special_transaction_asset_unlock_unqualified_asset_unlock_AssetUnlockBasePayload) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_asset_unlock_unqualified_asset_unlock_AssetUnlockBasePayload_get_version < > (obj : * const dashcore_blockdata_transaction_special_transaction_asset_unlock_unqualified_asset_unlock_AssetUnlockBasePayload) -> u8 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_asset_unlock_unqualified_asset_unlock_AssetUnlockBasePayload_get_index < > (obj : * const dashcore_blockdata_transaction_special_transaction_asset_unlock_unqualified_asset_unlock_AssetUnlockBasePayload) -> u64 { (* obj) . index } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_asset_unlock_unqualified_asset_unlock_AssetUnlockBasePayload_get_fee < > (obj : * const dashcore_blockdata_transaction_special_transaction_asset_unlock_unqualified_asset_unlock_AssetUnlockBasePayload) -> u32 { (* obj) . fee } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_asset_unlock_unqualified_asset_unlock_AssetUnlockBasePayload_set_version < > (obj : * const dashcore_blockdata_transaction_special_transaction_asset_unlock_unqualified_asset_unlock_AssetUnlockBasePayload) -> u8 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_asset_unlock_unqualified_asset_unlock_AssetUnlockBasePayload_set_index < > (obj : * const dashcore_blockdata_transaction_special_transaction_asset_unlock_unqualified_asset_unlock_AssetUnlockBasePayload) -> u64 { (* obj) . index } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_asset_unlock_unqualified_asset_unlock_AssetUnlockBasePayload_set_fee < > (obj : * const dashcore_blockdata_transaction_special_transaction_asset_unlock_unqualified_asset_unlock_AssetUnlockBasePayload) -> u32 { (* obj) . fee } } pub mod qualified_asset_unlock { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`AssetUnlockPayload`]"] # [repr (C)] # [derive (Clone)] pub struct dashcore_blockdata_transaction_special_transaction_asset_unlock_qualified_asset_unlock_AssetUnlockPayload { pub base : * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: unqualified_asset_unlock :: dashcore_blockdata_transaction_special_transaction_asset_unlock_unqualified_asset_unlock_AssetUnlockBasePayload , pub request_info : * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: request_info :: dashcore_blockdata_transaction_special_transaction_asset_unlock_request_info_AssetUnlockRequestInfo , pub quorum_sig : * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature } impl ferment :: FFIConversionFrom < dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: qualified_asset_unlock :: AssetUnlockPayload > for dashcore_blockdata_transaction_special_transaction_asset_unlock_qualified_asset_unlock_AssetUnlockPayload { unsafe fn ffi_from_const (ffi : * const dashcore_blockdata_transaction_special_transaction_asset_unlock_qualified_asset_unlock_AssetUnlockPayload) -> dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: qualified_asset_unlock :: AssetUnlockPayload { let ffi_ref = & * ffi ; dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: qualified_asset_unlock :: AssetUnlockPayload { base : < crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: unqualified_asset_unlock :: dashcore_blockdata_transaction_special_transaction_asset_unlock_unqualified_asset_unlock_AssetUnlockBasePayload as ferment :: FFIConversionFrom < dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: unqualified_asset_unlock :: AssetUnlockBasePayload >> :: ffi_from (ffi_ref . base) , request_info : < crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: request_info :: dashcore_blockdata_transaction_special_transaction_asset_unlock_request_info_AssetUnlockRequestInfo as ferment :: FFIConversionFrom < dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: request_info :: AssetUnlockRequestInfo >> :: ffi_from (ffi_ref . request_info) , quorum_sig : < crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature as ferment :: FFIConversionFrom < dashcore :: bls_sig_utils :: BLSSignature >> :: ffi_from (ffi_ref . quorum_sig) } } } impl ferment :: FFIConversionTo < dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: qualified_asset_unlock :: AssetUnlockPayload > for dashcore_blockdata_transaction_special_transaction_asset_unlock_qualified_asset_unlock_AssetUnlockPayload { unsafe fn ffi_to_const (obj : dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: qualified_asset_unlock :: AssetUnlockPayload) -> * const dashcore_blockdata_transaction_special_transaction_asset_unlock_qualified_asset_unlock_AssetUnlockPayload { ferment :: boxed (dashcore_blockdata_transaction_special_transaction_asset_unlock_qualified_asset_unlock_AssetUnlockPayload { base : < crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: unqualified_asset_unlock :: dashcore_blockdata_transaction_special_transaction_asset_unlock_unqualified_asset_unlock_AssetUnlockBasePayload as ferment :: FFIConversionTo < dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: unqualified_asset_unlock :: AssetUnlockBasePayload >> :: ffi_to (obj . base) , request_info : < crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: request_info :: dashcore_blockdata_transaction_special_transaction_asset_unlock_request_info_AssetUnlockRequestInfo as ferment :: FFIConversionTo < dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: request_info :: AssetUnlockRequestInfo >> :: ffi_to (obj . request_info) , quorum_sig : < crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature as ferment :: FFIConversionTo < dashcore :: bls_sig_utils :: BLSSignature >> :: ffi_to (obj . quorum_sig) }) } } impl Drop for dashcore_blockdata_transaction_special_transaction_asset_unlock_qualified_asset_unlock_AssetUnlockPayload { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . base) ; ferment :: unbox_any (ffi_ref . request_info) ; ferment :: unbox_any (ffi_ref . quorum_sig) ; } } } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_asset_unlock_qualified_asset_unlock_AssetUnlockPayload_ctor < > (base : * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: unqualified_asset_unlock :: dashcore_blockdata_transaction_special_transaction_asset_unlock_unqualified_asset_unlock_AssetUnlockBasePayload , request_info : * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: request_info :: dashcore_blockdata_transaction_special_transaction_asset_unlock_request_info_AssetUnlockRequestInfo , quorum_sig : * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature) -> * mut dashcore_blockdata_transaction_special_transaction_asset_unlock_qualified_asset_unlock_AssetUnlockPayload { ferment :: boxed (dashcore_blockdata_transaction_special_transaction_asset_unlock_qualified_asset_unlock_AssetUnlockPayload { base , request_info , quorum_sig }) } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_asset_unlock_qualified_asset_unlock_AssetUnlockPayload_destroy < > (ffi : * mut dashcore_blockdata_transaction_special_transaction_asset_unlock_qualified_asset_unlock_AssetUnlockPayload) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_asset_unlock_qualified_asset_unlock_AssetUnlockPayload_get_base < > (obj : * const dashcore_blockdata_transaction_special_transaction_asset_unlock_qualified_asset_unlock_AssetUnlockPayload) -> * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: unqualified_asset_unlock :: dashcore_blockdata_transaction_special_transaction_asset_unlock_unqualified_asset_unlock_AssetUnlockBasePayload { (* obj) . base } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_asset_unlock_qualified_asset_unlock_AssetUnlockPayload_get_request_info < > (obj : * const dashcore_blockdata_transaction_special_transaction_asset_unlock_qualified_asset_unlock_AssetUnlockPayload) -> * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: request_info :: dashcore_blockdata_transaction_special_transaction_asset_unlock_request_info_AssetUnlockRequestInfo { (* obj) . request_info } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_asset_unlock_qualified_asset_unlock_AssetUnlockPayload_get_quorum_sig < > (obj : * const dashcore_blockdata_transaction_special_transaction_asset_unlock_qualified_asset_unlock_AssetUnlockPayload) -> * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature { (* obj) . quorum_sig } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_asset_unlock_qualified_asset_unlock_AssetUnlockPayload_set_base < > (obj : * const dashcore_blockdata_transaction_special_transaction_asset_unlock_qualified_asset_unlock_AssetUnlockPayload) -> * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: unqualified_asset_unlock :: dashcore_blockdata_transaction_special_transaction_asset_unlock_unqualified_asset_unlock_AssetUnlockBasePayload { (* obj) . base } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_asset_unlock_qualified_asset_unlock_AssetUnlockPayload_set_request_info < > (obj : * const dashcore_blockdata_transaction_special_transaction_asset_unlock_qualified_asset_unlock_AssetUnlockPayload) -> * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: request_info :: dashcore_blockdata_transaction_special_transaction_asset_unlock_request_info_AssetUnlockRequestInfo { (* obj) . request_info } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_asset_unlock_qualified_asset_unlock_AssetUnlockPayload_set_quorum_sig < > (obj : * const dashcore_blockdata_transaction_special_transaction_asset_unlock_qualified_asset_unlock_AssetUnlockPayload) -> * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature { (* obj) . quorum_sig } } pub mod request_info { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`AssetUnlockRequestInfo`]"] # [repr (C)] # [derive (Clone)] pub struct dashcore_blockdata_transaction_special_transaction_asset_unlock_request_info_AssetUnlockRequestInfo { pub request_height : u32 , pub quorum_hash : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_QuorumHash } impl ferment :: FFIConversionFrom < dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: request_info :: AssetUnlockRequestInfo > for dashcore_blockdata_transaction_special_transaction_asset_unlock_request_info_AssetUnlockRequestInfo { unsafe fn ffi_from_const (ffi : * const dashcore_blockdata_transaction_special_transaction_asset_unlock_request_info_AssetUnlockRequestInfo) -> dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: request_info :: AssetUnlockRequestInfo { let ffi_ref = & * ffi ; dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: request_info :: AssetUnlockRequestInfo { request_height : ffi_ref . request_height , quorum_hash : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_QuorumHash as ferment :: FFIConversionFrom < dashcore :: hash_types :: QuorumHash >> :: ffi_from (ffi_ref . quorum_hash) } } } impl ferment :: FFIConversionTo < dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: request_info :: AssetUnlockRequestInfo > for dashcore_blockdata_transaction_special_transaction_asset_unlock_request_info_AssetUnlockRequestInfo { unsafe fn ffi_to_const (obj : dashcore :: blockdata :: transaction :: special_transaction :: asset_unlock :: request_info :: AssetUnlockRequestInfo) -> * const dashcore_blockdata_transaction_special_transaction_asset_unlock_request_info_AssetUnlockRequestInfo { ferment :: boxed (dashcore_blockdata_transaction_special_transaction_asset_unlock_request_info_AssetUnlockRequestInfo { request_height : obj . request_height , quorum_hash : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_QuorumHash as ferment :: FFIConversionTo < dashcore :: hash_types :: QuorumHash >> :: ffi_to (obj . quorum_hash) }) } } impl Drop for dashcore_blockdata_transaction_special_transaction_asset_unlock_request_info_AssetUnlockRequestInfo { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment :: unbox_any (ffi_ref . quorum_hash) ; } } } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_asset_unlock_request_info_AssetUnlockRequestInfo_ctor < > (request_height : u32 , quorum_hash : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_QuorumHash) -> * mut dashcore_blockdata_transaction_special_transaction_asset_unlock_request_info_AssetUnlockRequestInfo { ferment :: boxed (dashcore_blockdata_transaction_special_transaction_asset_unlock_request_info_AssetUnlockRequestInfo { request_height , quorum_hash }) } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_asset_unlock_request_info_AssetUnlockRequestInfo_destroy < > (ffi : * mut dashcore_blockdata_transaction_special_transaction_asset_unlock_request_info_AssetUnlockRequestInfo) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_asset_unlock_request_info_AssetUnlockRequestInfo_get_request_height < > (obj : * const dashcore_blockdata_transaction_special_transaction_asset_unlock_request_info_AssetUnlockRequestInfo) -> u32 { (* obj) . request_height } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_asset_unlock_request_info_AssetUnlockRequestInfo_get_quorum_hash < > (obj : * const dashcore_blockdata_transaction_special_transaction_asset_unlock_request_info_AssetUnlockRequestInfo) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_QuorumHash { (* obj) . quorum_hash } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_asset_unlock_request_info_AssetUnlockRequestInfo_set_request_height < > (obj : * const dashcore_blockdata_transaction_special_transaction_asset_unlock_request_info_AssetUnlockRequestInfo) -> u32 { (* obj) . request_height } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_asset_unlock_request_info_AssetUnlockRequestInfo_set_quorum_hash < > (obj : * const dashcore_blockdata_transaction_special_transaction_asset_unlock_request_info_AssetUnlockRequestInfo) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_QuorumHash { (* obj) . quorum_hash } } } pub mod provider_update_service { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`ProviderUpdateServicePayload`]"] # [repr (C)] # [derive (Clone)] pub struct dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload { pub version : u16 , pub pro_tx_hash : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid , pub ip_address : * mut [u8 ; 16] , pub port : u16 , pub script_payout : * mut dashcore :: blockdata :: script :: ScriptBuf , pub inputs_hash : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_InputsHash , pub payload_sig : * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature } impl ferment :: FFIConversionFrom < dashcore :: blockdata :: transaction :: special_transaction :: provider_update_service :: ProviderUpdateServicePayload > for dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload { unsafe fn ffi_from_const (ffi : * const dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload) -> dashcore :: blockdata :: transaction :: special_transaction :: provider_update_service :: ProviderUpdateServicePayload { let ffi_ref = & * ffi ; dashcore :: blockdata :: transaction :: special_transaction :: provider_update_service :: ProviderUpdateServicePayload { version : ffi_ref . version , pro_tx_hash : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid as ferment :: FFIConversionFrom < dashcore :: hash_types :: Txid >> :: ffi_from (ffi_ref . pro_tx_hash) , ip_address : < [u8 ; 16] as ferment :: FFIConversionFrom < u128 >> :: ffi_from (ffi_ref . ip_address) , port : ffi_ref . port , script_payout : (& * ffi_ref . script_payout) . clone () , inputs_hash : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_InputsHash as ferment :: FFIConversionFrom < dashcore :: hash_types :: InputsHash >> :: ffi_from (ffi_ref . inputs_hash) , payload_sig : < crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature as ferment :: FFIConversionFrom < dashcore :: bls_sig_utils :: BLSSignature >> :: ffi_from (ffi_ref . payload_sig) } } } impl ferment :: FFIConversionTo < dashcore :: blockdata :: transaction :: special_transaction :: provider_update_service :: ProviderUpdateServicePayload > for dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload { unsafe fn ffi_to_const (obj : dashcore :: blockdata :: transaction :: special_transaction :: provider_update_service :: ProviderUpdateServicePayload) -> * const dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload { ferment :: boxed (dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload { version : obj . version , pro_tx_hash : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid as ferment :: FFIConversionTo < dashcore :: hash_types :: Txid >> :: ffi_to (obj . pro_tx_hash) , ip_address : < [u8 ; 16] as ferment :: FFIConversionTo < u128 >> :: ffi_to (obj . ip_address) , port : obj . port , script_payout : ferment :: boxed (obj . script_payout) , inputs_hash : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_InputsHash as ferment :: FFIConversionTo < dashcore :: hash_types :: InputsHash >> :: ffi_to (obj . inputs_hash) , payload_sig : < crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature as ferment :: FFIConversionTo < dashcore :: bls_sig_utils :: BLSSignature >> :: ffi_to (obj . payload_sig) }) } } impl Drop for dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment :: unbox_any (ffi_ref . pro_tx_hash) ; ferment :: unbox_any_opt (ffi_ref . ip_address) ; ; ferment :: unbox_any (ffi_ref . script_payout) ; ferment :: unbox_any (ffi_ref . inputs_hash) ; ferment :: unbox_any (ffi_ref . payload_sig) ; } } } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload_ctor < > (version : u16 , pro_tx_hash : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid , ip_address : * mut [u8 ; 16] , port : u16 , script_payout : * mut dashcore :: blockdata :: script :: ScriptBuf , inputs_hash : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_InputsHash , payload_sig : * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature) -> * mut dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload { ferment :: boxed (dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload { version , pro_tx_hash , ip_address , port , script_payout , inputs_hash , payload_sig }) } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload_destroy < > (ffi : * mut dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload_get_version < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload) -> u16 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload_get_pro_tx_hash < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid { (* obj) . pro_tx_hash } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload_get_ip_address < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload) -> * mut [u8 ; 16] { (* obj) . ip_address } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload_get_port < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload) -> u16 { (* obj) . port } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload_get_script_payout < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload) -> * mut dashcore :: blockdata :: script :: ScriptBuf { (* obj) . script_payout } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload_get_inputs_hash < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_InputsHash { (* obj) . inputs_hash } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload_get_payload_sig < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload) -> * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature { (* obj) . payload_sig } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload_set_version < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload) -> u16 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload_set_pro_tx_hash < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid { (* obj) . pro_tx_hash } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload_set_ip_address < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload) -> * mut [u8 ; 16] { (* obj) . ip_address } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload_set_port < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload) -> u16 { (* obj) . port } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload_set_script_payout < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload) -> * mut dashcore :: blockdata :: script :: ScriptBuf { (* obj) . script_payout } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload_set_inputs_hash < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_InputsHash { (* obj) . inputs_hash } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload_set_payload_sig < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_service_ProviderUpdateServicePayload) -> * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature { (* obj) . payload_sig } } pub mod provider_update_registrar { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`ProviderUpdateRegistrarPayload`]"] # [repr (C)] # [derive (Clone)] pub struct dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload { pub version : u16 , pub pro_tx_hash : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid , pub provider_mode : u16 , pub operator_public_key : * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSPublicKey , pub voting_key_hash : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_PubkeyHash , pub script_payout : * mut dashcore :: blockdata :: script :: ScriptBuf , pub inputs_hash : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_InputsHash , pub payload_sig : * mut crate :: fermented :: generics :: Vec_u8 } impl ferment :: FFIConversionFrom < dashcore :: blockdata :: transaction :: special_transaction :: provider_update_registrar :: ProviderUpdateRegistrarPayload > for dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload { unsafe fn ffi_from_const (ffi : * const dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload) -> dashcore :: blockdata :: transaction :: special_transaction :: provider_update_registrar :: ProviderUpdateRegistrarPayload { let ffi_ref = & * ffi ; dashcore :: blockdata :: transaction :: special_transaction :: provider_update_registrar :: ProviderUpdateRegistrarPayload { version : ffi_ref . version , pro_tx_hash : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid as ferment :: FFIConversionFrom < dashcore :: hash_types :: Txid >> :: ffi_from (ffi_ref . pro_tx_hash) , provider_mode : ffi_ref . provider_mode , operator_public_key : < crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSPublicKey as ferment :: FFIConversionFrom < dashcore :: bls_sig_utils :: BLSPublicKey >> :: ffi_from (ffi_ref . operator_public_key) , voting_key_hash : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_PubkeyHash as ferment :: FFIConversionFrom < dashcore :: hash_types :: PubkeyHash >> :: ffi_from (ffi_ref . voting_key_hash) , script_payout : (& * ffi_ref . script_payout) . clone () , inputs_hash : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_InputsHash as ferment :: FFIConversionFrom < dashcore :: hash_types :: InputsHash >> :: ffi_from (ffi_ref . inputs_hash) , payload_sig : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (ffi_ref . payload_sig) } } } impl ferment :: FFIConversionTo < dashcore :: blockdata :: transaction :: special_transaction :: provider_update_registrar :: ProviderUpdateRegistrarPayload > for dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload { unsafe fn ffi_to_const (obj : dashcore :: blockdata :: transaction :: special_transaction :: provider_update_registrar :: ProviderUpdateRegistrarPayload) -> * const dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload { ferment :: boxed (dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload { version : obj . version , pro_tx_hash : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid as ferment :: FFIConversionTo < dashcore :: hash_types :: Txid >> :: ffi_to (obj . pro_tx_hash) , provider_mode : obj . provider_mode , operator_public_key : < crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSPublicKey as ferment :: FFIConversionTo < dashcore :: bls_sig_utils :: BLSPublicKey >> :: ffi_to (obj . operator_public_key) , voting_key_hash : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_PubkeyHash as ferment :: FFIConversionTo < dashcore :: hash_types :: PubkeyHash >> :: ffi_to (obj . voting_key_hash) , script_payout : ferment :: boxed (obj . script_payout) , inputs_hash : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_InputsHash as ferment :: FFIConversionTo < dashcore :: hash_types :: InputsHash >> :: ffi_to (obj . inputs_hash) , payload_sig : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj . payload_sig) }) } } impl Drop for dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment :: unbox_any (ffi_ref . pro_tx_hash) ; ; ferment :: unbox_any (ffi_ref . operator_public_key) ; ferment :: unbox_any (ffi_ref . voting_key_hash) ; ferment :: unbox_any (ffi_ref . script_payout) ; ferment :: unbox_any (ffi_ref . inputs_hash) ; ferment :: unbox_any (ffi_ref . payload_sig) ; } } } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload_ctor < > (version : u16 , pro_tx_hash : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid , provider_mode : u16 , operator_public_key : * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSPublicKey , voting_key_hash : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_PubkeyHash , script_payout : * mut dashcore :: blockdata :: script :: ScriptBuf , inputs_hash : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_InputsHash , payload_sig : * mut crate :: fermented :: generics :: Vec_u8) -> * mut dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload { ferment :: boxed (dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload { version , pro_tx_hash , provider_mode , operator_public_key , voting_key_hash , script_payout , inputs_hash , payload_sig }) } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload_destroy < > (ffi : * mut dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload_get_version < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload) -> u16 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload_get_pro_tx_hash < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid { (* obj) . pro_tx_hash } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload_get_provider_mode < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload) -> u16 { (* obj) . provider_mode } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload_get_operator_public_key < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload) -> * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSPublicKey { (* obj) . operator_public_key } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload_get_voting_key_hash < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_PubkeyHash { (* obj) . voting_key_hash } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload_get_script_payout < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload) -> * mut dashcore :: blockdata :: script :: ScriptBuf { (* obj) . script_payout } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload_get_inputs_hash < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_InputsHash { (* obj) . inputs_hash } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload_get_payload_sig < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . payload_sig } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload_set_version < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload) -> u16 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload_set_pro_tx_hash < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid { (* obj) . pro_tx_hash } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload_set_provider_mode < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload) -> u16 { (* obj) . provider_mode } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload_set_operator_public_key < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload) -> * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSPublicKey { (* obj) . operator_public_key } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload_set_voting_key_hash < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_PubkeyHash { (* obj) . voting_key_hash } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload_set_script_payout < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload) -> * mut dashcore :: blockdata :: script :: ScriptBuf { (* obj) . script_payout } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload_set_inputs_hash < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_InputsHash { (* obj) . inputs_hash } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload_set_payload_sig < > (obj : * const dashcore_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . payload_sig } } } pub mod outpoint { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`OutPoint`]"] # [repr (C)] # [derive (Clone)] pub struct dashcore_blockdata_transaction_outpoint_OutPoint { pub txid : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid , pub vout : u32 } impl ferment :: FFIConversionFrom < dashcore :: blockdata :: transaction :: outpoint :: OutPoint > for dashcore_blockdata_transaction_outpoint_OutPoint { unsafe fn ffi_from_const (ffi : * const dashcore_blockdata_transaction_outpoint_OutPoint) -> dashcore :: blockdata :: transaction :: outpoint :: OutPoint { let ffi_ref = & * ffi ; dashcore :: blockdata :: transaction :: outpoint :: OutPoint { txid : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid as ferment :: FFIConversionFrom < dashcore :: hash_types :: Txid >> :: ffi_from (ffi_ref . txid) , vout : ffi_ref . vout } } } impl ferment :: FFIConversionTo < dashcore :: blockdata :: transaction :: outpoint :: OutPoint > for dashcore_blockdata_transaction_outpoint_OutPoint { unsafe fn ffi_to_const (obj : dashcore :: blockdata :: transaction :: outpoint :: OutPoint) -> * const dashcore_blockdata_transaction_outpoint_OutPoint { ferment :: boxed (dashcore_blockdata_transaction_outpoint_OutPoint { txid : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid as ferment :: FFIConversionTo < dashcore :: hash_types :: Txid >> :: ffi_to (obj . txid) , vout : obj . vout }) } } impl Drop for dashcore_blockdata_transaction_outpoint_OutPoint { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . txid) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_outpoint_OutPoint_ctor < > (txid : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid , vout : u32) -> * mut dashcore_blockdata_transaction_outpoint_OutPoint { ferment :: boxed (dashcore_blockdata_transaction_outpoint_OutPoint { txid , vout }) } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_outpoint_OutPoint_destroy < > (ffi : * mut dashcore_blockdata_transaction_outpoint_OutPoint) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_outpoint_OutPoint_get_txid < > (obj : * const dashcore_blockdata_transaction_outpoint_OutPoint) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid { (* obj) . txid } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_outpoint_OutPoint_get_vout < > (obj : * const dashcore_blockdata_transaction_outpoint_OutPoint) -> u32 { (* obj) . vout } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_outpoint_OutPoint_set_txid < > (obj : * const dashcore_blockdata_transaction_outpoint_OutPoint) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid { (* obj) . txid } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_outpoint_OutPoint_set_vout < > (obj : * const dashcore_blockdata_transaction_outpoint_OutPoint) -> u32 { (* obj) . vout } } pub mod txin { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`TxIn`]"] # [repr (C)] # [derive (Clone)] pub struct dashcore_blockdata_transaction_txin_TxIn { pub previous_output : * mut dashcore :: transaction :: outpoint :: OutPoint , pub script_sig : * mut dashcore :: blockdata :: script :: ScriptBuf , pub sequence : u32 , pub witness : * mut crate :: fermented :: types :: dashcore :: blockdata :: witness :: dashcore_blockdata_witness_Witness } impl ferment :: FFIConversionFrom < dashcore :: blockdata :: transaction :: txin :: TxIn > for dashcore_blockdata_transaction_txin_TxIn { unsafe fn ffi_from_const (ffi : * const dashcore_blockdata_transaction_txin_TxIn) -> dashcore :: blockdata :: transaction :: txin :: TxIn { let ffi_ref = & * ffi ; dashcore :: blockdata :: transaction :: txin :: TxIn { previous_output : (& * ffi_ref . previous_output) . clone () , script_sig : (& * ffi_ref . script_sig) . clone () , sequence : ffi_ref . sequence , witness : < crate :: fermented :: types :: dashcore :: blockdata :: witness :: dashcore_blockdata_witness_Witness as ferment :: FFIConversionFrom < dashcore :: blockdata :: witness :: Witness >> :: ffi_from (ffi_ref . witness) } } } impl ferment :: FFIConversionTo < dashcore :: blockdata :: transaction :: txin :: TxIn > for dashcore_blockdata_transaction_txin_TxIn { unsafe fn ffi_to_const (obj : dashcore :: blockdata :: transaction :: txin :: TxIn) -> * const dashcore_blockdata_transaction_txin_TxIn { ferment :: boxed (dashcore_blockdata_transaction_txin_TxIn { previous_output : ferment :: boxed (obj . previous_output) , script_sig : ferment :: boxed (obj . script_sig) , sequence : obj . sequence , witness : < crate :: fermented :: types :: dashcore :: blockdata :: witness :: dashcore_blockdata_witness_Witness as ferment :: FFIConversionTo < dashcore :: blockdata :: witness :: Witness >> :: ffi_to (obj . witness) }) } } impl Drop for dashcore_blockdata_transaction_txin_TxIn { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . previous_output) ; ferment :: unbox_any (ffi_ref . script_sig) ; ; ferment :: unbox_any (ffi_ref . witness) ; } } } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_txin_TxIn_ctor < > (previous_output : * mut dashcore :: transaction :: outpoint :: OutPoint , script_sig : * mut dashcore :: blockdata :: script :: ScriptBuf , sequence : u32 , witness : * mut crate :: fermented :: types :: dashcore :: blockdata :: witness :: dashcore_blockdata_witness_Witness) -> * mut dashcore_blockdata_transaction_txin_TxIn { ferment :: boxed (dashcore_blockdata_transaction_txin_TxIn { previous_output , script_sig , sequence , witness }) } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_txin_TxIn_destroy < > (ffi : * mut dashcore_blockdata_transaction_txin_TxIn) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_txin_TxIn_get_previous_output < > (obj : * const dashcore_blockdata_transaction_txin_TxIn) -> * mut dashcore :: transaction :: outpoint :: OutPoint { (* obj) . previous_output } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_txin_TxIn_get_script_sig < > (obj : * const dashcore_blockdata_transaction_txin_TxIn) -> * mut dashcore :: blockdata :: script :: ScriptBuf { (* obj) . script_sig } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_txin_TxIn_get_sequence < > (obj : * const dashcore_blockdata_transaction_txin_TxIn) -> u32 { (* obj) . sequence } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_txin_TxIn_get_witness < > (obj : * const dashcore_blockdata_transaction_txin_TxIn) -> * mut crate :: fermented :: types :: dashcore :: blockdata :: witness :: dashcore_blockdata_witness_Witness { (* obj) . witness } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_txin_TxIn_set_previous_output < > (obj : * const dashcore_blockdata_transaction_txin_TxIn) -> * mut dashcore :: transaction :: outpoint :: OutPoint { (* obj) . previous_output } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_txin_TxIn_set_script_sig < > (obj : * const dashcore_blockdata_transaction_txin_TxIn) -> * mut dashcore :: blockdata :: script :: ScriptBuf { (* obj) . script_sig } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_txin_TxIn_set_sequence < > (obj : * const dashcore_blockdata_transaction_txin_TxIn) -> u32 { (* obj) . sequence } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_txin_TxIn_set_witness < > (obj : * const dashcore_blockdata_transaction_txin_TxIn) -> * mut crate :: fermented :: types :: dashcore :: blockdata :: witness :: dashcore_blockdata_witness_Witness { (* obj) . witness } } # [doc = "FFI-representation of the [`Transaction`]"] # [repr (C)] # [derive (Clone)] pub struct dashcore_blockdata_transaction_Transaction { pub version : u16 , pub lock_time : u32 , pub input : * mut crate :: fermented :: generics :: Vec_dashcore_blockdata_transaction_txin_TxIn , pub output : * mut crate :: fermented :: generics :: Vec_dashcore_blockdata_transaction_txout_TxOut , pub special_transaction_payload : * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: dashcore_blockdata_transaction_special_transaction_TransactionPayload } impl ferment :: FFIConversionFrom < dashcore :: blockdata :: transaction :: Transaction > for dashcore_blockdata_transaction_Transaction { unsafe fn ffi_from_const (ffi : * const dashcore_blockdata_transaction_Transaction) -> dashcore :: blockdata :: transaction :: Transaction { let ffi_ref = & * ffi ; dashcore :: blockdata :: transaction :: Transaction { version : ffi_ref . version , lock_time : ffi_ref . lock_time , input : < crate :: fermented :: generics :: Vec_dashcore_blockdata_transaction_txin_TxIn as ferment :: FFIConversionFrom < Vec < dashcore :: blockdata :: transaction :: txin :: TxIn > >> :: ffi_from (ffi_ref . input) , output : < crate :: fermented :: generics :: Vec_dashcore_blockdata_transaction_txout_TxOut as ferment :: FFIConversionFrom < Vec < dashcore :: blockdata :: transaction :: txout :: TxOut > >> :: ffi_from (ffi_ref . output) , special_transaction_payload : < crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: dashcore_blockdata_transaction_special_transaction_TransactionPayload as ferment :: FFIConversionFrom < dashcore :: blockdata :: transaction :: special_transaction :: TransactionPayload >> :: ffi_from_opt (ffi_ref . special_transaction_payload) } } } impl ferment :: FFIConversionTo < dashcore :: blockdata :: transaction :: Transaction > for dashcore_blockdata_transaction_Transaction { unsafe fn ffi_to_const (obj : dashcore :: blockdata :: transaction :: Transaction) -> * const dashcore_blockdata_transaction_Transaction { ferment :: boxed (dashcore_blockdata_transaction_Transaction { version : obj . version , lock_time : obj . lock_time , input : < crate :: fermented :: generics :: Vec_dashcore_blockdata_transaction_txin_TxIn as ferment :: FFIConversionTo < Vec < dashcore :: blockdata :: transaction :: txin :: TxIn > >> :: ffi_to (obj . input) , output : < crate :: fermented :: generics :: Vec_dashcore_blockdata_transaction_txout_TxOut as ferment :: FFIConversionTo < Vec < dashcore :: blockdata :: transaction :: txout :: TxOut > >> :: ffi_to (obj . output) , special_transaction_payload : < crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: dashcore_blockdata_transaction_special_transaction_TransactionPayload as ferment :: FFIConversionTo < dashcore :: blockdata :: transaction :: special_transaction :: TransactionPayload >> :: ffi_to_opt (obj . special_transaction_payload) }) } } impl Drop for dashcore_blockdata_transaction_Transaction { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ferment :: unbox_any (ffi_ref . input) ; ferment :: unbox_any (ffi_ref . output) ; ferment :: unbox_any_opt (ffi_ref . special_transaction_payload) ; } } } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_Transaction_ctor < > (version : u16 , lock_time : u32 , input : * mut crate :: fermented :: generics :: Vec_dashcore_blockdata_transaction_txin_TxIn , output : * mut crate :: fermented :: generics :: Vec_dashcore_blockdata_transaction_txout_TxOut , special_transaction_payload : * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: dashcore_blockdata_transaction_special_transaction_TransactionPayload) -> * mut dashcore_blockdata_transaction_Transaction { ferment :: boxed (dashcore_blockdata_transaction_Transaction { version , lock_time , input , output , special_transaction_payload }) } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_Transaction_destroy < > (ffi : * mut dashcore_blockdata_transaction_Transaction) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_Transaction_get_version < > (obj : * const dashcore_blockdata_transaction_Transaction) -> u16 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_Transaction_get_lock_time < > (obj : * const dashcore_blockdata_transaction_Transaction) -> u32 { (* obj) . lock_time } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_Transaction_get_input < > (obj : * const dashcore_blockdata_transaction_Transaction) -> * mut crate :: fermented :: generics :: Vec_dashcore_blockdata_transaction_txin_TxIn { (* obj) . input } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_Transaction_get_output < > (obj : * const dashcore_blockdata_transaction_Transaction) -> * mut crate :: fermented :: generics :: Vec_dashcore_blockdata_transaction_txout_TxOut { (* obj) . output } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_Transaction_get_special_transaction_payload < > (obj : * const dashcore_blockdata_transaction_Transaction) -> * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: dashcore_blockdata_transaction_special_transaction_TransactionPayload { (* obj) . special_transaction_payload } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_Transaction_set_version < > (obj : * const dashcore_blockdata_transaction_Transaction) -> u16 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_Transaction_set_lock_time < > (obj : * const dashcore_blockdata_transaction_Transaction) -> u32 { (* obj) . lock_time } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_Transaction_set_input < > (obj : * const dashcore_blockdata_transaction_Transaction) -> * mut crate :: fermented :: generics :: Vec_dashcore_blockdata_transaction_txin_TxIn { (* obj) . input } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_Transaction_set_output < > (obj : * const dashcore_blockdata_transaction_Transaction) -> * mut crate :: fermented :: generics :: Vec_dashcore_blockdata_transaction_txout_TxOut { (* obj) . output } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_transaction_Transaction_set_special_transaction_payload < > (obj : * const dashcore_blockdata_transaction_Transaction) -> * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: special_transaction :: dashcore_blockdata_transaction_special_transaction_TransactionPayload { (* obj) . special_transaction_payload } } pub mod locktime { use crate as dash_spv_apple_bindings ; pub mod relative { use crate as dash_spv_apple_bindings ; } pub mod absolute { use crate as dash_spv_apple_bindings ; } } pub mod witness { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`Witness`]"] # [repr (C)] # [derive (Clone)] pub struct dashcore_blockdata_witness_Witness { pub content : * mut crate :: fermented :: generics :: Vec_u8 , pub witness_elements : usize , pub indices_start : usize } impl ferment :: FFIConversionFrom < dashcore :: blockdata :: witness :: Witness > for dashcore_blockdata_witness_Witness { unsafe fn ffi_from_const (ffi : * const dashcore_blockdata_witness_Witness) -> dashcore :: blockdata :: witness :: Witness { let ffi_ref = & * ffi ; dashcore :: blockdata :: witness :: Witness { content : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (ffi_ref . content) , witness_elements : ffi_ref . witness_elements , indices_start : ffi_ref . indices_start } } } impl ferment :: FFIConversionTo < dashcore :: blockdata :: witness :: Witness > for dashcore_blockdata_witness_Witness { unsafe fn ffi_to_const (obj : dashcore :: blockdata :: witness :: Witness) -> * const dashcore_blockdata_witness_Witness { ferment :: boxed (dashcore_blockdata_witness_Witness { content : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj . content) , witness_elements : obj . witness_elements , indices_start : obj . indices_start }) } } impl Drop for dashcore_blockdata_witness_Witness { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . content) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_witness_Witness_ctor < > (content : * mut crate :: fermented :: generics :: Vec_u8 , witness_elements : usize , indices_start : usize) -> * mut dashcore_blockdata_witness_Witness { ferment :: boxed (dashcore_blockdata_witness_Witness { content , witness_elements , indices_start }) } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_witness_Witness_destroy < > (ffi : * mut dashcore_blockdata_witness_Witness) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_witness_Witness_get_content < > (obj : * const dashcore_blockdata_witness_Witness) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . content } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_witness_Witness_get_witness_elements < > (obj : * const dashcore_blockdata_witness_Witness) -> usize { (* obj) . witness_elements } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_witness_Witness_get_indices_start < > (obj : * const dashcore_blockdata_witness_Witness) -> usize { (* obj) . indices_start } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_witness_Witness_set_content < > (obj : * const dashcore_blockdata_witness_Witness) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . content } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_witness_Witness_set_witness_elements < > (obj : * const dashcore_blockdata_witness_Witness) -> usize { (* obj) . witness_elements } # [no_mangle] pub unsafe extern "C" fn dashcore_blockdata_witness_Witness_set_indices_start < > (obj : * const dashcore_blockdata_witness_Witness) -> usize { (* obj) . indices_start } } pub mod opcodes { use crate as dash_spv_apple_bindings ; } pub mod fee_rate { use crate as dash_spv_apple_bindings ; } pub mod constants { use crate as dash_spv_apple_bindings ; } } pub mod network { use crate as dash_spv_apple_bindings ; # [cfg (feature = "std")] pub mod message_blockdata { use crate as dash_spv_apple_bindings ; } # [cfg (feature = "std")] pub mod message_network { use crate as dash_spv_apple_bindings ; } # [cfg (feature = "std")] pub mod message { use crate as dash_spv_apple_bindings ; } pub mod constants { use crate as dash_spv_apple_bindings ; } # [cfg (feature = "std")] pub mod address { use crate as dash_spv_apple_bindings ; } } pub mod psbt { use crate as dash_spv_apple_bindings ; pub mod serialize { use crate as dash_spv_apple_bindings ; } # [cfg (test)] pub mod tests { use crate as dash_spv_apple_bindings ; } pub mod map { use crate as dash_spv_apple_bindings ; pub mod input { use crate as dash_spv_apple_bindings ; } } } pub mod bip152 { use crate as dash_spv_apple_bindings ; } pub mod ephemerealdata { use crate as dash_spv_apple_bindings ; pub mod instant_lock { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`InstantLock`]"] # [repr (C)] # [derive (Clone)] pub struct dashcore_ephemerealdata_instant_lock_InstantLock { pub version : u8 , pub inputs : * mut crate :: fermented :: generics :: Vec_dashcore_blockdata_transaction_outpoint_OutPoint , pub txid : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid , pub cyclehash : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_CycleHash , pub signature : * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature } impl ferment :: FFIConversionFrom < dashcore :: ephemerealdata :: instant_lock :: InstantLock > for dashcore_ephemerealdata_instant_lock_InstantLock { unsafe fn ffi_from_const (ffi : * const dashcore_ephemerealdata_instant_lock_InstantLock) -> dashcore :: ephemerealdata :: instant_lock :: InstantLock { let ffi_ref = & * ffi ; dashcore :: ephemerealdata :: instant_lock :: InstantLock { version : ffi_ref . version , inputs : < crate :: fermented :: generics :: Vec_dashcore_blockdata_transaction_outpoint_OutPoint as ferment :: FFIConversionFrom < Vec < dashcore :: blockdata :: transaction :: outpoint :: OutPoint > >> :: ffi_from (ffi_ref . inputs) , txid : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid as ferment :: FFIConversionFrom < dashcore :: hash_types :: Txid >> :: ffi_from (ffi_ref . txid) , cyclehash : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_CycleHash as ferment :: FFIConversionFrom < dashcore :: hash_types :: CycleHash >> :: ffi_from (ffi_ref . cyclehash) , signature : < crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature as ferment :: FFIConversionFrom < dashcore :: bls_sig_utils :: BLSSignature >> :: ffi_from (ffi_ref . signature) } } } impl ferment :: FFIConversionTo < dashcore :: ephemerealdata :: instant_lock :: InstantLock > for dashcore_ephemerealdata_instant_lock_InstantLock { unsafe fn ffi_to_const (obj : dashcore :: ephemerealdata :: instant_lock :: InstantLock) -> * const dashcore_ephemerealdata_instant_lock_InstantLock { ferment :: boxed (dashcore_ephemerealdata_instant_lock_InstantLock { version : obj . version , inputs : < crate :: fermented :: generics :: Vec_dashcore_blockdata_transaction_outpoint_OutPoint as ferment :: FFIConversionTo < Vec < dashcore :: blockdata :: transaction :: outpoint :: OutPoint > >> :: ffi_to (obj . inputs) , txid : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid as ferment :: FFIConversionTo < dashcore :: hash_types :: Txid >> :: ffi_to (obj . txid) , cyclehash : < dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_CycleHash as ferment :: FFIConversionTo < dashcore :: hash_types :: CycleHash >> :: ffi_to (obj . cyclehash) , signature : < crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature as ferment :: FFIConversionTo < dashcore :: bls_sig_utils :: BLSSignature >> :: ffi_to (obj . signature) }) } } impl Drop for dashcore_ephemerealdata_instant_lock_InstantLock { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment :: unbox_any (ffi_ref . inputs) ; ferment :: unbox_any (ffi_ref . txid) ; ferment :: unbox_any (ffi_ref . cyclehash) ; ferment :: unbox_any (ffi_ref . signature) ; } } } # [no_mangle] pub unsafe extern "C" fn dashcore_ephemerealdata_instant_lock_InstantLock_ctor < > (version : u8 , inputs : * mut crate :: fermented :: generics :: Vec_dashcore_blockdata_transaction_outpoint_OutPoint , txid : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid , cyclehash : * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_CycleHash , signature : * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature) -> * mut dashcore_ephemerealdata_instant_lock_InstantLock { ferment :: boxed (dashcore_ephemerealdata_instant_lock_InstantLock { version , inputs , txid , cyclehash , signature }) } # [no_mangle] pub unsafe extern "C" fn dashcore_ephemerealdata_instant_lock_InstantLock_destroy < > (ffi : * mut dashcore_ephemerealdata_instant_lock_InstantLock) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dashcore_ephemerealdata_instant_lock_InstantLock_get_version < > (obj : * const dashcore_ephemerealdata_instant_lock_InstantLock) -> u8 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dashcore_ephemerealdata_instant_lock_InstantLock_get_inputs < > (obj : * const dashcore_ephemerealdata_instant_lock_InstantLock) -> * mut crate :: fermented :: generics :: Vec_dashcore_blockdata_transaction_outpoint_OutPoint { (* obj) . inputs } # [no_mangle] pub unsafe extern "C" fn dashcore_ephemerealdata_instant_lock_InstantLock_get_txid < > (obj : * const dashcore_ephemerealdata_instant_lock_InstantLock) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid { (* obj) . txid } # [no_mangle] pub unsafe extern "C" fn dashcore_ephemerealdata_instant_lock_InstantLock_get_cyclehash < > (obj : * const dashcore_ephemerealdata_instant_lock_InstantLock) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_CycleHash { (* obj) . cyclehash } # [no_mangle] pub unsafe extern "C" fn dashcore_ephemerealdata_instant_lock_InstantLock_get_signature < > (obj : * const dashcore_ephemerealdata_instant_lock_InstantLock) -> * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dashcore_ephemerealdata_instant_lock_InstantLock_set_version < > (obj : * const dashcore_ephemerealdata_instant_lock_InstantLock) -> u8 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dashcore_ephemerealdata_instant_lock_InstantLock_set_inputs < > (obj : * const dashcore_ephemerealdata_instant_lock_InstantLock) -> * mut crate :: fermented :: generics :: Vec_dashcore_blockdata_transaction_outpoint_OutPoint { (* obj) . inputs } # [no_mangle] pub unsafe extern "C" fn dashcore_ephemerealdata_instant_lock_InstantLock_set_txid < > (obj : * const dashcore_ephemerealdata_instant_lock_InstantLock) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_Txid { (* obj) . txid } # [no_mangle] pub unsafe extern "C" fn dashcore_ephemerealdata_instant_lock_InstantLock_set_cyclehash < > (obj : * const dashcore_ephemerealdata_instant_lock_InstantLock) -> * mut dash_spv_apple_bindings :: custom :: dashcore :: dashcore_hash_types_CycleHash { (* obj) . cyclehash } # [no_mangle] pub unsafe extern "C" fn dashcore_ephemerealdata_instant_lock_InstantLock_set_signature < > (obj : * const dashcore_ephemerealdata_instant_lock_InstantLock) -> * mut crate :: fermented :: types :: dashcore :: bls_sig_utils :: dashcore_bls_sig_utils_BLSSignature { (* obj) . signature } } pub mod chain_lock { use crate as dash_spv_apple_bindings ; } } pub mod pow { use crate as dash_spv_apple_bindings ; } pub mod address { use crate as dash_spv_apple_bindings ; } pub mod base58 { use crate as dash_spv_apple_bindings ; } pub mod internal_macros { use crate as dash_spv_apple_bindings ; } pub mod taproot { use crate as dash_spv_apple_bindings ; } pub mod util { use crate as dash_spv_apple_bindings ; } } pub mod dash_spv_platform { use crate as dash_spv_apple_bindings ; pub mod identity { use crate as dash_spv_apple_bindings ; pub mod manager { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_platform::identity::manager::IdentitiesManager::fetch_by_id_bytes`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_identity_manager_IdentitiesManager_fetch_by_id_bytes (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: identity :: manager :: IdentitiesManager , id_bytes : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Result_ok_Option_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: identity :: manager :: IdentitiesManager :: fetch_by_id_bytes (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (id_bytes)) . await }) ; < crate :: fermented :: generics :: Result_ok_Option_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Option < dpp :: identity :: identity :: Identity > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::identity::manager::IdentitiesManager::fetch_by_id`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_identity_manager_IdentitiesManager_fetch_by_id (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: identity :: manager :: IdentitiesManager , id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut crate :: fermented :: generics :: Result_ok_Option_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: identity :: manager :: IdentitiesManager :: fetch_by_id (& * self_ , < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (id)) . await }) ; < crate :: fermented :: generics :: Result_ok_Option_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Option < dpp :: identity :: identity :: Identity > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::identity::manager::IdentitiesManager::fetch_by_key_hash`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_identity_manager_IdentitiesManager_fetch_by_key_hash (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: identity :: manager :: IdentitiesManager , key_hash : * mut dash_sdk :: platform :: types :: identity :: PublicKeyHash) -> * mut crate :: fermented :: generics :: Result_ok_Option_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: identity :: manager :: IdentitiesManager :: fetch_by_key_hash (& * self_ , (& * key_hash) . clone ()) . await }) ; < crate :: fermented :: generics :: Result_ok_Option_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Option < dpp :: identity :: identity :: Identity > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::identity::manager::IdentitiesManager::fetch_balance`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_identity_manager_IdentitiesManager_fetch_balance (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: identity :: manager :: IdentitiesManager , id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut crate :: fermented :: generics :: Result_ok_Option_u64_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: identity :: manager :: IdentitiesManager :: fetch_balance (& * self_ , < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (id)) . await }) ; < crate :: fermented :: generics :: Result_ok_Option_u64_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Option < u64 > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::identity::manager::IdentitiesManager::fetch_balance_by_id_bytes`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_identity_manager_IdentitiesManager_fetch_balance_by_id_bytes (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: identity :: manager :: IdentitiesManager , id : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Result_ok_Option_u64_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: identity :: manager :: IdentitiesManager :: fetch_balance_by_id_bytes (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (id)) . await }) ; < crate :: fermented :: generics :: Result_ok_Option_u64_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Option < u64 > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::identity::manager::IdentitiesManager::get_identities_for_wallets_public_keys`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_identity_manager_IdentitiesManager_get_identities_for_wallets_public_keys (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: identity :: manager :: IdentitiesManager , wallets : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_Vec_u8_20) -> * mut crate :: fermented :: generics :: Result_ok_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: identity :: manager :: IdentitiesManager :: get_identities_for_wallets_public_keys (& * self_ , < crate :: fermented :: generics :: std_collections_Map_keys_String_values_Vec_u8_20 as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < String , Vec < [u8 ; 20] > > >> :: ffi_from (wallets)) . await }) ; < crate :: fermented :: generics :: Result_ok_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < std :: collections :: BTreeMap < String , std :: collections :: BTreeMap < [u8 ; 20] , dpp :: identity :: identity :: Identity > > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::identity::manager::IdentitiesManager::get_identities_for_key_hashes`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_identity_manager_IdentitiesManager_get_identities_for_key_hashes (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: identity :: manager :: IdentitiesManager , wallet_id : * mut std :: os :: raw :: c_char , key_hashes : * mut crate :: fermented :: generics :: Vec_u8_20) -> * mut crate :: fermented :: generics :: Result_ok_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: identity :: manager :: IdentitiesManager :: get_identities_for_key_hashes (& * self_ , < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (wallet_id) , < crate :: fermented :: generics :: Vec_u8_20 as ferment :: FFIConversionFrom < Vec < [u8 ; 20] > >> :: ffi_from (key_hashes)) . await }) ; < crate :: fermented :: generics :: Result_ok_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < std :: collections :: BTreeMap < [u8 ; 20] , dpp :: identity :: identity :: Identity > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::identity::manager::IdentitiesManager::get_identities_by_pub_key_hashes_at_index_range`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_identity_manager_IdentitiesManager_get_identities_by_pub_key_hashes_at_index_range (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: identity :: manager :: IdentitiesManager , extended_public_key : * mut dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , unused_index : u32) -> * mut crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_u32_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: identity :: manager :: IdentitiesManager :: get_identities_by_pub_key_hashes_at_index_range (& * self_ , Box :: leak (Box :: new ((& * extended_public_key) . clone ())) , unused_index) . await }) ; < crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_u32_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < indexmap :: IndexMap < u32 , dpp :: identity :: identity :: Identity > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::identity::manager::IdentitiesManager::monitor`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_identity_manager_IdentitiesManager_monitor (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: identity :: manager :: IdentitiesManager , unique_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , retry : * mut crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy , options : * mut crate :: fermented :: types :: dash_spv_platform :: identity :: manager :: dash_spv_platform_identity_manager_IdentityValidator) -> * mut crate :: fermented :: generics :: Result_ok_Option_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: identity :: manager :: IdentitiesManager :: monitor (& * self_ , < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (unique_id) , < crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy as ferment :: FFIConversionFrom < dash_spv_platform :: util :: RetryStrategy >> :: ffi_from (retry) , < crate :: fermented :: types :: dash_spv_platform :: identity :: manager :: dash_spv_platform_identity_manager_IdentityValidator as ferment :: FFIConversionFrom < dash_spv_platform :: identity :: manager :: IdentityValidator >> :: ffi_from (options)) . await }) ; < crate :: fermented :: generics :: Result_ok_Option_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Option < dpp :: identity :: identity :: Identity > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::identity::manager::IdentitiesManager::monitor_for_id_bytes`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_identity_manager_IdentitiesManager_monitor_for_id_bytes (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: identity :: manager :: IdentitiesManager , unique_id : * mut crate :: fermented :: generics :: Arr_u8_32 , retry : * mut crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy , options : * mut crate :: fermented :: types :: dash_spv_platform :: identity :: manager :: dash_spv_platform_identity_manager_IdentityValidator) -> * mut crate :: fermented :: generics :: Result_ok_Option_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: identity :: manager :: IdentitiesManager :: monitor_for_id_bytes (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (unique_id) , < crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy as ferment :: FFIConversionFrom < dash_spv_platform :: util :: RetryStrategy >> :: ffi_from (retry) , < crate :: fermented :: types :: dash_spv_platform :: identity :: manager :: dash_spv_platform_identity_manager_IdentityValidator as ferment :: FFIConversionFrom < dash_spv_platform :: identity :: manager :: IdentityValidator >> :: ffi_from (options)) . await }) ; < crate :: fermented :: generics :: Result_ok_Option_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Option < dpp :: identity :: identity :: Identity > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::identity::manager::IdentitiesManager::monitor_for_key_hash`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_identity_manager_IdentitiesManager_monitor_for_key_hash (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: identity :: manager :: IdentitiesManager , key_hash : * mut crate :: fermented :: generics :: Arr_u8_20 , retry : * mut crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy , options : * mut crate :: fermented :: types :: dash_spv_platform :: identity :: manager :: dash_spv_platform_identity_manager_IdentityValidator) -> * mut crate :: fermented :: generics :: Result_ok_Option_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: identity :: manager :: IdentitiesManager :: monitor_for_key_hash (& * self_ , < crate :: fermented :: generics :: Arr_u8_20 as ferment :: FFIConversionFrom < [u8 ; 20] >> :: ffi_from (key_hash) , < crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy as ferment :: FFIConversionFrom < dash_spv_platform :: util :: RetryStrategy >> :: ffi_from (retry) , < crate :: fermented :: types :: dash_spv_platform :: identity :: manager :: dash_spv_platform_identity_manager_IdentityValidator as ferment :: FFIConversionFrom < dash_spv_platform :: identity :: manager :: IdentityValidator >> :: ffi_from (options)) . await }) ; < crate :: fermented :: generics :: Result_ok_Option_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Option < dpp :: identity :: identity :: Identity > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::identity::manager::IdentitiesManager::monitor_with_delay`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_identity_manager_IdentitiesManager_monitor_with_delay (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: identity :: manager :: IdentitiesManager , unique_id : * mut crate :: fermented :: generics :: Arr_u8_32 , retry : * mut crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy , options : * mut crate :: fermented :: types :: dash_spv_platform :: identity :: manager :: dash_spv_platform_identity_manager_IdentityValidator , delay : u64) -> * mut crate :: fermented :: generics :: Result_ok_Option_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: identity :: manager :: IdentitiesManager :: monitor_with_delay (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (unique_id) , < crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy as ferment :: FFIConversionFrom < dash_spv_platform :: util :: RetryStrategy >> :: ffi_from (retry) , < crate :: fermented :: types :: dash_spv_platform :: identity :: manager :: dash_spv_platform_identity_manager_IdentityValidator as ferment :: FFIConversionFrom < dash_spv_platform :: identity :: manager :: IdentityValidator >> :: ffi_from (options) , delay) . await }) ; < crate :: fermented :: generics :: Result_ok_Option_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Option < dpp :: identity :: identity :: Identity > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::identity::manager::IdentitiesManager::monitor_for_key_hashes`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_identity_manager_IdentitiesManager_monitor_for_key_hashes (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: identity :: manager :: IdentitiesManager , key_hashes : * mut crate :: fermented :: generics :: Vec_u8_20 , retry : * mut crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy , options : * mut crate :: fermented :: types :: dash_spv_platform :: identity :: manager :: dash_spv_platform_identity_manager_IdentityValidator) -> * mut crate :: fermented :: generics :: Result_ok_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: identity :: manager :: IdentitiesManager :: monitor_for_key_hashes (& * self_ , < crate :: fermented :: generics :: Vec_u8_20 as ferment :: FFIConversionFrom < Vec < [u8 ; 20] > >> :: ffi_from (key_hashes) , < crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy as ferment :: FFIConversionFrom < dash_spv_platform :: util :: RetryStrategy >> :: ffi_from (retry) , < crate :: fermented :: types :: dash_spv_platform :: identity :: manager :: dash_spv_platform_identity_manager_IdentityValidator as ferment :: FFIConversionFrom < dash_spv_platform :: identity :: manager :: IdentityValidator >> :: ffi_from (options)) . await }) ; < crate :: fermented :: generics :: Result_ok_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < std :: collections :: BTreeMap < [u8 ; 20] , dpp :: identity :: identity :: Identity > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::identity::manager::opaque_key_from_identity_public_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_identity_manager_opaque_key_from_identity_public_key (public_key : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError { let obj = dash_spv_platform :: identity :: manager :: opaque_key_from_identity_public_key (< crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: IdentityPublicKey >> :: ffi_from (public_key)) ; < crate :: fermented :: generics :: Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: key :: OpaqueKey , dash_spv_crypto :: keys :: KeyError > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`IndexedKey`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_platform_identity_manager_IndexedKey { pub index : u32 , pub key : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey } impl ferment :: FFIConversionFrom < dash_spv_platform :: identity :: manager :: IndexedKey > for dash_spv_platform_identity_manager_IndexedKey { unsafe fn ffi_from_const (ffi : * const dash_spv_platform_identity_manager_IndexedKey) -> dash_spv_platform :: identity :: manager :: IndexedKey { let ffi_ref = & * ffi ; dash_spv_platform :: identity :: manager :: IndexedKey { index : ffi_ref . index , key : < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: OpaqueKey >> :: ffi_from (ffi_ref . key) } } } impl ferment :: FFIConversionTo < dash_spv_platform :: identity :: manager :: IndexedKey > for dash_spv_platform_identity_manager_IndexedKey { unsafe fn ffi_to_const (obj : dash_spv_platform :: identity :: manager :: IndexedKey) -> * const dash_spv_platform_identity_manager_IndexedKey { ferment :: boxed (dash_spv_platform_identity_manager_IndexedKey { index : obj . index , key : < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey as ferment :: FFIConversionTo < dash_spv_crypto :: keys :: key :: OpaqueKey >> :: ffi_to (obj . key) }) } } impl Drop for dash_spv_platform_identity_manager_IndexedKey { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment :: unbox_any (ffi_ref . key) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_identity_manager_IndexedKey_ctor < > (index : u32 , key : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey) -> * mut dash_spv_platform_identity_manager_IndexedKey { ferment :: boxed (dash_spv_platform_identity_manager_IndexedKey { index , key }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_identity_manager_IndexedKey_destroy < > (ffi : * mut dash_spv_platform_identity_manager_IndexedKey) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_identity_manager_IndexedKey_get_index < > (obj : * const dash_spv_platform_identity_manager_IndexedKey) -> u32 { (* obj) . index } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_identity_manager_IndexedKey_get_key < > (obj : * const dash_spv_platform_identity_manager_IndexedKey) -> * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey { (* obj) . key } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_identity_manager_IndexedKey_set_index < > (obj : * const dash_spv_platform_identity_manager_IndexedKey) -> u32 { (* obj) . index } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_identity_manager_IndexedKey_set_key < > (obj : * const dash_spv_platform_identity_manager_IndexedKey) -> * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey { (* obj) . key } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`IdentityValidator`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_platform_identity_manager_IdentityValidator { None = 0 , AcceptNotFoundAsNotAnError = 1 } impl ferment :: FFIConversionFrom < dash_spv_platform :: identity :: manager :: IdentityValidator > for dash_spv_platform_identity_manager_IdentityValidator { unsafe fn ffi_from_const (ffi : * const dash_spv_platform_identity_manager_IdentityValidator) -> dash_spv_platform :: identity :: manager :: IdentityValidator { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_platform_identity_manager_IdentityValidator :: None => dash_spv_platform :: identity :: manager :: IdentityValidator :: None , dash_spv_platform_identity_manager_IdentityValidator :: AcceptNotFoundAsNotAnError => dash_spv_platform :: identity :: manager :: IdentityValidator :: AcceptNotFoundAsNotAnError } } } impl ferment :: FFIConversionTo < dash_spv_platform :: identity :: manager :: IdentityValidator > for dash_spv_platform_identity_manager_IdentityValidator { unsafe fn ffi_to_const (obj : dash_spv_platform :: identity :: manager :: IdentityValidator) -> * const dash_spv_platform_identity_manager_IdentityValidator { ferment :: boxed (match obj { dash_spv_platform :: identity :: manager :: IdentityValidator :: None => dash_spv_platform_identity_manager_IdentityValidator :: None , dash_spv_platform :: identity :: manager :: IdentityValidator :: AcceptNotFoundAsNotAnError => dash_spv_platform_identity_manager_IdentityValidator :: AcceptNotFoundAsNotAnError , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dash_spv_platform_identity_manager_IdentityValidator { fn drop (& mut self) { unsafe { match self { dash_spv_platform_identity_manager_IdentityValidator :: None => { } , dash_spv_platform_identity_manager_IdentityValidator :: AcceptNotFoundAsNotAnError => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_identity_manager_IdentityValidator_None_ctor () -> * mut dash_spv_platform_identity_manager_IdentityValidator { ferment :: boxed (dash_spv_platform_identity_manager_IdentityValidator :: None { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_identity_manager_IdentityValidator_AcceptNotFoundAsNotAnError_ctor () -> * mut dash_spv_platform_identity_manager_IdentityValidator { ferment :: boxed (dash_spv_platform_identity_manager_IdentityValidator :: AcceptNotFoundAsNotAnError { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_identity_manager_IdentityValidator_destroy < > (ffi : * mut dash_spv_platform_identity_manager_IdentityValidator) { ferment :: unbox_any (ffi) ; } } } pub mod models { use crate as dash_spv_apple_bindings ; pub mod transient_dashpay_user { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`TransientDashPayUser`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser { pub display_name : * mut std :: os :: raw :: c_char , pub avatar_url : * mut std :: os :: raw :: c_char , pub avatar_fingerprint : * mut crate :: fermented :: generics :: Vec_u8 , pub avatar_hash : * mut crate :: fermented :: types :: platform_value :: platform_value_Hash256 , pub public_message : * mut std :: os :: raw :: c_char , pub revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , pub document_identifier : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub created_at : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis , pub updated_at : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis } impl ferment :: FFIConversionFrom < dash_spv_platform :: models :: transient_dashpay_user :: TransientDashPayUser > for dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser { unsafe fn ffi_from_const (ffi : * const dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser) -> dash_spv_platform :: models :: transient_dashpay_user :: TransientDashPayUser { let ffi_ref = & * ffi ; dash_spv_platform :: models :: transient_dashpay_user :: TransientDashPayUser { display_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from_opt (ffi_ref . display_name) , avatar_url : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from_opt (ffi_ref . avatar_url) , avatar_fingerprint : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from_opt (ffi_ref . avatar_fingerprint) , avatar_hash : < crate :: fermented :: types :: platform_value :: platform_value_Hash256 as ferment :: FFIConversionFrom < platform_value :: Hash256 >> :: ffi_from_opt (ffi_ref . avatar_hash) , public_message : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from_opt (ffi_ref . public_message) , revision : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision as ferment :: FFIConversionFrom < dpp :: prelude :: Revision >> :: ffi_from_opt (ffi_ref . revision) , document_identifier : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (ffi_ref . document_identifier) , created_at : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis as ferment :: FFIConversionFrom < dpp :: prelude :: TimestampMillis >> :: ffi_from_opt (ffi_ref . created_at) , updated_at : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis as ferment :: FFIConversionFrom < dpp :: prelude :: TimestampMillis >> :: ffi_from_opt (ffi_ref . updated_at) } } } impl ferment :: FFIConversionTo < dash_spv_platform :: models :: transient_dashpay_user :: TransientDashPayUser > for dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser { unsafe fn ffi_to_const (obj : dash_spv_platform :: models :: transient_dashpay_user :: TransientDashPayUser) -> * const dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser { ferment :: boxed (dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser { display_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to_opt (obj . display_name) , avatar_url : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to_opt (obj . avatar_url) , avatar_fingerprint : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to_opt (obj . avatar_fingerprint) , avatar_hash : < crate :: fermented :: types :: platform_value :: platform_value_Hash256 as ferment :: FFIConversionTo < platform_value :: Hash256 >> :: ffi_to_opt (obj . avatar_hash) , public_message : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to_opt (obj . public_message) , revision : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision as ferment :: FFIConversionTo < dpp :: prelude :: Revision >> :: ffi_to_opt (obj . revision) , document_identifier : < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (obj . document_identifier) , created_at : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis as ferment :: FFIConversionTo < dpp :: prelude :: TimestampMillis >> :: ffi_to_opt (obj . created_at) , updated_at : < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis as ferment :: FFIConversionTo < dpp :: prelude :: TimestampMillis >> :: ffi_to_opt (obj . updated_at) }) } } impl Drop for dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any_opt (ffi_ref . display_name) ; ferment :: unbox_any_opt (ffi_ref . avatar_url) ; ferment :: unbox_any_opt (ffi_ref . avatar_fingerprint) ; ferment :: unbox_any_opt (ffi_ref . avatar_hash) ; ferment :: unbox_any_opt (ffi_ref . public_message) ; ferment :: unbox_any_opt (ffi_ref . revision) ; ferment :: unbox_any (ffi_ref . document_identifier) ; ferment :: unbox_any_opt (ffi_ref . created_at) ; ferment :: unbox_any_opt (ffi_ref . updated_at) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser_ctor < > (display_name : * mut std :: os :: raw :: c_char , avatar_url : * mut std :: os :: raw :: c_char , avatar_fingerprint : * mut crate :: fermented :: generics :: Vec_u8 , avatar_hash : * mut crate :: fermented :: types :: platform_value :: platform_value_Hash256 , public_message : * mut std :: os :: raw :: c_char , revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision , document_identifier : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , created_at : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis , updated_at : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis) -> * mut dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser { ferment :: boxed (dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser { display_name , avatar_url , avatar_fingerprint , avatar_hash , public_message , revision , document_identifier , created_at , updated_at }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser_destroy < > (ffi : * mut dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser_get_display_name < > (obj : * const dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser) -> * mut std :: os :: raw :: c_char { (* obj) . display_name } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser_get_avatar_url < > (obj : * const dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser) -> * mut std :: os :: raw :: c_char { (* obj) . avatar_url } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser_get_avatar_fingerprint < > (obj : * const dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . avatar_fingerprint } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser_get_avatar_hash < > (obj : * const dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser) -> * mut crate :: fermented :: types :: platform_value :: platform_value_Hash256 { (* obj) . avatar_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser_get_public_message < > (obj : * const dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser) -> * mut std :: os :: raw :: c_char { (* obj) . public_message } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser_get_revision < > (obj : * const dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser_get_document_identifier < > (obj : * const dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_identifier } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser_get_created_at < > (obj : * const dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis { (* obj) . created_at } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser_get_updated_at < > (obj : * const dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis { (* obj) . updated_at } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser_set_display_name < > (obj : * const dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser) -> * mut std :: os :: raw :: c_char { (* obj) . display_name } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser_set_avatar_url < > (obj : * const dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser) -> * mut std :: os :: raw :: c_char { (* obj) . avatar_url } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser_set_avatar_fingerprint < > (obj : * const dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . avatar_fingerprint } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser_set_avatar_hash < > (obj : * const dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser) -> * mut crate :: fermented :: types :: platform_value :: platform_value_Hash256 { (* obj) . avatar_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser_set_public_message < > (obj : * const dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser) -> * mut std :: os :: raw :: c_char { (* obj) . public_message } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser_set_revision < > (obj : * const dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser_set_document_identifier < > (obj : * const dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . document_identifier } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser_set_created_at < > (obj : * const dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis { (* obj) . created_at } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser_set_updated_at < > (obj : * const dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_TimestampMillis { (* obj) . updated_at } } pub mod identity { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`IdentityModel`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_platform_models_identity_IdentityModel { pub context : * mut dash_spv_platform :: models :: identity :: IdentityContext , pub identity : * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity , pub transient_dash_pay_user : * mut crate :: fermented :: types :: dash_spv_platform :: models :: transient_dashpay_user :: dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser } impl ferment :: FFIConversionFrom < dash_spv_platform :: models :: identity :: IdentityModel > for dash_spv_platform_models_identity_IdentityModel { unsafe fn ffi_from_const (ffi : * const dash_spv_platform_models_identity_IdentityModel) -> dash_spv_platform :: models :: identity :: IdentityModel { let ffi_ref = & * ffi ; dash_spv_platform :: models :: identity :: IdentityModel { context : (& * ffi_ref . context) . clone () , identity : < crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity as ferment :: FFIConversionFrom < dpp :: identity :: identity :: Identity >> :: ffi_from (ffi_ref . identity) , transient_dash_pay_user : < crate :: fermented :: types :: dash_spv_platform :: models :: transient_dashpay_user :: dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser as ferment :: FFIConversionFrom < dash_spv_platform :: models :: transient_dashpay_user :: TransientDashPayUser >> :: ffi_from_opt (ffi_ref . transient_dash_pay_user) } } } impl ferment :: FFIConversionTo < dash_spv_platform :: models :: identity :: IdentityModel > for dash_spv_platform_models_identity_IdentityModel { unsafe fn ffi_to_const (obj : dash_spv_platform :: models :: identity :: IdentityModel) -> * const dash_spv_platform_models_identity_IdentityModel { ferment :: boxed (dash_spv_platform_models_identity_IdentityModel { context : ferment :: boxed (obj . context) , identity : < crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity as ferment :: FFIConversionTo < dpp :: identity :: identity :: Identity >> :: ffi_to (obj . identity) , transient_dash_pay_user : < crate :: fermented :: types :: dash_spv_platform :: models :: transient_dashpay_user :: dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser as ferment :: FFIConversionTo < dash_spv_platform :: models :: transient_dashpay_user :: TransientDashPayUser >> :: ffi_to_opt (obj . transient_dash_pay_user) }) } } impl Drop for dash_spv_platform_models_identity_IdentityModel { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . context) ; ferment :: unbox_any (ffi_ref . identity) ; ferment :: unbox_any_opt (ffi_ref . transient_dash_pay_user) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_identity_IdentityModel_ctor < > (context : * mut dash_spv_platform :: models :: identity :: IdentityContext , identity : * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity , transient_dash_pay_user : * mut crate :: fermented :: types :: dash_spv_platform :: models :: transient_dashpay_user :: dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser) -> * mut dash_spv_platform_models_identity_IdentityModel { ferment :: boxed (dash_spv_platform_models_identity_IdentityModel { context , identity , transient_dash_pay_user }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_identity_IdentityModel_destroy < > (ffi : * mut dash_spv_platform_models_identity_IdentityModel) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_identity_IdentityModel_get_context < > (obj : * const dash_spv_platform_models_identity_IdentityModel) -> * mut dash_spv_platform :: models :: identity :: IdentityContext { (* obj) . context } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_identity_IdentityModel_get_identity < > (obj : * const dash_spv_platform_models_identity_IdentityModel) -> * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity { (* obj) . identity } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_identity_IdentityModel_get_transient_dash_pay_user < > (obj : * const dash_spv_platform_models_identity_IdentityModel) -> * mut crate :: fermented :: types :: dash_spv_platform :: models :: transient_dashpay_user :: dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser { (* obj) . transient_dash_pay_user } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_identity_IdentityModel_set_context < > (obj : * const dash_spv_platform_models_identity_IdentityModel) -> * mut dash_spv_platform :: models :: identity :: IdentityContext { (* obj) . context } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_identity_IdentityModel_set_identity < > (obj : * const dash_spv_platform_models_identity_IdentityModel) -> * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity { (* obj) . identity } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_identity_IdentityModel_set_transient_dash_pay_user < > (obj : * const dash_spv_platform_models_identity_IdentityModel) -> * mut crate :: fermented :: types :: dash_spv_platform :: models :: transient_dashpay_user :: dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser { (* obj) . transient_dash_pay_user } } pub mod contact_request { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`ContactRequest`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_platform_models_contact_request_ContactRequest { pub id : * mut crate :: fermented :: generics :: Arr_u8_32 , pub owner_id : * mut crate :: fermented :: generics :: Arr_u8_32 , pub recipient : * mut crate :: fermented :: generics :: Arr_u8_32 , pub encrypted_account_label : * mut crate :: fermented :: generics :: Vec_u8 , pub encrypted_public_key : * mut crate :: fermented :: generics :: Vec_u8 , pub account_reference : u32 , pub sender_key_index : u32 , pub recipient_key_index : u32 , pub created_at : u64 } impl ferment :: FFIConversionFrom < dash_spv_platform :: models :: contact_request :: ContactRequest > for dash_spv_platform_models_contact_request_ContactRequest { unsafe fn ffi_from_const (ffi : * const dash_spv_platform_models_contact_request_ContactRequest) -> dash_spv_platform :: models :: contact_request :: ContactRequest { let ffi_ref = & * ffi ; dash_spv_platform :: models :: contact_request :: ContactRequest { id : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (ffi_ref . id) , owner_id : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (ffi_ref . owner_id) , recipient : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (ffi_ref . recipient) , encrypted_account_label : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from_opt (ffi_ref . encrypted_account_label) , encrypted_public_key : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (ffi_ref . encrypted_public_key) , account_reference : ffi_ref . account_reference , sender_key_index : ffi_ref . sender_key_index , recipient_key_index : ffi_ref . recipient_key_index , created_at : ffi_ref . created_at } } } impl ferment :: FFIConversionTo < dash_spv_platform :: models :: contact_request :: ContactRequest > for dash_spv_platform_models_contact_request_ContactRequest { unsafe fn ffi_to_const (obj : dash_spv_platform :: models :: contact_request :: ContactRequest) -> * const dash_spv_platform_models_contact_request_ContactRequest { ferment :: boxed (dash_spv_platform_models_contact_request_ContactRequest { id : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj . id) , owner_id : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj . owner_id) , recipient : < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (obj . recipient) , encrypted_account_label : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to_opt (obj . encrypted_account_label) , encrypted_public_key : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj . encrypted_public_key) , account_reference : obj . account_reference , sender_key_index : obj . sender_key_index , recipient_key_index : obj . recipient_key_index , created_at : obj . created_at }) } } impl Drop for dash_spv_platform_models_contact_request_ContactRequest { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . id) ; ferment :: unbox_any (ffi_ref . owner_id) ; ferment :: unbox_any (ffi_ref . recipient) ; ferment :: unbox_any_opt (ffi_ref . encrypted_account_label) ; ferment :: unbox_any (ffi_ref . encrypted_public_key) ; ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contact_request_ContactRequest_ctor < > (id : * mut crate :: fermented :: generics :: Arr_u8_32 , owner_id : * mut crate :: fermented :: generics :: Arr_u8_32 , recipient : * mut crate :: fermented :: generics :: Arr_u8_32 , encrypted_account_label : * mut crate :: fermented :: generics :: Vec_u8 , encrypted_public_key : * mut crate :: fermented :: generics :: Vec_u8 , account_reference : u32 , sender_key_index : u32 , recipient_key_index : u32 , created_at : u64) -> * mut dash_spv_platform_models_contact_request_ContactRequest { ferment :: boxed (dash_spv_platform_models_contact_request_ContactRequest { id , owner_id , recipient , encrypted_account_label , encrypted_public_key , account_reference , sender_key_index , recipient_key_index , created_at }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contact_request_ContactRequest_destroy < > (ffi : * mut dash_spv_platform_models_contact_request_ContactRequest) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contact_request_ContactRequest_get_id < > (obj : * const dash_spv_platform_models_contact_request_ContactRequest) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contact_request_ContactRequest_get_owner_id < > (obj : * const dash_spv_platform_models_contact_request_ContactRequest) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . owner_id } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contact_request_ContactRequest_get_recipient < > (obj : * const dash_spv_platform_models_contact_request_ContactRequest) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . recipient } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contact_request_ContactRequest_get_encrypted_account_label < > (obj : * const dash_spv_platform_models_contact_request_ContactRequest) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . encrypted_account_label } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contact_request_ContactRequest_get_encrypted_public_key < > (obj : * const dash_spv_platform_models_contact_request_ContactRequest) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . encrypted_public_key } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contact_request_ContactRequest_get_account_reference < > (obj : * const dash_spv_platform_models_contact_request_ContactRequest) -> u32 { (* obj) . account_reference } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contact_request_ContactRequest_get_sender_key_index < > (obj : * const dash_spv_platform_models_contact_request_ContactRequest) -> u32 { (* obj) . sender_key_index } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contact_request_ContactRequest_get_recipient_key_index < > (obj : * const dash_spv_platform_models_contact_request_ContactRequest) -> u32 { (* obj) . recipient_key_index } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contact_request_ContactRequest_get_created_at < > (obj : * const dash_spv_platform_models_contact_request_ContactRequest) -> u64 { (* obj) . created_at } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contact_request_ContactRequest_set_id < > (obj : * const dash_spv_platform_models_contact_request_ContactRequest) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . id } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contact_request_ContactRequest_set_owner_id < > (obj : * const dash_spv_platform_models_contact_request_ContactRequest) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . owner_id } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contact_request_ContactRequest_set_recipient < > (obj : * const dash_spv_platform_models_contact_request_ContactRequest) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . recipient } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contact_request_ContactRequest_set_encrypted_account_label < > (obj : * const dash_spv_platform_models_contact_request_ContactRequest) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . encrypted_account_label } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contact_request_ContactRequest_set_encrypted_public_key < > (obj : * const dash_spv_platform_models_contact_request_ContactRequest) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . encrypted_public_key } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contact_request_ContactRequest_set_account_reference < > (obj : * const dash_spv_platform_models_contact_request_ContactRequest) -> u32 { (* obj) . account_reference } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contact_request_ContactRequest_set_sender_key_index < > (obj : * const dash_spv_platform_models_contact_request_ContactRequest) -> u32 { (* obj) . sender_key_index } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contact_request_ContactRequest_set_recipient_key_index < > (obj : * const dash_spv_platform_models_contact_request_ContactRequest) -> u32 { (* obj) . recipient_key_index } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contact_request_ContactRequest_set_created_at < > (obj : * const dash_spv_platform_models_contact_request_ContactRequest) -> u64 { (* obj) . created_at } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`ContactRequestKind`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_platform_models_contact_request_ContactRequestKind { Incoming (* mut crate :: fermented :: types :: dash_spv_platform :: models :: contact_request :: dash_spv_platform_models_contact_request_ContactRequest) , Outgoing (* mut crate :: fermented :: types :: dash_spv_platform :: models :: contact_request :: dash_spv_platform_models_contact_request_ContactRequest) } impl ferment :: FFIConversionFrom < dash_spv_platform :: models :: contact_request :: ContactRequestKind > for dash_spv_platform_models_contact_request_ContactRequestKind { unsafe fn ffi_from_const (ffi : * const dash_spv_platform_models_contact_request_ContactRequestKind) -> dash_spv_platform :: models :: contact_request :: ContactRequestKind { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_platform_models_contact_request_ContactRequestKind :: Incoming (o_0) => dash_spv_platform :: models :: contact_request :: ContactRequestKind :: Incoming (< crate :: fermented :: types :: dash_spv_platform :: models :: contact_request :: dash_spv_platform_models_contact_request_ContactRequest as ferment :: FFIConversionFrom < dash_spv_platform :: models :: contact_request :: ContactRequest >> :: ffi_from (* o_0)) , dash_spv_platform_models_contact_request_ContactRequestKind :: Outgoing (o_0) => dash_spv_platform :: models :: contact_request :: ContactRequestKind :: Outgoing (< crate :: fermented :: types :: dash_spv_platform :: models :: contact_request :: dash_spv_platform_models_contact_request_ContactRequest as ferment :: FFIConversionFrom < dash_spv_platform :: models :: contact_request :: ContactRequest >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dash_spv_platform :: models :: contact_request :: ContactRequestKind > for dash_spv_platform_models_contact_request_ContactRequestKind { unsafe fn ffi_to_const (obj : dash_spv_platform :: models :: contact_request :: ContactRequestKind) -> * const dash_spv_platform_models_contact_request_ContactRequestKind { ferment :: boxed (match obj { dash_spv_platform :: models :: contact_request :: ContactRequestKind :: Incoming (o_0) => dash_spv_platform_models_contact_request_ContactRequestKind :: Incoming (< crate :: fermented :: types :: dash_spv_platform :: models :: contact_request :: dash_spv_platform_models_contact_request_ContactRequest as ferment :: FFIConversionTo < dash_spv_platform :: models :: contact_request :: ContactRequest >> :: ffi_to (o_0)) , dash_spv_platform :: models :: contact_request :: ContactRequestKind :: Outgoing (o_0) => dash_spv_platform_models_contact_request_ContactRequestKind :: Outgoing (< crate :: fermented :: types :: dash_spv_platform :: models :: contact_request :: dash_spv_platform_models_contact_request_ContactRequest as ferment :: FFIConversionTo < dash_spv_platform :: models :: contact_request :: ContactRequest >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dash_spv_platform_models_contact_request_ContactRequestKind { fn drop (& mut self) { unsafe { match self { dash_spv_platform_models_contact_request_ContactRequestKind :: Incoming (o_0) => { ferment :: unbox_any (* o_0) ; } , dash_spv_platform_models_contact_request_ContactRequestKind :: Outgoing (o_0) => { ferment :: unbox_any (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contact_request_ContactRequestKind_Incoming_ctor (o_o_0 : * mut crate :: fermented :: types :: dash_spv_platform :: models :: contact_request :: dash_spv_platform_models_contact_request_ContactRequest) -> * mut dash_spv_platform_models_contact_request_ContactRequestKind { ferment :: boxed (dash_spv_platform_models_contact_request_ContactRequestKind :: Incoming (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contact_request_ContactRequestKind_Outgoing_ctor (o_o_0 : * mut crate :: fermented :: types :: dash_spv_platform :: models :: contact_request :: dash_spv_platform_models_contact_request_ContactRequest) -> * mut dash_spv_platform_models_contact_request_ContactRequestKind { ferment :: boxed (dash_spv_platform_models_contact_request_ContactRequestKind :: Outgoing (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contact_request_ContactRequestKind_destroy < > (ffi : * mut dash_spv_platform_models_contact_request_ContactRequestKind) { ferment :: unbox_any (ffi) ; } } pub mod profile { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`Profile`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_platform_models_profile_Profile { pub updated_at : u64 , pub created_at : u64 , pub revision : u64 , pub public_message : * mut std :: os :: raw :: c_char , pub avatar_url : * mut std :: os :: raw :: c_char , pub avatar_fingerprint : * mut crate :: fermented :: generics :: Vec_u8 , pub avatar_hash : * mut crate :: fermented :: generics :: Vec_u8 , pub display_name : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dash_spv_platform :: models :: profile :: Profile > for dash_spv_platform_models_profile_Profile { unsafe fn ffi_from_const (ffi : * const dash_spv_platform_models_profile_Profile) -> dash_spv_platform :: models :: profile :: Profile { let ffi_ref = & * ffi ; dash_spv_platform :: models :: profile :: Profile { updated_at : ffi_ref . updated_at , created_at : ffi_ref . created_at , revision : ffi_ref . revision , public_message : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from_opt (ffi_ref . public_message) , avatar_url : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from_opt (ffi_ref . avatar_url) , avatar_fingerprint : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from_opt (ffi_ref . avatar_fingerprint) , avatar_hash : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from_opt (ffi_ref . avatar_hash) , display_name : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from_opt (ffi_ref . display_name) } } } impl ferment :: FFIConversionTo < dash_spv_platform :: models :: profile :: Profile > for dash_spv_platform_models_profile_Profile { unsafe fn ffi_to_const (obj : dash_spv_platform :: models :: profile :: Profile) -> * const dash_spv_platform_models_profile_Profile { ferment :: boxed (dash_spv_platform_models_profile_Profile { updated_at : obj . updated_at , created_at : obj . created_at , revision : obj . revision , public_message : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to_opt (obj . public_message) , avatar_url : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to_opt (obj . avatar_url) , avatar_fingerprint : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to_opt (obj . avatar_fingerprint) , avatar_hash : < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to_opt (obj . avatar_hash) , display_name : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to_opt (obj . display_name) }) } } impl Drop for dash_spv_platform_models_profile_Profile { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ; ferment :: unbox_any_opt (ffi_ref . public_message) ; ferment :: unbox_any_opt (ffi_ref . avatar_url) ; ferment :: unbox_any_opt (ffi_ref . avatar_fingerprint) ; ferment :: unbox_any_opt (ffi_ref . avatar_hash) ; ferment :: unbox_any_opt (ffi_ref . display_name) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_profile_Profile_ctor < > (updated_at : u64 , created_at : u64 , revision : u64 , public_message : * mut std :: os :: raw :: c_char , avatar_url : * mut std :: os :: raw :: c_char , avatar_fingerprint : * mut crate :: fermented :: generics :: Vec_u8 , avatar_hash : * mut crate :: fermented :: generics :: Vec_u8 , display_name : * mut std :: os :: raw :: c_char) -> * mut dash_spv_platform_models_profile_Profile { ferment :: boxed (dash_spv_platform_models_profile_Profile { updated_at , created_at , revision , public_message , avatar_url , avatar_fingerprint , avatar_hash , display_name }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_profile_Profile_destroy < > (ffi : * mut dash_spv_platform_models_profile_Profile) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_profile_Profile_get_updated_at < > (obj : * const dash_spv_platform_models_profile_Profile) -> u64 { (* obj) . updated_at } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_profile_Profile_get_created_at < > (obj : * const dash_spv_platform_models_profile_Profile) -> u64 { (* obj) . created_at } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_profile_Profile_get_revision < > (obj : * const dash_spv_platform_models_profile_Profile) -> u64 { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_profile_Profile_get_public_message < > (obj : * const dash_spv_platform_models_profile_Profile) -> * mut std :: os :: raw :: c_char { (* obj) . public_message } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_profile_Profile_get_avatar_url < > (obj : * const dash_spv_platform_models_profile_Profile) -> * mut std :: os :: raw :: c_char { (* obj) . avatar_url } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_profile_Profile_get_avatar_fingerprint < > (obj : * const dash_spv_platform_models_profile_Profile) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . avatar_fingerprint } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_profile_Profile_get_avatar_hash < > (obj : * const dash_spv_platform_models_profile_Profile) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . avatar_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_profile_Profile_get_display_name < > (obj : * const dash_spv_platform_models_profile_Profile) -> * mut std :: os :: raw :: c_char { (* obj) . display_name } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_profile_Profile_set_updated_at < > (obj : * const dash_spv_platform_models_profile_Profile) -> u64 { (* obj) . updated_at } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_profile_Profile_set_created_at < > (obj : * const dash_spv_platform_models_profile_Profile) -> u64 { (* obj) . created_at } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_profile_Profile_set_revision < > (obj : * const dash_spv_platform_models_profile_Profile) -> u64 { (* obj) . revision } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_profile_Profile_set_public_message < > (obj : * const dash_spv_platform_models_profile_Profile) -> * mut std :: os :: raw :: c_char { (* obj) . public_message } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_profile_Profile_set_avatar_url < > (obj : * const dash_spv_platform_models_profile_Profile) -> * mut std :: os :: raw :: c_char { (* obj) . avatar_url } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_profile_Profile_set_avatar_fingerprint < > (obj : * const dash_spv_platform_models_profile_Profile) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . avatar_fingerprint } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_profile_Profile_set_avatar_hash < > (obj : * const dash_spv_platform_models_profile_Profile) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . avatar_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_profile_Profile_set_display_name < > (obj : * const dash_spv_platform_models_profile_Profile) -> * mut std :: os :: raw :: c_char { (* obj) . display_name } } pub mod contract { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`ContractModel`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_platform_models_contract_ContractModel { pub chain_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType , pub data_contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract , pub state : * mut crate :: fermented :: types :: dash_spv_platform :: models :: contract :: dash_spv_platform_models_contract_ContractState , pub local_identifier : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < dash_spv_platform :: models :: contract :: ContractModel > for dash_spv_platform_models_contract_ContractModel { unsafe fn ffi_from_const (ffi : * const dash_spv_platform_models_contract_ContractModel) -> dash_spv_platform :: models :: contract :: ContractModel { let ffi_ref = & * ffi ; dash_spv_platform :: models :: contract :: ContractModel { chain_type : < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (ffi_ref . chain_type) , data_contract : < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (ffi_ref . data_contract) , state : < crate :: fermented :: types :: dash_spv_platform :: models :: contract :: dash_spv_platform_models_contract_ContractState as ferment :: FFIConversionFrom < dash_spv_platform :: models :: contract :: ContractState >> :: ffi_from (ffi_ref . state) , local_identifier : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . local_identifier) } } } impl ferment :: FFIConversionTo < dash_spv_platform :: models :: contract :: ContractModel > for dash_spv_platform_models_contract_ContractModel { unsafe fn ffi_to_const (obj : dash_spv_platform :: models :: contract :: ContractModel) -> * const dash_spv_platform_models_contract_ContractModel { ferment :: boxed (dash_spv_platform_models_contract_ContractModel { chain_type : < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionTo < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_to (obj . chain_type) , data_contract : < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionTo < dpp :: data_contract :: DataContract >> :: ffi_to (obj . data_contract) , state : < crate :: fermented :: types :: dash_spv_platform :: models :: contract :: dash_spv_platform_models_contract_ContractState as ferment :: FFIConversionTo < dash_spv_platform :: models :: contract :: ContractState >> :: ffi_to (obj . state) , local_identifier : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . local_identifier) }) } } impl Drop for dash_spv_platform_models_contract_ContractModel { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . chain_type) ; ferment :: unbox_any (ffi_ref . data_contract) ; ferment :: unbox_any (ffi_ref . state) ; ferment :: unbox_string (ffi_ref . local_identifier) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contract_ContractModel_ctor < > (chain_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType , data_contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract , state : * mut crate :: fermented :: types :: dash_spv_platform :: models :: contract :: dash_spv_platform_models_contract_ContractState , local_identifier : * mut std :: os :: raw :: c_char) -> * mut dash_spv_platform_models_contract_ContractModel { ferment :: boxed (dash_spv_platform_models_contract_ContractModel { chain_type , data_contract , state , local_identifier }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contract_ContractModel_destroy < > (ffi : * mut dash_spv_platform_models_contract_ContractModel) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contract_ContractModel_get_chain_type < > (obj : * const dash_spv_platform_models_contract_ContractModel) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType { (* obj) . chain_type } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contract_ContractModel_get_data_contract < > (obj : * const dash_spv_platform_models_contract_ContractModel) -> * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract { (* obj) . data_contract } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contract_ContractModel_get_state < > (obj : * const dash_spv_platform_models_contract_ContractModel) -> * mut crate :: fermented :: types :: dash_spv_platform :: models :: contract :: dash_spv_platform_models_contract_ContractState { (* obj) . state } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contract_ContractModel_get_local_identifier < > (obj : * const dash_spv_platform_models_contract_ContractModel) -> * mut std :: os :: raw :: c_char { (* obj) . local_identifier } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contract_ContractModel_set_chain_type < > (obj : * const dash_spv_platform_models_contract_ContractModel) -> * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType { (* obj) . chain_type } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contract_ContractModel_set_data_contract < > (obj : * const dash_spv_platform_models_contract_ContractModel) -> * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract { (* obj) . data_contract } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contract_ContractModel_set_state < > (obj : * const dash_spv_platform_models_contract_ContractModel) -> * mut crate :: fermented :: types :: dash_spv_platform :: models :: contract :: dash_spv_platform_models_contract_ContractState { (* obj) . state } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contract_ContractModel_set_local_identifier < > (obj : * const dash_spv_platform_models_contract_ContractModel) -> * mut std :: os :: raw :: c_char { (* obj) . local_identifier } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`ContractState`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_platform_models_contract_ContractState { Unknown , NotRegistered , Registered , Registering } impl ferment :: FFIConversionFrom < dash_spv_platform :: models :: contract :: ContractState > for dash_spv_platform_models_contract_ContractState { unsafe fn ffi_from_const (ffi : * const dash_spv_platform_models_contract_ContractState) -> dash_spv_platform :: models :: contract :: ContractState { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_platform_models_contract_ContractState :: Unknown => dash_spv_platform :: models :: contract :: ContractState :: Unknown , dash_spv_platform_models_contract_ContractState :: NotRegistered => dash_spv_platform :: models :: contract :: ContractState :: NotRegistered , dash_spv_platform_models_contract_ContractState :: Registered => dash_spv_platform :: models :: contract :: ContractState :: Registered , dash_spv_platform_models_contract_ContractState :: Registering => dash_spv_platform :: models :: contract :: ContractState :: Registering } } } impl ferment :: FFIConversionTo < dash_spv_platform :: models :: contract :: ContractState > for dash_spv_platform_models_contract_ContractState { unsafe fn ffi_to_const (obj : dash_spv_platform :: models :: contract :: ContractState) -> * const dash_spv_platform_models_contract_ContractState { ferment :: boxed (match obj { dash_spv_platform :: models :: contract :: ContractState :: Unknown => dash_spv_platform_models_contract_ContractState :: Unknown , dash_spv_platform :: models :: contract :: ContractState :: NotRegistered => dash_spv_platform_models_contract_ContractState :: NotRegistered , dash_spv_platform :: models :: contract :: ContractState :: Registered => dash_spv_platform_models_contract_ContractState :: Registered , dash_spv_platform :: models :: contract :: ContractState :: Registering => dash_spv_platform_models_contract_ContractState :: Registering , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dash_spv_platform_models_contract_ContractState { fn drop (& mut self) { unsafe { match self { dash_spv_platform_models_contract_ContractState :: Unknown => { } , dash_spv_platform_models_contract_ContractState :: NotRegistered => { } , dash_spv_platform_models_contract_ContractState :: Registered => { } , dash_spv_platform_models_contract_ContractState :: Registering => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contract_ContractState_Unknown_ctor () -> * mut dash_spv_platform_models_contract_ContractState { ferment :: boxed (dash_spv_platform_models_contract_ContractState :: Unknown { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contract_ContractState_NotRegistered_ctor () -> * mut dash_spv_platform_models_contract_ContractState { ferment :: boxed (dash_spv_platform_models_contract_ContractState :: NotRegistered { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contract_ContractState_Registered_ctor () -> * mut dash_spv_platform_models_contract_ContractState { ferment :: boxed (dash_spv_platform_models_contract_ContractState :: Registered { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contract_ContractState_Registering_ctor () -> * mut dash_spv_platform_models_contract_ContractState { ferment :: boxed (dash_spv_platform_models_contract_ContractState :: Registering { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_models_contract_ContractState_destroy < > (ffi : * mut dash_spv_platform_models_contract_ContractState) { ferment :: unbox_any (ffi) ; } } } pub mod thread_safe_context { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_platform::thread_safe_context::FFIThreadSafeContext::new`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_thread_safe_context_FFIThreadSafeContext_new (context : * const std :: os :: raw :: c_void) -> * mut dash_spv_platform :: thread_safe_context :: FFIThreadSafeContext { let obj = dash_spv_platform :: thread_safe_context :: FFIThreadSafeContext :: new (context) ; ferment :: boxed (obj) } } pub mod document { use crate as dash_spv_apple_bindings ; pub mod usernames { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_platform::document::usernames::UsernamesManager::username`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_usernames_UsernamesManager_username (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: usernames :: UsernamesManager , domain : * mut std :: os :: raw :: c_char , username : * mut std :: os :: raw :: c_char) -> * mut crate :: fermented :: generics :: Result_ok_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: usernames :: UsernamesManager :: username (& * self_ , < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (domain) , < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (username)) . await }) ; < crate :: fermented :: generics :: Result_ok_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Option < dpp :: document :: Document > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::usernames::UsernamesManager::usernames`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_usernames_UsernamesManager_usernames (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: usernames :: UsernamesManager , domain : * mut std :: os :: raw :: c_char , usernames : * mut crate :: fermented :: generics :: Vec_String) -> * mut crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: usernames :: UsernamesManager :: usernames (& * self_ , < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (domain) , < crate :: fermented :: generics :: Vec_String as ferment :: FFIConversionFrom < Vec < String > >> :: ffi_from (usernames)) . await }) ; < crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < indexmap :: IndexMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::usernames::UsernamesManager::username_stream`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_usernames_UsernamesManager_username_stream (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: usernames :: UsernamesManager , domain : * mut std :: os :: raw :: c_char , username : * mut std :: os :: raw :: c_char , retry : * mut crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy , options : * mut crate :: fermented :: types :: dash_spv_platform :: document :: usernames :: dash_spv_platform_document_usernames_UsernameValidator , delay : u64) -> * mut crate :: fermented :: generics :: Result_ok_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: usernames :: UsernamesManager :: username_stream (& * self_ , < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (domain) , < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (username) , < crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy as ferment :: FFIConversionFrom < dash_spv_platform :: util :: RetryStrategy >> :: ffi_from (retry) , < crate :: fermented :: types :: dash_spv_platform :: document :: usernames :: dash_spv_platform_document_usernames_UsernameValidator as ferment :: FFIConversionFrom < dash_spv_platform :: document :: usernames :: UsernameValidator >> :: ffi_from (options) , delay) . await }) ; < crate :: fermented :: generics :: Result_ok_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Option < dpp :: document :: Document > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::usernames::UsernamesManager::usernames_stream`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_usernames_UsernamesManager_usernames_stream (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: usernames :: UsernamesManager , domain : * mut std :: os :: raw :: c_char , usernames : * mut crate :: fermented :: generics :: Vec_String , retry : * mut crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy , options : * mut crate :: fermented :: types :: dash_spv_platform :: document :: usernames :: dash_spv_platform_document_usernames_UsernameValidator , delay : u64) -> * mut crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: usernames :: UsernamesManager :: usernames_stream (& * self_ , < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (domain) , < crate :: fermented :: generics :: Vec_String as ferment :: FFIConversionFrom < Vec < String > >> :: ffi_from (usernames) , < crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy as ferment :: FFIConversionFrom < dash_spv_platform :: util :: RetryStrategy >> :: ffi_from (retry) , < crate :: fermented :: types :: dash_spv_platform :: document :: usernames :: dash_spv_platform_document_usernames_UsernameValidator as ferment :: FFIConversionFrom < dash_spv_platform :: document :: usernames :: UsernameValidator >> :: ffi_from (options) , delay) . await }) ; < crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < indexmap :: IndexMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::usernames::UsernamesManager::username_with_contract`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_usernames_UsernamesManager_username_with_contract (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: usernames :: UsernamesManager , domain : * mut std :: os :: raw :: c_char , username : * mut std :: os :: raw :: c_char , contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract) -> * mut crate :: fermented :: generics :: Result_ok_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: usernames :: UsernamesManager :: username_with_contract (& * self_ , < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (domain) , < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (username) , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (contract)) . await }) ; < crate :: fermented :: generics :: Result_ok_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Option < dpp :: document :: Document > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::usernames::UsernamesManager::usernames_with_contract`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_usernames_UsernamesManager_usernames_with_contract (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: usernames :: UsernamesManager , domain : * mut std :: os :: raw :: c_char , usernames : * mut crate :: fermented :: generics :: Vec_String , contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract) -> * mut crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: usernames :: UsernamesManager :: usernames_with_contract (& * self_ , < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (domain) , < crate :: fermented :: generics :: Vec_String as ferment :: FFIConversionFrom < Vec < String > >> :: ffi_from (usernames) , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (contract)) . await }) ; < crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < indexmap :: IndexMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::usernames::UsernamesManager::stream_username_with_contract`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_usernames_UsernamesManager_stream_username_with_contract (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: usernames :: UsernamesManager , domain : * mut std :: os :: raw :: c_char , username : * mut std :: os :: raw :: c_char , contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract , retry : * mut crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy , options : * mut crate :: fermented :: types :: dash_spv_platform :: document :: usernames :: dash_spv_platform_document_usernames_UsernameValidator , delay : u64) -> * mut crate :: fermented :: generics :: Result_ok_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: usernames :: UsernamesManager :: stream_username_with_contract (& * self_ , < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (domain) , < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (username) , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (contract) , < crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy as ferment :: FFIConversionFrom < dash_spv_platform :: util :: RetryStrategy >> :: ffi_from (retry) , < crate :: fermented :: types :: dash_spv_platform :: document :: usernames :: dash_spv_platform_document_usernames_UsernameValidator as ferment :: FFIConversionFrom < dash_spv_platform :: document :: usernames :: UsernameValidator >> :: ffi_from (options) , delay) . await }) ; < crate :: fermented :: generics :: Result_ok_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Option < dpp :: document :: Document > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::usernames::UsernamesManager::stream_usernames_with_contract`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_usernames_UsernamesManager_stream_usernames_with_contract (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: usernames :: UsernamesManager , domain : * mut std :: os :: raw :: c_char , usernames : * mut crate :: fermented :: generics :: Vec_String , contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract , retry : * mut crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy , options : * mut crate :: fermented :: types :: dash_spv_platform :: document :: usernames :: dash_spv_platform_document_usernames_UsernameValidator , delay : u64) -> * mut crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: usernames :: UsernamesManager :: stream_usernames_with_contract (& * self_ , < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (domain) , < crate :: fermented :: generics :: Vec_String as ferment :: FFIConversionFrom < Vec < String > >> :: ffi_from (usernames) , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (contract) , < crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy as ferment :: FFIConversionFrom < dash_spv_platform :: util :: RetryStrategy >> :: ffi_from (retry) , < crate :: fermented :: types :: dash_spv_platform :: document :: usernames :: dash_spv_platform_document_usernames_UsernameValidator as ferment :: FFIConversionFrom < dash_spv_platform :: document :: usernames :: UsernameValidator >> :: ffi_from (options) , delay) . await }) ; < crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < indexmap :: IndexMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`UsernameValidator`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_platform_document_usernames_UsernameValidator { None = 0 , AcceptNotFoundAsNotAnError = 1 } impl ferment :: FFIConversionFrom < dash_spv_platform :: document :: usernames :: UsernameValidator > for dash_spv_platform_document_usernames_UsernameValidator { unsafe fn ffi_from_const (ffi : * const dash_spv_platform_document_usernames_UsernameValidator) -> dash_spv_platform :: document :: usernames :: UsernameValidator { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_platform_document_usernames_UsernameValidator :: None => dash_spv_platform :: document :: usernames :: UsernameValidator :: None , dash_spv_platform_document_usernames_UsernameValidator :: AcceptNotFoundAsNotAnError => dash_spv_platform :: document :: usernames :: UsernameValidator :: AcceptNotFoundAsNotAnError } } } impl ferment :: FFIConversionTo < dash_spv_platform :: document :: usernames :: UsernameValidator > for dash_spv_platform_document_usernames_UsernameValidator { unsafe fn ffi_to_const (obj : dash_spv_platform :: document :: usernames :: UsernameValidator) -> * const dash_spv_platform_document_usernames_UsernameValidator { ferment :: boxed (match obj { dash_spv_platform :: document :: usernames :: UsernameValidator :: None => dash_spv_platform_document_usernames_UsernameValidator :: None , dash_spv_platform :: document :: usernames :: UsernameValidator :: AcceptNotFoundAsNotAnError => dash_spv_platform_document_usernames_UsernameValidator :: AcceptNotFoundAsNotAnError , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dash_spv_platform_document_usernames_UsernameValidator { fn drop (& mut self) { unsafe { match self { dash_spv_platform_document_usernames_UsernameValidator :: None => { } , dash_spv_platform_document_usernames_UsernameValidator :: AcceptNotFoundAsNotAnError => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_usernames_UsernameValidator_None_ctor () -> * mut dash_spv_platform_document_usernames_UsernameValidator { ferment :: boxed (dash_spv_platform_document_usernames_UsernameValidator :: None { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_usernames_UsernameValidator_AcceptNotFoundAsNotAnError_ctor () -> * mut dash_spv_platform_document_usernames_UsernameValidator { ferment :: boxed (dash_spv_platform_document_usernames_UsernameValidator :: AcceptNotFoundAsNotAnError { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_usernames_UsernameValidator_destroy < > (ffi : * mut dash_spv_platform_document_usernames_UsernameValidator) { ferment :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`UsernameStatus`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_platform_document_usernames_UsernameStatus { NotPresent = 0 , Initial = 1 , PreorderRegistrationPending = 2 , Preordered = 3 , RegistrationPending = 4 , Confirmed = 5 , TakenOnNetwork = 6 } impl ferment :: FFIConversionFrom < dash_spv_platform :: document :: usernames :: UsernameStatus > for dash_spv_platform_document_usernames_UsernameStatus { unsafe fn ffi_from_const (ffi : * const dash_spv_platform_document_usernames_UsernameStatus) -> dash_spv_platform :: document :: usernames :: UsernameStatus { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_platform_document_usernames_UsernameStatus :: NotPresent => dash_spv_platform :: document :: usernames :: UsernameStatus :: NotPresent , dash_spv_platform_document_usernames_UsernameStatus :: Initial => dash_spv_platform :: document :: usernames :: UsernameStatus :: Initial , dash_spv_platform_document_usernames_UsernameStatus :: PreorderRegistrationPending => dash_spv_platform :: document :: usernames :: UsernameStatus :: PreorderRegistrationPending , dash_spv_platform_document_usernames_UsernameStatus :: Preordered => dash_spv_platform :: document :: usernames :: UsernameStatus :: Preordered , dash_spv_platform_document_usernames_UsernameStatus :: RegistrationPending => dash_spv_platform :: document :: usernames :: UsernameStatus :: RegistrationPending , dash_spv_platform_document_usernames_UsernameStatus :: Confirmed => dash_spv_platform :: document :: usernames :: UsernameStatus :: Confirmed , dash_spv_platform_document_usernames_UsernameStatus :: TakenOnNetwork => dash_spv_platform :: document :: usernames :: UsernameStatus :: TakenOnNetwork } } } impl ferment :: FFIConversionTo < dash_spv_platform :: document :: usernames :: UsernameStatus > for dash_spv_platform_document_usernames_UsernameStatus { unsafe fn ffi_to_const (obj : dash_spv_platform :: document :: usernames :: UsernameStatus) -> * const dash_spv_platform_document_usernames_UsernameStatus { ferment :: boxed (match obj { dash_spv_platform :: document :: usernames :: UsernameStatus :: NotPresent => dash_spv_platform_document_usernames_UsernameStatus :: NotPresent , dash_spv_platform :: document :: usernames :: UsernameStatus :: Initial => dash_spv_platform_document_usernames_UsernameStatus :: Initial , dash_spv_platform :: document :: usernames :: UsernameStatus :: PreorderRegistrationPending => dash_spv_platform_document_usernames_UsernameStatus :: PreorderRegistrationPending , dash_spv_platform :: document :: usernames :: UsernameStatus :: Preordered => dash_spv_platform_document_usernames_UsernameStatus :: Preordered , dash_spv_platform :: document :: usernames :: UsernameStatus :: RegistrationPending => dash_spv_platform_document_usernames_UsernameStatus :: RegistrationPending , dash_spv_platform :: document :: usernames :: UsernameStatus :: Confirmed => dash_spv_platform_document_usernames_UsernameStatus :: Confirmed , dash_spv_platform :: document :: usernames :: UsernameStatus :: TakenOnNetwork => dash_spv_platform_document_usernames_UsernameStatus :: TakenOnNetwork , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dash_spv_platform_document_usernames_UsernameStatus { fn drop (& mut self) { unsafe { match self { dash_spv_platform_document_usernames_UsernameStatus :: NotPresent => { } , dash_spv_platform_document_usernames_UsernameStatus :: Initial => { } , dash_spv_platform_document_usernames_UsernameStatus :: PreorderRegistrationPending => { } , dash_spv_platform_document_usernames_UsernameStatus :: Preordered => { } , dash_spv_platform_document_usernames_UsernameStatus :: RegistrationPending => { } , dash_spv_platform_document_usernames_UsernameStatus :: Confirmed => { } , dash_spv_platform_document_usernames_UsernameStatus :: TakenOnNetwork => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_usernames_UsernameStatus_NotPresent_ctor () -> * mut dash_spv_platform_document_usernames_UsernameStatus { ferment :: boxed (dash_spv_platform_document_usernames_UsernameStatus :: NotPresent { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_usernames_UsernameStatus_Initial_ctor () -> * mut dash_spv_platform_document_usernames_UsernameStatus { ferment :: boxed (dash_spv_platform_document_usernames_UsernameStatus :: Initial { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_usernames_UsernameStatus_PreorderRegistrationPending_ctor () -> * mut dash_spv_platform_document_usernames_UsernameStatus { ferment :: boxed (dash_spv_platform_document_usernames_UsernameStatus :: PreorderRegistrationPending { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_usernames_UsernameStatus_Preordered_ctor () -> * mut dash_spv_platform_document_usernames_UsernameStatus { ferment :: boxed (dash_spv_platform_document_usernames_UsernameStatus :: Preordered { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_usernames_UsernameStatus_RegistrationPending_ctor () -> * mut dash_spv_platform_document_usernames_UsernameStatus { ferment :: boxed (dash_spv_platform_document_usernames_UsernameStatus :: RegistrationPending { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_usernames_UsernameStatus_Confirmed_ctor () -> * mut dash_spv_platform_document_usernames_UsernameStatus { ferment :: boxed (dash_spv_platform_document_usernames_UsernameStatus :: Confirmed { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_usernames_UsernameStatus_TakenOnNetwork_ctor () -> * mut dash_spv_platform_document_usernames_UsernameStatus { ferment :: boxed (dash_spv_platform_document_usernames_UsernameStatus :: TakenOnNetwork { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_usernames_UsernameStatus_destroy < > (ffi : * mut dash_spv_platform_document_usernames_UsernameStatus) { ferment :: unbox_any (ffi) ; } } pub mod contact_request { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_platform::document::contact_request::as_incoming_request`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_contact_request_as_incoming_request (kind : * mut crate :: fermented :: types :: dash_spv_platform :: models :: contact_request :: dash_spv_platform_models_contact_request_ContactRequestKind) -> * mut crate :: fermented :: types :: dash_spv_platform :: models :: contact_request :: dash_spv_platform_models_contact_request_ContactRequest { let obj = dash_spv_platform :: document :: contact_request :: as_incoming_request (< crate :: fermented :: types :: dash_spv_platform :: models :: contact_request :: dash_spv_platform_models_contact_request_ContactRequestKind as ferment :: FFIConversionFrom < dash_spv_platform :: models :: contact_request :: ContactRequestKind >> :: ffi_from (kind)) ; < crate :: fermented :: types :: dash_spv_platform :: models :: contact_request :: dash_spv_platform_models_contact_request_ContactRequest as ferment :: FFIConversionTo < dash_spv_platform :: models :: contact_request :: ContactRequest >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::contact_request::ContactRequestManager::incoming_contact_requests_using_contract`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_contact_request_ContactRequestManager_incoming_contact_requests_using_contract (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: contact_request :: ContactRequestManager , contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract , user_id : * mut crate :: fermented :: generics :: Arr_u8_32 , since : u64 , start_after : * mut crate :: fermented :: generics :: Vec_u8) -> * mut crate :: fermented :: generics :: Result_ok_Vec_dash_spv_platform_models_contact_request_ContactRequestKind_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: contact_request :: ContactRequestManager :: incoming_contact_requests_using_contract (& * self_ , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (contract) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (user_id) , since , < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from_opt (start_after)) . await }) ; < crate :: fermented :: generics :: Result_ok_Vec_dash_spv_platform_models_contact_request_ContactRequestKind_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Vec < dash_spv_platform :: models :: contact_request :: ContactRequestKind > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::contact_request::ContactRequestManager::outgoing_contact_requests_using_contract`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_contact_request_ContactRequestManager_outgoing_contact_requests_using_contract (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: contact_request :: ContactRequestManager , contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract , user_id : * mut crate :: fermented :: generics :: Arr_u8_32 , since : u64 , start_after : * mut crate :: fermented :: generics :: Vec_u8) -> * mut crate :: fermented :: generics :: Result_ok_Vec_dash_spv_platform_models_contact_request_ContactRequestKind_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: contact_request :: ContactRequestManager :: outgoing_contact_requests_using_contract (& * self_ , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (contract) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (user_id) , since , < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from_opt (start_after)) . await }) ; < crate :: fermented :: generics :: Result_ok_Vec_dash_spv_platform_models_contact_request_ContactRequestKind_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Vec < dash_spv_platform :: models :: contact_request :: ContactRequestKind > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::contact_request::ContactRequestManager::incoming_contact_requests`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_contact_request_ContactRequestManager_incoming_contact_requests (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: contact_request :: ContactRequestManager , user_id : * mut crate :: fermented :: generics :: Arr_u8_32 , since : u64 , start_after : * mut crate :: fermented :: generics :: Vec_u8) -> * mut crate :: fermented :: generics :: Result_ok_Vec_dash_spv_platform_models_contact_request_ContactRequestKind_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: contact_request :: ContactRequestManager :: incoming_contact_requests (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (user_id) , since , < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from_opt (start_after)) . await }) ; < crate :: fermented :: generics :: Result_ok_Vec_dash_spv_platform_models_contact_request_ContactRequestKind_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Vec < dash_spv_platform :: models :: contact_request :: ContactRequestKind > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::contact_request::ContactRequestManager::outgoing_contact_requests`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_contact_request_ContactRequestManager_outgoing_contact_requests (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: contact_request :: ContactRequestManager , user_id : * mut crate :: fermented :: generics :: Arr_u8_32 , since : u64 , start_after : * mut crate :: fermented :: generics :: Vec_u8) -> * mut crate :: fermented :: generics :: Result_ok_Vec_dash_spv_platform_models_contact_request_ContactRequestKind_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: contact_request :: ContactRequestManager :: outgoing_contact_requests (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (user_id) , since , < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from_opt (start_after)) . await }) ; < crate :: fermented :: generics :: Result_ok_Vec_dash_spv_platform_models_contact_request_ContactRequestKind_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Vec < dash_spv_platform :: models :: contact_request :: ContactRequestKind > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::contact_request::ContactRequestManager::stream_incoming_contact_requests`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_contact_request_ContactRequestManager_stream_incoming_contact_requests (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: contact_request :: ContactRequestManager , user_id : * mut crate :: fermented :: generics :: Arr_u8_32 , since : u64 , start_after : * mut crate :: fermented :: generics :: Vec_u8 , retry : * mut crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy , options : * mut crate :: fermented :: types :: dash_spv_platform :: document :: contact_request :: dash_spv_platform_document_contact_request_ContactRequestValidator , delay : u64) -> * mut crate :: fermented :: generics :: Result_ok_Vec_dash_spv_platform_models_contact_request_ContactRequestKind_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: contact_request :: ContactRequestManager :: stream_incoming_contact_requests (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (user_id) , since , < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from_opt (start_after) , < crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy as ferment :: FFIConversionFrom < dash_spv_platform :: util :: RetryStrategy >> :: ffi_from (retry) , < crate :: fermented :: types :: dash_spv_platform :: document :: contact_request :: dash_spv_platform_document_contact_request_ContactRequestValidator as ferment :: FFIConversionFrom < dash_spv_platform :: document :: contact_request :: ContactRequestValidator >> :: ffi_from (options) , delay) . await }) ; < crate :: fermented :: generics :: Result_ok_Vec_dash_spv_platform_models_contact_request_ContactRequestKind_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Vec < dash_spv_platform :: models :: contact_request :: ContactRequestKind > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::contact_request::ContactRequestManager::stream_incoming_contact_requests_with_contract`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_contact_request_ContactRequestManager_stream_incoming_contact_requests_with_contract (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: contact_request :: ContactRequestManager , user_id : * mut crate :: fermented :: generics :: Arr_u8_32 , since : u64 , start_after : * mut crate :: fermented :: generics :: Vec_u8 , contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract , retry : * mut crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy , options : * mut crate :: fermented :: types :: dash_spv_platform :: document :: contact_request :: dash_spv_platform_document_contact_request_ContactRequestValidator , delay : u64) -> * mut crate :: fermented :: generics :: Result_ok_Vec_dash_spv_platform_models_contact_request_ContactRequestKind_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: contact_request :: ContactRequestManager :: stream_incoming_contact_requests_with_contract (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (user_id) , since , < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from_opt (start_after) , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (contract) , < crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy as ferment :: FFIConversionFrom < dash_spv_platform :: util :: RetryStrategy >> :: ffi_from (retry) , < crate :: fermented :: types :: dash_spv_platform :: document :: contact_request :: dash_spv_platform_document_contact_request_ContactRequestValidator as ferment :: FFIConversionFrom < dash_spv_platform :: document :: contact_request :: ContactRequestValidator >> :: ffi_from (options) , delay) . await }) ; < crate :: fermented :: generics :: Result_ok_Vec_dash_spv_platform_models_contact_request_ContactRequestKind_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Vec < dash_spv_platform :: models :: contact_request :: ContactRequestKind > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::contact_request::ContactRequestManager::stream_outgoing_contact_requests`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_contact_request_ContactRequestManager_stream_outgoing_contact_requests (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: contact_request :: ContactRequestManager , user_id : * mut crate :: fermented :: generics :: Arr_u8_32 , since : u64 , start_after : * mut crate :: fermented :: generics :: Vec_u8 , retry : * mut crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy , options : * mut crate :: fermented :: types :: dash_spv_platform :: document :: contact_request :: dash_spv_platform_document_contact_request_ContactRequestValidator , delay : u64) -> * mut crate :: fermented :: generics :: Result_ok_Vec_dash_spv_platform_models_contact_request_ContactRequestKind_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: contact_request :: ContactRequestManager :: stream_outgoing_contact_requests (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (user_id) , since , < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from_opt (start_after) , < crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy as ferment :: FFIConversionFrom < dash_spv_platform :: util :: RetryStrategy >> :: ffi_from (retry) , < crate :: fermented :: types :: dash_spv_platform :: document :: contact_request :: dash_spv_platform_document_contact_request_ContactRequestValidator as ferment :: FFIConversionFrom < dash_spv_platform :: document :: contact_request :: ContactRequestValidator >> :: ffi_from (options) , delay) . await }) ; < crate :: fermented :: generics :: Result_ok_Vec_dash_spv_platform_models_contact_request_ContactRequestKind_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Vec < dash_spv_platform :: models :: contact_request :: ContactRequestKind > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::contact_request::ContactRequestManager::stream_outgoing_contact_requests_with_contract`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_contact_request_ContactRequestManager_stream_outgoing_contact_requests_with_contract (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: contact_request :: ContactRequestManager , user_id : * mut crate :: fermented :: generics :: Arr_u8_32 , since : u64 , start_after : * mut crate :: fermented :: generics :: Vec_u8 , contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract , retry : * mut crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy , options : * mut crate :: fermented :: types :: dash_spv_platform :: document :: contact_request :: dash_spv_platform_document_contact_request_ContactRequestValidator , delay : u64) -> * mut crate :: fermented :: generics :: Result_ok_Vec_dash_spv_platform_models_contact_request_ContactRequestKind_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: contact_request :: ContactRequestManager :: stream_outgoing_contact_requests_with_contract (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (user_id) , since , < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from_opt (start_after) , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (contract) , < crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy as ferment :: FFIConversionFrom < dash_spv_platform :: util :: RetryStrategy >> :: ffi_from (retry) , < crate :: fermented :: types :: dash_spv_platform :: document :: contact_request :: dash_spv_platform_document_contact_request_ContactRequestValidator as ferment :: FFIConversionFrom < dash_spv_platform :: document :: contact_request :: ContactRequestValidator >> :: ffi_from (options) , delay) . await }) ; < crate :: fermented :: generics :: Result_ok_Vec_dash_spv_platform_models_contact_request_ContactRequestKind_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Vec < dash_spv_platform :: models :: contact_request :: ContactRequestKind > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::contact_request::as_outgoing_request`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_contact_request_as_outgoing_request (kind : * mut crate :: fermented :: types :: dash_spv_platform :: models :: contact_request :: dash_spv_platform_models_contact_request_ContactRequestKind) -> * mut crate :: fermented :: types :: dash_spv_platform :: models :: contact_request :: dash_spv_platform_models_contact_request_ContactRequest { let obj = dash_spv_platform :: document :: contact_request :: as_outgoing_request (< crate :: fermented :: types :: dash_spv_platform :: models :: contact_request :: dash_spv_platform_models_contact_request_ContactRequestKind as ferment :: FFIConversionFrom < dash_spv_platform :: models :: contact_request :: ContactRequestKind >> :: ffi_from (kind)) ; < crate :: fermented :: types :: dash_spv_platform :: models :: contact_request :: dash_spv_platform_models_contact_request_ContactRequest as ferment :: FFIConversionTo < dash_spv_platform :: models :: contact_request :: ContactRequest >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`ContactRequestValidator`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_platform_document_contact_request_ContactRequestValidator { None = 0 , AcceptNotFoundAsNotAnError = 1 } impl ferment :: FFIConversionFrom < dash_spv_platform :: document :: contact_request :: ContactRequestValidator > for dash_spv_platform_document_contact_request_ContactRequestValidator { unsafe fn ffi_from_const (ffi : * const dash_spv_platform_document_contact_request_ContactRequestValidator) -> dash_spv_platform :: document :: contact_request :: ContactRequestValidator { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_platform_document_contact_request_ContactRequestValidator :: None => dash_spv_platform :: document :: contact_request :: ContactRequestValidator :: None , dash_spv_platform_document_contact_request_ContactRequestValidator :: AcceptNotFoundAsNotAnError => dash_spv_platform :: document :: contact_request :: ContactRequestValidator :: AcceptNotFoundAsNotAnError } } } impl ferment :: FFIConversionTo < dash_spv_platform :: document :: contact_request :: ContactRequestValidator > for dash_spv_platform_document_contact_request_ContactRequestValidator { unsafe fn ffi_to_const (obj : dash_spv_platform :: document :: contact_request :: ContactRequestValidator) -> * const dash_spv_platform_document_contact_request_ContactRequestValidator { ferment :: boxed (match obj { dash_spv_platform :: document :: contact_request :: ContactRequestValidator :: None => dash_spv_platform_document_contact_request_ContactRequestValidator :: None , dash_spv_platform :: document :: contact_request :: ContactRequestValidator :: AcceptNotFoundAsNotAnError => dash_spv_platform_document_contact_request_ContactRequestValidator :: AcceptNotFoundAsNotAnError , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dash_spv_platform_document_contact_request_ContactRequestValidator { fn drop (& mut self) { unsafe { match self { dash_spv_platform_document_contact_request_ContactRequestValidator :: None => { } , dash_spv_platform_document_contact_request_ContactRequestValidator :: AcceptNotFoundAsNotAnError => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_contact_request_ContactRequestValidator_None_ctor () -> * mut dash_spv_platform_document_contact_request_ContactRequestValidator { ferment :: boxed (dash_spv_platform_document_contact_request_ContactRequestValidator :: None { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_contact_request_ContactRequestValidator_AcceptNotFoundAsNotAnError_ctor () -> * mut dash_spv_platform_document_contact_request_ContactRequestValidator { ferment :: boxed (dash_spv_platform_document_contact_request_ContactRequestValidator :: AcceptNotFoundAsNotAnError { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_contact_request_ContactRequestValidator_destroy < > (ffi : * mut dash_spv_platform_document_contact_request_ContactRequestValidator) { ferment :: unbox_any (ffi) ; } } # [doc = "FFI-representation of the [`dash_spv_platform::document::get_document_property`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_get_document_property (document : * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document , property : * mut std :: os :: raw :: c_char) -> * mut crate :: fermented :: types :: platform_value :: platform_value_Value { let obj = dash_spv_platform :: document :: get_document_property (< crate :: fermented :: types :: dpp :: document :: dpp_document_Document as ferment :: FFIConversionFrom < dpp :: document :: Document >> :: ffi_from (document) , Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (property)))) ; < crate :: fermented :: types :: platform_value :: platform_value_Value as ferment :: FFIConversionTo < platform_value :: Value >> :: ffi_to_opt (obj) } pub mod salted_domain_hashes { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`SaltedDomainHashValidator`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashValidator { None = 0 , AcceptNotFoundAsNotAnError = 1 } impl ferment :: FFIConversionFrom < dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashValidator > for dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashValidator { unsafe fn ffi_from_const (ffi : * const dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashValidator) -> dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashValidator { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashValidator :: None => dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashValidator :: None , dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashValidator :: AcceptNotFoundAsNotAnError => dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashValidator :: AcceptNotFoundAsNotAnError } } } impl ferment :: FFIConversionTo < dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashValidator > for dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashValidator { unsafe fn ffi_to_const (obj : dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashValidator) -> * const dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashValidator { ferment :: boxed (match obj { dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashValidator :: None => dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashValidator :: None , dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashValidator :: AcceptNotFoundAsNotAnError => dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashValidator :: AcceptNotFoundAsNotAnError , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashValidator { fn drop (& mut self) { unsafe { match self { dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashValidator :: None => { } , dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashValidator :: AcceptNotFoundAsNotAnError => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashValidator_None_ctor () -> * mut dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashValidator { ferment :: boxed (dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashValidator :: None { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashValidator_AcceptNotFoundAsNotAnError_ctor () -> * mut dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashValidator { ferment :: boxed (dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashValidator :: AcceptNotFoundAsNotAnError { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashValidator_destroy < > (ffi : * mut dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashValidator) { ferment :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`dash_spv_platform::document::salted_domain_hashes::SaltedDomainHashesManager::preorder_salted_domain_hash`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashesManager_preorder_salted_domain_hash (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashesManager , hash : * mut crate :: fermented :: generics :: Vec_u8) -> * mut crate :: fermented :: generics :: Result_ok_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashesManager :: preorder_salted_domain_hash (& * self_ , < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (hash)) . await }) ; < crate :: fermented :: generics :: Result_ok_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Option < dpp :: document :: Document > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::salted_domain_hashes::SaltedDomainHashesManager::preorder_salted_domain_hashes`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashesManager_preorder_salted_domain_hashes (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashesManager , hashes : * mut crate :: fermented :: generics :: Vec_Vec_u8) -> * mut crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashesManager :: preorder_salted_domain_hashes (& * self_ , < crate :: fermented :: generics :: Vec_Vec_u8 as ferment :: FFIConversionFrom < Vec < Vec < u8 > > >> :: ffi_from (hashes)) . await }) ; < crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < indexmap :: IndexMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::salted_domain_hashes::SaltedDomainHashesManager::preorder_salted_domain_hash_stream`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashesManager_preorder_salted_domain_hash_stream (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashesManager , hash : * mut crate :: fermented :: generics :: Vec_u8 , retry : * mut crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy , options : * mut crate :: fermented :: types :: dash_spv_platform :: document :: salted_domain_hashes :: dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashValidator , delay : u64) -> * mut crate :: fermented :: generics :: Result_ok_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashesManager :: preorder_salted_domain_hash_stream (& * self_ , < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (hash) , < crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy as ferment :: FFIConversionFrom < dash_spv_platform :: util :: RetryStrategy >> :: ffi_from (retry) , < crate :: fermented :: types :: dash_spv_platform :: document :: salted_domain_hashes :: dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashValidator as ferment :: FFIConversionFrom < dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashValidator >> :: ffi_from (options) , delay) . await }) ; < crate :: fermented :: generics :: Result_ok_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Option < dpp :: document :: Document > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::salted_domain_hashes::SaltedDomainHashesManager::preorder_salted_domain_hashes_stream`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashesManager_preorder_salted_domain_hashes_stream (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashesManager , hashes : * mut crate :: fermented :: generics :: Vec_Vec_u8 , retry : * mut crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy , options : * mut crate :: fermented :: types :: dash_spv_platform :: document :: salted_domain_hashes :: dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashValidator , delay : u64) -> * mut crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashesManager :: preorder_salted_domain_hashes_stream (& * self_ , < crate :: fermented :: generics :: Vec_Vec_u8 as ferment :: FFIConversionFrom < Vec < Vec < u8 > > >> :: ffi_from (hashes) , < crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy as ferment :: FFIConversionFrom < dash_spv_platform :: util :: RetryStrategy >> :: ffi_from (retry) , < crate :: fermented :: types :: dash_spv_platform :: document :: salted_domain_hashes :: dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashValidator as ferment :: FFIConversionFrom < dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashValidator >> :: ffi_from (options) , delay) . await }) ; < crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < indexmap :: IndexMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::salted_domain_hashes::SaltedDomainHashesManager::preorder_salted_domain_hash_with_contract`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashesManager_preorder_salted_domain_hash_with_contract (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashesManager , hash : * mut crate :: fermented :: generics :: Vec_u8 , contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract) -> * mut crate :: fermented :: generics :: Result_ok_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashesManager :: preorder_salted_domain_hash_with_contract (& * self_ , < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (hash) , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (contract)) . await }) ; < crate :: fermented :: generics :: Result_ok_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Option < dpp :: document :: Document > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::salted_domain_hashes::SaltedDomainHashesManager::preorder_salted_domain_hashes_with_contract`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashesManager_preorder_salted_domain_hashes_with_contract (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashesManager , hashes : * mut crate :: fermented :: generics :: Vec_Vec_u8 , contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract) -> * mut crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashesManager :: preorder_salted_domain_hashes_with_contract (& * self_ , < crate :: fermented :: generics :: Vec_Vec_u8 as ferment :: FFIConversionFrom < Vec < Vec < u8 > > >> :: ffi_from (hashes) , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (contract)) . await }) ; < crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < indexmap :: IndexMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::salted_domain_hashes::SaltedDomainHashesManager::stream_preorder_salted_domain_hash_with_contract`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashesManager_stream_preorder_salted_domain_hash_with_contract (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashesManager , hash : * mut crate :: fermented :: generics :: Vec_u8 , contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract , retry : * mut crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy , options : * mut crate :: fermented :: types :: dash_spv_platform :: document :: salted_domain_hashes :: dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashValidator , delay : u64) -> * mut crate :: fermented :: generics :: Result_ok_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashesManager :: stream_preorder_salted_domain_hash_with_contract (& * self_ , < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (hash) , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (contract) , < crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy as ferment :: FFIConversionFrom < dash_spv_platform :: util :: RetryStrategy >> :: ffi_from (retry) , < crate :: fermented :: types :: dash_spv_platform :: document :: salted_domain_hashes :: dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashValidator as ferment :: FFIConversionFrom < dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashValidator >> :: ffi_from (options) , delay) . await }) ; < crate :: fermented :: generics :: Result_ok_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Option < dpp :: document :: Document > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::salted_domain_hashes::SaltedDomainHashesManager::stream_preorder_salted_domain_hashes_with_contract`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashesManager_stream_preorder_salted_domain_hashes_with_contract (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashesManager , hashes : * mut crate :: fermented :: generics :: Vec_Vec_u8 , contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract , retry : * mut crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy , options : * mut crate :: fermented :: types :: dash_spv_platform :: document :: salted_domain_hashes :: dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashValidator , delay : u64) -> * mut crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashesManager :: stream_preorder_salted_domain_hashes_with_contract (& * self_ , < crate :: fermented :: generics :: Vec_Vec_u8 as ferment :: FFIConversionFrom < Vec < Vec < u8 > > >> :: ffi_from (hashes) , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (contract) , < crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy as ferment :: FFIConversionFrom < dash_spv_platform :: util :: RetryStrategy >> :: ffi_from (retry) , < crate :: fermented :: types :: dash_spv_platform :: document :: salted_domain_hashes :: dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashValidator as ferment :: FFIConversionFrom < dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashValidator >> :: ffi_from (options) , delay) . await }) ; < crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < indexmap :: IndexMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } } # [doc = "FFI-representation of the [`dash_spv_platform::document::print_document`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_print_document (document : * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document) { let obj = dash_spv_platform :: document :: print_document (< crate :: fermented :: types :: dpp :: document :: dpp_document_Document as ferment :: FFIConversionFrom < dpp :: document :: Document >> :: ffi_from (document)) ; ; } pub mod manager { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`DocumentValidator`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_platform_document_manager_DocumentValidator { None = 0 , AcceptNotFoundAsNotAnError = 1 } impl ferment :: FFIConversionFrom < dash_spv_platform :: document :: manager :: DocumentValidator > for dash_spv_platform_document_manager_DocumentValidator { unsafe fn ffi_from_const (ffi : * const dash_spv_platform_document_manager_DocumentValidator) -> dash_spv_platform :: document :: manager :: DocumentValidator { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_platform_document_manager_DocumentValidator :: None => dash_spv_platform :: document :: manager :: DocumentValidator :: None , dash_spv_platform_document_manager_DocumentValidator :: AcceptNotFoundAsNotAnError => dash_spv_platform :: document :: manager :: DocumentValidator :: AcceptNotFoundAsNotAnError } } } impl ferment :: FFIConversionTo < dash_spv_platform :: document :: manager :: DocumentValidator > for dash_spv_platform_document_manager_DocumentValidator { unsafe fn ffi_to_const (obj : dash_spv_platform :: document :: manager :: DocumentValidator) -> * const dash_spv_platform_document_manager_DocumentValidator { ferment :: boxed (match obj { dash_spv_platform :: document :: manager :: DocumentValidator :: None => dash_spv_platform_document_manager_DocumentValidator :: None , dash_spv_platform :: document :: manager :: DocumentValidator :: AcceptNotFoundAsNotAnError => dash_spv_platform_document_manager_DocumentValidator :: AcceptNotFoundAsNotAnError , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dash_spv_platform_document_manager_DocumentValidator { fn drop (& mut self) { unsafe { match self { dash_spv_platform_document_manager_DocumentValidator :: None => { } , dash_spv_platform_document_manager_DocumentValidator :: AcceptNotFoundAsNotAnError => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_manager_DocumentValidator_None_ctor () -> * mut dash_spv_platform_document_manager_DocumentValidator { ferment :: boxed (dash_spv_platform_document_manager_DocumentValidator :: None { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_manager_DocumentValidator_AcceptNotFoundAsNotAnError_ctor () -> * mut dash_spv_platform_document_manager_DocumentValidator { ferment :: boxed (dash_spv_platform_document_manager_DocumentValidator :: AcceptNotFoundAsNotAnError { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_manager_DocumentValidator_destroy < > (ffi : * mut dash_spv_platform_document_manager_DocumentValidator) { ferment :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`dash_spv_platform::document::manager::DocumentsManager::dpns_documents_for_identity_with_user_id`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_manager_DocumentsManager_dpns_documents_for_identity_with_user_id (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: manager :: DocumentsManager , user_id : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: manager :: DocumentsManager :: dpns_documents_for_identity_with_user_id (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (user_id)) . await }) ; < crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < indexmap :: IndexMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::manager::DocumentsManager::stream_dpns_documents_for_identity_with_user_id`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_manager_DocumentsManager_stream_dpns_documents_for_identity_with_user_id (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: manager :: DocumentsManager , user_id : * mut crate :: fermented :: generics :: Arr_u8_32 , retry : * mut crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy , options : * mut crate :: fermented :: types :: dash_spv_platform :: document :: manager :: dash_spv_platform_document_manager_DocumentValidator , delay : u64) -> * mut crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: manager :: DocumentsManager :: stream_dpns_documents_for_identity_with_user_id (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (user_id) , < crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy as ferment :: FFIConversionFrom < dash_spv_platform :: util :: RetryStrategy >> :: ffi_from (retry) , < crate :: fermented :: types :: dash_spv_platform :: document :: manager :: dash_spv_platform_document_manager_DocumentValidator as ferment :: FFIConversionFrom < dash_spv_platform :: document :: manager :: DocumentValidator >> :: ffi_from (options) , delay) . await }) ; < crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < indexmap :: IndexMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::manager::DocumentsManager::stream_dpns_documents_for_identity_with_user_id_using_contract`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_manager_DocumentsManager_stream_dpns_documents_for_identity_with_user_id_using_contract (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: manager :: DocumentsManager , user_id : * mut crate :: fermented :: generics :: Arr_u8_32 , contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract , retry : * mut crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy , options : * mut crate :: fermented :: types :: dash_spv_platform :: document :: manager :: dash_spv_platform_document_manager_DocumentValidator , delay : u64) -> * mut crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: manager :: DocumentsManager :: stream_dpns_documents_for_identity_with_user_id_using_contract (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (user_id) , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (contract) , < crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy as ferment :: FFIConversionFrom < dash_spv_platform :: util :: RetryStrategy >> :: ffi_from (retry) , < crate :: fermented :: types :: dash_spv_platform :: document :: manager :: dash_spv_platform_document_manager_DocumentValidator as ferment :: FFIConversionFrom < dash_spv_platform :: document :: manager :: DocumentValidator >> :: ffi_from (options) , delay) . await }) ; < crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < indexmap :: IndexMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::manager::DocumentsManager::dpns_documents_for_username`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_manager_DocumentsManager_dpns_documents_for_username (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: manager :: DocumentsManager , username : * mut std :: os :: raw :: c_char) -> * mut crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: manager :: DocumentsManager :: dpns_documents_for_username (& * self_ , < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (username)) . await }) ; < crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < indexmap :: IndexMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::manager::DocumentsManager::dpns_documents_for_username_prefix`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_manager_DocumentsManager_dpns_documents_for_username_prefix (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: manager :: DocumentsManager , username_prefix : * mut std :: os :: raw :: c_char) -> * mut crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: manager :: DocumentsManager :: dpns_documents_for_username_prefix (& * self_ , < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (username_prefix)) . await }) ; < crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < indexmap :: IndexMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::manager::DocumentsManager::dashpay_profile_for_user_id`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_manager_DocumentsManager_dashpay_profile_for_user_id (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: manager :: DocumentsManager , user_id : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Result_ok_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: manager :: DocumentsManager :: dashpay_profile_for_user_id (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (user_id)) . await }) ; < crate :: fermented :: generics :: Result_ok_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Option < dpp :: document :: Document > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::manager::DocumentsManager::dashpay_profiles_for_user_ids`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_manager_DocumentsManager_dashpay_profiles_for_user_ids (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: manager :: DocumentsManager , user_ids : * mut crate :: fermented :: generics :: Vec_u8_32) -> * mut crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: manager :: DocumentsManager :: dashpay_profiles_for_user_ids (& * self_ , < crate :: fermented :: generics :: Vec_u8_32 as ferment :: FFIConversionFrom < Vec < [u8 ; 32] > >> :: ffi_from (user_ids)) . await }) ; < crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < indexmap :: IndexMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::manager::DocumentsManager::dpns_documents_for_identity_with_user_id_using_contract`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_manager_DocumentsManager_dpns_documents_for_identity_with_user_id_using_contract (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: manager :: DocumentsManager , user_id : * mut crate :: fermented :: generics :: Arr_u8_32 , contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract) -> * mut crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: manager :: DocumentsManager :: dpns_documents_for_identity_with_user_id_using_contract (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (user_id) , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (contract)) . await }) ; < crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < indexmap :: IndexMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::manager::DocumentsManager::dashpay_profile_for_user_id_using_contract`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_manager_DocumentsManager_dashpay_profile_for_user_id_using_contract (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: manager :: DocumentsManager , user_id : * mut crate :: fermented :: generics :: Arr_u8_32 , contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract) -> * mut crate :: fermented :: generics :: Result_ok_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: manager :: DocumentsManager :: dashpay_profile_for_user_id_using_contract (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (user_id) , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (contract)) . await }) ; < crate :: fermented :: generics :: Result_ok_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Option < dpp :: document :: Document > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::manager::DocumentsManager::stream_dashpay_profile_for_user_id_using_contract`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_manager_DocumentsManager_stream_dashpay_profile_for_user_id_using_contract (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: manager :: DocumentsManager , user_id : * mut crate :: fermented :: generics :: Arr_u8_32 , contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract , retry : * mut crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy , options : * mut crate :: fermented :: types :: dash_spv_platform :: document :: manager :: dash_spv_platform_document_manager_DocumentValidator , delay : u64) -> * mut crate :: fermented :: generics :: Result_ok_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: manager :: DocumentsManager :: stream_dashpay_profile_for_user_id_using_contract (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (user_id) , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (contract) , < crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy as ferment :: FFIConversionFrom < dash_spv_platform :: util :: RetryStrategy >> :: ffi_from (retry) , < crate :: fermented :: types :: dash_spv_platform :: document :: manager :: dash_spv_platform_document_manager_DocumentValidator as ferment :: FFIConversionFrom < dash_spv_platform :: document :: manager :: DocumentValidator >> :: ffi_from (options) , delay) . await }) ; < crate :: fermented :: generics :: Result_ok_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Option < dpp :: document :: Document > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::manager::DocumentsManager::dashpay_profiles_for_user_ids_using_contract`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_manager_DocumentsManager_dashpay_profiles_for_user_ids_using_contract (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: manager :: DocumentsManager , user_ids : * mut crate :: fermented :: generics :: Vec_u8_32 , contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract) -> * mut crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: manager :: DocumentsManager :: dashpay_profiles_for_user_ids_using_contract (& * self_ , < crate :: fermented :: generics :: Vec_u8_32 as ferment :: FFIConversionFrom < Vec < [u8 ; 32] > >> :: ffi_from (user_ids) , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (contract)) . await }) ; < crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < indexmap :: IndexMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::manager::DocumentsManager::stream_dashpay_profiles_for_user_ids_using_contract`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_manager_DocumentsManager_stream_dashpay_profiles_for_user_ids_using_contract (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: manager :: DocumentsManager , user_ids : * mut crate :: fermented :: generics :: Vec_u8_32 , contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract , retry : * mut crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy , options : * mut crate :: fermented :: types :: dash_spv_platform :: document :: manager :: dash_spv_platform_document_manager_DocumentValidator , delay : u64) -> * mut crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: manager :: DocumentsManager :: stream_dashpay_profiles_for_user_ids_using_contract (& * self_ , < crate :: fermented :: generics :: Vec_u8_32 as ferment :: FFIConversionFrom < Vec < [u8 ; 32] > >> :: ffi_from (user_ids) , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (contract) , < crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy as ferment :: FFIConversionFrom < dash_spv_platform :: util :: RetryStrategy >> :: ffi_from (retry) , < crate :: fermented :: types :: dash_spv_platform :: document :: manager :: dash_spv_platform_document_manager_DocumentValidator as ferment :: FFIConversionFrom < dash_spv_platform :: document :: manager :: DocumentValidator >> :: ffi_from (options) , delay) . await }) ; < crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < indexmap :: IndexMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::manager::DocumentsManager::dpns_documents_for_username_using_contract`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_manager_DocumentsManager_dpns_documents_for_username_using_contract (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: manager :: DocumentsManager , username : * mut std :: os :: raw :: c_char , contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract) -> * mut crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: manager :: DocumentsManager :: dpns_documents_for_username_using_contract (& * self_ , < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (username) , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (contract)) . await }) ; < crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < indexmap :: IndexMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::document::manager::DocumentsManager::dpns_documents_for_username_prefix_using_contract`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_document_manager_DocumentsManager_dpns_documents_for_username_prefix_using_contract (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: document :: manager :: DocumentsManager , username_prefix : * mut std :: os :: raw :: c_char , contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract) -> * mut crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: document :: manager :: DocumentsManager :: dpns_documents_for_username_prefix_using_contract (& * self_ , < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (username_prefix) , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (contract)) . await }) ; < crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < indexmap :: IndexMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } } } pub mod transition { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_platform::transition::chain_proof`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_transition_chain_proof (core_chain_locked_height : u32 , txid : * mut crate :: fermented :: generics :: Arr_u8_32 , vout : u32) -> * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof { let obj = dash_spv_platform :: transition :: chain_proof (core_chain_locked_height , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (txid) , vout) ; < crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof as ferment :: FFIConversionTo < dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::transition::instant_proof`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_transition_instant_proof (output_index : u32 , lock_version : u8 , lock_inputs : * mut crate :: fermented :: generics :: Vec_u8_36 , txid : * mut crate :: fermented :: generics :: Arr_u8_32 , cycle_hash : * mut crate :: fermented :: generics :: Arr_u8_32 , signature : * mut crate :: fermented :: generics :: Arr_u8_96 , tx_version : u16 , lock_time : u32 , input : * mut crate :: fermented :: generics :: Vec_dash_spv_crypto_tx_input_TransactionInput , output : * mut crate :: fermented :: generics :: Vec_dash_spv_crypto_tx_output_TransactionOutput , asset_lock_payload_version : u8 , credit_outputs : * mut crate :: fermented :: generics :: Vec_dash_spv_crypto_tx_output_TransactionOutput) -> * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof { let obj = dash_spv_platform :: transition :: instant_proof (output_index , lock_version , < crate :: fermented :: generics :: Vec_u8_36 as ferment :: FFIConversionFrom < Vec < [u8 ; 36] > >> :: ffi_from (lock_inputs) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (txid) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (cycle_hash) , < crate :: fermented :: generics :: Arr_u8_96 as ferment :: FFIConversionFrom < [u8 ; 96] >> :: ffi_from (signature) , tx_version , lock_time , < crate :: fermented :: generics :: Vec_dash_spv_crypto_tx_input_TransactionInput as ferment :: FFIConversionFrom < Vec < dash_spv_crypto :: tx :: input :: TransactionInput > >> :: ffi_from (input) , < crate :: fermented :: generics :: Vec_dash_spv_crypto_tx_output_TransactionOutput as ferment :: FFIConversionFrom < Vec < dash_spv_crypto :: tx :: output :: TransactionOutput > >> :: ffi_from (output) , asset_lock_payload_version , < crate :: fermented :: generics :: Vec_dash_spv_crypto_tx_output_TransactionOutput as ferment :: FFIConversionFrom < Vec < dash_spv_crypto :: tx :: output :: TransactionOutput > >> :: ffi_from (credit_outputs)) ; < crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof as ferment :: FFIConversionTo < dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::transition::identity_registration_public_key`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_transition_identity_registration_public_key (index : u32 , public_key : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey { let obj = dash_spv_platform :: transition :: identity_registration_public_key (index , < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: OpaqueKey >> :: ffi_from (public_key)) ; < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: IdentityPublicKey >> :: ffi_to (obj) } } pub mod error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`Error`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_platform_error_Error { KeyError (* mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError) , DashSDKError (* mut std :: os :: raw :: c_char) , Any (i32 , * mut std :: os :: raw :: c_char) , MaxRetryExceeded (* mut std :: os :: raw :: c_char) } impl ferment :: FFIConversionFrom < dash_spv_platform :: error :: Error > for dash_spv_platform_error_Error { unsafe fn ffi_from_const (ffi : * const dash_spv_platform_error_Error) -> dash_spv_platform :: error :: Error { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_platform_error_Error :: KeyError (o_0) => dash_spv_platform :: error :: Error :: KeyError (< crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: KeyError >> :: ffi_from (* o_0)) , dash_spv_platform_error_Error :: DashSDKError (o_0) => dash_spv_platform :: error :: Error :: DashSDKError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , dash_spv_platform_error_Error :: Any (o_0 , o_1) => dash_spv_platform :: error :: Error :: Any (* o_0 , < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_1)) , dash_spv_platform_error_Error :: MaxRetryExceeded (o_0) => dash_spv_platform :: error :: Error :: MaxRetryExceeded (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < dash_spv_platform :: error :: Error > for dash_spv_platform_error_Error { unsafe fn ffi_to_const (obj : dash_spv_platform :: error :: Error) -> * const dash_spv_platform_error_Error { ferment :: boxed (match obj { dash_spv_platform :: error :: Error :: KeyError (o_0) => dash_spv_platform_error_Error :: KeyError (< crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError as ferment :: FFIConversionTo < dash_spv_crypto :: keys :: KeyError >> :: ffi_to (o_0)) , dash_spv_platform :: error :: Error :: DashSDKError (o_0) => dash_spv_platform_error_Error :: DashSDKError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , dash_spv_platform :: error :: Error :: Any (o_0 , o_1) => dash_spv_platform_error_Error :: Any (o_0 , < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_1)) , dash_spv_platform :: error :: Error :: MaxRetryExceeded (o_0) => dash_spv_platform_error_Error :: MaxRetryExceeded (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dash_spv_platform_error_Error { fn drop (& mut self) { unsafe { match self { dash_spv_platform_error_Error :: KeyError (o_0) => { ferment :: unbox_any (* o_0) ; } , dash_spv_platform_error_Error :: DashSDKError (o_0) => { ferment :: unbox_string (* o_0) ; } , dash_spv_platform_error_Error :: Any (o_0 , o_1) => { ; ; ferment :: unbox_string (* o_1) ; } , dash_spv_platform_error_Error :: MaxRetryExceeded (o_0) => { ferment :: unbox_string (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_error_Error_KeyError_ctor (o_o_0 : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError) -> * mut dash_spv_platform_error_Error { ferment :: boxed (dash_spv_platform_error_Error :: KeyError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_error_Error_DashSDKError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dash_spv_platform_error_Error { ferment :: boxed (dash_spv_platform_error_Error :: DashSDKError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_error_Error_Any_ctor (o_o_0 : i32 , o_o_1 : * mut std :: os :: raw :: c_char) -> * mut dash_spv_platform_error_Error { ferment :: boxed (dash_spv_platform_error_Error :: Any (o_o_0 , o_o_1)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_error_Error_MaxRetryExceeded_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut dash_spv_platform_error_Error { ferment :: boxed (dash_spv_platform_error_Error :: MaxRetryExceeded (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_error_Error_destroy < > (ffi : * mut dash_spv_platform_error_Error) { ferment :: unbox_any (ffi) ; } } pub mod contract { use crate as dash_spv_apple_bindings ; pub mod manager { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_platform::contract::manager::is_document_defined_for_type`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_contract_manager_is_document_defined_for_type (contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract , ty : * mut std :: os :: raw :: c_char) -> bool { let obj = dash_spv_platform :: contract :: manager :: is_document_defined_for_type (< crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (contract) , Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (ty)))) ; obj } # [doc = "FFI-representation of the [`dash_spv_platform::contract::manager::ContractsManager::contract_serialized`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_contract_manager_ContractsManager_contract_serialized (self_ : * mut dash_spv_platform :: contract :: manager :: ContractsManager , contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_platform_error_Error { let obj = dash_spv_platform :: contract :: manager :: ContractsManager :: contract_serialized (& * self_ , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (contract)) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::contract::manager::ContractsManager::contract_serialized_hash`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_contract_manager_ContractsManager_contract_serialized_hash (self_ : * mut dash_spv_platform :: contract :: manager :: ContractsManager , contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract) -> * mut crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_platform_error_Error { let obj = dash_spv_platform :: contract :: manager :: ContractsManager :: contract_serialized_hash (& * self_ , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (contract)) ; < crate :: fermented :: generics :: Result_ok_Vec_u8_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::contract::manager::ContractsManager::load_system_contract`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_contract_manager_ContractsManager_load_system_contract (self_ : * mut dash_spv_platform :: contract :: manager :: ContractsManager , contract : * mut crate :: fermented :: types :: data_contracts :: data_contracts_SystemDataContract) -> * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract { let obj = dash_spv_platform :: contract :: manager :: ContractsManager :: load_system_contract (& * self_ , < crate :: fermented :: types :: data_contracts :: data_contracts_SystemDataContract as ferment :: FFIConversionFrom < data_contracts :: SystemDataContract >> :: ffi_from (contract)) ; < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionTo < dpp :: data_contract :: DataContract >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::contract::manager::ContractsManager::load_dashpay_contract`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_contract_manager_ContractsManager_load_dashpay_contract (self_ : * mut dash_spv_platform :: contract :: manager :: ContractsManager) -> * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract { let obj = dash_spv_platform :: contract :: manager :: ContractsManager :: load_dashpay_contract (& * self_) ; < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionTo < dpp :: data_contract :: DataContract >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::contract::manager::ContractsManager::load_dpns_contract`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_contract_manager_ContractsManager_load_dpns_contract (self_ : * mut dash_spv_platform :: contract :: manager :: ContractsManager) -> * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract { let obj = dash_spv_platform :: contract :: manager :: ContractsManager :: load_dpns_contract (& * self_) ; < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionTo < dpp :: data_contract :: DataContract >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::contract::manager::ContractsManager::fetch_contract_by_id_bytes`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_contract_manager_ContractsManager_fetch_contract_by_id_bytes (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: contract :: manager :: ContractsManager , id_bytes : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Result_ok_Option_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: contract :: manager :: ContractsManager :: fetch_contract_by_id_bytes (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (id_bytes)) . await }) ; < crate :: fermented :: generics :: Result_ok_Option_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Option < dpp :: data_contract :: DataContract > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::contract::manager::ContractsManager::fetch_contract_by_id`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_contract_manager_ContractsManager_fetch_contract_by_id (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: contract :: manager :: ContractsManager , id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut crate :: fermented :: generics :: Result_ok_Option_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: contract :: manager :: ContractsManager :: fetch_contract_by_id (& * self_ , < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (id)) . await }) ; < crate :: fermented :: generics :: Result_ok_Option_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Option < dpp :: data_contract :: DataContract > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::contract::manager::ContractsManager::fetch_contract_by_id_error_if_none`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_contract_manager_ContractsManager_fetch_contract_by_id_error_if_none (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: contract :: manager :: ContractsManager , id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut crate :: fermented :: generics :: Result_ok_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: contract :: manager :: ContractsManager :: fetch_contract_by_id_error_if_none (& * self_ , < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (id)) . await }) ; < crate :: fermented :: generics :: Result_ok_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < dpp :: data_contract :: DataContract , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::contract::manager::ContractsManager::contract_registration_transition`]"] # [cfg (feature = "state-transitions")] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_contract_manager_ContractsManager_contract_registration_transition (self_ : * mut dash_spv_platform :: contract :: manager :: ContractsManager , contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract) -> * mut crate :: fermented :: generics :: Result_ok_dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition_err_dash_spv_platform_error_Error { let obj = dash_spv_platform :: contract :: manager :: ContractsManager :: contract_registration_transition (& * self_ , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (contract)) ; < crate :: fermented :: generics :: Result_ok_dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: DataContractCreateTransition , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::contract::manager::ContractsManager::monitor`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_contract_manager_ContractsManager_monitor (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: contract :: manager :: ContractsManager , unique_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , retry : * mut crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy , options : * mut crate :: fermented :: types :: dash_spv_platform :: contract :: manager :: dash_spv_platform_contract_manager_ContractValidator) -> * mut crate :: fermented :: generics :: Result_ok_Option_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: contract :: manager :: ContractsManager :: monitor (& * self_ , < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (unique_id) , < crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy as ferment :: FFIConversionFrom < dash_spv_platform :: util :: RetryStrategy >> :: ffi_from (retry) , < crate :: fermented :: types :: dash_spv_platform :: contract :: manager :: dash_spv_platform_contract_manager_ContractValidator as ferment :: FFIConversionFrom < dash_spv_platform :: contract :: manager :: ContractValidator >> :: ffi_from (options)) . await }) ; < crate :: fermented :: generics :: Result_ok_Option_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Option < dpp :: data_contract :: DataContract > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::contract::manager::ContractsManager::monitor_for_id_bytes`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_contract_manager_ContractsManager_monitor_for_id_bytes (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: contract :: manager :: ContractsManager , unique_id : * mut crate :: fermented :: generics :: Arr_u8_32 , retry : * mut crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy , options : * mut crate :: fermented :: types :: dash_spv_platform :: contract :: manager :: dash_spv_platform_contract_manager_ContractValidator) -> * mut crate :: fermented :: generics :: Result_ok_Option_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: contract :: manager :: ContractsManager :: monitor_for_id_bytes (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (unique_id) , < crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy as ferment :: FFIConversionFrom < dash_spv_platform :: util :: RetryStrategy >> :: ffi_from (retry) , < crate :: fermented :: types :: dash_spv_platform :: contract :: manager :: dash_spv_platform_contract_manager_ContractValidator as ferment :: FFIConversionFrom < dash_spv_platform :: contract :: manager :: ContractValidator >> :: ffi_from (options)) . await }) ; < crate :: fermented :: generics :: Result_ok_Option_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Option < dpp :: data_contract :: DataContract > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::contract::manager::ContractsManager::monitor_with_delay`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_contract_manager_ContractsManager_monitor_with_delay (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: contract :: manager :: ContractsManager , unique_id : * mut crate :: fermented :: generics :: Arr_u8_32 , retry : * mut crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy , options : * mut crate :: fermented :: types :: dash_spv_platform :: contract :: manager :: dash_spv_platform_contract_manager_ContractValidator , delay : u64) -> * mut crate :: fermented :: generics :: Result_ok_Option_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: contract :: manager :: ContractsManager :: monitor_with_delay (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (unique_id) , < crate :: fermented :: types :: dash_spv_platform :: util :: dash_spv_platform_util_RetryStrategy as ferment :: FFIConversionFrom < dash_spv_platform :: util :: RetryStrategy >> :: ffi_from (retry) , < crate :: fermented :: types :: dash_spv_platform :: contract :: manager :: dash_spv_platform_contract_manager_ContractValidator as ferment :: FFIConversionFrom < dash_spv_platform :: contract :: manager :: ContractValidator >> :: ffi_from (options) , delay) . await }) ; < crate :: fermented :: generics :: Result_ok_Option_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < Option < dpp :: data_contract :: DataContract > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`ContractValidator`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_platform_contract_manager_ContractValidator { None = 0 , AcceptNotFoundAsNotAnError = 1 } impl ferment :: FFIConversionFrom < dash_spv_platform :: contract :: manager :: ContractValidator > for dash_spv_platform_contract_manager_ContractValidator { unsafe fn ffi_from_const (ffi : * const dash_spv_platform_contract_manager_ContractValidator) -> dash_spv_platform :: contract :: manager :: ContractValidator { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_platform_contract_manager_ContractValidator :: None => dash_spv_platform :: contract :: manager :: ContractValidator :: None , dash_spv_platform_contract_manager_ContractValidator :: AcceptNotFoundAsNotAnError => dash_spv_platform :: contract :: manager :: ContractValidator :: AcceptNotFoundAsNotAnError } } } impl ferment :: FFIConversionTo < dash_spv_platform :: contract :: manager :: ContractValidator > for dash_spv_platform_contract_manager_ContractValidator { unsafe fn ffi_to_const (obj : dash_spv_platform :: contract :: manager :: ContractValidator) -> * const dash_spv_platform_contract_manager_ContractValidator { ferment :: boxed (match obj { dash_spv_platform :: contract :: manager :: ContractValidator :: None => dash_spv_platform_contract_manager_ContractValidator :: None , dash_spv_platform :: contract :: manager :: ContractValidator :: AcceptNotFoundAsNotAnError => dash_spv_platform_contract_manager_ContractValidator :: AcceptNotFoundAsNotAnError , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dash_spv_platform_contract_manager_ContractValidator { fn drop (& mut self) { unsafe { match self { dash_spv_platform_contract_manager_ContractValidator :: None => { } , dash_spv_platform_contract_manager_ContractValidator :: AcceptNotFoundAsNotAnError => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_contract_manager_ContractValidator_None_ctor () -> * mut dash_spv_platform_contract_manager_ContractValidator { ferment :: boxed (dash_spv_platform_contract_manager_ContractValidator :: None { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_contract_manager_ContractValidator_AcceptNotFoundAsNotAnError_ctor () -> * mut dash_spv_platform_contract_manager_ContractValidator { ferment :: boxed (dash_spv_platform_contract_manager_ContractValidator :: AcceptNotFoundAsNotAnError { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_contract_manager_ContractValidator_destroy < > (ffi : * mut dash_spv_platform_contract_manager_ContractValidator) { ferment :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`dash_spv_platform::contract::manager::has_equal_document_type_keys`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_contract_manager_has_equal_document_type_keys (contract1 : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract , contract2 : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract) -> bool { let obj = dash_spv_platform :: contract :: manager :: has_equal_document_type_keys (< crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (contract1) , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (contract2)) ; obj } } } pub mod cache { use crate as dash_spv_apple_bindings ; } pub mod util { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`RetryStrategy`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_platform_util_RetryStrategy { None , Linear (u32) , SlowingDown20Percent (u32) , SlowingDown50Percent (u32) } impl ferment :: FFIConversionFrom < dash_spv_platform :: util :: RetryStrategy > for dash_spv_platform_util_RetryStrategy { unsafe fn ffi_from_const (ffi : * const dash_spv_platform_util_RetryStrategy) -> dash_spv_platform :: util :: RetryStrategy { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_platform_util_RetryStrategy :: None => dash_spv_platform :: util :: RetryStrategy :: None , dash_spv_platform_util_RetryStrategy :: Linear (o_0) => dash_spv_platform :: util :: RetryStrategy :: Linear (* o_0) , dash_spv_platform_util_RetryStrategy :: SlowingDown20Percent (o_0) => dash_spv_platform :: util :: RetryStrategy :: SlowingDown20Percent (* o_0) , dash_spv_platform_util_RetryStrategy :: SlowingDown50Percent (o_0) => dash_spv_platform :: util :: RetryStrategy :: SlowingDown50Percent (* o_0) } } } impl ferment :: FFIConversionTo < dash_spv_platform :: util :: RetryStrategy > for dash_spv_platform_util_RetryStrategy { unsafe fn ffi_to_const (obj : dash_spv_platform :: util :: RetryStrategy) -> * const dash_spv_platform_util_RetryStrategy { ferment :: boxed (match obj { dash_spv_platform :: util :: RetryStrategy :: None => dash_spv_platform_util_RetryStrategy :: None , dash_spv_platform :: util :: RetryStrategy :: Linear (o_0) => dash_spv_platform_util_RetryStrategy :: Linear (o_0) , dash_spv_platform :: util :: RetryStrategy :: SlowingDown20Percent (o_0) => dash_spv_platform_util_RetryStrategy :: SlowingDown20Percent (o_0) , dash_spv_platform :: util :: RetryStrategy :: SlowingDown50Percent (o_0) => dash_spv_platform_util_RetryStrategy :: SlowingDown50Percent (o_0) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for dash_spv_platform_util_RetryStrategy { fn drop (& mut self) { unsafe { match self { dash_spv_platform_util_RetryStrategy :: None => { } , dash_spv_platform_util_RetryStrategy :: Linear (o_0) => { ; } , dash_spv_platform_util_RetryStrategy :: SlowingDown20Percent (o_0) => { ; } , dash_spv_platform_util_RetryStrategy :: SlowingDown50Percent (o_0) => { ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_util_RetryStrategy_None_ctor () -> * mut dash_spv_platform_util_RetryStrategy { ferment :: boxed (dash_spv_platform_util_RetryStrategy :: None { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_util_RetryStrategy_Linear_ctor (o_o_0 : u32) -> * mut dash_spv_platform_util_RetryStrategy { ferment :: boxed (dash_spv_platform_util_RetryStrategy :: Linear (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_util_RetryStrategy_SlowingDown20Percent_ctor (o_o_0 : u32) -> * mut dash_spv_platform_util_RetryStrategy { ferment :: boxed (dash_spv_platform_util_RetryStrategy :: SlowingDown20Percent (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_util_RetryStrategy_SlowingDown50Percent_ctor (o_o_0 : u32) -> * mut dash_spv_platform_util_RetryStrategy { ferment :: boxed (dash_spv_platform_util_RetryStrategy :: SlowingDown50Percent (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_util_RetryStrategy_destroy < > (ffi : * mut dash_spv_platform_util_RetryStrategy) { ferment :: unbox_any (ffi) ; } } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::identity_manager`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_identity_manager (self_ : * mut dash_spv_platform :: PlatformSDK) -> * mut crate :: fermented :: generics :: std_sync_Arc_dash_spv_platform_identity_manager_IdentitiesManager { let obj = dash_spv_platform :: PlatformSDK :: identity_manager (& * self_) ; < crate :: fermented :: generics :: std_sync_Arc_dash_spv_platform_identity_manager_IdentitiesManager as ferment :: FFIConversionTo < std :: sync :: Arc < dash_spv_platform :: identity :: manager :: IdentitiesManager > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::contract_manager`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_contract_manager (self_ : * mut dash_spv_platform :: PlatformSDK) -> * mut crate :: fermented :: generics :: std_sync_Arc_dash_spv_platform_contract_manager_ContractsManager { let obj = dash_spv_platform :: PlatformSDK :: contract_manager (& * self_) ; < crate :: fermented :: generics :: std_sync_Arc_dash_spv_platform_contract_manager_ContractsManager as ferment :: FFIConversionTo < std :: sync :: Arc < dash_spv_platform :: contract :: manager :: ContractsManager > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::doc_manager`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_doc_manager (self_ : * mut dash_spv_platform :: PlatformSDK) -> * mut crate :: fermented :: generics :: std_sync_Arc_dash_spv_platform_document_manager_DocumentsManager { let obj = dash_spv_platform :: PlatformSDK :: doc_manager (& * self_) ; < crate :: fermented :: generics :: std_sync_Arc_dash_spv_platform_document_manager_DocumentsManager as ferment :: FFIConversionTo < std :: sync :: Arc < dash_spv_platform :: document :: manager :: DocumentsManager > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::contact_requests`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_contact_requests (self_ : * mut dash_spv_platform :: PlatformSDK) -> * mut crate :: fermented :: generics :: std_sync_Arc_dash_spv_platform_document_contact_request_ContactRequestManager { let obj = dash_spv_platform :: PlatformSDK :: contact_requests (& * self_) ; < crate :: fermented :: generics :: std_sync_Arc_dash_spv_platform_document_contact_request_ContactRequestManager as ferment :: FFIConversionTo < std :: sync :: Arc < dash_spv_platform :: document :: contact_request :: ContactRequestManager > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::salted_domain_hashes`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_salted_domain_hashes (self_ : * mut dash_spv_platform :: PlatformSDK) -> * mut crate :: fermented :: generics :: std_sync_Arc_dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashesManager { let obj = dash_spv_platform :: PlatformSDK :: salted_domain_hashes (& * self_) ; < crate :: fermented :: generics :: std_sync_Arc_dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashesManager as ferment :: FFIConversionTo < std :: sync :: Arc < dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashesManager > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::usernames`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_usernames (self_ : * mut dash_spv_platform :: PlatformSDK) -> * mut crate :: fermented :: generics :: std_sync_Arc_dash_spv_platform_document_usernames_UsernamesManager { let obj = dash_spv_platform :: PlatformSDK :: usernames (& * self_) ; < crate :: fermented :: generics :: std_sync_Arc_dash_spv_platform_document_usernames_UsernamesManager as ferment :: FFIConversionTo < std :: sync :: Arc < dash_spv_platform :: document :: usernames :: UsernamesManager > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::get_status`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_get_status (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: PlatformSDK , address : * mut std :: os :: raw :: c_char) -> * mut crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: PlatformSDK :: get_status (& * self_ , Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (address)))) . await }) ; < crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < bool , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::get_transaction_with_hash`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_get_transaction_with_hash (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: PlatformSDK , hash : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Result_ok_dashcore_blockdata_transaction_Transaction_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: PlatformSDK :: get_transaction_with_hash (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (hash)) . await }) ; < crate :: fermented :: generics :: Result_ok_dashcore_blockdata_transaction_Transaction_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < dashcore :: blockdata :: transaction :: Transaction , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::check_ping_times_for_current_masternode_list`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_check_ping_times_for_current_masternode_list (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: PlatformSDK) { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: PlatformSDK :: check_ping_times_for_current_masternode_list (& * self_) . await }) ; ; } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::put_document`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_put_document (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: PlatformSDK , contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_type : * mut std :: os :: raw :: c_char , document : * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document , identity_public_key : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey , block_height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight , core_block_height : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight) -> * mut crate :: fermented :: generics :: Result_ok_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: PlatformSDK :: put_document (& * self_ , < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (contract_id) , Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (document_type))) , < crate :: fermented :: types :: dpp :: document :: dpp_document_Document as ferment :: FFIConversionFrom < dpp :: document :: Document >> :: ffi_from (document) , < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: IdentityPublicKey >> :: ffi_from (identity_public_key) , < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_BlockHeight as ferment :: FFIConversionFrom < dpp :: prelude :: BlockHeight >> :: ffi_from (block_height) , < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight as ferment :: FFIConversionFrom < dpp :: prelude :: CoreBlockHeight >> :: ffi_from (core_block_height)) . await }) ; < crate :: fermented :: generics :: Result_ok_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < dpp :: document :: Document , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::dpns_domain_starts_with`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_dpns_domain_starts_with (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: PlatformSDK , contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_type : * mut std :: os :: raw :: c_char , starts_with : * mut std :: os :: raw :: c_char) -> * mut crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: PlatformSDK :: dpns_domain_starts_with (& * self_ , < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (contract_id) , Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (document_type))) , Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (starts_with)))) . await }) ; < crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < indexmap :: IndexMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::dpns_domain_by_id`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_dpns_domain_by_id (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: PlatformSDK , contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_type : * mut std :: os :: raw :: c_char , unique_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: PlatformSDK :: dpns_domain_by_id (& * self_ , < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (contract_id) , Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (document_type))) , < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (unique_id)) . await }) ; < crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < indexmap :: IndexMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::dpns_usernames`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_dpns_usernames (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: PlatformSDK , contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_type : * mut std :: os :: raw :: c_char , usernames : * mut crate :: fermented :: generics :: Vec_String) -> * mut crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: PlatformSDK :: dpns_usernames (& * self_ , < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (contract_id) , Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (document_type))) , < crate :: fermented :: generics :: Vec_String as ferment :: FFIConversionFrom < Vec < String > >> :: ffi_from (usernames)) . await }) ; < crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < indexmap :: IndexMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::find_username`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_find_username (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: PlatformSDK , contract_id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_type : * mut std :: os :: raw :: c_char , starts_with : * mut std :: os :: raw :: c_char) -> * mut crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: PlatformSDK :: find_username (& * self_ , < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (contract_id) , Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (document_type))) , Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (starts_with)))) . await }) ; < crate :: fermented :: generics :: Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < indexmap :: IndexMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::publish_contract`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_publish_contract (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: PlatformSDK , contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract , identity_public_key : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey) -> * mut crate :: fermented :: generics :: Result_ok_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: PlatformSDK :: publish_contract (& * self_ , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (contract) , < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: IdentityPublicKey >> :: ffi_from (identity_public_key)) . await }) ; < crate :: fermented :: generics :: Result_ok_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < dpp :: data_contract :: DataContract , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::identity_register`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_identity_register (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: PlatformSDK , identity : * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity , proof : * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof , private_key : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey) -> * mut crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: PlatformSDK :: identity_register (& * self_ , < crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity as ferment :: FFIConversionFrom < dpp :: identity :: identity :: Identity >> :: ffi_from (identity) , < crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof as ferment :: FFIConversionFrom < dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof >> :: ffi_from (proof) , < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: OpaqueKey >> :: ffi_from (private_key)) . await }) ; < crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < dpp :: state_transition :: proof_result :: StateTransitionProofResult , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::identity_register_using_public_keys`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_identity_register_using_public_keys (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: PlatformSDK , public_keys : * mut crate :: fermented :: generics :: std_collections_Map_keys_u32_values_dpp_identity_identity_public_key_IdentityPublicKey , proof : * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof , private_key : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey) -> * mut crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: PlatformSDK :: identity_register_using_public_keys (& * self_ , < crate :: fermented :: generics :: std_collections_Map_keys_u32_values_dpp_identity_identity_public_key_IdentityPublicKey as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < u32 , dpp :: identity :: identity_public_key :: IdentityPublicKey > >> :: ffi_from (public_keys) , < crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof as ferment :: FFIConversionFrom < dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof >> :: ffi_from (proof) , < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: OpaqueKey >> :: ffi_from (private_key)) . await }) ; < crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < dpp :: state_transition :: proof_result :: StateTransitionProofResult , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::identity_register_using_public_key_at_index`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_identity_register_using_public_key_at_index (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: PlatformSDK , public_key : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey , index : u32 , proof : * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof , private_key : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey) -> * mut crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: PlatformSDK :: identity_register_using_public_key_at_index (& * self_ , < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: IdentityPublicKey >> :: ffi_from (public_key) , index , < crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof as ferment :: FFIConversionFrom < dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof >> :: ffi_from (proof) , < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: OpaqueKey >> :: ffi_from (private_key)) . await }) ; < crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < dpp :: state_transition :: proof_result :: StateTransitionProofResult , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::identity_topup`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_identity_topup (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: PlatformSDK , identity_id : * mut crate :: fermented :: generics :: Arr_u8_32 , proof : * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof , private_key : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey) -> * mut crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: PlatformSDK :: identity_topup (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (identity_id) , < crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof as ferment :: FFIConversionFrom < dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof >> :: ffi_from (proof) , < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: OpaqueKey >> :: ffi_from (private_key)) . await }) ; < crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < dpp :: state_transition :: proof_result :: StateTransitionProofResult , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::identity_withdraw`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_identity_withdraw (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: PlatformSDK , identity_id : * mut crate :: fermented :: generics :: Arr_u8_32 , amount : u64 , fee : u32 , proof : * mut crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof , pooling : * mut crate :: fermented :: types :: dpp :: withdrawal :: dpp_withdrawal_Pooling , private_key : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , script : * mut crate :: fermented :: generics :: Vec_u8 , nonce : u64) -> * mut crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: PlatformSDK :: identity_withdraw (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (identity_id) , amount , fee , < crate :: fermented :: types :: dpp :: identity :: state_transition :: asset_lock_proof :: dpp_identity_state_transition_asset_lock_proof_AssetLockProof as ferment :: FFIConversionFrom < dpp :: identity :: state_transition :: asset_lock_proof :: AssetLockProof >> :: ffi_from (proof) , < crate :: fermented :: types :: dpp :: withdrawal :: dpp_withdrawal_Pooling as ferment :: FFIConversionFrom < dpp :: withdrawal :: Pooling >> :: ffi_from (pooling) , < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: OpaqueKey >> :: ffi_from (private_key) , < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from_opt (script) , nonce) . await }) ; < crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < dpp :: state_transition :: proof_result :: StateTransitionProofResult , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::identity_update`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_identity_update (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: PlatformSDK , identity : * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity , nonce : u64 , add_public_keys : * mut crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation , disable_key_ids : * mut crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID , private_key : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey) -> * mut crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: PlatformSDK :: identity_update (& * self_ , < crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity as ferment :: FFIConversionFrom < dpp :: identity :: identity :: Identity >> :: ffi_from (identity) , nonce , < crate :: fermented :: generics :: Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation as ferment :: FFIConversionFrom < Vec < dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation > >> :: ffi_from_opt (add_public_keys) , < crate :: fermented :: generics :: Vec_dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionFrom < Vec < dpp :: identity :: identity_public_key :: KeyID > >> :: ffi_from_opt (disable_key_ids) , < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: OpaqueKey >> :: ffi_from (private_key)) . await }) ; < crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < dpp :: state_transition :: proof_result :: StateTransitionProofResult , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::identity_transfer`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_identity_transfer (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: PlatformSDK , identity : * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity , recipient_id : * mut crate :: fermented :: generics :: Arr_u8_32 , amount : u64 , nonce : u64 , private_key : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey) -> * mut crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: PlatformSDK :: identity_transfer (& * self_ , < crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity as ferment :: FFIConversionFrom < dpp :: identity :: identity :: Identity >> :: ffi_from (identity) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (recipient_id) , amount , nonce , < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: OpaqueKey >> :: ffi_from (private_key)) . await }) ; < crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < dpp :: state_transition :: proof_result :: StateTransitionProofResult , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::data_contract_create`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_data_contract_create (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: PlatformSDK , owner_id : * mut crate :: fermented :: generics :: Arr_u8_32 , nonce : u64 , documents : * mut crate :: fermented :: types :: platform_value :: platform_value_Value , config : * mut crate :: fermented :: types :: platform_value :: platform_value_Value , definitions : * mut crate :: fermented :: types :: platform_value :: platform_value_Value , private_key : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey) -> * mut crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: PlatformSDK :: data_contract_create (& * self_ , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (owner_id) , nonce , < crate :: fermented :: types :: platform_value :: platform_value_Value as ferment :: FFIConversionFrom < platform_value :: Value >> :: ffi_from (documents) , < crate :: fermented :: types :: platform_value :: platform_value_Value as ferment :: FFIConversionFrom < platform_value :: Value >> :: ffi_from_opt (config) , < crate :: fermented :: types :: platform_value :: platform_value_Value as ferment :: FFIConversionFrom < platform_value :: Value >> :: ffi_from_opt (definitions) , < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: OpaqueKey >> :: ffi_from (private_key)) . await }) ; < crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < dpp :: state_transition :: proof_result :: StateTransitionProofResult , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::data_contract_create2`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_data_contract_create2 (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: PlatformSDK , system_contract : * mut crate :: fermented :: types :: data_contracts :: data_contracts_SystemDataContract , owner_id : * mut crate :: fermented :: generics :: Arr_u8_32 , nonce : u64 , private_key : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey) -> * mut crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: PlatformSDK :: data_contract_create2 (& * self_ , < crate :: fermented :: types :: data_contracts :: data_contracts_SystemDataContract as ferment :: FFIConversionFrom < data_contracts :: SystemDataContract >> :: ffi_from (system_contract) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (owner_id) , nonce , < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: OpaqueKey >> :: ffi_from (private_key)) . await }) ; < crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < dpp :: state_transition :: proof_result :: StateTransitionProofResult , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::data_contract_update`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_data_contract_update (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: PlatformSDK , data_contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract , nonce : u64 , private_key : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey) -> * mut crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: PlatformSDK :: data_contract_update (& * self_ , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (data_contract) , nonce , < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: OpaqueKey >> :: ffi_from (private_key)) . await }) ; < crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < dpp :: state_transition :: proof_result :: StateTransitionProofResult , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::document_single`]"] # [cfg (feature = "state-transitions")] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_document_single (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: PlatformSDK , action_type : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: action_type :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType , document_type : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: dpp_data_contract_document_type_DocumentType , document : * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document , entropy : * mut crate :: fermented :: generics :: Arr_u8_32 , private_key : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey) -> * mut crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: PlatformSDK :: document_single (& * self_ , < crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: action_type :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: action_type :: DocumentTransitionActionType >> :: ffi_from (action_type) , < crate :: fermented :: types :: dpp :: data_contract :: document_type :: dpp_data_contract_document_type_DocumentType as ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: DocumentType >> :: ffi_from (document_type) , < crate :: fermented :: types :: dpp :: document :: dpp_document_Document as ferment :: FFIConversionFrom < dpp :: document :: Document >> :: ffi_from (document) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (entropy) , < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: OpaqueKey >> :: ffi_from (private_key)) . await }) ; < crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < dpp :: state_transition :: proof_result :: StateTransitionProofResult , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::document_single_on_table`]"] # [cfg (feature = "state-transitions")] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_document_single_on_table (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: PlatformSDK , data_contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract , action_type : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: action_type :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType , table_name : * mut std :: os :: raw :: c_char , document : * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document , entropy : * mut crate :: fermented :: generics :: Arr_u8_32 , private_key : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey) -> * mut crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: PlatformSDK :: document_single_on_table (& * self_ , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (data_contract) , < crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: action_type :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: action_type :: DocumentTransitionActionType >> :: ffi_from (action_type) , Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (table_name))) , < crate :: fermented :: types :: dpp :: document :: dpp_document_Document as ferment :: FFIConversionFrom < dpp :: document :: Document >> :: ffi_from (document) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (entropy) , < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: OpaqueKey >> :: ffi_from (private_key)) . await }) ; < crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < dpp :: state_transition :: proof_result :: StateTransitionProofResult , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::document_batch`]"] # [cfg (feature = "state-transitions")] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_document_batch < 'a > (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: PlatformSDK , data_contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract , documents : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType_values_Vec_Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32 , private_key : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey) -> * mut crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: PlatformSDK :: document_batch (& * self_ , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (data_contract) , < crate :: fermented :: generics :: std_collections_Map_keys_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType_values_Vec_Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32 as ferment :: FFIConversionFrom < std :: collections :: HashMap < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: action_type :: DocumentTransitionActionType , Vec < (dpp :: document :: Document , dpp :: data_contract :: document_type :: DocumentTypeRef < 'a > , platform_value :: types :: bytes_32 :: Bytes32) > > >> :: ffi_from (documents) , < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: OpaqueKey >> :: ffi_from (private_key)) . await }) ; < crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < dpp :: state_transition :: proof_result :: StateTransitionProofResult , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::friend_request_document`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_friend_request_document (self_ : * mut dash_spv_platform :: PlatformSDK , contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract , identity_id : * mut crate :: fermented :: generics :: Arr_u8_32 , table_name : * mut std :: os :: raw :: c_char , created_at : u64 , to_user_id : * mut crate :: fermented :: generics :: Arr_u8_32 , encrypted_extended_public_key_data : * mut crate :: fermented :: generics :: Vec_u8 , sender_key_index : u32 , recipient_key_index : u32 , account_reference : u32 , entropy : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Result_ok_dpp_document_Document_err_dash_spv_platform_error_Error { let obj = dash_spv_platform :: PlatformSDK :: friend_request_document (& * self_ , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (contract) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (identity_id) , Box :: leak (Box :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < & str >> :: ffi_from (table_name))) , created_at , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (to_user_id) , < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (encrypted_extended_public_key_data) , sender_key_index , recipient_key_index , account_reference , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (entropy)) ; < crate :: fermented :: generics :: Result_ok_dpp_document_Document_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < dpp :: document :: Document , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::send_friend_request`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_send_friend_request (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: PlatformSDK , contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract , identity_id : * mut crate :: fermented :: generics :: Arr_u8_32 , created_at : u64 , to_user_id : * mut crate :: fermented :: generics :: Arr_u8_32 , encrypted_extended_public_key_data : * mut crate :: fermented :: generics :: Vec_u8 , sender_key_index : u32 , recipient_key_index : u32 , account_reference : u32 , entropy : * mut crate :: fermented :: generics :: Arr_u8_32 , private_key : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey) -> * mut crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: PlatformSDK :: send_friend_request (& * self_ , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (contract) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (identity_id) , created_at , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (to_user_id) , < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (encrypted_extended_public_key_data) , sender_key_index , recipient_key_index , account_reference , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (entropy) , < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: OpaqueKey >> :: ffi_from (private_key)) . await }) ; < crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < dpp :: state_transition :: proof_result :: StateTransitionProofResult , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::send_friend_request_with_value`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_send_friend_request_with_value (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: PlatformSDK , contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract , identity_id : * mut crate :: fermented :: generics :: Arr_u8_32 , value : * mut crate :: fermented :: types :: platform_value :: platform_value_Value , entropy : * mut crate :: fermented :: generics :: Arr_u8_32 , private_key : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey) -> * mut crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: PlatformSDK :: send_friend_request_with_value (& * self_ , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (contract) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (identity_id) , < crate :: fermented :: types :: platform_value :: platform_value_Value as ferment :: FFIConversionFrom < platform_value :: Value >> :: ffi_from (value) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (entropy) , < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: OpaqueKey >> :: ffi_from (private_key)) . await }) ; < crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < dpp :: state_transition :: proof_result :: StateTransitionProofResult , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::register_username_domains_for_username_full_paths`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_register_username_domains_for_username_full_paths (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: PlatformSDK , contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract , identity_id : * mut crate :: fermented :: generics :: Arr_u8_32 , username_values : * mut crate :: fermented :: generics :: Vec_platform_value_Value , entropy : * mut crate :: fermented :: generics :: Arr_u8_32 , private_key : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , save_context : * const std :: os :: raw :: c_void , save_callback : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_dash_spv_platform_document_usernames_UsernameStatus_RTRN_) -> * mut crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: PlatformSDK :: register_username_domains_for_username_full_paths (& * self_ , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (contract) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (identity_id) , < crate :: fermented :: generics :: Vec_platform_value_Value as ferment :: FFIConversionFrom < Vec < platform_value :: Value > >> :: ffi_from (username_values) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (entropy) , < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: OpaqueKey >> :: ffi_from (private_key) , save_context , move | o_0 , o_1 | unsafe { save_callback . call (o_0 , o_1) }) . await }) ; < crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < dpp :: state_transition :: proof_result :: StateTransitionProofResult , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::register_preordered_salted_domain_hashes_for_username_full_paths`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_register_preordered_salted_domain_hashes_for_username_full_paths (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: PlatformSDK , contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract , identity_id : * mut crate :: fermented :: generics :: Arr_u8_32 , salted_domain_hashes : * mut crate :: fermented :: generics :: Vec_Vec_u8 , entropy : * mut crate :: fermented :: generics :: Arr_u8_32 , private_key : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , save_context : * const std :: os :: raw :: c_void , save_callback : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_dash_spv_platform_document_usernames_UsernameStatus_RTRN_) -> * mut crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: PlatformSDK :: register_preordered_salted_domain_hashes_for_username_full_paths (& * self_ , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (contract) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (identity_id) , < crate :: fermented :: generics :: Vec_Vec_u8 as ferment :: FFIConversionFrom < Vec < Vec < u8 > > >> :: ffi_from (salted_domain_hashes) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (entropy) , < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: OpaqueKey >> :: ffi_from (private_key) , save_context , move | o_0 , o_1 | unsafe { save_callback . call (o_0 , o_1) }) . await }) ; < crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < dpp :: state_transition :: proof_result :: StateTransitionProofResult , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_platform::PlatformSDK::sign_and_publish_profile`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_platform_PlatformSDK_sign_and_publish_profile (runtime : * mut std :: os :: raw :: c_void , self_ : * mut dash_spv_platform :: PlatformSDK , contract : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract , identity_id : * mut crate :: fermented :: generics :: Arr_u8_32 , profile : * mut crate :: fermented :: types :: dash_spv_platform :: models :: profile :: dash_spv_platform_models_profile_Profile , entropy : * mut crate :: fermented :: generics :: Arr_u8_32 , document_id : * mut crate :: fermented :: generics :: Arr_u8_32 , private_key : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey) -> * mut crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error { let rt = unsafe { & * (runtime as * mut tokio :: runtime :: Runtime) } ; let obj = rt . block_on (async { dash_spv_platform :: PlatformSDK :: sign_and_publish_profile (& * self_ , < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (contract) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (identity_id) , < crate :: fermented :: types :: dash_spv_platform :: models :: profile :: dash_spv_platform_models_profile_Profile as ferment :: FFIConversionFrom < dash_spv_platform :: models :: profile :: Profile >> :: ffi_from (profile) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (entropy) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from_opt (document_id) , < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: OpaqueKey >> :: ffi_from (private_key)) . await }) ; < crate :: fermented :: generics :: Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error as ferment :: FFIConversionTo < Result < dpp :: state_transition :: proof_result :: StateTransitionProofResult , dash_spv_platform :: error :: Error > >> :: ffi_to (obj) } } pub mod dash_sdk { use crate as dash_spv_apple_bindings ; pub mod sdk { use crate as dash_spv_apple_bindings ; } pub mod error { use crate as dash_spv_apple_bindings ; # [cfg (test)] pub mod tests { use crate as dash_spv_apple_bindings ; } } pub mod mock { use crate as dash_spv_apple_bindings ; # [cfg (feature = "mocks")] pub mod sdk { use crate as dash_spv_apple_bindings ; } } pub mod core { use crate as dash_spv_apple_bindings ; } pub mod sync { use crate as dash_spv_apple_bindings ; } pub mod platform { use crate as dash_spv_apple_bindings ; } } pub mod rs_dapi_client { use crate as dash_spv_apple_bindings ; pub mod transport { use crate as dash_spv_apple_bindings ; } } pub mod platform_version { use crate as dash_spv_apple_bindings ; pub mod error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`PlatformVersionError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum platform_version_error_PlatformVersionError { UnknownVersionError (* mut std :: os :: raw :: c_char) } impl ferment :: FFIConversionFrom < platform_version :: error :: PlatformVersionError > for platform_version_error_PlatformVersionError { unsafe fn ffi_from_const (ffi : * const platform_version_error_PlatformVersionError) -> platform_version :: error :: PlatformVersionError { let ffi_ref = & * ffi ; match ffi_ref { platform_version_error_PlatformVersionError :: UnknownVersionError (o_0) => platform_version :: error :: PlatformVersionError :: UnknownVersionError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) } } } impl ferment :: FFIConversionTo < platform_version :: error :: PlatformVersionError > for platform_version_error_PlatformVersionError { unsafe fn ffi_to_const (obj : platform_version :: error :: PlatformVersionError) -> * const platform_version_error_PlatformVersionError { ferment :: boxed (match obj { platform_version :: error :: PlatformVersionError :: UnknownVersionError (o_0) => platform_version_error_PlatformVersionError :: UnknownVersionError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for platform_version_error_PlatformVersionError { fn drop (& mut self) { unsafe { match self { platform_version_error_PlatformVersionError :: UnknownVersionError (o_0) => { ferment :: unbox_string (* o_0) ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_error_PlatformVersionError_UnknownVersionError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut platform_version_error_PlatformVersionError { ferment :: boxed (platform_version_error_PlatformVersionError :: UnknownVersionError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn platform_version_error_PlatformVersionError_destroy < > (ffi : * mut platform_version_error_PlatformVersionError) { ferment :: unbox_any (ffi) ; } } pub mod version { use crate as dash_spv_apple_bindings ; pub mod drive_abci_versions { use crate as dash_spv_apple_bindings ; pub mod drive_abci_validation_versions { use crate as dash_spv_apple_bindings ; } pub mod drive_abci_withdrawal_constants { use crate as dash_spv_apple_bindings ; } pub mod drive_abci_structure_versions { use crate as dash_spv_apple_bindings ; } pub mod drive_abci_method_versions { use crate as dash_spv_apple_bindings ; } pub mod drive_abci_query_versions { use crate as dash_spv_apple_bindings ; } } pub mod fee { use crate as dash_spv_apple_bindings ; pub mod vote_resolution_fund_fees { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`VoteResolutionFundFees`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees { pub contested_document_vote_resolution_fund_required_amount : u64 , pub contested_document_vote_resolution_unlock_fund_required_amount : u64 , pub contested_document_single_vote_cost : u64 } impl ferment :: FFIConversionFrom < platform_version :: version :: fee :: vote_resolution_fund_fees :: VoteResolutionFundFees > for platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees { unsafe fn ffi_from_const (ffi : * const platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees) -> platform_version :: version :: fee :: vote_resolution_fund_fees :: VoteResolutionFundFees { let ffi_ref = & * ffi ; platform_version :: version :: fee :: vote_resolution_fund_fees :: VoteResolutionFundFees { contested_document_vote_resolution_fund_required_amount : ffi_ref . contested_document_vote_resolution_fund_required_amount , contested_document_vote_resolution_unlock_fund_required_amount : ffi_ref . contested_document_vote_resolution_unlock_fund_required_amount , contested_document_single_vote_cost : ffi_ref . contested_document_single_vote_cost } } } impl ferment :: FFIConversionTo < platform_version :: version :: fee :: vote_resolution_fund_fees :: VoteResolutionFundFees > for platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees { unsafe fn ffi_to_const (obj : platform_version :: version :: fee :: vote_resolution_fund_fees :: VoteResolutionFundFees) -> * const platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees { ferment :: boxed (platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees { contested_document_vote_resolution_fund_required_amount : obj . contested_document_vote_resolution_fund_required_amount , contested_document_vote_resolution_unlock_fund_required_amount : obj . contested_document_vote_resolution_unlock_fund_required_amount , contested_document_single_vote_cost : obj . contested_document_single_vote_cost }) } } impl Drop for platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees_ctor < > (contested_document_vote_resolution_fund_required_amount : u64 , contested_document_vote_resolution_unlock_fund_required_amount : u64 , contested_document_single_vote_cost : u64) -> * mut platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees { ferment :: boxed (platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees { contested_document_vote_resolution_fund_required_amount , contested_document_vote_resolution_unlock_fund_required_amount , contested_document_single_vote_cost }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees_destroy < > (ffi : * mut platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees_get_contested_document_vote_resolution_fund_required_amount < > (obj : * const platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees) -> u64 { (* obj) . contested_document_vote_resolution_fund_required_amount } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees_get_contested_document_vote_resolution_unlock_fund_required_amount < > (obj : * const platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees) -> u64 { (* obj) . contested_document_vote_resolution_unlock_fund_required_amount } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees_get_contested_document_single_vote_cost < > (obj : * const platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees) -> u64 { (* obj) . contested_document_single_vote_cost } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees_set_contested_document_vote_resolution_fund_required_amount < > (obj : * const platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees) -> u64 { (* obj) . contested_document_vote_resolution_fund_required_amount } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees_set_contested_document_vote_resolution_unlock_fund_required_amount < > (obj : * const platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees) -> u64 { (* obj) . contested_document_vote_resolution_unlock_fund_required_amount } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees_set_contested_document_single_vote_cost < > (obj : * const platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees) -> u64 { (* obj) . contested_document_single_vote_cost } } pub mod signature { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`FeeSignatureVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_fee_signature_FeeSignatureVersion { pub verify_signature_ecdsa_secp256k1 : u64 , pub verify_signature_bls12_381 : u64 , pub verify_signature_ecdsa_hash160 : u64 , pub verify_signature_bip13_script_hash : u64 , pub verify_signature_eddsa25519_hash160 : u64 } impl ferment :: FFIConversionFrom < platform_version :: version :: fee :: signature :: FeeSignatureVersion > for platform_version_version_fee_signature_FeeSignatureVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_fee_signature_FeeSignatureVersion) -> platform_version :: version :: fee :: signature :: FeeSignatureVersion { let ffi_ref = & * ffi ; platform_version :: version :: fee :: signature :: FeeSignatureVersion { verify_signature_ecdsa_secp256k1 : ffi_ref . verify_signature_ecdsa_secp256k1 , verify_signature_bls12_381 : ffi_ref . verify_signature_bls12_381 , verify_signature_ecdsa_hash160 : ffi_ref . verify_signature_ecdsa_hash160 , verify_signature_bip13_script_hash : ffi_ref . verify_signature_bip13_script_hash , verify_signature_eddsa25519_hash160 : ffi_ref . verify_signature_eddsa25519_hash160 } } } impl ferment :: FFIConversionTo < platform_version :: version :: fee :: signature :: FeeSignatureVersion > for platform_version_version_fee_signature_FeeSignatureVersion { unsafe fn ffi_to_const (obj : platform_version :: version :: fee :: signature :: FeeSignatureVersion) -> * const platform_version_version_fee_signature_FeeSignatureVersion { ferment :: boxed (platform_version_version_fee_signature_FeeSignatureVersion { verify_signature_ecdsa_secp256k1 : obj . verify_signature_ecdsa_secp256k1 , verify_signature_bls12_381 : obj . verify_signature_bls12_381 , verify_signature_ecdsa_hash160 : obj . verify_signature_ecdsa_hash160 , verify_signature_bip13_script_hash : obj . verify_signature_bip13_script_hash , verify_signature_eddsa25519_hash160 : obj . verify_signature_eddsa25519_hash160 }) } } impl Drop for platform_version_version_fee_signature_FeeSignatureVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_signature_FeeSignatureVersion_ctor < > (verify_signature_ecdsa_secp256k1 : u64 , verify_signature_bls12_381 : u64 , verify_signature_ecdsa_hash160 : u64 , verify_signature_bip13_script_hash : u64 , verify_signature_eddsa25519_hash160 : u64) -> * mut platform_version_version_fee_signature_FeeSignatureVersion { ferment :: boxed (platform_version_version_fee_signature_FeeSignatureVersion { verify_signature_ecdsa_secp256k1 , verify_signature_bls12_381 , verify_signature_ecdsa_hash160 , verify_signature_bip13_script_hash , verify_signature_eddsa25519_hash160 }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_signature_FeeSignatureVersion_destroy < > (ffi : * mut platform_version_version_fee_signature_FeeSignatureVersion) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_signature_FeeSignatureVersion_get_verify_signature_ecdsa_secp256k1 < > (obj : * const platform_version_version_fee_signature_FeeSignatureVersion) -> u64 { (* obj) . verify_signature_ecdsa_secp256k1 } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_signature_FeeSignatureVersion_get_verify_signature_bls12_381 < > (obj : * const platform_version_version_fee_signature_FeeSignatureVersion) -> u64 { (* obj) . verify_signature_bls12_381 } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_signature_FeeSignatureVersion_get_verify_signature_ecdsa_hash160 < > (obj : * const platform_version_version_fee_signature_FeeSignatureVersion) -> u64 { (* obj) . verify_signature_ecdsa_hash160 } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_signature_FeeSignatureVersion_get_verify_signature_bip13_script_hash < > (obj : * const platform_version_version_fee_signature_FeeSignatureVersion) -> u64 { (* obj) . verify_signature_bip13_script_hash } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_signature_FeeSignatureVersion_get_verify_signature_eddsa25519_hash160 < > (obj : * const platform_version_version_fee_signature_FeeSignatureVersion) -> u64 { (* obj) . verify_signature_eddsa25519_hash160 } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_signature_FeeSignatureVersion_set_verify_signature_ecdsa_secp256k1 < > (obj : * const platform_version_version_fee_signature_FeeSignatureVersion) -> u64 { (* obj) . verify_signature_ecdsa_secp256k1 } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_signature_FeeSignatureVersion_set_verify_signature_bls12_381 < > (obj : * const platform_version_version_fee_signature_FeeSignatureVersion) -> u64 { (* obj) . verify_signature_bls12_381 } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_signature_FeeSignatureVersion_set_verify_signature_ecdsa_hash160 < > (obj : * const platform_version_version_fee_signature_FeeSignatureVersion) -> u64 { (* obj) . verify_signature_ecdsa_hash160 } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_signature_FeeSignatureVersion_set_verify_signature_bip13_script_hash < > (obj : * const platform_version_version_fee_signature_FeeSignatureVersion) -> u64 { (* obj) . verify_signature_bip13_script_hash } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_signature_FeeSignatureVersion_set_verify_signature_eddsa25519_hash160 < > (obj : * const platform_version_version_fee_signature_FeeSignatureVersion) -> u64 { (* obj) . verify_signature_eddsa25519_hash160 } } pub mod processing { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`FeeProcessingVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_fee_processing_FeeProcessingVersion { pub fetch_identity_balance_processing_cost : u64 , pub fetch_identity_revision_processing_cost : u64 , pub fetch_identity_balance_and_revision_processing_cost : u64 , pub fetch_identity_cost_per_look_up_key_by_id : u64 , pub fetch_prefunded_specialized_balance_processing_cost : u64 , pub fetch_single_identity_key_processing_cost : u64 , pub validate_key_structure : u64 , pub perform_network_threshold_signing : u64 } impl ferment :: FFIConversionFrom < platform_version :: version :: fee :: processing :: FeeProcessingVersion > for platform_version_version_fee_processing_FeeProcessingVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_fee_processing_FeeProcessingVersion) -> platform_version :: version :: fee :: processing :: FeeProcessingVersion { let ffi_ref = & * ffi ; platform_version :: version :: fee :: processing :: FeeProcessingVersion { fetch_identity_balance_processing_cost : ffi_ref . fetch_identity_balance_processing_cost , fetch_identity_revision_processing_cost : ffi_ref . fetch_identity_revision_processing_cost , fetch_identity_balance_and_revision_processing_cost : ffi_ref . fetch_identity_balance_and_revision_processing_cost , fetch_identity_cost_per_look_up_key_by_id : ffi_ref . fetch_identity_cost_per_look_up_key_by_id , fetch_prefunded_specialized_balance_processing_cost : ffi_ref . fetch_prefunded_specialized_balance_processing_cost , fetch_single_identity_key_processing_cost : ffi_ref . fetch_single_identity_key_processing_cost , validate_key_structure : ffi_ref . validate_key_structure , perform_network_threshold_signing : ffi_ref . perform_network_threshold_signing } } } impl ferment :: FFIConversionTo < platform_version :: version :: fee :: processing :: FeeProcessingVersion > for platform_version_version_fee_processing_FeeProcessingVersion { unsafe fn ffi_to_const (obj : platform_version :: version :: fee :: processing :: FeeProcessingVersion) -> * const platform_version_version_fee_processing_FeeProcessingVersion { ferment :: boxed (platform_version_version_fee_processing_FeeProcessingVersion { fetch_identity_balance_processing_cost : obj . fetch_identity_balance_processing_cost , fetch_identity_revision_processing_cost : obj . fetch_identity_revision_processing_cost , fetch_identity_balance_and_revision_processing_cost : obj . fetch_identity_balance_and_revision_processing_cost , fetch_identity_cost_per_look_up_key_by_id : obj . fetch_identity_cost_per_look_up_key_by_id , fetch_prefunded_specialized_balance_processing_cost : obj . fetch_prefunded_specialized_balance_processing_cost , fetch_single_identity_key_processing_cost : obj . fetch_single_identity_key_processing_cost , validate_key_structure : obj . validate_key_structure , perform_network_threshold_signing : obj . perform_network_threshold_signing }) } } impl Drop for platform_version_version_fee_processing_FeeProcessingVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ; ; ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_ctor < > (fetch_identity_balance_processing_cost : u64 , fetch_identity_revision_processing_cost : u64 , fetch_identity_balance_and_revision_processing_cost : u64 , fetch_identity_cost_per_look_up_key_by_id : u64 , fetch_prefunded_specialized_balance_processing_cost : u64 , fetch_single_identity_key_processing_cost : u64 , validate_key_structure : u64 , perform_network_threshold_signing : u64) -> * mut platform_version_version_fee_processing_FeeProcessingVersion { ferment :: boxed (platform_version_version_fee_processing_FeeProcessingVersion { fetch_identity_balance_processing_cost , fetch_identity_revision_processing_cost , fetch_identity_balance_and_revision_processing_cost , fetch_identity_cost_per_look_up_key_by_id , fetch_prefunded_specialized_balance_processing_cost , fetch_single_identity_key_processing_cost , validate_key_structure , perform_network_threshold_signing }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_destroy < > (ffi : * mut platform_version_version_fee_processing_FeeProcessingVersion) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_get_fetch_identity_balance_processing_cost < > (obj : * const platform_version_version_fee_processing_FeeProcessingVersion) -> u64 { (* obj) . fetch_identity_balance_processing_cost } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_get_fetch_identity_revision_processing_cost < > (obj : * const platform_version_version_fee_processing_FeeProcessingVersion) -> u64 { (* obj) . fetch_identity_revision_processing_cost } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_get_fetch_identity_balance_and_revision_processing_cost < > (obj : * const platform_version_version_fee_processing_FeeProcessingVersion) -> u64 { (* obj) . fetch_identity_balance_and_revision_processing_cost } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_get_fetch_identity_cost_per_look_up_key_by_id < > (obj : * const platform_version_version_fee_processing_FeeProcessingVersion) -> u64 { (* obj) . fetch_identity_cost_per_look_up_key_by_id } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_get_fetch_prefunded_specialized_balance_processing_cost < > (obj : * const platform_version_version_fee_processing_FeeProcessingVersion) -> u64 { (* obj) . fetch_prefunded_specialized_balance_processing_cost } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_get_fetch_single_identity_key_processing_cost < > (obj : * const platform_version_version_fee_processing_FeeProcessingVersion) -> u64 { (* obj) . fetch_single_identity_key_processing_cost } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_get_validate_key_structure < > (obj : * const platform_version_version_fee_processing_FeeProcessingVersion) -> u64 { (* obj) . validate_key_structure } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_get_perform_network_threshold_signing < > (obj : * const platform_version_version_fee_processing_FeeProcessingVersion) -> u64 { (* obj) . perform_network_threshold_signing } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_set_fetch_identity_balance_processing_cost < > (obj : * const platform_version_version_fee_processing_FeeProcessingVersion) -> u64 { (* obj) . fetch_identity_balance_processing_cost } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_set_fetch_identity_revision_processing_cost < > (obj : * const platform_version_version_fee_processing_FeeProcessingVersion) -> u64 { (* obj) . fetch_identity_revision_processing_cost } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_set_fetch_identity_balance_and_revision_processing_cost < > (obj : * const platform_version_version_fee_processing_FeeProcessingVersion) -> u64 { (* obj) . fetch_identity_balance_and_revision_processing_cost } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_set_fetch_identity_cost_per_look_up_key_by_id < > (obj : * const platform_version_version_fee_processing_FeeProcessingVersion) -> u64 { (* obj) . fetch_identity_cost_per_look_up_key_by_id } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_set_fetch_prefunded_specialized_balance_processing_cost < > (obj : * const platform_version_version_fee_processing_FeeProcessingVersion) -> u64 { (* obj) . fetch_prefunded_specialized_balance_processing_cost } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_set_fetch_single_identity_key_processing_cost < > (obj : * const platform_version_version_fee_processing_FeeProcessingVersion) -> u64 { (* obj) . fetch_single_identity_key_processing_cost } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_set_validate_key_structure < > (obj : * const platform_version_version_fee_processing_FeeProcessingVersion) -> u64 { (* obj) . validate_key_structure } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_processing_FeeProcessingVersion_set_perform_network_threshold_signing < > (obj : * const platform_version_version_fee_processing_FeeProcessingVersion) -> u64 { (* obj) . perform_network_threshold_signing } } pub mod hashing { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`FeeHashingVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_fee_hashing_FeeHashingVersion { pub blake3_base : u64 , pub blake3_per_block : u64 , pub sha256_per_block : u64 , pub sha256_ripe_md160_base : u64 , pub single_sha256_base : u64 } impl ferment :: FFIConversionFrom < platform_version :: version :: fee :: hashing :: FeeHashingVersion > for platform_version_version_fee_hashing_FeeHashingVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_fee_hashing_FeeHashingVersion) -> platform_version :: version :: fee :: hashing :: FeeHashingVersion { let ffi_ref = & * ffi ; platform_version :: version :: fee :: hashing :: FeeHashingVersion { blake3_base : ffi_ref . blake3_base , blake3_per_block : ffi_ref . blake3_per_block , sha256_per_block : ffi_ref . sha256_per_block , sha256_ripe_md160_base : ffi_ref . sha256_ripe_md160_base , single_sha256_base : ffi_ref . single_sha256_base } } } impl ferment :: FFIConversionTo < platform_version :: version :: fee :: hashing :: FeeHashingVersion > for platform_version_version_fee_hashing_FeeHashingVersion { unsafe fn ffi_to_const (obj : platform_version :: version :: fee :: hashing :: FeeHashingVersion) -> * const platform_version_version_fee_hashing_FeeHashingVersion { ferment :: boxed (platform_version_version_fee_hashing_FeeHashingVersion { blake3_base : obj . blake3_base , blake3_per_block : obj . blake3_per_block , sha256_per_block : obj . sha256_per_block , sha256_ripe_md160_base : obj . sha256_ripe_md160_base , single_sha256_base : obj . single_sha256_base }) } } impl Drop for platform_version_version_fee_hashing_FeeHashingVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_hashing_FeeHashingVersion_ctor < > (blake3_base : u64 , blake3_per_block : u64 , sha256_per_block : u64 , sha256_ripe_md160_base : u64 , single_sha256_base : u64) -> * mut platform_version_version_fee_hashing_FeeHashingVersion { ferment :: boxed (platform_version_version_fee_hashing_FeeHashingVersion { blake3_base , blake3_per_block , sha256_per_block , sha256_ripe_md160_base , single_sha256_base }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_hashing_FeeHashingVersion_destroy < > (ffi : * mut platform_version_version_fee_hashing_FeeHashingVersion) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_hashing_FeeHashingVersion_get_blake3_base < > (obj : * const platform_version_version_fee_hashing_FeeHashingVersion) -> u64 { (* obj) . blake3_base } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_hashing_FeeHashingVersion_get_blake3_per_block < > (obj : * const platform_version_version_fee_hashing_FeeHashingVersion) -> u64 { (* obj) . blake3_per_block } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_hashing_FeeHashingVersion_get_sha256_per_block < > (obj : * const platform_version_version_fee_hashing_FeeHashingVersion) -> u64 { (* obj) . sha256_per_block } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_hashing_FeeHashingVersion_get_sha256_ripe_md160_base < > (obj : * const platform_version_version_fee_hashing_FeeHashingVersion) -> u64 { (* obj) . sha256_ripe_md160_base } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_hashing_FeeHashingVersion_get_single_sha256_base < > (obj : * const platform_version_version_fee_hashing_FeeHashingVersion) -> u64 { (* obj) . single_sha256_base } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_hashing_FeeHashingVersion_set_blake3_base < > (obj : * const platform_version_version_fee_hashing_FeeHashingVersion) -> u64 { (* obj) . blake3_base } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_hashing_FeeHashingVersion_set_blake3_per_block < > (obj : * const platform_version_version_fee_hashing_FeeHashingVersion) -> u64 { (* obj) . blake3_per_block } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_hashing_FeeHashingVersion_set_sha256_per_block < > (obj : * const platform_version_version_fee_hashing_FeeHashingVersion) -> u64 { (* obj) . sha256_per_block } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_hashing_FeeHashingVersion_set_sha256_ripe_md160_base < > (obj : * const platform_version_version_fee_hashing_FeeHashingVersion) -> u64 { (* obj) . sha256_ripe_md160_base } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_hashing_FeeHashingVersion_set_single_sha256_base < > (obj : * const platform_version_version_fee_hashing_FeeHashingVersion) -> u64 { (* obj) . single_sha256_base } } pub mod state_transition_min_fees { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`StateTransitionMinFees`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees { pub credit_transfer : u64 , pub credit_withdrawal : u64 , pub identity_update : u64 , pub document_batch_sub_transition : u64 , pub contract_create : u64 , pub contract_update : u64 , pub masternode_vote : u64 } impl ferment :: FFIConversionFrom < platform_version :: version :: fee :: state_transition_min_fees :: StateTransitionMinFees > for platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees { unsafe fn ffi_from_const (ffi : * const platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees) -> platform_version :: version :: fee :: state_transition_min_fees :: StateTransitionMinFees { let ffi_ref = & * ffi ; platform_version :: version :: fee :: state_transition_min_fees :: StateTransitionMinFees { credit_transfer : ffi_ref . credit_transfer , credit_withdrawal : ffi_ref . credit_withdrawal , identity_update : ffi_ref . identity_update , document_batch_sub_transition : ffi_ref . document_batch_sub_transition , contract_create : ffi_ref . contract_create , contract_update : ffi_ref . contract_update , masternode_vote : ffi_ref . masternode_vote } } } impl ferment :: FFIConversionTo < platform_version :: version :: fee :: state_transition_min_fees :: StateTransitionMinFees > for platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees { unsafe fn ffi_to_const (obj : platform_version :: version :: fee :: state_transition_min_fees :: StateTransitionMinFees) -> * const platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees { ferment :: boxed (platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees { credit_transfer : obj . credit_transfer , credit_withdrawal : obj . credit_withdrawal , identity_update : obj . identity_update , document_batch_sub_transition : obj . document_batch_sub_transition , contract_create : obj . contract_create , contract_update : obj . contract_update , masternode_vote : obj . masternode_vote }) } } impl Drop for platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ; ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees_ctor < > (credit_transfer : u64 , credit_withdrawal : u64 , identity_update : u64 , document_batch_sub_transition : u64 , contract_create : u64 , contract_update : u64 , masternode_vote : u64) -> * mut platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees { ferment :: boxed (platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees { credit_transfer , credit_withdrawal , identity_update , document_batch_sub_transition , contract_create , contract_update , masternode_vote }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees_destroy < > (ffi : * mut platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees_get_credit_transfer < > (obj : * const platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees) -> u64 { (* obj) . credit_transfer } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees_get_credit_withdrawal < > (obj : * const platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees) -> u64 { (* obj) . credit_withdrawal } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees_get_identity_update < > (obj : * const platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees) -> u64 { (* obj) . identity_update } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees_get_document_batch_sub_transition < > (obj : * const platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees) -> u64 { (* obj) . document_batch_sub_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees_get_contract_create < > (obj : * const platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees) -> u64 { (* obj) . contract_create } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees_get_contract_update < > (obj : * const platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees) -> u64 { (* obj) . contract_update } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees_get_masternode_vote < > (obj : * const platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees) -> u64 { (* obj) . masternode_vote } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees_set_credit_transfer < > (obj : * const platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees) -> u64 { (* obj) . credit_transfer } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees_set_credit_withdrawal < > (obj : * const platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees) -> u64 { (* obj) . credit_withdrawal } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees_set_identity_update < > (obj : * const platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees) -> u64 { (* obj) . identity_update } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees_set_document_batch_sub_transition < > (obj : * const platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees) -> u64 { (* obj) . document_batch_sub_transition } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees_set_contract_create < > (obj : * const platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees) -> u64 { (* obj) . contract_create } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees_set_contract_update < > (obj : * const platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees) -> u64 { (* obj) . contract_update } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees_set_masternode_vote < > (obj : * const platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees) -> u64 { (* obj) . masternode_vote } } pub mod storage { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`FeeStorageVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_fee_storage_FeeStorageVersion { pub storage_disk_usage_credit_per_byte : u64 , pub storage_processing_credit_per_byte : u64 , pub storage_load_credit_per_byte : u64 , pub non_storage_load_credit_per_byte : u64 , pub storage_seek_cost : u64 } impl ferment :: FFIConversionFrom < platform_version :: version :: fee :: storage :: FeeStorageVersion > for platform_version_version_fee_storage_FeeStorageVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_fee_storage_FeeStorageVersion) -> platform_version :: version :: fee :: storage :: FeeStorageVersion { let ffi_ref = & * ffi ; platform_version :: version :: fee :: storage :: FeeStorageVersion { storage_disk_usage_credit_per_byte : ffi_ref . storage_disk_usage_credit_per_byte , storage_processing_credit_per_byte : ffi_ref . storage_processing_credit_per_byte , storage_load_credit_per_byte : ffi_ref . storage_load_credit_per_byte , non_storage_load_credit_per_byte : ffi_ref . non_storage_load_credit_per_byte , storage_seek_cost : ffi_ref . storage_seek_cost } } } impl ferment :: FFIConversionTo < platform_version :: version :: fee :: storage :: FeeStorageVersion > for platform_version_version_fee_storage_FeeStorageVersion { unsafe fn ffi_to_const (obj : platform_version :: version :: fee :: storage :: FeeStorageVersion) -> * const platform_version_version_fee_storage_FeeStorageVersion { ferment :: boxed (platform_version_version_fee_storage_FeeStorageVersion { storage_disk_usage_credit_per_byte : obj . storage_disk_usage_credit_per_byte , storage_processing_credit_per_byte : obj . storage_processing_credit_per_byte , storage_load_credit_per_byte : obj . storage_load_credit_per_byte , non_storage_load_credit_per_byte : obj . non_storage_load_credit_per_byte , storage_seek_cost : obj . storage_seek_cost }) } } impl Drop for platform_version_version_fee_storage_FeeStorageVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_storage_FeeStorageVersion_ctor < > (storage_disk_usage_credit_per_byte : u64 , storage_processing_credit_per_byte : u64 , storage_load_credit_per_byte : u64 , non_storage_load_credit_per_byte : u64 , storage_seek_cost : u64) -> * mut platform_version_version_fee_storage_FeeStorageVersion { ferment :: boxed (platform_version_version_fee_storage_FeeStorageVersion { storage_disk_usage_credit_per_byte , storage_processing_credit_per_byte , storage_load_credit_per_byte , non_storage_load_credit_per_byte , storage_seek_cost }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_storage_FeeStorageVersion_destroy < > (ffi : * mut platform_version_version_fee_storage_FeeStorageVersion) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_storage_FeeStorageVersion_get_storage_disk_usage_credit_per_byte < > (obj : * const platform_version_version_fee_storage_FeeStorageVersion) -> u64 { (* obj) . storage_disk_usage_credit_per_byte } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_storage_FeeStorageVersion_get_storage_processing_credit_per_byte < > (obj : * const platform_version_version_fee_storage_FeeStorageVersion) -> u64 { (* obj) . storage_processing_credit_per_byte } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_storage_FeeStorageVersion_get_storage_load_credit_per_byte < > (obj : * const platform_version_version_fee_storage_FeeStorageVersion) -> u64 { (* obj) . storage_load_credit_per_byte } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_storage_FeeStorageVersion_get_non_storage_load_credit_per_byte < > (obj : * const platform_version_version_fee_storage_FeeStorageVersion) -> u64 { (* obj) . non_storage_load_credit_per_byte } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_storage_FeeStorageVersion_get_storage_seek_cost < > (obj : * const platform_version_version_fee_storage_FeeStorageVersion) -> u64 { (* obj) . storage_seek_cost } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_storage_FeeStorageVersion_set_storage_disk_usage_credit_per_byte < > (obj : * const platform_version_version_fee_storage_FeeStorageVersion) -> u64 { (* obj) . storage_disk_usage_credit_per_byte } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_storage_FeeStorageVersion_set_storage_processing_credit_per_byte < > (obj : * const platform_version_version_fee_storage_FeeStorageVersion) -> u64 { (* obj) . storage_processing_credit_per_byte } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_storage_FeeStorageVersion_set_storage_load_credit_per_byte < > (obj : * const platform_version_version_fee_storage_FeeStorageVersion) -> u64 { (* obj) . storage_load_credit_per_byte } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_storage_FeeStorageVersion_set_non_storage_load_credit_per_byte < > (obj : * const platform_version_version_fee_storage_FeeStorageVersion) -> u64 { (* obj) . non_storage_load_credit_per_byte } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_storage_FeeStorageVersion_set_storage_seek_cost < > (obj : * const platform_version_version_fee_storage_FeeStorageVersion) -> u64 { (* obj) . storage_seek_cost } } # [doc = "FFI-representation of the [`FeeVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_fee_FeeVersion { pub fee_version_number : * mut platform_version :: version :: fee :: FeeVersionNumber , pub uses_version_fee_multiplier_permille : * mut u64 , pub storage : * mut crate :: fermented :: types :: platform_version :: version :: fee :: storage :: platform_version_version_fee_storage_FeeStorageVersion , pub signature : * mut crate :: fermented :: types :: platform_version :: version :: fee :: signature :: platform_version_version_fee_signature_FeeSignatureVersion , pub hashing : * mut crate :: fermented :: types :: platform_version :: version :: fee :: hashing :: platform_version_version_fee_hashing_FeeHashingVersion , pub processing : * mut crate :: fermented :: types :: platform_version :: version :: fee :: processing :: platform_version_version_fee_processing_FeeProcessingVersion , pub data_contract : * mut crate :: fermented :: types :: platform_version :: version :: fee :: data_contract :: platform_version_version_fee_data_contract_FeeDataContractValidationVersion , pub state_transition_min_fees : * mut crate :: fermented :: types :: platform_version :: version :: fee :: state_transition_min_fees :: platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees , pub vote_resolution_fund_fees : * mut crate :: fermented :: types :: platform_version :: version :: fee :: vote_resolution_fund_fees :: platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees } impl ferment :: FFIConversionFrom < platform_version :: version :: fee :: FeeVersion > for platform_version_version_fee_FeeVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_fee_FeeVersion) -> platform_version :: version :: fee :: FeeVersion { let ffi_ref = & * ffi ; platform_version :: version :: fee :: FeeVersion { fee_version_number : (& * ffi_ref . fee_version_number) . clone () , uses_version_fee_multiplier_permille : ferment :: from_opt_primitive (ffi_ref . uses_version_fee_multiplier_permille) , storage : < crate :: fermented :: types :: platform_version :: version :: fee :: storage :: platform_version_version_fee_storage_FeeStorageVersion as ferment :: FFIConversionFrom < platform_version :: version :: fee :: storage :: FeeStorageVersion >> :: ffi_from (ffi_ref . storage) , signature : < crate :: fermented :: types :: platform_version :: version :: fee :: signature :: platform_version_version_fee_signature_FeeSignatureVersion as ferment :: FFIConversionFrom < platform_version :: version :: fee :: signature :: FeeSignatureVersion >> :: ffi_from (ffi_ref . signature) , hashing : < crate :: fermented :: types :: platform_version :: version :: fee :: hashing :: platform_version_version_fee_hashing_FeeHashingVersion as ferment :: FFIConversionFrom < platform_version :: version :: fee :: hashing :: FeeHashingVersion >> :: ffi_from (ffi_ref . hashing) , processing : < crate :: fermented :: types :: platform_version :: version :: fee :: processing :: platform_version_version_fee_processing_FeeProcessingVersion as ferment :: FFIConversionFrom < platform_version :: version :: fee :: processing :: FeeProcessingVersion >> :: ffi_from (ffi_ref . processing) , data_contract : < crate :: fermented :: types :: platform_version :: version :: fee :: data_contract :: platform_version_version_fee_data_contract_FeeDataContractValidationVersion as ferment :: FFIConversionFrom < platform_version :: version :: fee :: data_contract :: FeeDataContractValidationVersion >> :: ffi_from (ffi_ref . data_contract) , state_transition_min_fees : < crate :: fermented :: types :: platform_version :: version :: fee :: state_transition_min_fees :: platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees as ferment :: FFIConversionFrom < platform_version :: version :: fee :: state_transition_min_fees :: StateTransitionMinFees >> :: ffi_from (ffi_ref . state_transition_min_fees) , vote_resolution_fund_fees : < crate :: fermented :: types :: platform_version :: version :: fee :: vote_resolution_fund_fees :: platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees as ferment :: FFIConversionFrom < platform_version :: version :: fee :: vote_resolution_fund_fees :: VoteResolutionFundFees >> :: ffi_from (ffi_ref . vote_resolution_fund_fees) } } } impl ferment :: FFIConversionTo < platform_version :: version :: fee :: FeeVersion > for platform_version_version_fee_FeeVersion { unsafe fn ffi_to_const (obj : platform_version :: version :: fee :: FeeVersion) -> * const platform_version_version_fee_FeeVersion { ferment :: boxed (platform_version_version_fee_FeeVersion { fee_version_number : ferment :: boxed (obj . fee_version_number) , uses_version_fee_multiplier_permille : ferment :: to_opt_primitive (obj . uses_version_fee_multiplier_permille) , storage : < crate :: fermented :: types :: platform_version :: version :: fee :: storage :: platform_version_version_fee_storage_FeeStorageVersion as ferment :: FFIConversionTo < platform_version :: version :: fee :: storage :: FeeStorageVersion >> :: ffi_to (obj . storage) , signature : < crate :: fermented :: types :: platform_version :: version :: fee :: signature :: platform_version_version_fee_signature_FeeSignatureVersion as ferment :: FFIConversionTo < platform_version :: version :: fee :: signature :: FeeSignatureVersion >> :: ffi_to (obj . signature) , hashing : < crate :: fermented :: types :: platform_version :: version :: fee :: hashing :: platform_version_version_fee_hashing_FeeHashingVersion as ferment :: FFIConversionTo < platform_version :: version :: fee :: hashing :: FeeHashingVersion >> :: ffi_to (obj . hashing) , processing : < crate :: fermented :: types :: platform_version :: version :: fee :: processing :: platform_version_version_fee_processing_FeeProcessingVersion as ferment :: FFIConversionTo < platform_version :: version :: fee :: processing :: FeeProcessingVersion >> :: ffi_to (obj . processing) , data_contract : < crate :: fermented :: types :: platform_version :: version :: fee :: data_contract :: platform_version_version_fee_data_contract_FeeDataContractValidationVersion as ferment :: FFIConversionTo < platform_version :: version :: fee :: data_contract :: FeeDataContractValidationVersion >> :: ffi_to (obj . data_contract) , state_transition_min_fees : < crate :: fermented :: types :: platform_version :: version :: fee :: state_transition_min_fees :: platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees as ferment :: FFIConversionTo < platform_version :: version :: fee :: state_transition_min_fees :: StateTransitionMinFees >> :: ffi_to (obj . state_transition_min_fees) , vote_resolution_fund_fees : < crate :: fermented :: types :: platform_version :: version :: fee :: vote_resolution_fund_fees :: platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees as ferment :: FFIConversionTo < platform_version :: version :: fee :: vote_resolution_fund_fees :: VoteResolutionFundFees >> :: ffi_to (obj . vote_resolution_fund_fees) }) } } impl Drop for platform_version_version_fee_FeeVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . fee_version_number) ; ferment :: destroy_opt_primitive (ffi_ref . uses_version_fee_multiplier_permille) ; ferment :: unbox_any (ffi_ref . storage) ; ferment :: unbox_any (ffi_ref . signature) ; ferment :: unbox_any (ffi_ref . hashing) ; ferment :: unbox_any (ffi_ref . processing) ; ferment :: unbox_any (ffi_ref . data_contract) ; ferment :: unbox_any (ffi_ref . state_transition_min_fees) ; ferment :: unbox_any (ffi_ref . vote_resolution_fund_fees) ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_ctor < > (fee_version_number : * mut platform_version :: version :: fee :: FeeVersionNumber , uses_version_fee_multiplier_permille : * mut u64 , storage : * mut crate :: fermented :: types :: platform_version :: version :: fee :: storage :: platform_version_version_fee_storage_FeeStorageVersion , signature : * mut crate :: fermented :: types :: platform_version :: version :: fee :: signature :: platform_version_version_fee_signature_FeeSignatureVersion , hashing : * mut crate :: fermented :: types :: platform_version :: version :: fee :: hashing :: platform_version_version_fee_hashing_FeeHashingVersion , processing : * mut crate :: fermented :: types :: platform_version :: version :: fee :: processing :: platform_version_version_fee_processing_FeeProcessingVersion , data_contract : * mut crate :: fermented :: types :: platform_version :: version :: fee :: data_contract :: platform_version_version_fee_data_contract_FeeDataContractValidationVersion , state_transition_min_fees : * mut crate :: fermented :: types :: platform_version :: version :: fee :: state_transition_min_fees :: platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees , vote_resolution_fund_fees : * mut crate :: fermented :: types :: platform_version :: version :: fee :: vote_resolution_fund_fees :: platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees) -> * mut platform_version_version_fee_FeeVersion { ferment :: boxed (platform_version_version_fee_FeeVersion { fee_version_number , uses_version_fee_multiplier_permille , storage , signature , hashing , processing , data_contract , state_transition_min_fees , vote_resolution_fund_fees }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_destroy < > (ffi : * mut platform_version_version_fee_FeeVersion) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_get_fee_version_number < > (obj : * const platform_version_version_fee_FeeVersion) -> * mut platform_version :: version :: fee :: FeeVersionNumber { (* obj) . fee_version_number } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_get_uses_version_fee_multiplier_permille < > (obj : * const platform_version_version_fee_FeeVersion) -> * mut u64 { (* obj) . uses_version_fee_multiplier_permille } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_get_storage < > (obj : * const platform_version_version_fee_FeeVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: fee :: storage :: platform_version_version_fee_storage_FeeStorageVersion { (* obj) . storage } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_get_signature < > (obj : * const platform_version_version_fee_FeeVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: fee :: signature :: platform_version_version_fee_signature_FeeSignatureVersion { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_get_hashing < > (obj : * const platform_version_version_fee_FeeVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: fee :: hashing :: platform_version_version_fee_hashing_FeeHashingVersion { (* obj) . hashing } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_get_processing < > (obj : * const platform_version_version_fee_FeeVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: fee :: processing :: platform_version_version_fee_processing_FeeProcessingVersion { (* obj) . processing } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_get_data_contract < > (obj : * const platform_version_version_fee_FeeVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: fee :: data_contract :: platform_version_version_fee_data_contract_FeeDataContractValidationVersion { (* obj) . data_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_get_state_transition_min_fees < > (obj : * const platform_version_version_fee_FeeVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: fee :: state_transition_min_fees :: platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees { (* obj) . state_transition_min_fees } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_get_vote_resolution_fund_fees < > (obj : * const platform_version_version_fee_FeeVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: fee :: vote_resolution_fund_fees :: platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees { (* obj) . vote_resolution_fund_fees } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_set_fee_version_number < > (obj : * const platform_version_version_fee_FeeVersion) -> * mut platform_version :: version :: fee :: FeeVersionNumber { (* obj) . fee_version_number } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_set_uses_version_fee_multiplier_permille < > (obj : * const platform_version_version_fee_FeeVersion) -> * mut u64 { (* obj) . uses_version_fee_multiplier_permille } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_set_storage < > (obj : * const platform_version_version_fee_FeeVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: fee :: storage :: platform_version_version_fee_storage_FeeStorageVersion { (* obj) . storage } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_set_signature < > (obj : * const platform_version_version_fee_FeeVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: fee :: signature :: platform_version_version_fee_signature_FeeSignatureVersion { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_set_hashing < > (obj : * const platform_version_version_fee_FeeVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: fee :: hashing :: platform_version_version_fee_hashing_FeeHashingVersion { (* obj) . hashing } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_set_processing < > (obj : * const platform_version_version_fee_FeeVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: fee :: processing :: platform_version_version_fee_processing_FeeProcessingVersion { (* obj) . processing } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_set_data_contract < > (obj : * const platform_version_version_fee_FeeVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: fee :: data_contract :: platform_version_version_fee_data_contract_FeeDataContractValidationVersion { (* obj) . data_contract } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_set_state_transition_min_fees < > (obj : * const platform_version_version_fee_FeeVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: fee :: state_transition_min_fees :: platform_version_version_fee_state_transition_min_fees_StateTransitionMinFees { (* obj) . state_transition_min_fees } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_FeeVersion_set_vote_resolution_fund_fees < > (obj : * const platform_version_version_fee_FeeVersion) -> * mut crate :: fermented :: types :: platform_version :: version :: fee :: vote_resolution_fund_fees :: platform_version_version_fee_vote_resolution_fund_fees_VoteResolutionFundFees { (* obj) . vote_resolution_fund_fees } pub mod data_contract { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`FeeDataContractValidationVersion`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_fee_data_contract_FeeDataContractValidationVersion { pub document_type_base_fee : u64 , pub document_type_size_fee : u64 , pub document_type_per_property_fee : u64 , pub document_type_base_non_unique_index_fee : u64 , pub document_type_non_unique_index_per_property_fee : u64 , pub document_type_base_unique_index_fee : u64 , pub document_type_unique_index_per_property_fee : u64 } impl ferment :: FFIConversionFrom < platform_version :: version :: fee :: data_contract :: FeeDataContractValidationVersion > for platform_version_version_fee_data_contract_FeeDataContractValidationVersion { unsafe fn ffi_from_const (ffi : * const platform_version_version_fee_data_contract_FeeDataContractValidationVersion) -> platform_version :: version :: fee :: data_contract :: FeeDataContractValidationVersion { let ffi_ref = & * ffi ; platform_version :: version :: fee :: data_contract :: FeeDataContractValidationVersion { document_type_base_fee : ffi_ref . document_type_base_fee , document_type_size_fee : ffi_ref . document_type_size_fee , document_type_per_property_fee : ffi_ref . document_type_per_property_fee , document_type_base_non_unique_index_fee : ffi_ref . document_type_base_non_unique_index_fee , document_type_non_unique_index_per_property_fee : ffi_ref . document_type_non_unique_index_per_property_fee , document_type_base_unique_index_fee : ffi_ref . document_type_base_unique_index_fee , document_type_unique_index_per_property_fee : ffi_ref . document_type_unique_index_per_property_fee } } } impl ferment :: FFIConversionTo < platform_version :: version :: fee :: data_contract :: FeeDataContractValidationVersion > for platform_version_version_fee_data_contract_FeeDataContractValidationVersion { unsafe fn ffi_to_const (obj : platform_version :: version :: fee :: data_contract :: FeeDataContractValidationVersion) -> * const platform_version_version_fee_data_contract_FeeDataContractValidationVersion { ferment :: boxed (platform_version_version_fee_data_contract_FeeDataContractValidationVersion { document_type_base_fee : obj . document_type_base_fee , document_type_size_fee : obj . document_type_size_fee , document_type_per_property_fee : obj . document_type_per_property_fee , document_type_base_non_unique_index_fee : obj . document_type_base_non_unique_index_fee , document_type_non_unique_index_per_property_fee : obj . document_type_non_unique_index_per_property_fee , document_type_base_unique_index_fee : obj . document_type_base_unique_index_fee , document_type_unique_index_per_property_fee : obj . document_type_unique_index_per_property_fee }) } } impl Drop for platform_version_version_fee_data_contract_FeeDataContractValidationVersion { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ; ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_data_contract_FeeDataContractValidationVersion_ctor < > (document_type_base_fee : u64 , document_type_size_fee : u64 , document_type_per_property_fee : u64 , document_type_base_non_unique_index_fee : u64 , document_type_non_unique_index_per_property_fee : u64 , document_type_base_unique_index_fee : u64 , document_type_unique_index_per_property_fee : u64) -> * mut platform_version_version_fee_data_contract_FeeDataContractValidationVersion { ferment :: boxed (platform_version_version_fee_data_contract_FeeDataContractValidationVersion { document_type_base_fee , document_type_size_fee , document_type_per_property_fee , document_type_base_non_unique_index_fee , document_type_non_unique_index_per_property_fee , document_type_base_unique_index_fee , document_type_unique_index_per_property_fee }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_data_contract_FeeDataContractValidationVersion_destroy < > (ffi : * mut platform_version_version_fee_data_contract_FeeDataContractValidationVersion) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_data_contract_FeeDataContractValidationVersion_get_document_type_base_fee < > (obj : * const platform_version_version_fee_data_contract_FeeDataContractValidationVersion) -> u64 { (* obj) . document_type_base_fee } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_data_contract_FeeDataContractValidationVersion_get_document_type_size_fee < > (obj : * const platform_version_version_fee_data_contract_FeeDataContractValidationVersion) -> u64 { (* obj) . document_type_size_fee } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_data_contract_FeeDataContractValidationVersion_get_document_type_per_property_fee < > (obj : * const platform_version_version_fee_data_contract_FeeDataContractValidationVersion) -> u64 { (* obj) . document_type_per_property_fee } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_data_contract_FeeDataContractValidationVersion_get_document_type_base_non_unique_index_fee < > (obj : * const platform_version_version_fee_data_contract_FeeDataContractValidationVersion) -> u64 { (* obj) . document_type_base_non_unique_index_fee } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_data_contract_FeeDataContractValidationVersion_get_document_type_non_unique_index_per_property_fee < > (obj : * const platform_version_version_fee_data_contract_FeeDataContractValidationVersion) -> u64 { (* obj) . document_type_non_unique_index_per_property_fee } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_data_contract_FeeDataContractValidationVersion_get_document_type_base_unique_index_fee < > (obj : * const platform_version_version_fee_data_contract_FeeDataContractValidationVersion) -> u64 { (* obj) . document_type_base_unique_index_fee } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_data_contract_FeeDataContractValidationVersion_get_document_type_unique_index_per_property_fee < > (obj : * const platform_version_version_fee_data_contract_FeeDataContractValidationVersion) -> u64 { (* obj) . document_type_unique_index_per_property_fee } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_data_contract_FeeDataContractValidationVersion_set_document_type_base_fee < > (obj : * const platform_version_version_fee_data_contract_FeeDataContractValidationVersion) -> u64 { (* obj) . document_type_base_fee } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_data_contract_FeeDataContractValidationVersion_set_document_type_size_fee < > (obj : * const platform_version_version_fee_data_contract_FeeDataContractValidationVersion) -> u64 { (* obj) . document_type_size_fee } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_data_contract_FeeDataContractValidationVersion_set_document_type_per_property_fee < > (obj : * const platform_version_version_fee_data_contract_FeeDataContractValidationVersion) -> u64 { (* obj) . document_type_per_property_fee } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_data_contract_FeeDataContractValidationVersion_set_document_type_base_non_unique_index_fee < > (obj : * const platform_version_version_fee_data_contract_FeeDataContractValidationVersion) -> u64 { (* obj) . document_type_base_non_unique_index_fee } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_data_contract_FeeDataContractValidationVersion_set_document_type_non_unique_index_per_property_fee < > (obj : * const platform_version_version_fee_data_contract_FeeDataContractValidationVersion) -> u64 { (* obj) . document_type_non_unique_index_per_property_fee } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_data_contract_FeeDataContractValidationVersion_set_document_type_base_unique_index_fee < > (obj : * const platform_version_version_fee_data_contract_FeeDataContractValidationVersion) -> u64 { (* obj) . document_type_base_unique_index_fee } # [no_mangle] pub unsafe extern "C" fn platform_version_version_fee_data_contract_FeeDataContractValidationVersion_set_document_type_unique_index_per_property_fee < > (obj : * const platform_version_version_fee_data_contract_FeeDataContractValidationVersion) -> u64 { (* obj) . document_type_unique_index_per_property_fee } } } pub mod system_data_contract_versions { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`SystemDataContractVersions`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_system_data_contract_versions_SystemDataContractVersions { pub withdrawals : * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion , pub dpns : * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion , pub dashpay : * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion , pub masternode_reward_shares : * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion , pub feature_flags : * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion , pub wallet : * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion } impl ferment :: FFIConversionFrom < platform_version :: version :: system_data_contract_versions :: SystemDataContractVersions > for platform_version_version_system_data_contract_versions_SystemDataContractVersions { unsafe fn ffi_from_const (ffi : * const platform_version_version_system_data_contract_versions_SystemDataContractVersions) -> platform_version :: version :: system_data_contract_versions :: SystemDataContractVersions { let ffi_ref = & * ffi ; platform_version :: version :: system_data_contract_versions :: SystemDataContractVersions { withdrawals : < dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion as ferment :: FFIConversionFrom < versioned_feature_core :: FeatureVersion >> :: ffi_from (ffi_ref . withdrawals) , dpns : < dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion as ferment :: FFIConversionFrom < versioned_feature_core :: FeatureVersion >> :: ffi_from (ffi_ref . dpns) , dashpay : < dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion as ferment :: FFIConversionFrom < versioned_feature_core :: FeatureVersion >> :: ffi_from (ffi_ref . dashpay) , masternode_reward_shares : < dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion as ferment :: FFIConversionFrom < versioned_feature_core :: FeatureVersion >> :: ffi_from (ffi_ref . masternode_reward_shares) , feature_flags : < dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion as ferment :: FFIConversionFrom < versioned_feature_core :: FeatureVersion >> :: ffi_from (ffi_ref . feature_flags) , wallet : < dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion as ferment :: FFIConversionFrom < versioned_feature_core :: FeatureVersion >> :: ffi_from (ffi_ref . wallet) } } } impl ferment :: FFIConversionTo < platform_version :: version :: system_data_contract_versions :: SystemDataContractVersions > for platform_version_version_system_data_contract_versions_SystemDataContractVersions { unsafe fn ffi_to_const (obj : platform_version :: version :: system_data_contract_versions :: SystemDataContractVersions) -> * const platform_version_version_system_data_contract_versions_SystemDataContractVersions { ferment :: boxed (platform_version_version_system_data_contract_versions_SystemDataContractVersions { withdrawals : < dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion as ferment :: FFIConversionTo < versioned_feature_core :: FeatureVersion >> :: ffi_to (obj . withdrawals) , dpns : < dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion as ferment :: FFIConversionTo < versioned_feature_core :: FeatureVersion >> :: ffi_to (obj . dpns) , dashpay : < dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion as ferment :: FFIConversionTo < versioned_feature_core :: FeatureVersion >> :: ffi_to (obj . dashpay) , masternode_reward_shares : < dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion as ferment :: FFIConversionTo < versioned_feature_core :: FeatureVersion >> :: ffi_to (obj . masternode_reward_shares) , feature_flags : < dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion as ferment :: FFIConversionTo < versioned_feature_core :: FeatureVersion >> :: ffi_to (obj . feature_flags) , wallet : < dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion as ferment :: FFIConversionTo < versioned_feature_core :: FeatureVersion >> :: ffi_to (obj . wallet) }) } } impl Drop for platform_version_version_system_data_contract_versions_SystemDataContractVersions { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . withdrawals) ; ferment :: unbox_any (ffi_ref . dpns) ; ferment :: unbox_any (ffi_ref . dashpay) ; ferment :: unbox_any (ffi_ref . masternode_reward_shares) ; ferment :: unbox_any (ffi_ref . feature_flags) ; ferment :: unbox_any (ffi_ref . wallet) ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_system_data_contract_versions_SystemDataContractVersions_ctor < > (withdrawals : * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion , dpns : * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion , dashpay : * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion , masternode_reward_shares : * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion , feature_flags : * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion , wallet : * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion) -> * mut platform_version_version_system_data_contract_versions_SystemDataContractVersions { ferment :: boxed (platform_version_version_system_data_contract_versions_SystemDataContractVersions { withdrawals , dpns , dashpay , masternode_reward_shares , feature_flags , wallet }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_system_data_contract_versions_SystemDataContractVersions_destroy < > (ffi : * mut platform_version_version_system_data_contract_versions_SystemDataContractVersions) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_system_data_contract_versions_SystemDataContractVersions_get_withdrawals < > (obj : * const platform_version_version_system_data_contract_versions_SystemDataContractVersions) -> * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion { (* obj) . withdrawals } # [no_mangle] pub unsafe extern "C" fn platform_version_version_system_data_contract_versions_SystemDataContractVersions_get_dpns < > (obj : * const platform_version_version_system_data_contract_versions_SystemDataContractVersions) -> * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion { (* obj) . dpns } # [no_mangle] pub unsafe extern "C" fn platform_version_version_system_data_contract_versions_SystemDataContractVersions_get_dashpay < > (obj : * const platform_version_version_system_data_contract_versions_SystemDataContractVersions) -> * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion { (* obj) . dashpay } # [no_mangle] pub unsafe extern "C" fn platform_version_version_system_data_contract_versions_SystemDataContractVersions_get_masternode_reward_shares < > (obj : * const platform_version_version_system_data_contract_versions_SystemDataContractVersions) -> * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion { (* obj) . masternode_reward_shares } # [no_mangle] pub unsafe extern "C" fn platform_version_version_system_data_contract_versions_SystemDataContractVersions_get_feature_flags < > (obj : * const platform_version_version_system_data_contract_versions_SystemDataContractVersions) -> * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion { (* obj) . feature_flags } # [no_mangle] pub unsafe extern "C" fn platform_version_version_system_data_contract_versions_SystemDataContractVersions_get_wallet < > (obj : * const platform_version_version_system_data_contract_versions_SystemDataContractVersions) -> * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion { (* obj) . wallet } # [no_mangle] pub unsafe extern "C" fn platform_version_version_system_data_contract_versions_SystemDataContractVersions_set_withdrawals < > (obj : * const platform_version_version_system_data_contract_versions_SystemDataContractVersions) -> * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion { (* obj) . withdrawals } # [no_mangle] pub unsafe extern "C" fn platform_version_version_system_data_contract_versions_SystemDataContractVersions_set_dpns < > (obj : * const platform_version_version_system_data_contract_versions_SystemDataContractVersions) -> * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion { (* obj) . dpns } # [no_mangle] pub unsafe extern "C" fn platform_version_version_system_data_contract_versions_SystemDataContractVersions_set_dashpay < > (obj : * const platform_version_version_system_data_contract_versions_SystemDataContractVersions) -> * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion { (* obj) . dashpay } # [no_mangle] pub unsafe extern "C" fn platform_version_version_system_data_contract_versions_SystemDataContractVersions_set_masternode_reward_shares < > (obj : * const platform_version_version_system_data_contract_versions_SystemDataContractVersions) -> * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion { (* obj) . masternode_reward_shares } # [no_mangle] pub unsafe extern "C" fn platform_version_version_system_data_contract_versions_SystemDataContractVersions_set_feature_flags < > (obj : * const platform_version_version_system_data_contract_versions_SystemDataContractVersions) -> * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion { (* obj) . feature_flags } # [no_mangle] pub unsafe extern "C" fn platform_version_version_system_data_contract_versions_SystemDataContractVersions_set_wallet < > (obj : * const platform_version_version_system_data_contract_versions_SystemDataContractVersions) -> * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion { (* obj) . wallet } } pub mod dpp_versions { use crate as dash_spv_apple_bindings ; pub mod dpp_contract_versions { use crate as dash_spv_apple_bindings ; } pub mod dpp_state_transition_serialization_versions { use crate as dash_spv_apple_bindings ; } pub mod dpp_factory_versions { use crate as dash_spv_apple_bindings ; } pub mod dpp_voting_versions { use crate as dash_spv_apple_bindings ; } pub mod dpp_validation_versions { use crate as dash_spv_apple_bindings ; } pub mod dpp_asset_lock_versions { use crate as dash_spv_apple_bindings ; } pub mod dpp_identity_versions { use crate as dash_spv_apple_bindings ; } pub mod dpp_method_versions { use crate as dash_spv_apple_bindings ; } pub mod dpp_document_versions { use crate as dash_spv_apple_bindings ; } pub mod dpp_costs_versions { use crate as dash_spv_apple_bindings ; } pub mod dpp_state_transition_versions { use crate as dash_spv_apple_bindings ; } pub mod dpp_state_transition_method_versions { use crate as dash_spv_apple_bindings ; } pub mod dpp_state_transition_conversion_versions { use crate as dash_spv_apple_bindings ; } } # [cfg (feature = "mock-versions")] pub mod mocks { use crate as dash_spv_apple_bindings ; } pub mod system_limits { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`SystemLimits`]"] # [repr (C)] # [derive (Clone)] pub struct platform_version_version_system_limits_SystemLimits { pub estimated_contract_max_serialized_size : u16 , pub max_field_value_size : u32 , pub max_state_transition_size : u64 , pub max_transitions_in_documents_batch : u16 , pub withdrawal_transactions_per_block_limit : u16 , pub retry_signing_expired_withdrawal_documents_per_block_limit : u16 , pub max_withdrawal_amount : u64 } impl ferment :: FFIConversionFrom < platform_version :: version :: system_limits :: SystemLimits > for platform_version_version_system_limits_SystemLimits { unsafe fn ffi_from_const (ffi : * const platform_version_version_system_limits_SystemLimits) -> platform_version :: version :: system_limits :: SystemLimits { let ffi_ref = & * ffi ; platform_version :: version :: system_limits :: SystemLimits { estimated_contract_max_serialized_size : ffi_ref . estimated_contract_max_serialized_size , max_field_value_size : ffi_ref . max_field_value_size , max_state_transition_size : ffi_ref . max_state_transition_size , max_transitions_in_documents_batch : ffi_ref . max_transitions_in_documents_batch , withdrawal_transactions_per_block_limit : ffi_ref . withdrawal_transactions_per_block_limit , retry_signing_expired_withdrawal_documents_per_block_limit : ffi_ref . retry_signing_expired_withdrawal_documents_per_block_limit , max_withdrawal_amount : ffi_ref . max_withdrawal_amount } } } impl ferment :: FFIConversionTo < platform_version :: version :: system_limits :: SystemLimits > for platform_version_version_system_limits_SystemLimits { unsafe fn ffi_to_const (obj : platform_version :: version :: system_limits :: SystemLimits) -> * const platform_version_version_system_limits_SystemLimits { ferment :: boxed (platform_version_version_system_limits_SystemLimits { estimated_contract_max_serialized_size : obj . estimated_contract_max_serialized_size , max_field_value_size : obj . max_field_value_size , max_state_transition_size : obj . max_state_transition_size , max_transitions_in_documents_batch : obj . max_transitions_in_documents_batch , withdrawal_transactions_per_block_limit : obj . withdrawal_transactions_per_block_limit , retry_signing_expired_withdrawal_documents_per_block_limit : obj . retry_signing_expired_withdrawal_documents_per_block_limit , max_withdrawal_amount : obj . max_withdrawal_amount }) } } impl Drop for platform_version_version_system_limits_SystemLimits { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ; ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn platform_version_version_system_limits_SystemLimits_ctor < > (estimated_contract_max_serialized_size : u16 , max_field_value_size : u32 , max_state_transition_size : u64 , max_transitions_in_documents_batch : u16 , withdrawal_transactions_per_block_limit : u16 , retry_signing_expired_withdrawal_documents_per_block_limit : u16 , max_withdrawal_amount : u64) -> * mut platform_version_version_system_limits_SystemLimits { ferment :: boxed (platform_version_version_system_limits_SystemLimits { estimated_contract_max_serialized_size , max_field_value_size , max_state_transition_size , max_transitions_in_documents_batch , withdrawal_transactions_per_block_limit , retry_signing_expired_withdrawal_documents_per_block_limit , max_withdrawal_amount }) } # [no_mangle] pub unsafe extern "C" fn platform_version_version_system_limits_SystemLimits_destroy < > (ffi : * mut platform_version_version_system_limits_SystemLimits) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn platform_version_version_system_limits_SystemLimits_get_estimated_contract_max_serialized_size < > (obj : * const platform_version_version_system_limits_SystemLimits) -> u16 { (* obj) . estimated_contract_max_serialized_size } # [no_mangle] pub unsafe extern "C" fn platform_version_version_system_limits_SystemLimits_get_max_field_value_size < > (obj : * const platform_version_version_system_limits_SystemLimits) -> u32 { (* obj) . max_field_value_size } # [no_mangle] pub unsafe extern "C" fn platform_version_version_system_limits_SystemLimits_get_max_state_transition_size < > (obj : * const platform_version_version_system_limits_SystemLimits) -> u64 { (* obj) . max_state_transition_size } # [no_mangle] pub unsafe extern "C" fn platform_version_version_system_limits_SystemLimits_get_max_transitions_in_documents_batch < > (obj : * const platform_version_version_system_limits_SystemLimits) -> u16 { (* obj) . max_transitions_in_documents_batch } # [no_mangle] pub unsafe extern "C" fn platform_version_version_system_limits_SystemLimits_get_withdrawal_transactions_per_block_limit < > (obj : * const platform_version_version_system_limits_SystemLimits) -> u16 { (* obj) . withdrawal_transactions_per_block_limit } # [no_mangle] pub unsafe extern "C" fn platform_version_version_system_limits_SystemLimits_get_retry_signing_expired_withdrawal_documents_per_block_limit < > (obj : * const platform_version_version_system_limits_SystemLimits) -> u16 { (* obj) . retry_signing_expired_withdrawal_documents_per_block_limit } # [no_mangle] pub unsafe extern "C" fn platform_version_version_system_limits_SystemLimits_get_max_withdrawal_amount < > (obj : * const platform_version_version_system_limits_SystemLimits) -> u64 { (* obj) . max_withdrawal_amount } # [no_mangle] pub unsafe extern "C" fn platform_version_version_system_limits_SystemLimits_set_estimated_contract_max_serialized_size < > (obj : * const platform_version_version_system_limits_SystemLimits) -> u16 { (* obj) . estimated_contract_max_serialized_size } # [no_mangle] pub unsafe extern "C" fn platform_version_version_system_limits_SystemLimits_set_max_field_value_size < > (obj : * const platform_version_version_system_limits_SystemLimits) -> u32 { (* obj) . max_field_value_size } # [no_mangle] pub unsafe extern "C" fn platform_version_version_system_limits_SystemLimits_set_max_state_transition_size < > (obj : * const platform_version_version_system_limits_SystemLimits) -> u64 { (* obj) . max_state_transition_size } # [no_mangle] pub unsafe extern "C" fn platform_version_version_system_limits_SystemLimits_set_max_transitions_in_documents_batch < > (obj : * const platform_version_version_system_limits_SystemLimits) -> u16 { (* obj) . max_transitions_in_documents_batch } # [no_mangle] pub unsafe extern "C" fn platform_version_version_system_limits_SystemLimits_set_withdrawal_transactions_per_block_limit < > (obj : * const platform_version_version_system_limits_SystemLimits) -> u16 { (* obj) . withdrawal_transactions_per_block_limit } # [no_mangle] pub unsafe extern "C" fn platform_version_version_system_limits_SystemLimits_set_retry_signing_expired_withdrawal_documents_per_block_limit < > (obj : * const platform_version_version_system_limits_SystemLimits) -> u16 { (* obj) . retry_signing_expired_withdrawal_documents_per_block_limit } # [no_mangle] pub unsafe extern "C" fn platform_version_version_system_limits_SystemLimits_set_max_withdrawal_amount < > (obj : * const platform_version_version_system_limits_SystemLimits) -> u64 { (* obj) . max_withdrawal_amount } } pub mod drive_versions { use crate as dash_spv_apple_bindings ; pub mod drive_vote_method_versions { use crate as dash_spv_apple_bindings ; } pub mod drive_document_method_versions { use crate as dash_spv_apple_bindings ; } pub mod drive_state_transition_method_versions { use crate as dash_spv_apple_bindings ; } pub mod drive_identity_method_versions { use crate as dash_spv_apple_bindings ; } pub mod drive_contract_method_versions { use crate as dash_spv_apple_bindings ; } pub mod drive_credit_pool_method_versions { use crate as dash_spv_apple_bindings ; } pub mod drive_grove_method_versions { use crate as dash_spv_apple_bindings ; } pub mod drive_verify_method_versions { use crate as dash_spv_apple_bindings ; } pub mod drive_structure_version { use crate as dash_spv_apple_bindings ; } } } } pub mod dashcore_hashes { use crate as dash_spv_apple_bindings ; pub mod ripemd160 { use crate as dash_spv_apple_bindings ; } pub mod sha512_256 { use crate as dash_spv_apple_bindings ; } pub mod cmp { use crate as dash_spv_apple_bindings ; } pub mod hmac { use crate as dash_spv_apple_bindings ; } pub mod sha512 { use crate as dash_spv_apple_bindings ; } pub mod serde_macros { use crate as dash_spv_apple_bindings ; } pub mod hash160 { use crate as dash_spv_apple_bindings ; } pub mod sha1 { use crate as dash_spv_apple_bindings ; } pub mod hex { use crate as dash_spv_apple_bindings ; } pub mod sha256t { use crate as dash_spv_apple_bindings ; } pub mod sha256d { use crate as dash_spv_apple_bindings ; } pub mod sha256 { use crate as dash_spv_apple_bindings ; # [cfg (test)] pub mod tests { use crate as dash_spv_apple_bindings ; } } pub mod siphash24 { use crate as dash_spv_apple_bindings ; } # [cfg (any (feature = "std" , feature = "core2"))] pub mod impls { use crate as dash_spv_apple_bindings ; } pub mod util { use crate as dash_spv_apple_bindings ; } pub mod _export { use crate as dash_spv_apple_bindings ; } } pub mod dash_spv_apple_bindings { use crate as dash_spv_apple_bindings ; pub mod ffi_core_provider { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_apple_bindings::ffi_core_provider::FFICoreProvider::new`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_apple_bindings_ffi_core_provider_FFICoreProvider_new (chain_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType , get_block_height_by_hash : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_u32 , get_block_hash_by_height : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_u32_RTRN_Arr_u8_32 , get_block_by_height_or_last_terminal : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_u32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError , block_by_hash : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError , last_block_for_block_hash : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_os_raw_c_void_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError , add_insight : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_ , get_cl_signature_by_block_hash : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError , load_masternode_list_from_db : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError , save_masternode_list_into_db : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError , load_llmq_snapshot_from_db : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError , save_llmq_snapshot_into_db : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError , update_address_usage_of_masternodes : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_ , remove_request_in_retrieval : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_bool_Arr_u8_32_Arr_u8_32_RTRN_bool , issue_with_masternode_list_from_peer : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_bool_std_os_raw_c_void_RTRN_ , notify_sync_state : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_dash_spv_masternode_processor_models_sync_state_CacheState_RTRN_ , dequeue_masternode_list : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_bool_RTRN_ , context : * const std :: os :: raw :: c_void) -> * mut dash_spv_apple_bindings :: ffi_core_provider :: FFICoreProvider { let obj = dash_spv_apple_bindings :: ffi_core_provider :: FFICoreProvider :: new (< crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain_type) , move | o_0 , o_1 | unsafe { get_block_height_by_hash . call (o_0 , o_1) } , move | o_0 , o_1 | unsafe { get_block_hash_by_height . call (o_0 , o_1) } , move | o_0 , o_1 | unsafe { get_block_by_height_or_last_terminal . call (o_0 , o_1) } , move | o_0 , o_1 | unsafe { block_by_hash . call (o_0 , o_1) } , move | o_0 , o_1 , o_2 | unsafe { last_block_for_block_hash . call (o_0 , o_1 , o_2) } , move | o_0 , o_1 | unsafe { add_insight . call (o_0 , o_1) } , move | o_0 , o_1 | unsafe { get_cl_signature_by_block_hash . call (o_0 , o_1) } , move | o_0 , o_1 | unsafe { load_masternode_list_from_db . call (o_0 , o_1) } , move | o_0 , o_1 , o_2 | unsafe { save_masternode_list_into_db . call (o_0 , o_1 , o_2) } , move | o_0 , o_1 | unsafe { load_llmq_snapshot_from_db . call (o_0 , o_1) } , move | o_0 , o_1 , o_2 | unsafe { save_llmq_snapshot_into_db . call (o_0 , o_1 , o_2) } , move | o_0 , o_1 | unsafe { update_address_usage_of_masternodes . call (o_0 , o_1) } , move | o_0 , o_1 , o_2 , o_3 | unsafe { remove_request_in_retrieval . call (o_0 , o_1 , o_2 , o_3) } , move | o_0 , o_1 , o_2 | unsafe { issue_with_masternode_list_from_peer . call (o_0 , o_1 , o_2) } , move | o_0 , o_1 | unsafe { notify_sync_state . call (o_0 , o_1) } , move | o_0 , o_1 | unsafe { dequeue_masternode_list . call (o_0 , o_1) } , context) ; ferment :: boxed (obj) } } # [cfg (test)] pub mod tests { use crate as dash_spv_apple_bindings ; pub mod bindings { use crate as dash_spv_apple_bindings ; } pub mod listdiff { use crate as dash_spv_apple_bindings ; } } pub mod custom { use crate as dash_spv_apple_bindings ; } pub mod address { use crate as dash_spv_apple_bindings ; pub mod addresses { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_apple_bindings::address::addresses::address_with_script_pubkey`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_apple_bindings_address_addresses_address_with_script_pubkey (script : * mut crate :: fermented :: generics :: Vec_u8 , chain_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_apple_bindings :: address :: addresses :: address_with_script_pubkey (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (script) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain_type)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_apple_bindings::address::addresses::address_with_script_sig`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_apple_bindings_address_addresses_address_with_script_sig (script : * mut crate :: fermented :: generics :: Vec_u8 , chain_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_apple_bindings :: address :: addresses :: address_with_script_sig (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (script) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain_type)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_apple_bindings::address::addresses::script_pubkey_for_address`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_apple_bindings_address_addresses_script_pubkey_for_address (address : * mut std :: os :: raw :: c_char , chain_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = dash_spv_apple_bindings :: address :: addresses :: script_pubkey_for_address (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from_opt (address) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain_type)) ; < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_apple_bindings::address::addresses::address_from_hash160`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_apple_bindings_address_addresses_address_from_hash160 (hash : * mut crate :: fermented :: generics :: Arr_u8_20 , chain_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_apple_bindings :: address :: addresses :: address_from_hash160 (< crate :: fermented :: generics :: Arr_u8_20 as ferment :: FFIConversionFrom < [u8 ; 20] >> :: ffi_from (hash) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain_type)) ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_apple_bindings::address::addresses::is_valid_dash_address_for_chain`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_apple_bindings_address_addresses_is_valid_dash_address_for_chain (address : * mut std :: os :: raw :: c_char , chain_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType) -> bool { let obj = dash_spv_apple_bindings :: address :: addresses :: is_valid_dash_address_for_chain (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from_opt (address) , < crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain_type)) ; obj } } } # [doc = "FFI-representation of the [`dash_spv_apple_bindings::DashSPVCore::with_callbacks`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_apple_bindings_DashSPVCore_with_callbacks (chain_type : * mut crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType , address_list : * mut crate :: fermented :: generics :: Vec_ , get_data_contract : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_platform_value_types_identifier_Identifier_RTRN_Result_ok_Option_std_sync_Arc_dpp_data_contract_DataContract_err_drive_proof_verifier_error_ContextProviderError , get_platform_activation_height : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_RTRN_Result_ok_dpp_prelude_CoreBlockHeight_err_drive_proof_verifier_error_ContextProviderError , callback_signer : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_dpp_identity_identity_public_key_IdentityPublicKey_Vec_u8_RTRN_Result_ok_platform_value_types_binary_data_BinaryData_err_dpp_errors_protocol_error_ProtocolError , callback_can_sign : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_dpp_identity_identity_public_key_IdentityPublicKey_RTRN_bool , get_block_height_by_hash : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_u32 , get_block_hash_by_height : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_u32_RTRN_Arr_u8_32 , get_block_by_height_or_last_terminal : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_u32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError , block_by_hash : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError , last_block_for_block_hash : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_os_raw_c_void_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError , add_insight : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_ , get_cl_signature_by_block_hash : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError , load_masternode_list_from_db : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError , save_masternode_list_into_db : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError , load_llmq_snapshot_from_db : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError , save_llmq_snapshot_into_db : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError , update_address_usage_of_masternodes : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_ , remove_request_in_retrieval : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_bool_Arr_u8_32_Arr_u8_32_RTRN_bool , issue_with_masternode_list_from_peer : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_bool_std_os_raw_c_void_RTRN_ , notify_sync_state : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_dash_spv_masternode_processor_models_sync_state_CacheState_RTRN_ , dequeue_masternode_list : crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_bool_RTRN_ , context : * const std :: os :: raw :: c_void) -> * mut dash_spv_apple_bindings :: DashSPVCore { let obj = dash_spv_apple_bindings :: DashSPVCore :: with_callbacks (< crate :: fermented :: types :: dash_spv_crypto :: network :: chain_type :: dash_spv_crypto_network_chain_type_ChainType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: chain_type :: ChainType >> :: ffi_from (chain_type) , < crate :: fermented :: generics :: Vec_ as ferment :: FFIConversionFrom < Vec < & 'static str > >> :: ffi_from_opt (address_list) , move | o_0 , o_1 | unsafe { get_data_contract . call (o_0 , o_1) } , move | o_0 | unsafe { get_platform_activation_height . call (o_0) } , move | o_0 , o_1 , o_2 | unsafe { callback_signer . call (o_0 , o_1 , o_2) } , move | o_0 , o_1 | unsafe { callback_can_sign . call (o_0 , o_1) } , move | o_0 , o_1 | unsafe { get_block_height_by_hash . call (o_0 , o_1) } , move | o_0 , o_1 | unsafe { get_block_hash_by_height . call (o_0 , o_1) } , move | o_0 , o_1 | unsafe { get_block_by_height_or_last_terminal . call (o_0 , o_1) } , move | o_0 , o_1 | unsafe { block_by_hash . call (o_0 , o_1) } , move | o_0 , o_1 , o_2 | unsafe { last_block_for_block_hash . call (o_0 , o_1 , o_2) } , move | o_0 , o_1 | unsafe { add_insight . call (o_0 , o_1) } , move | o_0 , o_1 | unsafe { get_cl_signature_by_block_hash . call (o_0 , o_1) } , move | o_0 , o_1 | unsafe { load_masternode_list_from_db . call (o_0 , o_1) } , move | o_0 , o_1 , o_2 | unsafe { save_masternode_list_into_db . call (o_0 , o_1 , o_2) } , move | o_0 , o_1 | unsafe { load_llmq_snapshot_from_db . call (o_0 , o_1) } , move | o_0 , o_1 , o_2 | unsafe { save_llmq_snapshot_into_db . call (o_0 , o_1 , o_2) } , move | o_0 , o_1 | unsafe { update_address_usage_of_masternodes . call (o_0 , o_1) } , move | o_0 , o_1 , o_2 , o_3 | unsafe { remove_request_in_retrieval . call (o_0 , o_1 , o_2 , o_3) } , move | o_0 , o_1 , o_2 | unsafe { issue_with_masternode_list_from_peer . call (o_0 , o_1 , o_2) } , move | o_0 , o_1 | unsafe { notify_sync_state . call (o_0 , o_1) } , move | o_0 , o_1 | unsafe { dequeue_masternode_list . call (o_0 , o_1) } , context) ; ferment :: boxed (obj) } # [doc = "FFI-representation of the [`dash_spv_apple_bindings::DashSPVCore::cache`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_apple_bindings_DashSPVCore_cache (self_ : * mut dash_spv_apple_bindings :: DashSPVCore) -> * mut crate :: fermented :: generics :: std_sync_Arc_dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache { let obj = dash_spv_apple_bindings :: DashSPVCore :: cache (& * self_) ; < crate :: fermented :: generics :: std_sync_Arc_dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache as ferment :: FFIConversionTo < std :: sync :: Arc < dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_apple_bindings::DashSPVCore::platform_cache`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_apple_bindings_DashSPVCore_platform_cache (self_ : * mut dash_spv_apple_bindings :: DashSPVCore) -> * mut crate :: fermented :: generics :: std_sync_Arc_dash_spv_platform_cache_PlatformCache { let obj = dash_spv_apple_bindings :: DashSPVCore :: platform_cache (& * self_) ; < crate :: fermented :: generics :: std_sync_Arc_dash_spv_platform_cache_PlatformCache as ferment :: FFIConversionTo < std :: sync :: Arc < dash_spv_platform :: cache :: PlatformCache > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_apple_bindings::DashSPVCore::processor`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_apple_bindings_DashSPVCore_processor (self_ : * mut dash_spv_apple_bindings :: DashSPVCore) -> * mut crate :: fermented :: generics :: std_sync_Arc_dash_spv_masternode_processor_processing_processor_MasternodeProcessor { let obj = dash_spv_apple_bindings :: DashSPVCore :: processor (& * self_) ; < crate :: fermented :: generics :: std_sync_Arc_dash_spv_masternode_processor_processing_processor_MasternodeProcessor as ferment :: FFIConversionTo < std :: sync :: Arc < dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor > >> :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_apple_bindings::DashSPVCore::platform`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_apple_bindings_DashSPVCore_platform (self_ : * mut dash_spv_apple_bindings :: DashSPVCore) -> * mut crate :: fermented :: generics :: std_sync_Arc_dash_spv_platform_PlatformSDK { let obj = dash_spv_apple_bindings :: DashSPVCore :: platform (& * self_) ; < crate :: fermented :: generics :: std_sync_Arc_dash_spv_platform_PlatformSDK as ferment :: FFIConversionTo < std :: sync :: Arc < dash_spv_platform :: PlatformSDK > >> :: ffi_to (obj) } } } # [allow (clippy :: let_and_return , clippy :: suspicious_else_formatting , clippy :: redundant_field_names , dead_code , non_camel_case_types , non_snake_case , non_upper_case_globals , redundant_semicolons , unreachable_patterns , unused_braces , unused_imports , unused_parens , unused_qualifications , unused_unsafe , unused_variables)] pub mod generics { use crate as dash_spv_apple_bindings ; # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_std_sync_RwLock_u8_32 { pub obj : * mut crate :: fermented :: generics :: std_sync_RwLock_u8_32 } impl ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: RwLock < [u8 ; 32] > > > for std_sync_Arc_std_sync_RwLock_u8_32 { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_std_sync_RwLock_u8_32) -> std :: sync :: Arc < std :: sync :: RwLock < [u8 ; 32] > > { let ffi_ref = & * ffi ; std :: sync :: Arc :: new (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . obj)) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < std :: sync :: RwLock < [u8 ; 32] > > > for std_sync_Arc_std_sync_RwLock_u8_32 { unsafe fn ffi_to_const (obj : std :: sync :: Arc < std :: sync :: RwLock < [u8 ; 32] > >) -> * const std_sync_Arc_std_sync_RwLock_u8_32 { ferment :: boxed (Self { obj : ferment :: FFIConversionTo :: ffi_to (std :: sync :: RwLock :: new (obj . read () . expect ("Poisoned") . clone ())) }) } } impl Drop for std_sync_Arc_std_sync_RwLock_u8_32 { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_u8_32_ctor (obj : * mut crate :: fermented :: generics :: std_sync_RwLock_u8_32) -> * mut std_sync_Arc_std_sync_RwLock_u8_32 { ferment :: boxed (std_sync_Arc_std_sync_RwLock_u8_32 { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_u8_32_destroy (ffi : * mut std_sync_Arc_std_sync_RwLock_u8_32) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_Vec_u8 { pub count : usize , pub values : * mut * mut crate :: fermented :: generics :: Vec_u8 } impl ferment :: FFIConversionFrom < Vec < Vec < u8 > > > for Vec_Vec_u8 { unsafe fn ffi_from_const (ffi : * const Vec_Vec_u8) -> Vec < Vec < u8 > > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < Vec < u8 > > > for Vec_Vec_u8 { unsafe fn ffi_to_const (obj : Vec < Vec < u8 > >) -> * const Vec_Vec_u8 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_Vec_u8 { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_Vec_u8_ctor (count : usize , values : * mut * mut crate :: fermented :: generics :: Vec_u8) -> * mut Vec_Vec_u8 { ferment :: boxed (Vec_Vec_u8 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_Vec_u8_destroy (ffi : * mut Vec_Vec_u8) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { pub obj : * mut crate :: fermented :: generics :: std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry } impl ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: BTreeMap < dash_spv_crypto :: network :: llmq_type :: LLMQType , std :: collections :: BTreeMap < dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > > > > > for std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: BTreeMap < dash_spv_crypto :: network :: llmq_type :: LLMQType , std :: collections :: BTreeMap < dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > > > > { let ffi_ref = & * ffi ; std :: sync :: Arc :: new (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . obj)) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: BTreeMap < dash_spv_crypto :: network :: llmq_type :: LLMQType , std :: collections :: BTreeMap < dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > > > > > for std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { unsafe fn ffi_to_const (obj : std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: BTreeMap < dash_spv_crypto :: network :: llmq_type :: LLMQType , std :: collections :: BTreeMap < dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > > > >) -> * const std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment :: boxed (Self { obj : ferment :: FFIConversionTo :: ffi_to (std :: sync :: RwLock :: new (obj . read () . expect ("Poisoned") . clone ())) }) } } impl Drop for std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_ctor (obj : * mut crate :: fermented :: generics :: std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment :: boxed (std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_destroy (ffi : * mut std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dpp_identity_identity_public_key_security_level_SecurityLevel { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel } impl ferment :: FFIConversionFrom < Vec < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel > > for Vec_dpp_identity_identity_public_key_security_level_SecurityLevel { unsafe fn ffi_from_const (ffi : * const Vec_dpp_identity_identity_public_key_security_level_SecurityLevel) -> Vec < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel > > for Vec_dpp_identity_identity_public_key_security_level_SecurityLevel { unsafe fn ffi_to_const (obj : Vec < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel >) -> * const Vec_dpp_identity_identity_public_key_security_level_SecurityLevel { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dpp_identity_identity_public_key_security_level_SecurityLevel { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_identity_identity_public_key_security_level_SecurityLevel_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel) -> * mut Vec_dpp_identity_identity_public_key_security_level_SecurityLevel { ferment :: boxed (Vec_dpp_identity_identity_public_key_security_level_SecurityLevel { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_identity_identity_public_key_security_level_SecurityLevel_destroy (ffi : * mut Vec_dpp_identity_identity_public_key_security_level_SecurityLevel) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_String_values_Vec_u8_20 { pub count : usize , pub keys : * mut * mut std :: os :: raw :: c_char , pub values : * mut * mut crate :: fermented :: generics :: Vec_u8_20 } impl ferment :: FFIConversionFrom < std :: collections :: BTreeMap < String , Vec < [u8 ; 20] > > > for std_collections_Map_keys_String_values_Vec_u8_20 { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_String_values_Vec_u8_20) -> std :: collections :: BTreeMap < String , Vec < [u8 ; 20] > > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (o) , | o | < crate :: fermented :: generics :: Vec_u8_20 as ferment :: FFIConversionFrom < Vec < [u8 ; 20] > >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < std :: collections :: BTreeMap < String , Vec < [u8 ; 20] > > > for std_collections_Map_keys_String_values_Vec_u8_20 { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < String , Vec < [u8 ; 20] > >) -> * const std_collections_Map_keys_String_values_Vec_u8_20 { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_complex_group (obj . keys () . cloned ()) , values : ferment :: to_complex_group (obj . values () . cloned ()) }) } } impl Drop for std_collections_Map_keys_String_values_Vec_u8_20 { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr_composer (self . keys , self . count , ferment :: unbox_string) ; ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_String_values_Vec_u8_20_ctor (count : usize , keys : * mut * mut std :: os :: raw :: c_char , values : * mut * mut crate :: fermented :: generics :: Vec_u8_20) -> * mut std_collections_Map_keys_String_values_Vec_u8_20 { ferment :: boxed (std_collections_Map_keys_String_values_Vec_u8_20 { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_String_values_Vec_u8_20_destroy (ffi : * mut std_collections_Map_keys_String_values_Vec_u8_20) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_Option_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { pub ok : * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity , pub error : * mut crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error } impl ferment :: FFIConversionFrom < Result < Option < dpp :: identity :: identity :: Identity > , dash_spv_platform :: error :: Error > > for Result_ok_Option_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { unsafe fn ffi_from_const (ffi : * const Result_ok_Option_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error) -> Result < Option < dpp :: identity :: identity :: Identity > , dash_spv_platform :: error :: Error > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | < crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity as ferment :: FFIConversionFrom < dpp :: identity :: identity :: Identity >> :: ffi_from_opt (o) , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error as ferment :: FFIConversionFrom < dash_spv_platform :: error :: Error >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < Option < dpp :: identity :: identity :: Identity > , dash_spv_platform :: error :: Error > > for Result_ok_Option_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { unsafe fn ffi_to_const (obj : Result < Option < dpp :: identity :: identity :: Identity > , dash_spv_platform :: error :: Error >) -> * const Result_ok_Option_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: FFIConversionTo :: ffi_to_opt (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_Option_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_Option_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error_ctor (ok : * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity , error : * mut crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error) -> * mut Result_ok_Option_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { ferment :: boxed (Result_ok_Option_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_Option_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error_destroy (ffi : * mut Result_ok_Option_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_dpp_prelude_CoreBlockHeight_err_drive_proof_verifier_error_ContextProviderError { pub ok : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight , pub error : * mut crate :: fermented :: types :: drive_proof_verifier :: error :: drive_proof_verifier_error_ContextProviderError } impl ferment :: FFIConversionFrom < Result < dpp :: prelude :: CoreBlockHeight , drive_proof_verifier :: error :: ContextProviderError > > for Result_ok_dpp_prelude_CoreBlockHeight_err_drive_proof_verifier_error_ContextProviderError { unsafe fn ffi_from_const (ffi : * const Result_ok_dpp_prelude_CoreBlockHeight_err_drive_proof_verifier_error_ContextProviderError) -> Result < dpp :: prelude :: CoreBlockHeight , drive_proof_verifier :: error :: ContextProviderError > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | < crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight as ferment :: FFIConversionFrom < dpp :: prelude :: CoreBlockHeight >> :: ffi_from (o) , ffi_ref . error , | o | < crate :: fermented :: types :: drive_proof_verifier :: error :: drive_proof_verifier_error_ContextProviderError as ferment :: FFIConversionFrom < drive_proof_verifier :: error :: ContextProviderError >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < dpp :: prelude :: CoreBlockHeight , drive_proof_verifier :: error :: ContextProviderError > > for Result_ok_dpp_prelude_CoreBlockHeight_err_drive_proof_verifier_error_ContextProviderError { unsafe fn ffi_to_const (obj : Result < dpp :: prelude :: CoreBlockHeight , drive_proof_verifier :: error :: ContextProviderError >) -> * const Result_ok_dpp_prelude_CoreBlockHeight_err_drive_proof_verifier_error_ContextProviderError { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: FFIConversionTo :: ffi_to (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_dpp_prelude_CoreBlockHeight_err_drive_proof_verifier_error_ContextProviderError { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_dpp_prelude_CoreBlockHeight_err_drive_proof_verifier_error_ContextProviderError_ctor (ok : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_CoreBlockHeight , error : * mut crate :: fermented :: types :: drive_proof_verifier :: error :: drive_proof_verifier_error_ContextProviderError) -> * mut Result_ok_dpp_prelude_CoreBlockHeight_err_drive_proof_verifier_error_ContextProviderError { ferment :: boxed (Result_ok_dpp_prelude_CoreBlockHeight_err_drive_proof_verifier_error_ContextProviderError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_dpp_prelude_CoreBlockHeight_err_drive_proof_verifier_error_ContextProviderError_destroy (ffi : * mut Result_ok_dpp_prelude_CoreBlockHeight_err_drive_proof_verifier_error_ContextProviderError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_u8_arr_48_err_dash_spv_crypto_keys_KeyError { pub ok : * mut crate :: fermented :: generics :: Arr_u8_48 , pub error : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError } impl ferment :: FFIConversionFrom < Result < [u8 ; 48] , dash_spv_crypto :: keys :: KeyError > > for Result_ok_u8_arr_48_err_dash_spv_crypto_keys_KeyError { unsafe fn ffi_from_const (ffi : * const Result_ok_u8_arr_48_err_dash_spv_crypto_keys_KeyError) -> Result < [u8 ; 48] , dash_spv_crypto :: keys :: KeyError > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | < crate :: fermented :: generics :: Arr_u8_48 as ferment :: FFIConversionFrom < [u8 ; 48] >> :: ffi_from (o) , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: KeyError >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < [u8 ; 48] , dash_spv_crypto :: keys :: KeyError > > for Result_ok_u8_arr_48_err_dash_spv_crypto_keys_KeyError { unsafe fn ffi_to_const (obj : Result < [u8 ; 48] , dash_spv_crypto :: keys :: KeyError >) -> * const Result_ok_u8_arr_48_err_dash_spv_crypto_keys_KeyError { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: FFIConversionTo :: ffi_to (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_u8_arr_48_err_dash_spv_crypto_keys_KeyError { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_u8_arr_48_err_dash_spv_crypto_keys_KeyError_ctor (ok : * mut crate :: fermented :: generics :: Arr_u8_48 , error : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError) -> * mut Result_ok_u8_arr_48_err_dash_spv_crypto_keys_KeyError { ferment :: boxed (Result_ok_u8_arr_48_err_dash_spv_crypto_keys_KeyError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_u8_arr_48_err_dash_spv_crypto_keys_KeyError_destroy (ffi : * mut Result_ok_u8_arr_48_err_dash_spv_crypto_keys_KeyError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_dash_spv_platform_document_manager_DocumentsManager { pub obj : * mut dash_spv_platform :: document :: manager :: DocumentsManager } impl ferment :: FFIConversionFrom < std :: sync :: Arc < dash_spv_platform :: document :: manager :: DocumentsManager > > for std_sync_Arc_dash_spv_platform_document_manager_DocumentsManager { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_dash_spv_platform_document_manager_DocumentsManager) -> std :: sync :: Arc < dash_spv_platform :: document :: manager :: DocumentsManager > { let ffi_ref = & * ffi ; std :: sync :: Arc :: from_raw (ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < dash_spv_platform :: document :: manager :: DocumentsManager > > for std_sync_Arc_dash_spv_platform_document_manager_DocumentsManager { unsafe fn ffi_to_const (obj : std :: sync :: Arc < dash_spv_platform :: document :: manager :: DocumentsManager >) -> * const std_sync_Arc_dash_spv_platform_document_manager_DocumentsManager { ferment :: boxed (Self { obj : std :: sync :: Arc :: into_raw (obj) . cast_mut () }) } } impl Drop for std_sync_Arc_dash_spv_platform_document_manager_DocumentsManager { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dash_spv_platform_document_manager_DocumentsManager_ctor (obj : * mut dash_spv_platform :: document :: manager :: DocumentsManager) -> * mut std_sync_Arc_dash_spv_platform_document_manager_DocumentsManager { ferment :: boxed (std_sync_Arc_dash_spv_platform_document_manager_DocumentsManager { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dash_spv_platform_document_manager_DocumentsManager_destroy (ffi : * mut std_sync_Arc_dash_spv_platform_document_manager_DocumentsManager) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_Tuple_Arr_u8_32_Arr_u8_32_bool_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError { pub ok : * mut crate :: fermented :: generics :: Tuple_Arr_u8_32_Arr_u8_32_bool , pub error : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: processing_error :: dash_spv_masternode_processor_processing_processing_error_ProcessingError } impl ferment :: FFIConversionFrom < Result < ([u8 ; 32] , [u8 ; 32] , bool) , dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError > > for Result_Tuple_Arr_u8_32_Arr_u8_32_bool_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError { unsafe fn ffi_from_const (ffi : * const Result_Tuple_Arr_u8_32_Arr_u8_32_bool_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError) -> Result < ([u8 ; 32] , [u8 ; 32] , bool) , dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | < crate :: fermented :: generics :: Tuple_Arr_u8_32_Arr_u8_32_bool as ferment :: FFIConversionFrom < ([u8 ; 32] , [u8 ; 32] , bool) >> :: ffi_from (o) , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: processing_error :: dash_spv_masternode_processor_processing_processing_error_ProcessingError as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < ([u8 ; 32] , [u8 ; 32] , bool) , dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError > > for Result_Tuple_Arr_u8_32_Arr_u8_32_bool_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError { unsafe fn ffi_to_const (obj : Result < ([u8 ; 32] , [u8 ; 32] , bool) , dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError >) -> * const Result_Tuple_Arr_u8_32_Arr_u8_32_bool_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: FFIConversionTo :: ffi_to (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_Tuple_Arr_u8_32_Arr_u8_32_bool_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_Tuple_Arr_u8_32_Arr_u8_32_bool_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError_ctor (ok : * mut crate :: fermented :: generics :: Tuple_Arr_u8_32_Arr_u8_32_bool , error : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: processing_error :: dash_spv_masternode_processor_processing_processing_error_ProcessingError) -> * mut Result_Tuple_Arr_u8_32_Arr_u8_32_bool_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError { ferment :: boxed (Result_Tuple_Arr_u8_32_Arr_u8_32_bool_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_Tuple_Arr_u8_32_Arr_u8_32_bool_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError_destroy (ffi : * mut Result_Tuple_Arr_u8_32_Arr_u8_32_bool_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType , pub values : * mut * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry } impl ferment :: FFIConversionFrom < std :: collections :: BTreeMap < dash_spv_crypto :: network :: llmq_type :: LLMQType , std :: collections :: BTreeMap < dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > > > for std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> std :: collections :: BTreeMap < dash_spv_crypto :: network :: llmq_type :: LLMQType , std :: collections :: BTreeMap < dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_from (o) , | o | < crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < std :: collections :: BTreeMap < dash_spv_crypto :: network :: llmq_type :: LLMQType , std :: collections :: BTreeMap < dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > > > for std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < dash_spv_crypto :: network :: llmq_type :: LLMQType , std :: collections :: BTreeMap < dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > >) -> * const std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_complex_group (obj . keys () . cloned ()) , values : ferment :: to_complex_group (obj . values () . cloned ()) }) } } impl Drop for std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . keys , self . count) ; ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType , values : * mut * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment :: boxed (std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_destroy (ffi : * mut std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_u8_20 { pub count : usize , pub values : * mut * mut crate :: fermented :: generics :: Arr_u8_20 } impl ferment :: FFIConversionFrom < Vec < [u8 ; 20] > > for Vec_u8_20 { unsafe fn ffi_from_const (ffi : * const Vec_u8_20) -> Vec < [u8 ; 20] > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < [u8 ; 20] > > for Vec_u8_20 { unsafe fn ffi_to_const (obj : Vec < [u8 ; 20] >) -> * const Vec_u8_20 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_u8_20 { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_u8_20_ctor (count : usize , values : * mut * mut crate :: fermented :: generics :: Arr_u8_20) -> * mut Vec_u8_20 { ferment :: boxed (Vec_u8_20 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_u8_20_destroy (ffi : * mut Vec_u8_20) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache { pub obj : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache } impl ferment :: FFIConversionFrom < std :: sync :: Arc < dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache > > for std_sync_Arc_dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache) -> std :: sync :: Arc < dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache > { let ffi_ref = & * ffi ; std :: sync :: Arc :: from_raw (ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache > > for std_sync_Arc_dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache { unsafe fn ffi_to_const (obj : std :: sync :: Arc < dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache >) -> * const std_sync_Arc_dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache { ferment :: boxed (Self { obj : std :: sync :: Arc :: into_raw (obj) . cast_mut () }) } } impl Drop for std_sync_Arc_dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_ctor (obj : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) -> * mut std_sync_Arc_dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache { ferment :: boxed (std_sync_Arc_dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_destroy (ffi : * mut std_sync_Arc_dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { pub obj : * mut crate :: fermented :: generics :: std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry } impl ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: BTreeMap < dash_spv_crypto :: network :: llmq_type :: LLMQType , std :: collections :: BTreeMap < [u8 ; 32] , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > > > > > for std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: BTreeMap < dash_spv_crypto :: network :: llmq_type :: LLMQType , std :: collections :: BTreeMap < [u8 ; 32] , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > > > > { let ffi_ref = & * ffi ; std :: sync :: Arc :: new (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . obj)) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: BTreeMap < dash_spv_crypto :: network :: llmq_type :: LLMQType , std :: collections :: BTreeMap < [u8 ; 32] , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > > > > > for std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { unsafe fn ffi_to_const (obj : std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: BTreeMap < dash_spv_crypto :: network :: llmq_type :: LLMQType , std :: collections :: BTreeMap < [u8 ; 32] , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > > > >) -> * const std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment :: boxed (Self { obj : ferment :: FFIConversionTo :: ffi_to (std :: sync :: RwLock :: new (obj . read () . expect ("Poisoned") . clone ())) }) } } impl Drop for std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_ctor (obj : * mut crate :: fermented :: generics :: std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment :: boxed (std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_destroy (ffi : * mut std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_crypto_keys_operator_public_key_OperatorPublicKey { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: block :: dash_spv_masternode_processor_common_block_Block , pub values : * mut * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: operator_public_key :: dash_spv_crypto_keys_operator_public_key_OperatorPublicKey } impl ferment :: FFIConversionFrom < std :: collections :: BTreeMap < dash_spv_masternode_processor :: common :: block :: Block , dash_spv_crypto :: keys :: operator_public_key :: OperatorPublicKey > > for std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_crypto_keys_operator_public_key_OperatorPublicKey { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_crypto_keys_operator_public_key_OperatorPublicKey) -> std :: collections :: BTreeMap < dash_spv_masternode_processor :: common :: block :: Block , dash_spv_crypto :: keys :: operator_public_key :: OperatorPublicKey > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < crate :: fermented :: types :: dash_spv_masternode_processor :: common :: block :: dash_spv_masternode_processor_common_block_Block as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: common :: block :: Block >> :: ffi_from (o) , | o | < crate :: fermented :: types :: dash_spv_crypto :: keys :: operator_public_key :: dash_spv_crypto_keys_operator_public_key_OperatorPublicKey as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: operator_public_key :: OperatorPublicKey >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < std :: collections :: BTreeMap < dash_spv_masternode_processor :: common :: block :: Block , dash_spv_crypto :: keys :: operator_public_key :: OperatorPublicKey > > for std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_crypto_keys_operator_public_key_OperatorPublicKey { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < dash_spv_masternode_processor :: common :: block :: Block , dash_spv_crypto :: keys :: operator_public_key :: OperatorPublicKey >) -> * const std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_crypto_keys_operator_public_key_OperatorPublicKey { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_complex_group (obj . keys () . cloned ()) , values : ferment :: to_complex_group (obj . values () . cloned ()) }) } } impl Drop for std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_crypto_keys_operator_public_key_OperatorPublicKey { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . keys , self . count) ; ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_crypto_keys_operator_public_key_OperatorPublicKey_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: block :: dash_spv_masternode_processor_common_block_Block , values : * mut * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: operator_public_key :: dash_spv_crypto_keys_operator_public_key_OperatorPublicKey) -> * mut std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_crypto_keys_operator_public_key_OperatorPublicKey { ferment :: boxed (std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_crypto_keys_operator_public_key_OperatorPublicKey { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_crypto_keys_operator_public_key_OperatorPublicKey_destroy (ffi : * mut std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_crypto_keys_operator_public_key_OperatorPublicKey) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty { pub count : usize , pub keys : * mut * mut std :: os :: raw :: c_char , pub values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: dpp_data_contract_document_type_property_DocumentProperty } impl ferment :: FFIConversionFrom < indexmap :: IndexMap < String , dpp :: data_contract :: document_type :: property :: DocumentProperty > > for indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty { unsafe fn ffi_from_const (ffi : * const indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty) -> indexmap :: IndexMap < String , dpp :: data_contract :: document_type :: property :: DocumentProperty > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (o) , | o | < crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: dpp_data_contract_document_type_property_DocumentProperty as ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: property :: DocumentProperty >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < indexmap :: IndexMap < String , dpp :: data_contract :: document_type :: property :: DocumentProperty > > for indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty { unsafe fn ffi_to_const (obj : indexmap :: IndexMap < String , dpp :: data_contract :: document_type :: property :: DocumentProperty >) -> * const indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_complex_group (obj . keys () . cloned ()) , values : ferment :: to_complex_group (obj . values () . cloned ()) }) } } impl Drop for indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr_composer (self . keys , self . count , ferment :: unbox_string) ; ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty_ctor (count : usize , keys : * mut * mut std :: os :: raw :: c_char , values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: dpp_data_contract_document_type_property_DocumentProperty) -> * mut indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty { ferment :: boxed (indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty_destroy (ffi : * mut indexmap_IndexMap_String_dpp_data_contract_document_type_property_DocumentProperty) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub values : * mut * mut crate :: fermented :: types :: dash_spv_platform :: models :: transient_dashpay_user :: dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser } impl ferment :: FFIConversionFrom < std :: collections :: BTreeMap < platform_value :: types :: identifier :: Identifier , dash_spv_platform :: models :: transient_dashpay_user :: TransientDashPayUser > > for std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser) -> std :: collections :: BTreeMap < platform_value :: types :: identifier :: Identifier , dash_spv_platform :: models :: transient_dashpay_user :: TransientDashPayUser > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (o) , | o | < crate :: fermented :: types :: dash_spv_platform :: models :: transient_dashpay_user :: dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser as ferment :: FFIConversionFrom < dash_spv_platform :: models :: transient_dashpay_user :: TransientDashPayUser >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < std :: collections :: BTreeMap < platform_value :: types :: identifier :: Identifier , dash_spv_platform :: models :: transient_dashpay_user :: TransientDashPayUser > > for std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < platform_value :: types :: identifier :: Identifier , dash_spv_platform :: models :: transient_dashpay_user :: TransientDashPayUser >) -> * const std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_complex_group (obj . keys () . cloned ()) , values : ferment :: to_complex_group (obj . values () . cloned ()) }) } } impl Drop for std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . keys , self . count) ; ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , values : * mut * mut crate :: fermented :: types :: dash_spv_platform :: models :: transient_dashpay_user :: dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser) -> * mut std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser { ferment :: boxed (std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser_destroy (ffi : * mut std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_Tuple_String_Arr_u8_32 { pub count : usize , pub values : * mut * mut crate :: fermented :: generics :: Tuple_String_Arr_u8_32 } impl ferment :: FFIConversionFrom < Vec < (String , [u8 ; 32]) > > for Vec_Tuple_String_Arr_u8_32 { unsafe fn ffi_from_const (ffi : * const Vec_Tuple_String_Arr_u8_32) -> Vec < (String , [u8 ; 32]) > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < (String , [u8 ; 32]) > > for Vec_Tuple_String_Arr_u8_32 { unsafe fn ffi_to_const (obj : Vec < (String , [u8 ; 32]) >) -> * const Vec_Tuple_String_Arr_u8_32 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_Tuple_String_Arr_u8_32 { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_Tuple_String_Arr_u8_32_ctor (count : usize , values : * mut * mut crate :: fermented :: generics :: Tuple_String_Arr_u8_32) -> * mut Vec_Tuple_String_Arr_u8_32 { ferment :: boxed (Vec_Tuple_String_Arr_u8_32 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_Tuple_String_Arr_u8_32_destroy (ffi : * mut Vec_Tuple_String_Arr_u8_32) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_Tuple_platform_value_types_identifier_Identifier_u8 { pub count : usize , pub values : * mut * mut crate :: fermented :: generics :: Tuple_platform_value_types_identifier_Identifier_u8 } impl ferment :: FFIConversionFrom < Vec < (platform_value :: types :: identifier :: Identifier , u8) > > for Vec_Tuple_platform_value_types_identifier_Identifier_u8 { unsafe fn ffi_from_const (ffi : * const Vec_Tuple_platform_value_types_identifier_Identifier_u8) -> Vec < (platform_value :: types :: identifier :: Identifier , u8) > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < (platform_value :: types :: identifier :: Identifier , u8) > > for Vec_Tuple_platform_value_types_identifier_Identifier_u8 { unsafe fn ffi_to_const (obj : Vec < (platform_value :: types :: identifier :: Identifier , u8) >) -> * const Vec_Tuple_platform_value_types_identifier_Identifier_u8 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_Tuple_platform_value_types_identifier_Identifier_u8 { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_Tuple_platform_value_types_identifier_Identifier_u8_ctor (count : usize , values : * mut * mut crate :: fermented :: generics :: Tuple_platform_value_types_identifier_Identifier_u8) -> * mut Vec_Tuple_platform_value_types_identifier_Identifier_u8 { ferment :: boxed (Vec_Tuple_platform_value_types_identifier_Identifier_u8 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_Tuple_platform_value_types_identifier_Identifier_u8_destroy (ffi : * mut Vec_Tuple_platform_value_types_identifier_Identifier_u8) { ferment :: unbox_any (ffi) ; } # [cfg (any (any (feature = "state-transitions")))] # [repr (C)] # [derive (Clone)] # [cfg (any (any (feature = "state-transitions")))] pub struct std_collections_Map_keys_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType_values_Vec_Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32 { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: action_type :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType , pub values : * mut * mut crate :: fermented :: generics :: Vec_Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32 } # [cfg (any (any (feature = "state-transitions")))] # [cfg (any (any (feature = "state-transitions")))] impl < 'a > ferment :: FFIConversionFrom < std :: collections :: HashMap < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: action_type :: DocumentTransitionActionType , Vec < (dpp :: document :: Document , dpp :: data_contract :: document_type :: DocumentTypeRef < 'a > , platform_value :: types :: bytes_32 :: Bytes32) > > > for std_collections_Map_keys_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType_values_Vec_Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32 { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType_values_Vec_Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32) -> std :: collections :: HashMap < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: action_type :: DocumentTransitionActionType , Vec < (dpp :: document :: Document , dpp :: data_contract :: document_type :: DocumentTypeRef < 'a > , platform_value :: types :: bytes_32 :: Bytes32) > > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: action_type :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: action_type :: DocumentTransitionActionType >> :: ffi_from (o) , | o | < crate :: fermented :: generics :: Vec_Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32 as ferment :: FFIConversionFrom < Vec < (dpp :: document :: Document , dpp :: data_contract :: document_type :: DocumentTypeRef < 'a > , platform_value :: types :: bytes_32 :: Bytes32) > >> :: ffi_from (o)) } } # [cfg (any (any (feature = "state-transitions")))] # [cfg (any (any (feature = "state-transitions")))] impl < 'a > ferment :: FFIConversionTo < std :: collections :: HashMap < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: action_type :: DocumentTransitionActionType , Vec < (dpp :: document :: Document , dpp :: data_contract :: document_type :: DocumentTypeRef < 'a > , platform_value :: types :: bytes_32 :: Bytes32) > > > for std_collections_Map_keys_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType_values_Vec_Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32 { unsafe fn ffi_to_const (obj : std :: collections :: HashMap < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: action_type :: DocumentTransitionActionType , Vec < (dpp :: document :: Document , dpp :: data_contract :: document_type :: DocumentTypeRef < 'a > , platform_value :: types :: bytes_32 :: Bytes32) > >) -> * const std_collections_Map_keys_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType_values_Vec_Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32 { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_complex_group (obj . keys () . cloned ()) , values : ferment :: to_complex_group (obj . values () . cloned ()) }) } } # [cfg (any (any (feature = "state-transitions")))] # [cfg (any (any (feature = "state-transitions")))] impl Drop for std_collections_Map_keys_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType_values_Vec_Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32 { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . keys , self . count) ; ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [cfg (any (any (feature = "state-transitions")))] # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType_values_Vec_Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: action_type :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType , values : * mut * mut crate :: fermented :: generics :: Vec_Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32) -> * mut std_collections_Map_keys_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType_values_Vec_Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32 { ferment :: boxed (std_collections_Map_keys_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType_values_Vec_Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32 { count , keys , values }) } # [cfg (any (any (feature = "state-transitions")))] # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType_values_Vec_Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32_destroy (ffi : * mut std_collections_Map_keys_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_action_type_DocumentTransitionActionType_values_Vec_Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Arr_u8_68 { pub count : usize , pub values : * mut u8 } impl ferment :: FFIConversionFrom < [u8 ; 68] > for Arr_u8_68 { unsafe fn ffi_from_const (ffi : * const Arr_u8_68) -> [u8 ; 68] { let ffi_ref = & * ffi ; let vec : Vec < u8 > = ferment :: from_primitive_group (ffi_ref . values , ffi_ref . count) ; vec . try_into () . unwrap () } } impl ferment :: FFIConversionTo < [u8 ; 68] > for Arr_u8_68 { unsafe fn ffi_to_const (obj : [u8 ; 68]) -> * const Arr_u8_68 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_primitive_group (obj . into_iter ()) }) } } impl Drop for Arr_u8_68 { fn drop (& mut self) { unsafe { ferment :: unbox_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Arr_u8_68_ctor (count : usize , values : * mut u8) -> * mut Arr_u8_68 { ferment :: boxed (Arr_u8_68 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Arr_u8_68_destroy (ffi : * mut Arr_u8_68) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dash_spv_masternode_processor_common_socket_address_SocketAddress { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: socket_address :: dash_spv_masternode_processor_common_socket_address_SocketAddress } impl ferment :: FFIConversionFrom < Vec < dash_spv_masternode_processor :: common :: socket_address :: SocketAddress > > for Vec_dash_spv_masternode_processor_common_socket_address_SocketAddress { unsafe fn ffi_from_const (ffi : * const Vec_dash_spv_masternode_processor_common_socket_address_SocketAddress) -> Vec < dash_spv_masternode_processor :: common :: socket_address :: SocketAddress > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < dash_spv_masternode_processor :: common :: socket_address :: SocketAddress > > for Vec_dash_spv_masternode_processor_common_socket_address_SocketAddress { unsafe fn ffi_to_const (obj : Vec < dash_spv_masternode_processor :: common :: socket_address :: SocketAddress >) -> * const Vec_dash_spv_masternode_processor_common_socket_address_SocketAddress { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dash_spv_masternode_processor_common_socket_address_SocketAddress { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_masternode_processor_common_socket_address_SocketAddress_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: socket_address :: dash_spv_masternode_processor_common_socket_address_SocketAddress) -> * mut Vec_dash_spv_masternode_processor_common_socket_address_SocketAddress { ferment :: boxed (Vec_dash_spv_masternode_processor_common_socket_address_SocketAddress { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_masternode_processor_common_socket_address_SocketAddress_destroy (ffi : * mut Vec_dash_spv_masternode_processor_common_socket_address_SocketAddress) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_Tuple_Arr_u8_32_Arr_u8_32_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError { pub ok : * mut crate :: fermented :: generics :: Tuple_Arr_u8_32_Arr_u8_32 , pub error : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: processing_error :: dash_spv_masternode_processor_processing_processing_error_ProcessingError } impl ferment :: FFIConversionFrom < Result < ([u8 ; 32] , [u8 ; 32]) , dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError > > for Result_Tuple_Arr_u8_32_Arr_u8_32_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError { unsafe fn ffi_from_const (ffi : * const Result_Tuple_Arr_u8_32_Arr_u8_32_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError) -> Result < ([u8 ; 32] , [u8 ; 32]) , dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | < crate :: fermented :: generics :: Tuple_Arr_u8_32_Arr_u8_32 as ferment :: FFIConversionFrom < ([u8 ; 32] , [u8 ; 32]) >> :: ffi_from (o) , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: processing_error :: dash_spv_masternode_processor_processing_processing_error_ProcessingError as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < ([u8 ; 32] , [u8 ; 32]) , dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError > > for Result_Tuple_Arr_u8_32_Arr_u8_32_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError { unsafe fn ffi_to_const (obj : Result < ([u8 ; 32] , [u8 ; 32]) , dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError >) -> * const Result_Tuple_Arr_u8_32_Arr_u8_32_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: FFIConversionTo :: ffi_to (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_Tuple_Arr_u8_32_Arr_u8_32_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_Tuple_Arr_u8_32_Arr_u8_32_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError_ctor (ok : * mut crate :: fermented :: generics :: Tuple_Arr_u8_32_Arr_u8_32 , error : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: processing_error :: dash_spv_masternode_processor_processing_processing_error_ProcessingError) -> * mut Result_Tuple_Arr_u8_32_Arr_u8_32_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError { ferment :: boxed (Result_Tuple_Arr_u8_32_Arr_u8_32_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_Tuple_Arr_u8_32_Arr_u8_32_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError_destroy (ffi : * mut Result_Tuple_Arr_u8_32_Arr_u8_32_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_String_err_dash_spv_crypto_keys_KeyError { pub ok : * mut std :: os :: raw :: c_char , pub error : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError } impl ferment :: FFIConversionFrom < Result < String , dash_spv_crypto :: keys :: KeyError > > for Result_ok_String_err_dash_spv_crypto_keys_KeyError { unsafe fn ffi_from_const (ffi : * const Result_ok_String_err_dash_spv_crypto_keys_KeyError) -> Result < String , dash_spv_crypto :: keys :: KeyError > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (o) , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: KeyError >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < String , dash_spv_crypto :: keys :: KeyError > > for Result_ok_String_err_dash_spv_crypto_keys_KeyError { unsafe fn ffi_to_const (obj : Result < String , dash_spv_crypto :: keys :: KeyError >) -> * const Result_ok_String_err_dash_spv_crypto_keys_KeyError { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: FFIConversionTo :: ffi_to (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_String_err_dash_spv_crypto_keys_KeyError { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_String_err_dash_spv_crypto_keys_KeyError_ctor (ok : * mut std :: os :: raw :: c_char , error : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError) -> * mut Result_ok_String_err_dash_spv_crypto_keys_KeyError { ferment :: boxed (Result_ok_String_err_dash_spv_crypto_keys_KeyError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_String_err_dash_spv_crypto_keys_KeyError_destroy (ffi : * mut Result_ok_String_err_dash_spv_crypto_keys_KeyError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_versioned_feature_core_FeatureVersion { pub count : usize , pub values : * mut * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion } impl ferment :: FFIConversionFrom < Vec < versioned_feature_core :: FeatureVersion > > for Vec_versioned_feature_core_FeatureVersion { unsafe fn ffi_from_const (ffi : * const Vec_versioned_feature_core_FeatureVersion) -> Vec < versioned_feature_core :: FeatureVersion > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < versioned_feature_core :: FeatureVersion > > for Vec_versioned_feature_core_FeatureVersion { unsafe fn ffi_to_const (obj : Vec < versioned_feature_core :: FeatureVersion >) -> * const Vec_versioned_feature_core_FeatureVersion { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_versioned_feature_core_FeatureVersion { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_versioned_feature_core_FeatureVersion_ctor (count : usize , values : * mut * mut dash_spv_apple_bindings :: custom :: versioned_feature_core :: versioned_feature_core_FeatureVersion) -> * mut Vec_versioned_feature_core_FeatureVersion { ferment :: boxed (Vec_versioned_feature_core_FeatureVersion { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_versioned_feature_core_FeatureVersion_destroy (ffi : * mut Vec_versioned_feature_core_FeatureVersion) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry } impl ferment :: FFIConversionFrom < Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > for Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { unsafe fn ffi_from_const (ffi : * const Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > for Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { unsafe fn ffi_to_const (obj : Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry >) -> * const Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment :: boxed (Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_destroy (ffi : * mut Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error { pub ok : * mut crate :: fermented :: generics :: indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document , pub error : * mut crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error } impl ferment :: FFIConversionFrom < Result < indexmap :: IndexMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > , dash_spv_platform :: error :: Error > > for Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error { unsafe fn ffi_from_const (ffi : * const Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error) -> Result < indexmap :: IndexMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > , dash_spv_platform :: error :: Error > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | < crate :: fermented :: generics :: indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document as ferment :: FFIConversionFrom < indexmap :: IndexMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > >> :: ffi_from (o) , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error as ferment :: FFIConversionFrom < dash_spv_platform :: error :: Error >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < indexmap :: IndexMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > , dash_spv_platform :: error :: Error > > for Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error { unsafe fn ffi_to_const (obj : Result < indexmap :: IndexMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > , dash_spv_platform :: error :: Error >) -> * const Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: FFIConversionTo :: ffi_to (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error_ctor (ok : * mut crate :: fermented :: generics :: indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document , error : * mut crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error) -> * mut Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error { ferment :: boxed (Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error_destroy (ffi : * mut Result_ok_indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_err_dash_spv_platform_error_Error) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dash_spv_masternode_processor_models_masternode_list_MasternodeList { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList } impl ferment :: FFIConversionFrom < Vec < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList > > for Vec_dash_spv_masternode_processor_models_masternode_list_MasternodeList { unsafe fn ffi_from_const (ffi : * const Vec_dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> Vec < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList > > for Vec_dash_spv_masternode_processor_models_masternode_list_MasternodeList { unsafe fn ffi_to_const (obj : Vec < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList >) -> * const Vec_dash_spv_masternode_processor_models_masternode_list_MasternodeList { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dash_spv_masternode_processor_models_masternode_list_MasternodeList { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_masternode_processor_models_masternode_list_MasternodeList_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> * mut Vec_dash_spv_masternode_processor_models_masternode_list_MasternodeList { ferment :: boxed (Vec_dash_spv_masternode_processor_models_masternode_list_MasternodeList { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_masternode_processor_models_masternode_list_MasternodeList_destroy (ffi : * mut Vec_dash_spv_masternode_processor_models_masternode_list_MasternodeList) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_RwLock_std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser { pub obj : * mut crate :: fermented :: generics :: std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser } impl ferment :: FFIConversionFrom < std :: sync :: RwLock < std :: collections :: BTreeMap < platform_value :: types :: identifier :: Identifier , dash_spv_platform :: models :: transient_dashpay_user :: TransientDashPayUser > > > for std_sync_RwLock_std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser { unsafe fn ffi_from_const (ffi : * const std_sync_RwLock_std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser) -> std :: sync :: RwLock < std :: collections :: BTreeMap < platform_value :: types :: identifier :: Identifier , dash_spv_platform :: models :: transient_dashpay_user :: TransientDashPayUser > > { let ffi_ref = & * ffi ; std :: sync :: RwLock :: new (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . obj)) } } impl ferment :: FFIConversionTo < std :: sync :: RwLock < std :: collections :: BTreeMap < platform_value :: types :: identifier :: Identifier , dash_spv_platform :: models :: transient_dashpay_user :: TransientDashPayUser > > > for std_sync_RwLock_std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser { unsafe fn ffi_to_const (obj : std :: sync :: RwLock < std :: collections :: BTreeMap < platform_value :: types :: identifier :: Identifier , dash_spv_platform :: models :: transient_dashpay_user :: TransientDashPayUser > >) -> * const std_sync_RwLock_std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser { ferment :: boxed (Self { obj : ferment :: FFIConversionTo :: ffi_to (obj . into_inner () . expect ("Err")) }) } } impl Drop for std_sync_RwLock_std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser_ctor (obj : * mut crate :: fermented :: generics :: std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser) -> * mut std_sync_RwLock_std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser { ferment :: boxed (std_sync_RwLock_std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser_destroy (ffi : * mut std_sync_RwLock_std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dash_spv_crypto_llmq_entry_LLMQEntry { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry } impl ferment :: FFIConversionFrom < Vec < dash_spv_crypto :: llmq :: entry :: LLMQEntry > > for Vec_dash_spv_crypto_llmq_entry_LLMQEntry { unsafe fn ffi_from_const (ffi : * const Vec_dash_spv_crypto_llmq_entry_LLMQEntry) -> Vec < dash_spv_crypto :: llmq :: entry :: LLMQEntry > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < dash_spv_crypto :: llmq :: entry :: LLMQEntry > > for Vec_dash_spv_crypto_llmq_entry_LLMQEntry { unsafe fn ffi_to_const (obj : Vec < dash_spv_crypto :: llmq :: entry :: LLMQEntry >) -> * const Vec_dash_spv_crypto_llmq_entry_LLMQEntry { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dash_spv_crypto_llmq_entry_LLMQEntry { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_crypto_llmq_entry_LLMQEntry_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut Vec_dash_spv_crypto_llmq_entry_LLMQEntry { ferment :: boxed (Vec_dash_spv_crypto_llmq_entry_LLMQEntry { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_crypto_llmq_entry_LLMQEntry_destroy (ffi : * mut Vec_dash_spv_crypto_llmq_entry_LLMQEntry) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { pub obj : * mut crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError } impl ferment :: FFIConversionFrom < std :: sync :: Arc < dyn Fn (* const std :: os :: raw :: c_void , [u8 ; 32] , dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot) -> Result < bool , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > > > for std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> std :: sync :: Arc < dyn Fn (* const std :: os :: raw :: c_void , [u8 ; 32] , dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot) -> Result < bool , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > > { let ffi_ref = & * ffi ; std :: sync :: Arc :: new (move | o_0 , o_1 , o_2 | unsafe { (& * ffi_ref . obj) . call (o_0 , o_1 , o_2) }) } } impl Drop for std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { fn drop (& mut self) { unsafe { ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_ctor (obj : * mut crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> * mut std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed (std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_destroy (ffi : * mut std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_os_raw_c_void_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { pub obj : * mut crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_os_raw_c_void_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError } impl ferment :: FFIConversionFrom < std :: sync :: Arc < dyn Fn (* const std :: os :: raw :: c_void , [u8 ; 32] , * const std :: os :: raw :: c_void) -> Result < dash_spv_masternode_processor :: common :: block :: MBlock , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > > > for std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_os_raw_c_void_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_os_raw_c_void_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> std :: sync :: Arc < dyn Fn (* const std :: os :: raw :: c_void , [u8 ; 32] , * const std :: os :: raw :: c_void) -> Result < dash_spv_masternode_processor :: common :: block :: MBlock , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > > { let ffi_ref = & * ffi ; std :: sync :: Arc :: new (move | o_0 , o_1 , o_2 | unsafe { (& * ffi_ref . obj) . call (o_0 , o_1 , o_2) }) } } impl Drop for std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_os_raw_c_void_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { fn drop (& mut self) { unsafe { ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_os_raw_c_void_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_ctor (obj : * mut crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_os_raw_c_void_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> * mut std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_os_raw_c_void_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed (std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_os_raw_c_void_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_os_raw_c_void_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_destroy (ffi : * mut std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_os_raw_c_void_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_Vec_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError { pub ok : * mut crate :: fermented :: generics :: Vec_dash_spv_crypto_keys_key_OpaqueKey , pub error : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError } impl ferment :: FFIConversionFrom < Result < Vec < dash_spv_crypto :: keys :: key :: OpaqueKey > , dash_spv_crypto :: keys :: KeyError > > for Result_ok_Vec_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError { unsafe fn ffi_from_const (ffi : * const Result_ok_Vec_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError) -> Result < Vec < dash_spv_crypto :: keys :: key :: OpaqueKey > , dash_spv_crypto :: keys :: KeyError > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | < crate :: fermented :: generics :: Vec_dash_spv_crypto_keys_key_OpaqueKey as ferment :: FFIConversionFrom < Vec < dash_spv_crypto :: keys :: key :: OpaqueKey > >> :: ffi_from (o) , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: KeyError >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < Vec < dash_spv_crypto :: keys :: key :: OpaqueKey > , dash_spv_crypto :: keys :: KeyError > > for Result_ok_Vec_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError { unsafe fn ffi_to_const (obj : Result < Vec < dash_spv_crypto :: keys :: key :: OpaqueKey > , dash_spv_crypto :: keys :: KeyError >) -> * const Result_ok_Vec_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: FFIConversionTo :: ffi_to (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_Vec_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_Vec_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError_ctor (ok : * mut crate :: fermented :: generics :: Vec_dash_spv_crypto_keys_key_OpaqueKey , error : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError) -> * mut Result_ok_Vec_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError { ferment :: boxed (Result_ok_Vec_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_Vec_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError_destroy (ffi : * mut Result_ok_Vec_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Arr_u8_37 { pub count : usize , pub values : * mut u8 } impl ferment :: FFIConversionFrom < [u8 ; 37] > for Arr_u8_37 { unsafe fn ffi_from_const (ffi : * const Arr_u8_37) -> [u8 ; 37] { let ffi_ref = & * ffi ; let vec : Vec < u8 > = ferment :: from_primitive_group (ffi_ref . values , ffi_ref . count) ; vec . try_into () . unwrap () } } impl ferment :: FFIConversionTo < [u8 ; 37] > for Arr_u8_37 { unsafe fn ffi_to_const (obj : [u8 ; 37]) -> * const Arr_u8_37 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_primitive_group (obj . into_iter ()) }) } } impl Drop for Arr_u8_37 { fn drop (& mut self) { unsafe { ferment :: unbox_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Arr_u8_37_ctor (count : usize , values : * mut u8) -> * mut Arr_u8_37 { ferment :: boxed (Arr_u8_37 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Arr_u8_37_destroy (ffi : * mut Arr_u8_37) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { pub obj : * mut crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError } impl ferment :: FFIConversionFrom < std :: sync :: Arc < dyn Fn (* const std :: os :: raw :: c_void , [u8 ; 32]) -> Result < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > > > for std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> std :: sync :: Arc < dyn Fn (* const std :: os :: raw :: c_void , [u8 ; 32]) -> Result < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > > { let ffi_ref = & * ffi ; std :: sync :: Arc :: new (move | o_0 , o_1 | unsafe { (& * ffi_ref . obj) . call (o_0 , o_1) }) } } impl Drop for std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { fn drop (& mut self) { unsafe { ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_ctor (obj : * mut crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> * mut std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed (std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_destroy (ffi : * mut std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { pub obj : * mut crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError } impl ferment :: FFIConversionFrom < std :: sync :: Arc < dyn Fn (* const std :: os :: raw :: c_void , [u8 ; 32]) -> Result < dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > > > for std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> std :: sync :: Arc < dyn Fn (* const std :: os :: raw :: c_void , [u8 ; 32]) -> Result < dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > > { let ffi_ref = & * ffi ; std :: sync :: Arc :: new (move | o_0 , o_1 | unsafe { (& * ffi_ref . obj) . call (o_0 , o_1) }) } } impl Drop for std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { fn drop (& mut self) { unsafe { ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_ctor (obj : * mut crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> * mut std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed (std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_destroy (ffi : * mut std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_std_sync_RwLock_dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue { pub obj : * mut crate :: fermented :: generics :: std_sync_RwLock_dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue } impl ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: RwLock < dash_spv_masternode_processor :: processing :: processor_cache :: RetrievalQueue > > > for std_sync_Arc_std_sync_RwLock_dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_std_sync_RwLock_dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue) -> std :: sync :: Arc < std :: sync :: RwLock < dash_spv_masternode_processor :: processing :: processor_cache :: RetrievalQueue > > { let ffi_ref = & * ffi ; std :: sync :: Arc :: new (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . obj)) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < std :: sync :: RwLock < dash_spv_masternode_processor :: processing :: processor_cache :: RetrievalQueue > > > for std_sync_Arc_std_sync_RwLock_dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue { unsafe fn ffi_to_const (obj : std :: sync :: Arc < std :: sync :: RwLock < dash_spv_masternode_processor :: processing :: processor_cache :: RetrievalQueue > >) -> * const std_sync_Arc_std_sync_RwLock_dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue { ferment :: boxed (Self { obj : ferment :: FFIConversionTo :: ffi_to (std :: sync :: RwLock :: new (obj . read () . expect ("Poisoned") . clone ())) }) } } impl Drop for std_sync_Arc_std_sync_RwLock_dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue_ctor (obj : * mut crate :: fermented :: generics :: std_sync_RwLock_dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue) -> * mut std_sync_Arc_std_sync_RwLock_dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue { ferment :: boxed (std_sync_Arc_std_sync_RwLock_dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue_destroy (ffi : * mut std_sync_Arc_std_sync_RwLock_dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_bool { pub count : usize , pub values : * mut bool } impl ferment :: FFIConversionFrom < Vec < bool > > for Vec_bool { unsafe fn ffi_from_const (ffi : * const Vec_bool) -> Vec < bool > { let ffi_ref = & * ffi ; ferment :: from_primitive_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < bool > > for Vec_bool { unsafe fn ffi_to_const (obj : Vec < bool >) -> * const Vec_bool { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_primitive_group (obj . into_iter ()) }) } } impl Drop for Vec_bool { fn drop (& mut self) { unsafe { ferment :: unbox_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_bool_ctor (count : usize , values : * mut bool) -> * mut Vec_bool { ferment :: boxed (Vec_bool { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_bool_destroy (ffi : * mut Vec_bool) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_u8_86 { pub count : usize , pub values : * mut * mut crate :: fermented :: generics :: Arr_u8_86 } impl ferment :: FFIConversionFrom < Vec < [u8 ; 86] > > for Vec_u8_86 { unsafe fn ffi_from_const (ffi : * const Vec_u8_86) -> Vec < [u8 ; 86] > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < [u8 ; 86] > > for Vec_u8_86 { unsafe fn ffi_to_const (obj : Vec < [u8 ; 86] >) -> * const Vec_u8_86 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_u8_86 { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_u8_86_ctor (count : usize , values : * mut * mut crate :: fermented :: generics :: Arr_u8_86) -> * mut Vec_u8_86 { ferment :: boxed (Vec_u8_86 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_u8_86_destroy (ffi : * mut Vec_u8_86) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { pub obj : * mut crate :: fermented :: generics :: std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot } impl ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot > > > > for std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) -> std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot > > > { let ffi_ref = & * ffi ; std :: sync :: Arc :: new (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . obj)) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot > > > > for std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { unsafe fn ffi_to_const (obj : std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot > > >) -> * const std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { ferment :: boxed (Self { obj : ferment :: FFIConversionTo :: ffi_to (std :: sync :: RwLock :: new (obj . read () . expect ("Poisoned") . clone ())) }) } } impl Drop for std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_ctor (obj : * mut crate :: fermented :: generics :: std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) -> * mut std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { ferment :: boxed (std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_destroy (ffi : * mut std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_dash_spv_platform_contract_manager_ContractsManager { pub obj : * mut dash_spv_platform :: contract :: manager :: ContractsManager } impl ferment :: FFIConversionFrom < std :: sync :: Arc < dash_spv_platform :: contract :: manager :: ContractsManager > > for std_sync_Arc_dash_spv_platform_contract_manager_ContractsManager { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_dash_spv_platform_contract_manager_ContractsManager) -> std :: sync :: Arc < dash_spv_platform :: contract :: manager :: ContractsManager > { let ffi_ref = & * ffi ; std :: sync :: Arc :: from_raw (ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < dash_spv_platform :: contract :: manager :: ContractsManager > > for std_sync_Arc_dash_spv_platform_contract_manager_ContractsManager { unsafe fn ffi_to_const (obj : std :: sync :: Arc < dash_spv_platform :: contract :: manager :: ContractsManager >) -> * const std_sync_Arc_dash_spv_platform_contract_manager_ContractsManager { ferment :: boxed (Self { obj : std :: sync :: Arc :: into_raw (obj) . cast_mut () }) } } impl Drop for std_sync_Arc_dash_spv_platform_contract_manager_ContractsManager { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dash_spv_platform_contract_manager_ContractsManager_ctor (obj : * mut dash_spv_platform :: contract :: manager :: ContractsManager) -> * mut std_sync_Arc_dash_spv_platform_contract_manager_ContractsManager { ferment :: boxed (std_sync_Arc_dash_spv_platform_contract_manager_ContractsManager { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dash_spv_platform_contract_manager_ContractsManager_destroy (ffi : * mut std_sync_Arc_dash_spv_platform_contract_manager_ContractsManager) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Arr_u8_2 { pub count : usize , pub values : * mut u8 } impl ferment :: FFIConversionFrom < [u8 ; 2] > for Arr_u8_2 { unsafe fn ffi_from_const (ffi : * const Arr_u8_2) -> [u8 ; 2] { let ffi_ref = & * ffi ; let vec : Vec < u8 > = ferment :: from_primitive_group (ffi_ref . values , ffi_ref . count) ; vec . try_into () . unwrap () } } impl ferment :: FFIConversionTo < [u8 ; 2] > for Arr_u8_2 { unsafe fn ffi_to_const (obj : [u8 ; 2]) -> * const Arr_u8_2 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_primitive_group (obj . into_iter ()) }) } } impl Drop for Arr_u8_2 { fn drop (& mut self) { unsafe { ferment :: unbox_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Arr_u8_2_ctor (count : usize , values : * mut u8) -> * mut Arr_u8_2 { ferment :: boxed (Arr_u8_2 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Arr_u8_2_destroy (ffi : * mut Arr_u8_2) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_u8_arr_32_err_dash_spv_crypto_keys_KeyError { pub ok : * mut crate :: fermented :: generics :: Arr_u8_32 , pub error : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError } impl ferment :: FFIConversionFrom < Result < [u8 ; 32] , dash_spv_crypto :: keys :: KeyError > > for Result_ok_u8_arr_32_err_dash_spv_crypto_keys_KeyError { unsafe fn ffi_from_const (ffi : * const Result_ok_u8_arr_32_err_dash_spv_crypto_keys_KeyError) -> Result < [u8 ; 32] , dash_spv_crypto :: keys :: KeyError > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (o) , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: KeyError >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < [u8 ; 32] , dash_spv_crypto :: keys :: KeyError > > for Result_ok_u8_arr_32_err_dash_spv_crypto_keys_KeyError { unsafe fn ffi_to_const (obj : Result < [u8 ; 32] , dash_spv_crypto :: keys :: KeyError >) -> * const Result_ok_u8_arr_32_err_dash_spv_crypto_keys_KeyError { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: FFIConversionTo :: ffi_to (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_u8_arr_32_err_dash_spv_crypto_keys_KeyError { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_u8_arr_32_err_dash_spv_crypto_keys_KeyError_ctor (ok : * mut crate :: fermented :: generics :: Arr_u8_32 , error : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError) -> * mut Result_ok_u8_arr_32_err_dash_spv_crypto_keys_KeyError { ferment :: boxed (Result_ok_u8_arr_32_err_dash_spv_crypto_keys_KeyError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_u8_arr_32_err_dash_spv_crypto_keys_KeyError_destroy (ffi : * mut Result_ok_u8_arr_32_err_dash_spv_crypto_keys_KeyError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_ { caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , * mut crate :: fermented :: generics :: Arr_u8_32) } impl Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_ { pub unsafe fn call (& self , o_0 : * const std :: os :: raw :: c_void , o_1 : [u8 ; 32]) { let ffi_result = (self . caller) (o_0 , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (o_1)) ; ffi_result } } unsafe impl Send for Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_ { } unsafe impl Sync for Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_ { } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN__ctor (caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , * mut crate :: fermented :: generics :: Arr_u8_32)) -> * mut Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_ { ferment :: boxed (Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_ { caller }) } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN__destroy (ffi : * mut Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index { pub count : usize , pub keys : * mut * mut std :: os :: raw :: c_char , pub values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_Index } impl ferment :: FFIConversionFrom < std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index :: Index > > for std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index) -> std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index :: Index > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (o) , | o | < crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_Index as ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: index :: Index >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index :: Index > > for std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index :: Index >) -> * const std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_complex_group (obj . keys () . cloned ()) , values : ferment :: to_complex_group (obj . values () . cloned ()) }) } } impl Drop for std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr_composer (self . keys , self . count , ferment :: unbox_string) ; ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index_ctor (count : usize , keys : * mut * mut std :: os :: raw :: c_char , values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_Index) -> * mut std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index { ferment :: boxed (std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index_destroy (ffi : * mut std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_Index) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_dash_spv_platform_document_contact_request_ContactRequestManager { pub obj : * mut dash_spv_platform :: document :: contact_request :: ContactRequestManager } impl ferment :: FFIConversionFrom < std :: sync :: Arc < dash_spv_platform :: document :: contact_request :: ContactRequestManager > > for std_sync_Arc_dash_spv_platform_document_contact_request_ContactRequestManager { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_dash_spv_platform_document_contact_request_ContactRequestManager) -> std :: sync :: Arc < dash_spv_platform :: document :: contact_request :: ContactRequestManager > { let ffi_ref = & * ffi ; std :: sync :: Arc :: from_raw (ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < dash_spv_platform :: document :: contact_request :: ContactRequestManager > > for std_sync_Arc_dash_spv_platform_document_contact_request_ContactRequestManager { unsafe fn ffi_to_const (obj : std :: sync :: Arc < dash_spv_platform :: document :: contact_request :: ContactRequestManager >) -> * const std_sync_Arc_dash_spv_platform_document_contact_request_ContactRequestManager { ferment :: boxed (Self { obj : std :: sync :: Arc :: into_raw (obj) . cast_mut () }) } } impl Drop for std_sync_Arc_dash_spv_platform_document_contact_request_ContactRequestManager { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dash_spv_platform_document_contact_request_ContactRequestManager_ctor (obj : * mut dash_spv_platform :: document :: contact_request :: ContactRequestManager) -> * mut std_sync_Arc_dash_spv_platform_document_contact_request_ContactRequestManager { ferment :: boxed (std_sync_Arc_dash_spv_platform_document_contact_request_ContactRequestManager { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dash_spv_platform_document_contact_request_ContactRequestManager_destroy (ffi : * mut std_sync_Arc_dash_spv_platform_document_contact_request_ContactRequestManager) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { pub ok : * mut crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity , pub error : * mut crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error } impl ferment :: FFIConversionFrom < Result < std :: collections :: BTreeMap < [u8 ; 20] , dpp :: identity :: identity :: Identity > , dash_spv_platform :: error :: Error > > for Result_ok_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { unsafe fn ffi_from_const (ffi : * const Result_ok_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error) -> Result < std :: collections :: BTreeMap < [u8 ; 20] , dpp :: identity :: identity :: Identity > , dash_spv_platform :: error :: Error > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | < crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < [u8 ; 20] , dpp :: identity :: identity :: Identity > >> :: ffi_from (o) , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error as ferment :: FFIConversionFrom < dash_spv_platform :: error :: Error >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < std :: collections :: BTreeMap < [u8 ; 20] , dpp :: identity :: identity :: Identity > , dash_spv_platform :: error :: Error > > for Result_ok_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { unsafe fn ffi_to_const (obj : Result < std :: collections :: BTreeMap < [u8 ; 20] , dpp :: identity :: identity :: Identity > , dash_spv_platform :: error :: Error >) -> * const Result_ok_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: FFIConversionTo :: ffi_to (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error_ctor (ok : * mut crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity , error : * mut crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error) -> * mut Result_ok_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { ferment :: boxed (Result_ok_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error_destroy (ffi : * mut Result_ok_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_u32 { pub obj : * mut crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_u32 } impl ferment :: FFIConversionFrom < std :: sync :: Arc < dyn Fn (* const std :: os :: raw :: c_void , [u8 ; 32]) -> u32 > > for std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_u32 { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_u32) -> std :: sync :: Arc < dyn Fn (* const std :: os :: raw :: c_void , [u8 ; 32]) -> u32 > { let ffi_ref = & * ffi ; std :: sync :: Arc :: new (move | o_0 , o_1 | unsafe { (& * ffi_ref . obj) . call (o_0 , o_1) }) } } impl Drop for std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_u32 { fn drop (& mut self) { unsafe { ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_u32_ctor (obj : * mut crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_u32) -> * mut std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_u32 { ferment :: boxed (std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_u32 { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_u32_destroy (ffi : * mut std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_u32) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_dash_spv_masternode_processor_processing_processor_MasternodeProcessor { pub obj : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor } impl ferment :: FFIConversionFrom < std :: sync :: Arc < dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor > > for std_sync_Arc_dash_spv_masternode_processor_processing_processor_MasternodeProcessor { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_dash_spv_masternode_processor_processing_processor_MasternodeProcessor) -> std :: sync :: Arc < dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor > { let ffi_ref = & * ffi ; std :: sync :: Arc :: from_raw (ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor > > for std_sync_Arc_dash_spv_masternode_processor_processing_processor_MasternodeProcessor { unsafe fn ffi_to_const (obj : std :: sync :: Arc < dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor >) -> * const std_sync_Arc_dash_spv_masternode_processor_processing_processor_MasternodeProcessor { ferment :: boxed (Self { obj : std :: sync :: Arc :: into_raw (obj) . cast_mut () }) } } impl Drop for std_sync_Arc_dash_spv_masternode_processor_processing_processor_MasternodeProcessor { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dash_spv_masternode_processor_processing_processor_MasternodeProcessor_ctor (obj : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor) -> * mut std_sync_Arc_dash_spv_masternode_processor_processing_processor_MasternodeProcessor { ferment :: boxed (std_sync_Arc_dash_spv_masternode_processor_processing_processor_MasternodeProcessor { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dash_spv_masternode_processor_processing_processor_MasternodeProcessor_destroy (ffi : * mut std_sync_Arc_dash_spv_masternode_processor_processing_processor_MasternodeProcessor) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dpp_errors_consensus_consensus_error_ConsensusError { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dpp :: errors :: consensus :: consensus_error :: dpp_errors_consensus_consensus_error_ConsensusError } impl ferment :: FFIConversionFrom < Vec < dpp :: errors :: consensus :: consensus_error :: ConsensusError > > for Vec_dpp_errors_consensus_consensus_error_ConsensusError { unsafe fn ffi_from_const (ffi : * const Vec_dpp_errors_consensus_consensus_error_ConsensusError) -> Vec < dpp :: errors :: consensus :: consensus_error :: ConsensusError > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < dpp :: errors :: consensus :: consensus_error :: ConsensusError > > for Vec_dpp_errors_consensus_consensus_error_ConsensusError { unsafe fn ffi_to_const (obj : Vec < dpp :: errors :: consensus :: consensus_error :: ConsensusError >) -> * const Vec_dpp_errors_consensus_consensus_error_ConsensusError { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dpp_errors_consensus_consensus_error_ConsensusError { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_errors_consensus_consensus_error_ConsensusError_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dpp :: errors :: consensus :: consensus_error :: dpp_errors_consensus_consensus_error_ConsensusError) -> * mut Vec_dpp_errors_consensus_consensus_error_ConsensusError { ferment :: boxed (Vec_dpp_errors_consensus_consensus_error_ConsensusError { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_errors_consensus_consensus_error_ConsensusError_destroy (ffi : * mut Vec_dpp_errors_consensus_consensus_error_ConsensusError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { pub obj : * mut crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError } impl ferment :: FFIConversionFrom < std :: sync :: Arc < dyn Fn (* const std :: os :: raw :: c_void , [u8 ; 32]) -> Result < dash_spv_masternode_processor :: common :: block :: MBlock , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > > > for std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> std :: sync :: Arc < dyn Fn (* const std :: os :: raw :: c_void , [u8 ; 32]) -> Result < dash_spv_masternode_processor :: common :: block :: MBlock , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > > { let ffi_ref = & * ffi ; std :: sync :: Arc :: new (move | o_0 , o_1 | unsafe { (& * ffi_ref . obj) . call (o_0 , o_1) }) } } impl Drop for std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { fn drop (& mut self) { unsafe { ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_ctor (obj : * mut crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> * mut std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed (std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_destroy (ffi : * mut std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_dash_sdk_sdk_Sdk { pub obj : * mut dash_sdk :: sdk :: Sdk } impl ferment :: FFIConversionFrom < std :: sync :: Arc < dash_sdk :: sdk :: Sdk > > for std_sync_Arc_dash_sdk_sdk_Sdk { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_dash_sdk_sdk_Sdk) -> std :: sync :: Arc < dash_sdk :: sdk :: Sdk > { let ffi_ref = & * ffi ; std :: sync :: Arc :: from_raw (ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < dash_sdk :: sdk :: Sdk > > for std_sync_Arc_dash_sdk_sdk_Sdk { unsafe fn ffi_to_const (obj : std :: sync :: Arc < dash_sdk :: sdk :: Sdk >) -> * const std_sync_Arc_dash_sdk_sdk_Sdk { ferment :: boxed (Self { obj : std :: sync :: Arc :: into_raw (obj) . cast_mut () }) } } impl Drop for std_sync_Arc_dash_sdk_sdk_Sdk { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dash_sdk_sdk_Sdk_ctor (obj : * mut dash_sdk :: sdk :: Sdk) -> * mut std_sync_Arc_dash_sdk_sdk_Sdk { ferment :: boxed (std_sync_Arc_dash_sdk_sdk_Sdk { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dash_sdk_sdk_Sdk_destroy (ffi : * mut std_sync_Arc_dash_sdk_sdk_Sdk) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType , pub values : * mut * mut crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry } impl ferment :: FFIConversionFrom < std :: collections :: BTreeMap < dash_spv_crypto :: network :: llmq_type :: LLMQType , std :: collections :: BTreeMap < [u8 ; 32] , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > > > for std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> std :: collections :: BTreeMap < dash_spv_crypto :: network :: llmq_type :: LLMQType , std :: collections :: BTreeMap < [u8 ; 32] , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_from (o) , | o | < crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < [u8 ; 32] , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < std :: collections :: BTreeMap < dash_spv_crypto :: network :: llmq_type :: LLMQType , std :: collections :: BTreeMap < [u8 ; 32] , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > > > for std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < dash_spv_crypto :: network :: llmq_type :: LLMQType , std :: collections :: BTreeMap < [u8 ; 32] , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > >) -> * const std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_complex_group (obj . keys () . cloned ()) , values : ferment :: to_complex_group (obj . values () . cloned ()) }) } } impl Drop for std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . keys , self . count) ; ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType , values : * mut * mut crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment :: boxed (std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_destroy (ffi : * mut std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Tuple_platform_value_Value_platform_value_Value { pub o_0 : * mut crate :: fermented :: types :: platform_value :: platform_value_Value , pub o_1 : * mut crate :: fermented :: types :: platform_value :: platform_value_Value } impl ferment :: FFIConversionFrom < (platform_value :: Value , platform_value :: Value) > for Tuple_platform_value_Value_platform_value_Value { unsafe fn ffi_from_const (ffi : * const Tuple_platform_value_Value_platform_value_Value) -> (platform_value :: Value , platform_value :: Value) { let ffi_ref = & * ffi ; (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . o_0) , ferment :: FFIConversionFrom :: ffi_from (ffi_ref . o_1)) } } impl ferment :: FFIConversionTo < (platform_value :: Value , platform_value :: Value) > for Tuple_platform_value_Value_platform_value_Value { unsafe fn ffi_to_const (obj : (platform_value :: Value , platform_value :: Value)) -> * const Tuple_platform_value_Value_platform_value_Value { ferment :: boxed (Self { o_0 : ferment :: FFIConversionTo :: ffi_to (obj . 0) , o_1 : ferment :: FFIConversionTo :: ffi_to (obj . 1) }) } } impl Drop for Tuple_platform_value_Value_platform_value_Value { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . o_0) ; ferment :: unbox_any (self . o_1) ; } } } # [no_mangle] pub unsafe extern "C" fn Tuple_platform_value_Value_platform_value_Value_ctor (o_0 : * mut crate :: fermented :: types :: platform_value :: platform_value_Value , o_1 : * mut crate :: fermented :: types :: platform_value :: platform_value_Value) -> * mut Tuple_platform_value_Value_platform_value_Value { ferment :: boxed (Tuple_platform_value_Value_platform_value_Value { o_0 , o_1 }) } # [no_mangle] pub unsafe extern "C" fn Tuple_platform_value_Value_platform_value_Value_destroy (ffi : * mut Tuple_platform_value_Value_platform_value_Value) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Fn_ARGS_std_os_raw_c_void_u32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , u32) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError , destructor : unsafe extern "C" fn (* mut crate :: fermented :: generics :: Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) } impl Fn_ARGS_std_os_raw_c_void_u32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { pub unsafe fn call (& self , o_0 : * const std :: os :: raw :: c_void , o_1 : u32) -> Result < dash_spv_masternode_processor :: common :: block :: Block , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > { let ffi_result = (self . caller) (o_0 , o_1) ; let result = < crate :: fermented :: generics :: Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError as ferment :: FFIConversionFrom < Result < dash_spv_masternode_processor :: common :: block :: Block , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > >> :: ffi_from (ffi_result) ; (self . destructor) (ffi_result) ; result } } unsafe impl Send for Fn_ARGS_std_os_raw_c_void_u32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { } unsafe impl Sync for Fn_ARGS_std_os_raw_c_void_u32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_u32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_ctor (caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , u32) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError , destructor : unsafe extern "C" fn (* mut crate :: fermented :: generics :: Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError)) -> * mut Fn_ARGS_std_os_raw_c_void_u32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed (Fn_ARGS_std_os_raw_c_void_u32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { caller , destructor }) } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_u32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_destroy (ffi : * mut Fn_ARGS_std_os_raw_c_void_u32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { pub count : usize , pub keys : * mut * mut crate :: fermented :: generics :: Arr_u8_32 , pub values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry } impl ferment :: FFIConversionFrom < std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > for std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (o) , | o | < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > for std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry >) -> * const std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_complex_group (obj . keys () . cloned ()) , values : ferment :: to_complex_group (obj . values () . cloned ()) }) } } impl Drop for std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . keys , self . count) ; ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_ctor (count : usize , keys : * mut * mut crate :: fermented :: generics :: Arr_u8_32 , values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment :: boxed (std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_destroy (ffi : * mut std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Arr_u8_65 { pub count : usize , pub values : * mut u8 } impl ferment :: FFIConversionFrom < [u8 ; 65] > for Arr_u8_65 { unsafe fn ffi_from_const (ffi : * const Arr_u8_65) -> [u8 ; 65] { let ffi_ref = & * ffi ; let vec : Vec < u8 > = ferment :: from_primitive_group (ffi_ref . values , ffi_ref . count) ; vec . try_into () . unwrap () } } impl ferment :: FFIConversionTo < [u8 ; 65] > for Arr_u8_65 { unsafe fn ffi_to_const (obj : [u8 ; 65]) -> * const Arr_u8_65 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_primitive_group (obj . into_iter ()) }) } } impl Drop for Arr_u8_65 { fn drop (& mut self) { unsafe { ferment :: unbox_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Arr_u8_65_ctor (count : usize , values : * mut u8) -> * mut Arr_u8_65 { ferment :: boxed (Arr_u8_65 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Arr_u8_65_destroy (ffi : * mut Arr_u8_65) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_platform_value_Value { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: platform_value :: platform_value_Value } impl ferment :: FFIConversionFrom < Vec < platform_value :: Value > > for Vec_platform_value_Value { unsafe fn ffi_from_const (ffi : * const Vec_platform_value_Value) -> Vec < platform_value :: Value > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < platform_value :: Value > > for Vec_platform_value_Value { unsafe fn ffi_to_const (obj : Vec < platform_value :: Value >) -> * const Vec_platform_value_Value { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_platform_value_Value { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_platform_value_Value_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: platform_value :: platform_value_Value) -> * mut Vec_platform_value_Value { ferment :: boxed (Vec_platform_value_Value { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_platform_value_Value_destroy (ffi : * mut Vec_platform_value_Value) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u8_arr_96 { pub obj : * mut crate :: fermented :: generics :: std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u8_arr_96 } impl ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: BTreeMap < [u8 ; 32] , [u8 ; 96] > > > > for std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u8_arr_96 { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u8_arr_96) -> std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: BTreeMap < [u8 ; 32] , [u8 ; 96] > > > { let ffi_ref = & * ffi ; std :: sync :: Arc :: new (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . obj)) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: BTreeMap < [u8 ; 32] , [u8 ; 96] > > > > for std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u8_arr_96 { unsafe fn ffi_to_const (obj : std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: BTreeMap < [u8 ; 32] , [u8 ; 96] > > >) -> * const std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u8_arr_96 { ferment :: boxed (Self { obj : ferment :: FFIConversionTo :: ffi_to (std :: sync :: RwLock :: new (obj . read () . expect ("Poisoned") . clone ())) }) } } impl Drop for std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u8_arr_96 { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u8_arr_96_ctor (obj : * mut crate :: fermented :: generics :: std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u8_arr_96) -> * mut std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u8_arr_96 { ferment :: boxed (std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u8_arr_96 { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u8_arr_96_destroy (ffi : * mut std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u8_arr_96) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { pub obj : * mut crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot } impl ferment :: FFIConversionFrom < std :: sync :: RwLock < std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot > > > for std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { unsafe fn ffi_from_const (ffi : * const std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) -> std :: sync :: RwLock < std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot > > { let ffi_ref = & * ffi ; std :: sync :: RwLock :: new (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . obj)) } } impl ferment :: FFIConversionTo < std :: sync :: RwLock < std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot > > > for std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { unsafe fn ffi_to_const (obj : std :: sync :: RwLock < std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot > >) -> * const std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { ferment :: boxed (Self { obj : ferment :: FFIConversionTo :: ffi_to (obj . into_inner () . expect ("Err")) }) } } impl Drop for std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_ctor (obj : * mut crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) -> * mut std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { ferment :: boxed (std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_destroy (ffi : * mut std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct indexmap_IndexMap_u32_dpp_identity_identity_Identity { pub count : usize , pub keys : * mut u32 , pub values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity } impl ferment :: FFIConversionFrom < indexmap :: IndexMap < u32 , dpp :: identity :: identity :: Identity > > for indexmap_IndexMap_u32_dpp_identity_identity_Identity { unsafe fn ffi_from_const (ffi : * const indexmap_IndexMap_u32_dpp_identity_identity_Identity) -> indexmap :: IndexMap < u32 , dpp :: identity :: identity :: Identity > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | o , | o | < crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity as ferment :: FFIConversionFrom < dpp :: identity :: identity :: Identity >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < indexmap :: IndexMap < u32 , dpp :: identity :: identity :: Identity > > for indexmap_IndexMap_u32_dpp_identity_identity_Identity { unsafe fn ffi_to_const (obj : indexmap :: IndexMap < u32 , dpp :: identity :: identity :: Identity >) -> * const indexmap_IndexMap_u32_dpp_identity_identity_Identity { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_primitive_group (obj . keys () . cloned ()) , values : ferment :: to_complex_group (obj . values () . cloned ()) }) } } impl Drop for indexmap_IndexMap_u32_dpp_identity_identity_Identity { fn drop (& mut self) { unsafe { ferment :: unbox_vec_ptr (self . keys , self . count) ; ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn indexmap_IndexMap_u32_dpp_identity_identity_Identity_ctor (count : usize , keys : * mut u32 , values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity) -> * mut indexmap_IndexMap_u32_dpp_identity_identity_Identity { ferment :: boxed (indexmap_IndexMap_u32_dpp_identity_identity_Identity { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn indexmap_IndexMap_u32_dpp_identity_identity_Identity_destroy (ffi : * mut indexmap_IndexMap_u32_dpp_identity_identity_Identity) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult } impl ferment :: FFIConversionFrom < Vec < dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult > > for Vec_dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { unsafe fn ffi_from_const (ffi : * const Vec_dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> Vec < dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult > > for Vec_dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { unsafe fn ffi_to_const (obj : Vec < dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult >) -> * const Vec_dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> * mut Vec_dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { ferment :: boxed (Vec_dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_destroy (ffi : * mut Vec_dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_indexmap_IndexMap_u32_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { pub ok : * mut crate :: fermented :: generics :: indexmap_IndexMap_u32_dpp_identity_identity_Identity , pub error : * mut crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error } impl ferment :: FFIConversionFrom < Result < indexmap :: IndexMap < u32 , dpp :: identity :: identity :: Identity > , dash_spv_platform :: error :: Error > > for Result_ok_indexmap_IndexMap_u32_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { unsafe fn ffi_from_const (ffi : * const Result_ok_indexmap_IndexMap_u32_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error) -> Result < indexmap :: IndexMap < u32 , dpp :: identity :: identity :: Identity > , dash_spv_platform :: error :: Error > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | < crate :: fermented :: generics :: indexmap_IndexMap_u32_dpp_identity_identity_Identity as ferment :: FFIConversionFrom < indexmap :: IndexMap < u32 , dpp :: identity :: identity :: Identity > >> :: ffi_from (o) , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error as ferment :: FFIConversionFrom < dash_spv_platform :: error :: Error >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < indexmap :: IndexMap < u32 , dpp :: identity :: identity :: Identity > , dash_spv_platform :: error :: Error > > for Result_ok_indexmap_IndexMap_u32_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { unsafe fn ffi_to_const (obj : Result < indexmap :: IndexMap < u32 , dpp :: identity :: identity :: Identity > , dash_spv_platform :: error :: Error >) -> * const Result_ok_indexmap_IndexMap_u32_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: FFIConversionTo :: ffi_to (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_indexmap_IndexMap_u32_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_indexmap_IndexMap_u32_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error_ctor (ok : * mut crate :: fermented :: generics :: indexmap_IndexMap_u32_dpp_identity_identity_Identity , error : * mut crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error) -> * mut Result_ok_indexmap_IndexMap_u32_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { ferment :: boxed (Result_ok_indexmap_IndexMap_u32_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_indexmap_IndexMap_u32_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error_destroy (ffi : * mut Result_ok_indexmap_IndexMap_u32_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_RwLock_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity { pub obj : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity } impl ferment :: FFIConversionFrom < std :: sync :: RwLock < std :: collections :: BTreeMap < String , std :: collections :: BTreeMap < [u8 ; 20] , dpp :: identity :: identity :: Identity > > > > for std_sync_RwLock_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity { unsafe fn ffi_from_const (ffi : * const std_sync_RwLock_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity) -> std :: sync :: RwLock < std :: collections :: BTreeMap < String , std :: collections :: BTreeMap < [u8 ; 20] , dpp :: identity :: identity :: Identity > > > { let ffi_ref = & * ffi ; std :: sync :: RwLock :: new (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . obj)) } } impl ferment :: FFIConversionTo < std :: sync :: RwLock < std :: collections :: BTreeMap < String , std :: collections :: BTreeMap < [u8 ; 20] , dpp :: identity :: identity :: Identity > > > > for std_sync_RwLock_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity { unsafe fn ffi_to_const (obj : std :: sync :: RwLock < std :: collections :: BTreeMap < String , std :: collections :: BTreeMap < [u8 ; 20] , dpp :: identity :: identity :: Identity > > >) -> * const std_sync_RwLock_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity { ferment :: boxed (Self { obj : ferment :: FFIConversionTo :: ffi_to (obj . into_inner () . expect ("Err")) }) } } impl Drop for std_sync_RwLock_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_ctor (obj : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity) -> * mut std_sync_RwLock_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity { ferment :: boxed (std_sync_RwLock_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_destroy (ffi : * mut std_sync_RwLock_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_String { pub count : usize , pub values : * mut * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < Vec < String > > for Vec_String { unsafe fn ffi_from_const (ffi : * const Vec_String) -> Vec < String > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < String > > for Vec_String { unsafe fn ffi_to_const (obj : Vec < String >) -> * const Vec_String { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_String { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr_composer (self . values , self . count , ferment :: unbox_string) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_String_ctor (count : usize , values : * mut * mut std :: os :: raw :: c_char) -> * mut Vec_String { ferment :: boxed (Vec_String { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_String_destroy (ffi : * mut Vec_String) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_u8 { pub count : usize , pub values : * mut u8 } impl ferment :: FFIConversionFrom < Vec < u8 > > for Vec_u8 { unsafe fn ffi_from_const (ffi : * const Vec_u8) -> Vec < u8 > { let ffi_ref = & * ffi ; ferment :: from_primitive_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < u8 > > for Vec_u8 { unsafe fn ffi_to_const (obj : Vec < u8 >) -> * const Vec_u8 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_primitive_group (obj . into_iter ()) }) } } impl Drop for Vec_u8 { fn drop (& mut self) { unsafe { ferment :: unbox_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_u8_ctor (count : usize , values : * mut u8) -> * mut Vec_u8 { ferment :: boxed (Vec_u8 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_u8_destroy (ffi : * mut Vec_u8) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Arr_u8_4 { pub count : usize , pub values : * mut u8 } impl ferment :: FFIConversionFrom < [u8 ; 4] > for Arr_u8_4 { unsafe fn ffi_from_const (ffi : * const Arr_u8_4) -> [u8 ; 4] { let ffi_ref = & * ffi ; let vec : Vec < u8 > = ferment :: from_primitive_group (ffi_ref . values , ffi_ref . count) ; vec . try_into () . unwrap () } } impl ferment :: FFIConversionTo < [u8 ; 4] > for Arr_u8_4 { unsafe fn ffi_to_const (obj : [u8 ; 4]) -> * const Arr_u8_4 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_primitive_group (obj . into_iter ()) }) } } impl Drop for Arr_u8_4 { fn drop (& mut self) { unsafe { ferment :: unbox_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Arr_u8_4_ctor (count : usize , values : * mut u8) -> * mut Arr_u8_4 { ferment :: boxed (Arr_u8_4 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Arr_u8_4_destroy (ffi : * mut Arr_u8_4) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_std_sync_RwLock_std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry { pub obj : * mut crate :: fermented :: generics :: std_sync_RwLock_std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry } impl ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: HashSet < dash_spv_crypto :: llmq :: entry :: LLMQEntry > > > > for std_sync_Arc_std_sync_RwLock_std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_std_sync_RwLock_std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry) -> std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: HashSet < dash_spv_crypto :: llmq :: entry :: LLMQEntry > > > { let ffi_ref = & * ffi ; std :: sync :: Arc :: new (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . obj)) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: HashSet < dash_spv_crypto :: llmq :: entry :: LLMQEntry > > > > for std_sync_Arc_std_sync_RwLock_std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry { unsafe fn ffi_to_const (obj : std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: HashSet < dash_spv_crypto :: llmq :: entry :: LLMQEntry > > >) -> * const std_sync_Arc_std_sync_RwLock_std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry { ferment :: boxed (Self { obj : ferment :: FFIConversionTo :: ffi_to (std :: sync :: RwLock :: new (obj . read () . expect ("Poisoned") . clone ())) }) } } impl Drop for std_sync_Arc_std_sync_RwLock_std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry_ctor (obj : * mut crate :: fermented :: generics :: std_sync_RwLock_std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut std_sync_Arc_std_sync_RwLock_std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry { ferment :: boxed (std_sync_Arc_std_sync_RwLock_std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry_destroy (ffi : * mut std_sync_Arc_std_sync_RwLock_std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { pub ok : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity , pub error : * mut crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error } impl ferment :: FFIConversionFrom < Result < std :: collections :: BTreeMap < String , std :: collections :: BTreeMap < [u8 ; 20] , dpp :: identity :: identity :: Identity > > , dash_spv_platform :: error :: Error > > for Result_ok_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { unsafe fn ffi_from_const (ffi : * const Result_ok_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error) -> Result < std :: collections :: BTreeMap < String , std :: collections :: BTreeMap < [u8 ; 20] , dpp :: identity :: identity :: Identity > > , dash_spv_platform :: error :: Error > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | < crate :: fermented :: generics :: std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < String , std :: collections :: BTreeMap < [u8 ; 20] , dpp :: identity :: identity :: Identity > > >> :: ffi_from (o) , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error as ferment :: FFIConversionFrom < dash_spv_platform :: error :: Error >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < std :: collections :: BTreeMap < String , std :: collections :: BTreeMap < [u8 ; 20] , dpp :: identity :: identity :: Identity > > , dash_spv_platform :: error :: Error > > for Result_ok_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { unsafe fn ffi_to_const (obj : Result < std :: collections :: BTreeMap < String , std :: collections :: BTreeMap < [u8 ; 20] , dpp :: identity :: identity :: Identity > > , dash_spv_platform :: error :: Error >) -> * const Result_ok_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: FFIConversionTo :: ffi_to (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error_ctor (ok : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity , error : * mut crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error) -> * mut Result_ok_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { ferment :: boxed (Result_ok_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error_destroy (ffi : * mut Result_ok_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_err_dash_spv_platform_error_Error) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_ { pub obj : * mut crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_ } impl ferment :: FFIConversionFrom < std :: sync :: Arc < dyn Fn (* const std :: os :: raw :: c_void , [u8 ; 32]) > > for std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_ { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_) -> std :: sync :: Arc < dyn Fn (* const std :: os :: raw :: c_void , [u8 ; 32]) > { let ffi_ref = & * ffi ; std :: sync :: Arc :: new (move | o_0 , o_1 | unsafe { (& * ffi_ref . obj) . call (o_0 , o_1) }) } } impl Drop for std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_ { fn drop (& mut self) { unsafe { ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN__ctor (obj : * mut crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_) -> * mut std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_ { ferment :: boxed (std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_ { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN__destroy (ffi : * mut std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_RwLock_u8_32 { pub obj : * mut crate :: fermented :: generics :: Arr_u8_32 } impl ferment :: FFIConversionFrom < std :: sync :: RwLock < [u8 ; 32] > > for std_sync_RwLock_u8_32 { unsafe fn ffi_from_const (ffi : * const std_sync_RwLock_u8_32) -> std :: sync :: RwLock < [u8 ; 32] > { let ffi_ref = & * ffi ; std :: sync :: RwLock :: new (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . obj)) } } impl ferment :: FFIConversionTo < std :: sync :: RwLock < [u8 ; 32] > > for std_sync_RwLock_u8_32 { unsafe fn ffi_to_const (obj : std :: sync :: RwLock < [u8 ; 32] >) -> * const std_sync_RwLock_u8_32 { ferment :: boxed (Self { obj : ferment :: FFIConversionTo :: ffi_to (obj . into_inner () . expect ("Err")) }) } } impl Drop for std_sync_RwLock_u8_32 { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_u8_32_ctor (obj : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut std_sync_RwLock_u8_32 { ferment :: boxed (std_sync_RwLock_u8_32 { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_u8_32_destroy (ffi : * mut std_sync_RwLock_u8_32) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot } impl ferment :: FFIConversionFrom < Vec < dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot > > for Vec_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { unsafe fn ffi_from_const (ffi : * const Vec_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) -> Vec < dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot > > for Vec_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { unsafe fn ffi_to_const (obj : Vec < dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot >) -> * const Vec_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) -> * mut Vec_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { ferment :: boxed (Vec_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_destroy (ffi : * mut Vec_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { pub obj : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry } impl ferment :: FFIConversionFrom < std :: sync :: RwLock < std :: collections :: BTreeMap < dash_spv_crypto :: network :: llmq_type :: LLMQType , std :: collections :: BTreeMap < dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > > > > for std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { unsafe fn ffi_from_const (ffi : * const std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> std :: sync :: RwLock < std :: collections :: BTreeMap < dash_spv_crypto :: network :: llmq_type :: LLMQType , std :: collections :: BTreeMap < dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > > > { let ffi_ref = & * ffi ; std :: sync :: RwLock :: new (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . obj)) } } impl ferment :: FFIConversionTo < std :: sync :: RwLock < std :: collections :: BTreeMap < dash_spv_crypto :: network :: llmq_type :: LLMQType , std :: collections :: BTreeMap < dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > > > > for std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { unsafe fn ffi_to_const (obj : std :: sync :: RwLock < std :: collections :: BTreeMap < dash_spv_crypto :: network :: llmq_type :: LLMQType , std :: collections :: BTreeMap < dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > > >) -> * const std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment :: boxed (Self { obj : ferment :: FFIConversionTo :: ffi_to (obj . into_inner () . expect ("Err")) }) } } impl Drop for std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_ctor (obj : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment :: boxed (std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_destroy (ffi : * mut std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_bool_std_os_raw_c_void_RTRN_ { pub obj : * mut crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_bool_std_os_raw_c_void_RTRN_ } impl ferment :: FFIConversionFrom < std :: sync :: Arc < dyn Fn (* const std :: os :: raw :: c_void , bool , * const std :: os :: raw :: c_void) > > for std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_bool_std_os_raw_c_void_RTRN_ { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_bool_std_os_raw_c_void_RTRN_) -> std :: sync :: Arc < dyn Fn (* const std :: os :: raw :: c_void , bool , * const std :: os :: raw :: c_void) > { let ffi_ref = & * ffi ; std :: sync :: Arc :: new (move | o_0 , o_1 , o_2 | unsafe { (& * ffi_ref . obj) . call (o_0 , o_1 , o_2) }) } } impl Drop for std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_bool_std_os_raw_c_void_RTRN_ { fn drop (& mut self) { unsafe { ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_bool_std_os_raw_c_void_RTRN__ctor (obj : * mut crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_bool_std_os_raw_c_void_RTRN_) -> * mut std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_bool_std_os_raw_c_void_RTRN_ { ferment :: boxed (std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_bool_std_os_raw_c_void_RTRN_ { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_bool_std_os_raw_c_void_RTRN__destroy (ffi : * mut std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_bool_std_os_raw_c_void_RTRN_) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError { pub ok : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , pub error : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError } impl ferment :: FFIConversionFrom < Result < dash_spv_crypto :: keys :: key :: OpaqueKey , dash_spv_crypto :: keys :: KeyError > > for Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError { unsafe fn ffi_from_const (ffi : * const Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError) -> Result < dash_spv_crypto :: keys :: key :: OpaqueKey , dash_spv_crypto :: keys :: KeyError > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | < crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: key :: OpaqueKey >> :: ffi_from (o) , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: KeyError >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: key :: OpaqueKey , dash_spv_crypto :: keys :: KeyError > > for Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError { unsafe fn ffi_to_const (obj : Result < dash_spv_crypto :: keys :: key :: OpaqueKey , dash_spv_crypto :: keys :: KeyError >) -> * const Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: FFIConversionTo :: ffi_to (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError_ctor (ok : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey , error : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError) -> * mut Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError { ferment :: boxed (Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError_destroy (ffi : * mut Result_ok_dash_spv_crypto_keys_key_OpaqueKey_err_dash_spv_crypto_keys_KeyError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch { pub count : usize , pub keys : * mut * mut std :: os :: raw :: c_char , pub values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_ContestedIndexFieldMatch } impl ferment :: FFIConversionFrom < std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index :: ContestedIndexFieldMatch > > for std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch) -> std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index :: ContestedIndexFieldMatch > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (o) , | o | < crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_ContestedIndexFieldMatch as ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: index :: ContestedIndexFieldMatch >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index :: ContestedIndexFieldMatch > > for std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index :: ContestedIndexFieldMatch >) -> * const std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_complex_group (obj . keys () . cloned ()) , values : ferment :: to_complex_group (obj . values () . cloned ()) }) } } impl Drop for std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr_composer (self . keys , self . count , ferment :: unbox_string) ; ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch_ctor (count : usize , keys : * mut * mut std :: os :: raw :: c_char , values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_ContestedIndexFieldMatch) -> * mut std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch { ferment :: boxed (std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch_destroy (ffi : * mut std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_ContestedIndexFieldMatch) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_RwLock_std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry { pub obj : * mut crate :: fermented :: generics :: std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry } impl ferment :: FFIConversionFrom < std :: sync :: RwLock < std :: collections :: HashSet < dash_spv_crypto :: llmq :: entry :: LLMQEntry > > > for std_sync_RwLock_std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry { unsafe fn ffi_from_const (ffi : * const std_sync_RwLock_std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry) -> std :: sync :: RwLock < std :: collections :: HashSet < dash_spv_crypto :: llmq :: entry :: LLMQEntry > > { let ffi_ref = & * ffi ; std :: sync :: RwLock :: new (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . obj)) } } impl ferment :: FFIConversionTo < std :: sync :: RwLock < std :: collections :: HashSet < dash_spv_crypto :: llmq :: entry :: LLMQEntry > > > for std_sync_RwLock_std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry { unsafe fn ffi_to_const (obj : std :: sync :: RwLock < std :: collections :: HashSet < dash_spv_crypto :: llmq :: entry :: LLMQEntry > >) -> * const std_sync_RwLock_std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry { ferment :: boxed (Self { obj : ferment :: FFIConversionTo :: ffi_to (obj . into_inner () . expect ("Err")) }) } } impl Drop for std_sync_RwLock_std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry_ctor (obj : * mut crate :: fermented :: generics :: std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut std_sync_RwLock_std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry { ferment :: boxed (std_sync_RwLock_std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry_destroy (ffi : * mut std_sync_RwLock_std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u32 { pub obj : * mut crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_u32 } impl ferment :: FFIConversionFrom < std :: sync :: RwLock < std :: collections :: BTreeMap < [u8 ; 32] , u32 > > > for std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u32 { unsafe fn ffi_from_const (ffi : * const std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u32) -> std :: sync :: RwLock < std :: collections :: BTreeMap < [u8 ; 32] , u32 > > { let ffi_ref = & * ffi ; std :: sync :: RwLock :: new (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . obj)) } } impl ferment :: FFIConversionTo < std :: sync :: RwLock < std :: collections :: BTreeMap < [u8 ; 32] , u32 > > > for std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u32 { unsafe fn ffi_to_const (obj : std :: sync :: RwLock < std :: collections :: BTreeMap < [u8 ; 32] , u32 > >) -> * const std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u32 { ferment :: boxed (Self { obj : ferment :: FFIConversionTo :: ffi_to (obj . into_inner () . expect ("Err")) }) } } impl Drop for std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u32 { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u32_ctor (obj : * mut crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_u32) -> * mut std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u32 { ferment :: boxed (std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u32 { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u32_destroy (ffi : * mut std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u32) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_i32 { pub count : usize , pub values : * mut i32 } impl ferment :: FFIConversionFrom < Vec < i32 > > for Vec_i32 { unsafe fn ffi_from_const (ffi : * const Vec_i32) -> Vec < i32 > { let ffi_ref = & * ffi ; ferment :: from_primitive_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < i32 > > for Vec_i32 { unsafe fn ffi_to_const (obj : Vec < i32 >) -> * const Vec_i32 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_primitive_group (obj . into_iter ()) }) } } impl Drop for Vec_i32 { fn drop (& mut self) { unsafe { ferment :: unbox_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_i32_ctor (count : usize , values : * mut i32) -> * mut Vec_i32 { ferment :: boxed (Vec_i32 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_i32_destroy (ffi : * mut Vec_i32) { ferment :: unbox_any (ffi) ; } # [cfg (any (any (feature = "state-transitions")))] # [repr (C)] # [derive (Clone)] # [cfg (any (any (feature = "state-transitions")))] pub struct Tuple_String_dpp_balances_credits_Credits { pub o_0 : * mut std :: os :: raw :: c_char , pub o_1 : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits } # [cfg (any (any (feature = "state-transitions")))] # [cfg (any (any (feature = "state-transitions")))] impl ferment :: FFIConversionFrom < (String , dpp :: balances :: credits :: Credits) > for Tuple_String_dpp_balances_credits_Credits { unsafe fn ffi_from_const (ffi : * const Tuple_String_dpp_balances_credits_Credits) -> (String , dpp :: balances :: credits :: Credits) { let ffi_ref = & * ffi ; (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . o_0) , ferment :: FFIConversionFrom :: ffi_from (ffi_ref . o_1)) } } # [cfg (any (any (feature = "state-transitions")))] # [cfg (any (any (feature = "state-transitions")))] impl ferment :: FFIConversionTo < (String , dpp :: balances :: credits :: Credits) > for Tuple_String_dpp_balances_credits_Credits { unsafe fn ffi_to_const (obj : (String , dpp :: balances :: credits :: Credits)) -> * const Tuple_String_dpp_balances_credits_Credits { ferment :: boxed (Self { o_0 : ferment :: FFIConversionTo :: ffi_to (obj . 0) , o_1 : ferment :: FFIConversionTo :: ffi_to (obj . 1) }) } } # [cfg (any (any (feature = "state-transitions")))] # [cfg (any (any (feature = "state-transitions")))] impl Drop for Tuple_String_dpp_balances_credits_Credits { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . o_0) ; ferment :: unbox_any (self . o_1) ; } } } # [cfg (any (any (feature = "state-transitions")))] # [no_mangle] pub unsafe extern "C" fn Tuple_String_dpp_balances_credits_Credits_ctor (o_0 : * mut std :: os :: raw :: c_char , o_1 : * mut crate :: fermented :: types :: dpp :: balances :: credits :: dpp_balances_credits_Credits) -> * mut Tuple_String_dpp_balances_credits_Credits { ferment :: boxed (Tuple_String_dpp_balances_credits_Credits { o_0 , o_1 }) } # [cfg (any (any (feature = "state-transitions")))] # [no_mangle] pub unsafe extern "C" fn Tuple_String_dpp_balances_credits_Credits_destroy (ffi : * mut Tuple_String_dpp_balances_credits_Credits) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dpp_identity_identity_public_key_KeyID { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID } impl ferment :: FFIConversionFrom < Vec < dpp :: identity :: identity_public_key :: KeyID > > for Vec_dpp_identity_identity_public_key_KeyID { unsafe fn ffi_from_const (ffi : * const Vec_dpp_identity_identity_public_key_KeyID) -> Vec < dpp :: identity :: identity_public_key :: KeyID > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < dpp :: identity :: identity_public_key :: KeyID > > for Vec_dpp_identity_identity_public_key_KeyID { unsafe fn ffi_to_const (obj : Vec < dpp :: identity :: identity_public_key :: KeyID >) -> * const Vec_dpp_identity_identity_public_key_KeyID { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dpp_identity_identity_public_key_KeyID { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_identity_identity_public_key_KeyID_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut Vec_dpp_identity_identity_public_key_KeyID { ferment :: boxed (Vec_dpp_identity_identity_public_key_KeyID { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_identity_identity_public_key_KeyID_destroy (ffi : * mut Vec_dpp_identity_identity_public_key_KeyID) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Fn_ARGS_std_os_raw_c_void_bool_Arr_u8_32_Arr_u8_32_RTRN_bool { caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , bool , * mut crate :: fermented :: generics :: Arr_u8_32 , * mut crate :: fermented :: generics :: Arr_u8_32) -> bool , destructor : unsafe extern "C" fn (bool) } impl Fn_ARGS_std_os_raw_c_void_bool_Arr_u8_32_Arr_u8_32_RTRN_bool { pub unsafe fn call (& self , o_0 : * const std :: os :: raw :: c_void , o_1 : bool , o_2 : [u8 ; 32] , o_3 : [u8 ; 32]) -> bool { let ffi_result = (self . caller) (o_0 , o_1 , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (o_2) , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (o_3)) ; ffi_result } } unsafe impl Send for Fn_ARGS_std_os_raw_c_void_bool_Arr_u8_32_Arr_u8_32_RTRN_bool { } unsafe impl Sync for Fn_ARGS_std_os_raw_c_void_bool_Arr_u8_32_Arr_u8_32_RTRN_bool { } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_bool_Arr_u8_32_Arr_u8_32_RTRN_bool_ctor (caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , bool , * mut crate :: fermented :: generics :: Arr_u8_32 , * mut crate :: fermented :: generics :: Arr_u8_32) -> bool , destructor : unsafe extern "C" fn (bool)) -> * mut Fn_ARGS_std_os_raw_c_void_bool_Arr_u8_32_Arr_u8_32_RTRN_bool { ferment :: boxed (Fn_ARGS_std_os_raw_c_void_bool_Arr_u8_32_Arr_u8_32_RTRN_bool { caller , destructor }) } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_bool_Arr_u8_32_Arr_u8_32_RTRN_bool_destroy (ffi : * mut Fn_ARGS_std_os_raw_c_void_bool_Arr_u8_32_Arr_u8_32_RTRN_bool) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_bool_Arr_u8_32_Arr_u8_32_RTRN_bool { pub obj : * mut crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_bool_Arr_u8_32_Arr_u8_32_RTRN_bool } impl ferment :: FFIConversionFrom < std :: sync :: Arc < dyn Fn (* const std :: os :: raw :: c_void , bool , [u8 ; 32] , [u8 ; 32]) -> bool > > for std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_bool_Arr_u8_32_Arr_u8_32_RTRN_bool { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_bool_Arr_u8_32_Arr_u8_32_RTRN_bool) -> std :: sync :: Arc < dyn Fn (* const std :: os :: raw :: c_void , bool , [u8 ; 32] , [u8 ; 32]) -> bool > { let ffi_ref = & * ffi ; std :: sync :: Arc :: new (move | o_0 , o_1 , o_2 , o_3 | unsafe { (& * ffi_ref . obj) . call (o_0 , o_1 , o_2 , o_3) }) } } impl Drop for std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_bool_Arr_u8_32_Arr_u8_32_RTRN_bool { fn drop (& mut self) { unsafe { ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_bool_Arr_u8_32_Arr_u8_32_RTRN_bool_ctor (obj : * mut crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_bool_Arr_u8_32_Arr_u8_32_RTRN_bool) -> * mut std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_bool_Arr_u8_32_Arr_u8_32_RTRN_bool { ferment :: boxed (std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_bool_Arr_u8_32_Arr_u8_32_RTRN_bool { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_bool_Arr_u8_32_Arr_u8_32_RTRN_bool_destroy (ffi : * mut std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_bool_Arr_u8_32_Arr_u8_32_RTRN_bool) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dash_spv_platform_models_contact_request_ContactRequestKind { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dash_spv_platform :: models :: contact_request :: dash_spv_platform_models_contact_request_ContactRequestKind } impl ferment :: FFIConversionFrom < Vec < dash_spv_platform :: models :: contact_request :: ContactRequestKind > > for Vec_dash_spv_platform_models_contact_request_ContactRequestKind { unsafe fn ffi_from_const (ffi : * const Vec_dash_spv_platform_models_contact_request_ContactRequestKind) -> Vec < dash_spv_platform :: models :: contact_request :: ContactRequestKind > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < dash_spv_platform :: models :: contact_request :: ContactRequestKind > > for Vec_dash_spv_platform_models_contact_request_ContactRequestKind { unsafe fn ffi_to_const (obj : Vec < dash_spv_platform :: models :: contact_request :: ContactRequestKind >) -> * const Vec_dash_spv_platform_models_contact_request_ContactRequestKind { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dash_spv_platform_models_contact_request_ContactRequestKind { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_platform_models_contact_request_ContactRequestKind_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dash_spv_platform :: models :: contact_request :: dash_spv_platform_models_contact_request_ContactRequestKind) -> * mut Vec_dash_spv_platform_models_contact_request_ContactRequestKind { ferment :: boxed (Vec_dash_spv_platform_models_contact_request_ContactRequestKind { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_platform_models_contact_request_ContactRequestKind_destroy (ffi : * mut Vec_dash_spv_platform_models_contact_request_ContactRequestKind) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation } impl ferment :: FFIConversionFrom < Vec < dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation > > for Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { unsafe fn ffi_from_const (ffi : * const Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation) -> Vec < dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation > > for Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { unsafe fn ffi_to_const (obj : Vec < dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: IdentityPublicKeyInCreation >) -> * const Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: identity :: public_key_in_creation :: dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation) -> * mut Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { ferment :: boxed (Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation_destroy (ffi : * mut Vec_dpp_state_transition_state_transitions_identity_public_key_in_creation_IdentityPublicKeyInCreation) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_bool_err_dash_spv_platform_error_Error { pub ok : * mut bool , pub error : * mut crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error } impl ferment :: FFIConversionFrom < Result < bool , dash_spv_platform :: error :: Error > > for Result_ok_bool_err_dash_spv_platform_error_Error { unsafe fn ffi_from_const (ffi : * const Result_ok_bool_err_dash_spv_platform_error_Error) -> Result < bool , dash_spv_platform :: error :: Error > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | * o , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error as ferment :: FFIConversionFrom < dash_spv_platform :: error :: Error >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < bool , dash_spv_platform :: error :: Error > > for Result_ok_bool_err_dash_spv_platform_error_Error { unsafe fn ffi_to_const (obj : Result < bool , dash_spv_platform :: error :: Error >) -> * const Result_ok_bool_err_dash_spv_platform_error_Error { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: boxed (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_bool_err_dash_spv_platform_error_Error { fn drop (& mut self) { unsafe { ferment :: destroy_opt_primitive (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_bool_err_dash_spv_platform_error_Error_ctor (ok : * mut bool , error : * mut crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error) -> * mut Result_ok_bool_err_dash_spv_platform_error_Error { ferment :: boxed (Result_ok_bool_err_dash_spv_platform_error_Error { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_bool_err_dash_spv_platform_error_Error_destroy (ffi : * mut Result_ok_bool_err_dash_spv_platform_error_Error) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DocumentName , pub values : * mut * mut crate :: fermented :: types :: platform_value :: platform_value_Value } impl ferment :: FFIConversionFrom < std :: collections :: BTreeMap < dpp :: data_contract :: DocumentName , platform_value :: Value > > for std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value) -> std :: collections :: BTreeMap < dpp :: data_contract :: DocumentName , platform_value :: Value > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DocumentName as ferment :: FFIConversionFrom < dpp :: data_contract :: DocumentName >> :: ffi_from (o) , | o | < crate :: fermented :: types :: platform_value :: platform_value_Value as ferment :: FFIConversionFrom < platform_value :: Value >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < std :: collections :: BTreeMap < dpp :: data_contract :: DocumentName , platform_value :: Value > > for std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < dpp :: data_contract :: DocumentName , platform_value :: Value >) -> * const std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_complex_group (obj . keys () . cloned ()) , values : ferment :: to_complex_group (obj . values () . cloned ()) }) } } impl Drop for std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . keys , self . count) ; ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DocumentName , values : * mut * mut crate :: fermented :: types :: platform_value :: platform_value_Value) -> * mut std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value { ferment :: boxed (std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value_destroy (ffi : * mut std_collections_Map_keys_dpp_data_contract_DocumentName_values_platform_value_Value) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_u32_values_dpp_identity_identity_public_key_IdentityPublicKey { pub count : usize , pub keys : * mut u32 , pub values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey } impl ferment :: FFIConversionFrom < std :: collections :: BTreeMap < u32 , dpp :: identity :: identity_public_key :: IdentityPublicKey > > for std_collections_Map_keys_u32_values_dpp_identity_identity_public_key_IdentityPublicKey { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_u32_values_dpp_identity_identity_public_key_IdentityPublicKey) -> std :: collections :: BTreeMap < u32 , dpp :: identity :: identity_public_key :: IdentityPublicKey > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | o , | o | < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: IdentityPublicKey >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < std :: collections :: BTreeMap < u32 , dpp :: identity :: identity_public_key :: IdentityPublicKey > > for std_collections_Map_keys_u32_values_dpp_identity_identity_public_key_IdentityPublicKey { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < u32 , dpp :: identity :: identity_public_key :: IdentityPublicKey >) -> * const std_collections_Map_keys_u32_values_dpp_identity_identity_public_key_IdentityPublicKey { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_primitive_group (obj . keys () . cloned ()) , values : ferment :: to_complex_group (obj . values () . cloned ()) }) } } impl Drop for std_collections_Map_keys_u32_values_dpp_identity_identity_public_key_IdentityPublicKey { fn drop (& mut self) { unsafe { ferment :: unbox_vec_ptr (self . keys , self . count) ; ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_u32_values_dpp_identity_identity_public_key_IdentityPublicKey_ctor (count : usize , keys : * mut u32 , values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey) -> * mut std_collections_Map_keys_u32_values_dpp_identity_identity_public_key_IdentityPublicKey { ferment :: boxed (std_collections_Map_keys_u32_values_dpp_identity_identity_public_key_IdentityPublicKey { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_u32_values_dpp_identity_identity_public_key_IdentityPublicKey_destroy (ffi : * mut std_collections_Map_keys_u32_values_dpp_identity_identity_public_key_IdentityPublicKey) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Tuple_Arr_u8_32_Arr_u8_32_bool { pub o_0 : * mut crate :: fermented :: generics :: Arr_u8_32 , pub o_1 : * mut crate :: fermented :: generics :: Arr_u8_32 , pub o_2 : bool } impl ferment :: FFIConversionFrom < ([u8 ; 32] , [u8 ; 32] , bool) > for Tuple_Arr_u8_32_Arr_u8_32_bool { unsafe fn ffi_from_const (ffi : * const Tuple_Arr_u8_32_Arr_u8_32_bool) -> ([u8 ; 32] , [u8 ; 32] , bool) { let ffi_ref = & * ffi ; (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . o_0) , ferment :: FFIConversionFrom :: ffi_from (ffi_ref . o_1) , ffi_ref . o_2) } } impl ferment :: FFIConversionTo < ([u8 ; 32] , [u8 ; 32] , bool) > for Tuple_Arr_u8_32_Arr_u8_32_bool { unsafe fn ffi_to_const (obj : ([u8 ; 32] , [u8 ; 32] , bool)) -> * const Tuple_Arr_u8_32_Arr_u8_32_bool { ferment :: boxed (Self { o_0 : ferment :: FFIConversionTo :: ffi_to (obj . 0) , o_1 : ferment :: FFIConversionTo :: ffi_to (obj . 1) , o_2 : obj . 2 }) } } impl Drop for Tuple_Arr_u8_32_Arr_u8_32_bool { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . o_0) ; ferment :: unbox_any (self . o_1) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Tuple_Arr_u8_32_Arr_u8_32_bool_ctor (o_0 : * mut crate :: fermented :: generics :: Arr_u8_32 , o_1 : * mut crate :: fermented :: generics :: Arr_u8_32 , o_2 : bool) -> * mut Tuple_Arr_u8_32_Arr_u8_32_bool { ferment :: boxed (Tuple_Arr_u8_32_Arr_u8_32_bool { o_0 , o_1 , o_2 }) } # [no_mangle] pub unsafe extern "C" fn Tuple_Arr_u8_32_Arr_u8_32_bool_destroy (ffi : * mut Tuple_Arr_u8_32_Arr_u8_32_bool) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_dash_spv_platform_identity_manager_IdentitiesManager { pub obj : * mut dash_spv_platform :: identity :: manager :: IdentitiesManager } impl ferment :: FFIConversionFrom < std :: sync :: Arc < dash_spv_platform :: identity :: manager :: IdentitiesManager > > for std_sync_Arc_dash_spv_platform_identity_manager_IdentitiesManager { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_dash_spv_platform_identity_manager_IdentitiesManager) -> std :: sync :: Arc < dash_spv_platform :: identity :: manager :: IdentitiesManager > { let ffi_ref = & * ffi ; std :: sync :: Arc :: from_raw (ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < dash_spv_platform :: identity :: manager :: IdentitiesManager > > for std_sync_Arc_dash_spv_platform_identity_manager_IdentitiesManager { unsafe fn ffi_to_const (obj : std :: sync :: Arc < dash_spv_platform :: identity :: manager :: IdentitiesManager >) -> * const std_sync_Arc_dash_spv_platform_identity_manager_IdentitiesManager { ferment :: boxed (Self { obj : std :: sync :: Arc :: into_raw (obj) . cast_mut () }) } } impl Drop for std_sync_Arc_dash_spv_platform_identity_manager_IdentitiesManager { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dash_spv_platform_identity_manager_IdentitiesManager_ctor (obj : * mut dash_spv_platform :: identity :: manager :: IdentitiesManager) -> * mut std_sync_Arc_dash_spv_platform_identity_manager_IdentitiesManager { ferment :: boxed (std_sync_Arc_dash_spv_platform_identity_manager_IdentitiesManager { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dash_spv_platform_identity_manager_IdentitiesManager_destroy (ffi : * mut std_sync_Arc_dash_spv_platform_identity_manager_IdentitiesManager) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { pub ok : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: block :: dash_spv_masternode_processor_common_block_MBlock , pub error : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: core_provider :: dash_spv_masternode_processor_processing_core_provider_CoreProviderError } impl ferment :: FFIConversionFrom < Result < dash_spv_masternode_processor :: common :: block :: MBlock , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > > for Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { unsafe fn ffi_from_const (ffi : * const Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> Result < dash_spv_masternode_processor :: common :: block :: MBlock , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | < crate :: fermented :: types :: dash_spv_masternode_processor :: common :: block :: dash_spv_masternode_processor_common_block_MBlock as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: common :: block :: MBlock >> :: ffi_from (o) , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: core_provider :: dash_spv_masternode_processor_processing_core_provider_CoreProviderError as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < dash_spv_masternode_processor :: common :: block :: MBlock , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > > for Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { unsafe fn ffi_to_const (obj : Result < dash_spv_masternode_processor :: common :: block :: MBlock , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError >) -> * const Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: FFIConversionTo :: ffi_to (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_ctor (ok : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: block :: dash_spv_masternode_processor_common_block_MBlock , error : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: core_provider :: dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> * mut Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed (Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_destroy (ffi : * mut Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_u8_36 { pub count : usize , pub values : * mut * mut crate :: fermented :: generics :: Arr_u8_36 } impl ferment :: FFIConversionFrom < Vec < [u8 ; 36] > > for Vec_u8_36 { unsafe fn ffi_from_const (ffi : * const Vec_u8_36) -> Vec < [u8 ; 36] > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < [u8 ; 36] > > for Vec_u8_36 { unsafe fn ffi_to_const (obj : Vec < [u8 ; 36] >) -> * const Vec_u8_36 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_u8_36 { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_u8_36_ctor (count : usize , values : * mut * mut crate :: fermented :: generics :: Arr_u8_36) -> * mut Vec_u8_36 { ferment :: boxed (Vec_u8_36 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_u8_36_destroy (ffi : * mut Vec_u8_36) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList { pub count : usize , pub keys : * mut * mut crate :: fermented :: generics :: Arr_u8_32 , pub values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList } impl ferment :: FFIConversionFrom < std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList > > for std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (o) , | o | < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList > > for std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList >) -> * const std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_complex_group (obj . keys () . cloned ()) , values : ferment :: to_complex_group (obj . values () . cloned ()) }) } } impl Drop for std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . keys , self . count) ; ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList_ctor (count : usize , keys : * mut * mut crate :: fermented :: generics :: Arr_u8_32 , values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> * mut std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList { ferment :: boxed (std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList_destroy (ffi : * mut std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_std_sync_RwLock_std_collections_HashSet_u8_32 { pub obj : * mut crate :: fermented :: generics :: std_sync_RwLock_std_collections_HashSet_u8_32 } impl ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: HashSet < [u8 ; 32] > > > > for std_sync_Arc_std_sync_RwLock_std_collections_HashSet_u8_32 { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_std_sync_RwLock_std_collections_HashSet_u8_32) -> std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: HashSet < [u8 ; 32] > > > { let ffi_ref = & * ffi ; std :: sync :: Arc :: new (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . obj)) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: HashSet < [u8 ; 32] > > > > for std_sync_Arc_std_sync_RwLock_std_collections_HashSet_u8_32 { unsafe fn ffi_to_const (obj : std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: HashSet < [u8 ; 32] > > >) -> * const std_sync_Arc_std_sync_RwLock_std_collections_HashSet_u8_32 { ferment :: boxed (Self { obj : ferment :: FFIConversionTo :: ffi_to (std :: sync :: RwLock :: new (obj . read () . expect ("Poisoned") . clone ())) }) } } impl Drop for std_sync_Arc_std_sync_RwLock_std_collections_HashSet_u8_32 { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_std_collections_HashSet_u8_32_ctor (obj : * mut crate :: fermented :: generics :: std_sync_RwLock_std_collections_HashSet_u8_32) -> * mut std_sync_Arc_std_sync_RwLock_std_collections_HashSet_u8_32 { ferment :: boxed (std_sync_Arc_std_sync_RwLock_std_collections_HashSet_u8_32 { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_std_collections_HashSet_u8_32_destroy (ffi : * mut std_sync_Arc_std_sync_RwLock_std_collections_HashSet_u8_32) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { pub ok : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList , pub error : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: core_provider :: dash_spv_masternode_processor_processing_core_provider_CoreProviderError } impl ferment :: FFIConversionFrom < Result < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > > for Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { unsafe fn ffi_from_const (ffi : * const Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> Result < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList >> :: ffi_from (o) , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: core_provider :: dash_spv_masternode_processor_processing_core_provider_CoreProviderError as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > > for Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { unsafe fn ffi_to_const (obj : Result < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError >) -> * const Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: FFIConversionTo :: ffi_to (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_ctor (ok : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList , error : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: core_provider :: dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> * mut Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed (Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_destroy (ffi : * mut Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_u8_arr_32_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError { pub ok : * mut crate :: fermented :: generics :: Arr_u8_32 , pub error : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: processing_error :: dash_spv_masternode_processor_processing_processing_error_ProcessingError } impl ferment :: FFIConversionFrom < Result < [u8 ; 32] , dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError > > for Result_ok_u8_arr_32_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError { unsafe fn ffi_from_const (ffi : * const Result_ok_u8_arr_32_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError) -> Result < [u8 ; 32] , dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (o) , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: processing_error :: dash_spv_masternode_processor_processing_processing_error_ProcessingError as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < [u8 ; 32] , dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError > > for Result_ok_u8_arr_32_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError { unsafe fn ffi_to_const (obj : Result < [u8 ; 32] , dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError >) -> * const Result_ok_u8_arr_32_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: FFIConversionTo :: ffi_to (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_u8_arr_32_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_u8_arr_32_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError_ctor (ok : * mut crate :: fermented :: generics :: Arr_u8_32 , error : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: processing_error :: dash_spv_masternode_processor_processing_processing_error_ProcessingError) -> * mut Result_ok_u8_arr_32_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError { ferment :: boxed (Result_ok_u8_arr_32_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_u8_arr_32_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError_destroy (ffi : * mut Result_ok_u8_arr_32_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Fn_ARGS_std_os_raw_c_void_dash_spv_platform_document_usernames_UsernameStatus_RTRN_ { caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , * mut crate :: fermented :: types :: dash_spv_platform :: document :: usernames :: dash_spv_platform_document_usernames_UsernameStatus) } impl Fn_ARGS_std_os_raw_c_void_dash_spv_platform_document_usernames_UsernameStatus_RTRN_ { pub unsafe fn call (& self , o_0 : * const std :: os :: raw :: c_void , o_1 : dash_spv_platform :: document :: usernames :: UsernameStatus) { let ffi_result = (self . caller) (o_0 , < crate :: fermented :: types :: dash_spv_platform :: document :: usernames :: dash_spv_platform_document_usernames_UsernameStatus as ferment :: FFIConversionTo < dash_spv_platform :: document :: usernames :: UsernameStatus >> :: ffi_to (o_1)) ; ffi_result } } unsafe impl Send for Fn_ARGS_std_os_raw_c_void_dash_spv_platform_document_usernames_UsernameStatus_RTRN_ { } unsafe impl Sync for Fn_ARGS_std_os_raw_c_void_dash_spv_platform_document_usernames_UsernameStatus_RTRN_ { } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_dash_spv_platform_document_usernames_UsernameStatus_RTRN__ctor (caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , * mut crate :: fermented :: types :: dash_spv_platform :: document :: usernames :: dash_spv_platform_document_usernames_UsernameStatus)) -> * mut Fn_ARGS_std_os_raw_c_void_dash_spv_platform_document_usernames_UsernameStatus_RTRN_ { ferment :: boxed (Fn_ARGS_std_os_raw_c_void_dash_spv_platform_document_usernames_UsernameStatus_RTRN_ { caller }) } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_dash_spv_platform_document_usernames_UsernameStatus_RTRN__destroy (ffi : * mut Fn_ARGS_std_os_raw_c_void_dash_spv_platform_document_usernames_UsernameStatus_RTRN_) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Arr_u8_48 { pub count : usize , pub values : * mut u8 } impl ferment :: FFIConversionFrom < [u8 ; 48] > for Arr_u8_48 { unsafe fn ffi_from_const (ffi : * const Arr_u8_48) -> [u8 ; 48] { let ffi_ref = & * ffi ; let vec : Vec < u8 > = ferment :: from_primitive_group (ffi_ref . values , ffi_ref . count) ; vec . try_into () . unwrap () } } impl ferment :: FFIConversionTo < [u8 ; 48] > for Arr_u8_48 { unsafe fn ffi_to_const (obj : [u8 ; 48]) -> * const Arr_u8_48 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_primitive_group (obj . into_iter ()) }) } } impl Drop for Arr_u8_48 { fn drop (& mut self) { unsafe { ferment :: unbox_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Arr_u8_48_ctor (count : usize , values : * mut u8) -> * mut Arr_u8_48 { ferment :: boxed (Arr_u8_48 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Arr_u8_48_destroy (ffi : * mut Arr_u8_48) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 } impl ferment :: FFIConversionFrom < Vec < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoVoteEventV0 > > for Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { unsafe fn ffi_from_const (ffi : * const Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0) -> Vec < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoVoteEventV0 > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoVoteEventV0 > > for Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { unsafe fn ffi_to_const (obj : Vec < dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: ContestedDocumentVotePollStoredInfoVoteEventV0 >) -> * const Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dpp :: voting :: vote_info_storage :: contested_document_vote_poll_stored_info :: v0 :: dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0) -> * mut Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { ferment :: boxed (Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0_destroy (ffi : * mut Vec_dpp_voting_vote_info_storage_contested_document_vote_poll_stored_info_v0_ContestedDocumentVotePollStoredInfoVoteEventV0) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u8_arr_96 { pub obj : * mut crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_u8_arr_96 } impl ferment :: FFIConversionFrom < std :: sync :: RwLock < std :: collections :: BTreeMap < [u8 ; 32] , [u8 ; 96] > > > for std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u8_arr_96 { unsafe fn ffi_from_const (ffi : * const std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u8_arr_96) -> std :: sync :: RwLock < std :: collections :: BTreeMap < [u8 ; 32] , [u8 ; 96] > > { let ffi_ref = & * ffi ; std :: sync :: RwLock :: new (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . obj)) } } impl ferment :: FFIConversionTo < std :: sync :: RwLock < std :: collections :: BTreeMap < [u8 ; 32] , [u8 ; 96] > > > for std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u8_arr_96 { unsafe fn ffi_to_const (obj : std :: sync :: RwLock < std :: collections :: BTreeMap < [u8 ; 32] , [u8 ; 96] > >) -> * const std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u8_arr_96 { ferment :: boxed (Self { obj : ferment :: FFIConversionTo :: ffi_to (obj . into_inner () . expect ("Err")) }) } } impl Drop for std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u8_arr_96 { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u8_arr_96_ctor (obj : * mut crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_u8_arr_96) -> * mut std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u8_arr_96 { ferment :: boxed (std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u8_arr_96 { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u8_arr_96_destroy (ffi : * mut std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u8_arr_96) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_RwLock_Option_u8_32 { pub obj : * mut crate :: fermented :: generics :: Arr_u8_32 } impl ferment :: FFIConversionFrom < std :: sync :: RwLock < Option < [u8 ; 32] > > > for std_sync_RwLock_Option_u8_32 { unsafe fn ffi_from_const (ffi : * const std_sync_RwLock_Option_u8_32) -> std :: sync :: RwLock < Option < [u8 ; 32] > > { let ffi_ref = & * ffi ; std :: sync :: RwLock :: new (ferment :: FFIConversionFrom :: ffi_from_opt (ffi_ref . obj)) } } impl ferment :: FFIConversionTo < std :: sync :: RwLock < Option < [u8 ; 32] > > > for std_sync_RwLock_Option_u8_32 { unsafe fn ffi_to_const (obj : std :: sync :: RwLock < Option < [u8 ; 32] > >) -> * const std_sync_RwLock_Option_u8_32 { ferment :: boxed (Self { obj : ferment :: FFIConversionTo :: ffi_to_opt (obj . into_inner () . expect ("Err")) }) } } impl Drop for std_sync_RwLock_Option_u8_32 { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_Option_u8_32_ctor (obj : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut std_sync_RwLock_Option_u8_32 { ferment :: boxed (std_sync_RwLock_Option_u8_32 { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_Option_u8_32_destroy (ffi : * mut std_sync_RwLock_Option_u8_32) { ferment :: unbox_any (ffi) ; } # [cfg (any (any (feature = "json-schema-validation")))] # [repr (C)] # [derive (Clone)] # [cfg (any (any (feature = "json-schema-validation")))] pub struct serde_json_Map_String_serde_json_Value { pub count : usize , pub keys : * mut * mut std :: os :: raw :: c_char , pub values : * mut * mut dash_spv_apple_bindings :: custom :: serde_json :: serde_json_JsonValue } # [cfg (any (any (feature = "json-schema-validation")))] # [cfg (any (any (feature = "json-schema-validation")))] impl ferment :: FFIConversionFrom < serde_json :: Map < String , serde_json :: Value > > for serde_json_Map_String_serde_json_Value { unsafe fn ffi_from_const (ffi : * const serde_json_Map_String_serde_json_Value) -> serde_json :: Map < String , serde_json :: Value > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (o) , | o | < dash_spv_apple_bindings :: custom :: serde_json :: serde_json_JsonValue as ferment :: FFIConversionFrom < serde_json :: Value >> :: ffi_from (o)) } } # [cfg (any (any (feature = "json-schema-validation")))] # [cfg (any (any (feature = "json-schema-validation")))] impl ferment :: FFIConversionTo < serde_json :: Map < String , serde_json :: Value > > for serde_json_Map_String_serde_json_Value { unsafe fn ffi_to_const (obj : serde_json :: Map < String , serde_json :: Value >) -> * const serde_json_Map_String_serde_json_Value { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_complex_group (obj . keys () . cloned ()) , values : ferment :: to_complex_group (obj . values () . cloned ()) }) } } # [cfg (any (any (feature = "json-schema-validation")))] # [cfg (any (any (feature = "json-schema-validation")))] impl Drop for serde_json_Map_String_serde_json_Value { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr_composer (self . keys , self . count , ferment :: unbox_string) ; ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [cfg (any (any (feature = "json-schema-validation")))] # [no_mangle] pub unsafe extern "C" fn serde_json_Map_String_serde_json_Value_ctor (count : usize , keys : * mut * mut std :: os :: raw :: c_char , values : * mut * mut dash_spv_apple_bindings :: custom :: serde_json :: serde_json_JsonValue) -> * mut serde_json_Map_String_serde_json_Value { ferment :: boxed (serde_json_Map_String_serde_json_Value { count , keys , values }) } # [cfg (any (any (feature = "json-schema-validation")))] # [no_mangle] pub unsafe extern "C" fn serde_json_Map_String_serde_json_Value_destroy (ffi : * mut serde_json_Map_String_serde_json_Value) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_bool_RTRN_ { pub obj : * mut crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_bool_RTRN_ } impl ferment :: FFIConversionFrom < std :: sync :: Arc < dyn Fn (* const std :: os :: raw :: c_void , bool) > > for std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_bool_RTRN_ { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_bool_RTRN_) -> std :: sync :: Arc < dyn Fn (* const std :: os :: raw :: c_void , bool) > { let ffi_ref = & * ffi ; std :: sync :: Arc :: new (move | o_0 , o_1 | unsafe { (& * ffi_ref . obj) . call (o_0 , o_1) }) } } impl Drop for std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_bool_RTRN_ { fn drop (& mut self) { unsafe { ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_bool_RTRN__ctor (obj : * mut crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_bool_RTRN_) -> * mut std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_bool_RTRN_ { ferment :: boxed (std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_bool_RTRN_ { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_bool_RTRN__destroy (ffi : * mut std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_bool_RTRN_) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_Option_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error { pub ok : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract , pub error : * mut crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error } impl ferment :: FFIConversionFrom < Result < Option < dpp :: data_contract :: DataContract > , dash_spv_platform :: error :: Error > > for Result_ok_Option_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error { unsafe fn ffi_from_const (ffi : * const Result_ok_Option_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error) -> Result < Option < dpp :: data_contract :: DataContract > , dash_spv_platform :: error :: Error > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from_opt (o) , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error as ferment :: FFIConversionFrom < dash_spv_platform :: error :: Error >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < Option < dpp :: data_contract :: DataContract > , dash_spv_platform :: error :: Error > > for Result_ok_Option_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error { unsafe fn ffi_to_const (obj : Result < Option < dpp :: data_contract :: DataContract > , dash_spv_platform :: error :: Error >) -> * const Result_ok_Option_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: FFIConversionTo :: ffi_to_opt (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_Option_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_Option_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error_ctor (ok : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract , error : * mut crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error) -> * mut Result_ok_Option_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error { ferment :: boxed (Result_ok_Option_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_Option_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error_destroy (ffi : * mut Result_ok_Option_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_os_raw_c_void_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , * mut crate :: fermented :: generics :: Arr_u8_32 , * const std :: os :: raw :: c_void) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError , destructor : unsafe extern "C" fn (* mut crate :: fermented :: generics :: Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) } impl Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_os_raw_c_void_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { pub unsafe fn call (& self , o_0 : * const std :: os :: raw :: c_void , o_1 : [u8 ; 32] , o_2 : * const std :: os :: raw :: c_void) -> Result < dash_spv_masternode_processor :: common :: block :: MBlock , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > { let ffi_result = (self . caller) (o_0 , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (o_1) , o_2) ; let result = < crate :: fermented :: generics :: Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError as ferment :: FFIConversionFrom < Result < dash_spv_masternode_processor :: common :: block :: MBlock , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > >> :: ffi_from (ffi_result) ; (self . destructor) (ffi_result) ; result } } unsafe impl Send for Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_os_raw_c_void_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { } unsafe impl Sync for Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_os_raw_c_void_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_os_raw_c_void_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_ctor (caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , * mut crate :: fermented :: generics :: Arr_u8_32 , * const std :: os :: raw :: c_void) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError , destructor : unsafe extern "C" fn (* mut crate :: fermented :: generics :: Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError)) -> * mut Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_os_raw_c_void_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed (Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_os_raw_c_void_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { caller , destructor }) } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_os_raw_c_void_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_destroy (ffi : * mut Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_os_raw_c_void_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity { pub count : usize , pub keys : * mut * mut crate :: fermented :: generics :: Arr_u8_20 , pub values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity } impl ferment :: FFIConversionFrom < std :: collections :: BTreeMap < [u8 ; 20] , dpp :: identity :: identity :: Identity > > for std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity) -> std :: collections :: BTreeMap < [u8 ; 20] , dpp :: identity :: identity :: Identity > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < crate :: fermented :: generics :: Arr_u8_20 as ferment :: FFIConversionFrom < [u8 ; 20] >> :: ffi_from (o) , | o | < crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity as ferment :: FFIConversionFrom < dpp :: identity :: identity :: Identity >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < std :: collections :: BTreeMap < [u8 ; 20] , dpp :: identity :: identity :: Identity > > for std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < [u8 ; 20] , dpp :: identity :: identity :: Identity >) -> * const std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_complex_group (obj . keys () . cloned ()) , values : ferment :: to_complex_group (obj . values () . cloned ()) }) } } impl Drop for std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . keys , self . count) ; ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_ctor (count : usize , keys : * mut * mut crate :: fermented :: generics :: Arr_u8_20 , values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity) -> * mut std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity { ferment :: boxed (std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_destroy (ffi : * mut std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Arr_u8_20 { pub count : usize , pub values : * mut u8 } impl ferment :: FFIConversionFrom < [u8 ; 20] > for Arr_u8_20 { unsafe fn ffi_from_const (ffi : * const Arr_u8_20) -> [u8 ; 20] { let ffi_ref = & * ffi ; let vec : Vec < u8 > = ferment :: from_primitive_group (ffi_ref . values , ffi_ref . count) ; vec . try_into () . unwrap () } } impl ferment :: FFIConversionTo < [u8 ; 20] > for Arr_u8_20 { unsafe fn ffi_to_const (obj : [u8 ; 20]) -> * const Arr_u8_20 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_primitive_group (obj . into_iter ()) }) } } impl Drop for Arr_u8_20 { fn drop (& mut self) { unsafe { ferment :: unbox_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Arr_u8_20_ctor (count : usize , values : * mut u8) -> * mut Arr_u8_20 { ferment :: boxed (Arr_u8_20 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Arr_u8_20_destroy (ffi : * mut Arr_u8_20) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_u8_arr_32_values_u32 { pub count : usize , pub keys : * mut * mut crate :: fermented :: generics :: Arr_u8_32 , pub values : * mut u32 } impl ferment :: FFIConversionFrom < std :: collections :: BTreeMap < [u8 ; 32] , u32 > > for std_collections_Map_keys_u8_arr_32_values_u32 { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_u8_arr_32_values_u32) -> std :: collections :: BTreeMap < [u8 ; 32] , u32 > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (o) , | o | o) } } impl ferment :: FFIConversionTo < std :: collections :: BTreeMap < [u8 ; 32] , u32 > > for std_collections_Map_keys_u8_arr_32_values_u32 { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < [u8 ; 32] , u32 >) -> * const std_collections_Map_keys_u8_arr_32_values_u32 { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_complex_group (obj . keys () . cloned ()) , values : ferment :: to_primitive_group (obj . values () . cloned ()) }) } } impl Drop for std_collections_Map_keys_u8_arr_32_values_u32 { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . keys , self . count) ; ferment :: unbox_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_u8_arr_32_values_u32_ctor (count : usize , keys : * mut * mut crate :: fermented :: generics :: Arr_u8_32 , values : * mut u32) -> * mut std_collections_Map_keys_u8_arr_32_values_u32 { ferment :: boxed (std_collections_Map_keys_u8_arr_32_values_u32 { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_u8_arr_32_values_u32_destroy (ffi : * mut std_collections_Map_keys_u8_arr_32_values_u32) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Tuple_platform_value_types_identifier_Identifier_u8 { pub o_0 : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub o_1 : u8 } impl ferment :: FFIConversionFrom < (platform_value :: types :: identifier :: Identifier , u8) > for Tuple_platform_value_types_identifier_Identifier_u8 { unsafe fn ffi_from_const (ffi : * const Tuple_platform_value_types_identifier_Identifier_u8) -> (platform_value :: types :: identifier :: Identifier , u8) { let ffi_ref = & * ffi ; (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . o_0) , ffi_ref . o_1) } } impl ferment :: FFIConversionTo < (platform_value :: types :: identifier :: Identifier , u8) > for Tuple_platform_value_types_identifier_Identifier_u8 { unsafe fn ffi_to_const (obj : (platform_value :: types :: identifier :: Identifier , u8)) -> * const Tuple_platform_value_types_identifier_Identifier_u8 { ferment :: boxed (Self { o_0 : ferment :: FFIConversionTo :: ffi_to (obj . 0) , o_1 : obj . 1 }) } } impl Drop for Tuple_platform_value_types_identifier_Identifier_u8 { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . o_0) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Tuple_platform_value_types_identifier_Identifier_u8_ctor (o_0 : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , o_1 : u8) -> * mut Tuple_platform_value_types_identifier_Identifier_u8 { ferment :: boxed (Tuple_platform_value_types_identifier_Identifier_u8 { o_0 , o_1 }) } # [no_mangle] pub unsafe extern "C" fn Tuple_platform_value_types_identifier_Identifier_u8_destroy (ffi : * mut Tuple_platform_value_types_identifier_Identifier_u8) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError , destructor : unsafe extern "C" fn (* mut crate :: fermented :: generics :: Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) } impl Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { pub unsafe fn call (& self , o_0 : * const std :: os :: raw :: c_void , o_1 : [u8 ; 32]) -> Result < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > { let ffi_result = (self . caller) (o_0 , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (o_1)) ; let result = < crate :: fermented :: generics :: Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError as ferment :: FFIConversionFrom < Result < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > >> :: ffi_from (ffi_result) ; (self . destructor) (ffi_result) ; result } } unsafe impl Send for Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { } unsafe impl Sync for Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_ctor (caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError , destructor : unsafe extern "C" fn (* mut crate :: fermented :: generics :: Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError)) -> * mut Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed (Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { caller , destructor }) } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_destroy (ffi : * mut Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_Option_std_sync_Arc_dpp_data_contract_DataContract_err_drive_proof_verifier_error_ContextProviderError { pub ok : * mut crate :: fermented :: generics :: std_sync_Arc_dpp_data_contract_DataContract , pub error : * mut crate :: fermented :: types :: drive_proof_verifier :: error :: drive_proof_verifier_error_ContextProviderError } impl ferment :: FFIConversionFrom < Result < Option < std :: sync :: Arc < dpp :: data_contract :: DataContract > > , drive_proof_verifier :: error :: ContextProviderError > > for Result_ok_Option_std_sync_Arc_dpp_data_contract_DataContract_err_drive_proof_verifier_error_ContextProviderError { unsafe fn ffi_from_const (ffi : * const Result_ok_Option_std_sync_Arc_dpp_data_contract_DataContract_err_drive_proof_verifier_error_ContextProviderError) -> Result < Option < std :: sync :: Arc < dpp :: data_contract :: DataContract > > , drive_proof_verifier :: error :: ContextProviderError > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | < crate :: fermented :: generics :: std_sync_Arc_dpp_data_contract_DataContract as ferment :: FFIConversionFrom < std :: sync :: Arc < dpp :: data_contract :: DataContract > >> :: ffi_from_opt (o) , ffi_ref . error , | o | < crate :: fermented :: types :: drive_proof_verifier :: error :: drive_proof_verifier_error_ContextProviderError as ferment :: FFIConversionFrom < drive_proof_verifier :: error :: ContextProviderError >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < Option < std :: sync :: Arc < dpp :: data_contract :: DataContract > > , drive_proof_verifier :: error :: ContextProviderError > > for Result_ok_Option_std_sync_Arc_dpp_data_contract_DataContract_err_drive_proof_verifier_error_ContextProviderError { unsafe fn ffi_to_const (obj : Result < Option < std :: sync :: Arc < dpp :: data_contract :: DataContract > > , drive_proof_verifier :: error :: ContextProviderError >) -> * const Result_ok_Option_std_sync_Arc_dpp_data_contract_DataContract_err_drive_proof_verifier_error_ContextProviderError { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: FFIConversionTo :: ffi_to_opt (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_Option_std_sync_Arc_dpp_data_contract_DataContract_err_drive_proof_verifier_error_ContextProviderError { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_Option_std_sync_Arc_dpp_data_contract_DataContract_err_drive_proof_verifier_error_ContextProviderError_ctor (ok : * mut crate :: fermented :: generics :: std_sync_Arc_dpp_data_contract_DataContract , error : * mut crate :: fermented :: types :: drive_proof_verifier :: error :: drive_proof_verifier_error_ContextProviderError) -> * mut Result_ok_Option_std_sync_Arc_dpp_data_contract_DataContract_err_drive_proof_verifier_error_ContextProviderError { ferment :: boxed (Result_ok_Option_std_sync_Arc_dpp_data_contract_DataContract_err_drive_proof_verifier_error_ContextProviderError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_Option_std_sync_Arc_dpp_data_contract_DataContract_err_drive_proof_verifier_error_ContextProviderError_destroy (ffi : * mut Result_ok_Option_std_sync_Arc_dpp_data_contract_DataContract_err_drive_proof_verifier_error_ContextProviderError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Arr_u8_32 { pub count : usize , pub values : * mut u8 } impl ferment :: FFIConversionFrom < [u8 ; 32] > for Arr_u8_32 { unsafe fn ffi_from_const (ffi : * const Arr_u8_32) -> [u8 ; 32] { let ffi_ref = & * ffi ; let vec : Vec < u8 > = ferment :: from_primitive_group (ffi_ref . values , ffi_ref . count) ; vec . try_into () . unwrap () } } impl ferment :: FFIConversionTo < [u8 ; 32] > for Arr_u8_32 { unsafe fn ffi_to_const (obj : [u8 ; 32]) -> * const Arr_u8_32 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_primitive_group (obj . into_iter ()) }) } } impl Drop for Arr_u8_32 { fn drop (& mut self) { unsafe { ferment :: unbox_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Arr_u8_32_ctor (count : usize , values : * mut u8) -> * mut Arr_u8_32 { ferment :: boxed (Arr_u8_32 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Arr_u8_32_destroy (ffi : * mut Arr_u8_32) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_u8_37 { pub count : usize , pub values : * mut * mut crate :: fermented :: generics :: Arr_u8_37 } impl ferment :: FFIConversionFrom < Vec < [u8 ; 37] > > for Vec_u8_37 { unsafe fn ffi_from_const (ffi : * const Vec_u8_37) -> Vec < [u8 ; 37] > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < [u8 ; 37] > > for Vec_u8_37 { unsafe fn ffi_to_const (obj : Vec < [u8 ; 37] >) -> * const Vec_u8_37 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_u8_37 { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_u8_37_ctor (count : usize , values : * mut * mut crate :: fermented :: generics :: Arr_u8_37) -> * mut Vec_u8_37 { ferment :: boxed (Vec_u8_37 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_u8_37_destroy (ffi : * mut Vec_u8_37) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_u8_arr_32_values_u8_arr_96 { pub count : usize , pub keys : * mut * mut crate :: fermented :: generics :: Arr_u8_32 , pub values : * mut * mut crate :: fermented :: generics :: Arr_u8_96 } impl ferment :: FFIConversionFrom < std :: collections :: BTreeMap < [u8 ; 32] , [u8 ; 96] > > for std_collections_Map_keys_u8_arr_32_values_u8_arr_96 { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_u8_arr_32_values_u8_arr_96) -> std :: collections :: BTreeMap < [u8 ; 32] , [u8 ; 96] > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (o) , | o | < crate :: fermented :: generics :: Arr_u8_96 as ferment :: FFIConversionFrom < [u8 ; 96] >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < std :: collections :: BTreeMap < [u8 ; 32] , [u8 ; 96] > > for std_collections_Map_keys_u8_arr_32_values_u8_arr_96 { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < [u8 ; 32] , [u8 ; 96] >) -> * const std_collections_Map_keys_u8_arr_32_values_u8_arr_96 { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_complex_group (obj . keys () . cloned ()) , values : ferment :: to_complex_group (obj . values () . cloned ()) }) } } impl Drop for std_collections_Map_keys_u8_arr_32_values_u8_arr_96 { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . keys , self . count) ; ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_u8_arr_32_values_u8_arr_96_ctor (count : usize , keys : * mut * mut crate :: fermented :: generics :: Arr_u8_32 , values : * mut * mut crate :: fermented :: generics :: Arr_u8_96) -> * mut std_collections_Map_keys_u8_arr_32_values_u8_arr_96 { ferment :: boxed (std_collections_Map_keys_u8_arr_32_values_u8_arr_96 { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_u8_arr_32_values_u8_arr_96_destroy (ffi : * mut std_collections_Map_keys_u8_arr_32_values_u8_arr_96) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_dash_spv_crypto_keys_KeyError { pub ok : * mut dash_spv_crypto :: keys :: bls_key :: BLSKey , pub error : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError } impl ferment :: FFIConversionFrom < Result < dash_spv_crypto :: keys :: bls_key :: BLSKey , dash_spv_crypto :: keys :: KeyError > > for Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_dash_spv_crypto_keys_KeyError { unsafe fn ffi_from_const (ffi : * const Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_dash_spv_crypto_keys_KeyError) -> Result < dash_spv_crypto :: keys :: bls_key :: BLSKey , dash_spv_crypto :: keys :: KeyError > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | (& * o) . clone () , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: KeyError >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: bls_key :: BLSKey , dash_spv_crypto :: keys :: KeyError > > for Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_dash_spv_crypto_keys_KeyError { unsafe fn ffi_to_const (obj : Result < dash_spv_crypto :: keys :: bls_key :: BLSKey , dash_spv_crypto :: keys :: KeyError >) -> * const Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_dash_spv_crypto_keys_KeyError { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: boxed (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_dash_spv_crypto_keys_KeyError { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_dash_spv_crypto_keys_KeyError_ctor (ok : * mut dash_spv_crypto :: keys :: bls_key :: BLSKey , error : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError) -> * mut Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_dash_spv_crypto_keys_KeyError { ferment :: boxed (Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_dash_spv_crypto_keys_KeyError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_dash_spv_crypto_keys_KeyError_destroy (ffi : * mut Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_dash_spv_crypto_keys_KeyError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_u32_RTRN_Arr_u8_32 { pub obj : * mut crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_u32_RTRN_Arr_u8_32 } impl ferment :: FFIConversionFrom < std :: sync :: Arc < dyn Fn (* const std :: os :: raw :: c_void , u32) -> [u8 ; 32] > > for std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_u32_RTRN_Arr_u8_32 { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_u32_RTRN_Arr_u8_32) -> std :: sync :: Arc < dyn Fn (* const std :: os :: raw :: c_void , u32) -> [u8 ; 32] > { let ffi_ref = & * ffi ; std :: sync :: Arc :: new (move | o_0 , o_1 | unsafe { (& * ffi_ref . obj) . call (o_0 , o_1) }) } } impl Drop for std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_u32_RTRN_Arr_u8_32 { fn drop (& mut self) { unsafe { ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_u32_RTRN_Arr_u8_32_ctor (obj : * mut crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_u32_RTRN_Arr_u8_32) -> * mut std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_u32_RTRN_Arr_u8_32 { ferment :: boxed (std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_u32_RTRN_Arr_u8_32 { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_u32_RTRN_Arr_u8_32_destroy (ffi : * mut std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_u32_RTRN_Arr_u8_32) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dash_spv_crypto_tx_input_TransactionInput { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dash_spv_crypto :: tx :: input :: dash_spv_crypto_tx_input_TransactionInput } impl ferment :: FFIConversionFrom < Vec < dash_spv_crypto :: tx :: input :: TransactionInput > > for Vec_dash_spv_crypto_tx_input_TransactionInput { unsafe fn ffi_from_const (ffi : * const Vec_dash_spv_crypto_tx_input_TransactionInput) -> Vec < dash_spv_crypto :: tx :: input :: TransactionInput > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < dash_spv_crypto :: tx :: input :: TransactionInput > > for Vec_dash_spv_crypto_tx_input_TransactionInput { unsafe fn ffi_to_const (obj : Vec < dash_spv_crypto :: tx :: input :: TransactionInput >) -> * const Vec_dash_spv_crypto_tx_input_TransactionInput { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dash_spv_crypto_tx_input_TransactionInput { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_crypto_tx_input_TransactionInput_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dash_spv_crypto :: tx :: input :: dash_spv_crypto_tx_input_TransactionInput) -> * mut Vec_dash_spv_crypto_tx_input_TransactionInput { ferment :: boxed (Vec_dash_spv_crypto_tx_input_TransactionInput { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_crypto_tx_input_TransactionInput_destroy (ffi : * mut Vec_dash_spv_crypto_tx_input_TransactionInput) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_bool_err_dash_spv_crypto_keys_KeyError { pub ok : * mut bool , pub error : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError } impl ferment :: FFIConversionFrom < Result < bool , dash_spv_crypto :: keys :: KeyError > > for Result_ok_bool_err_dash_spv_crypto_keys_KeyError { unsafe fn ffi_from_const (ffi : * const Result_ok_bool_err_dash_spv_crypto_keys_KeyError) -> Result < bool , dash_spv_crypto :: keys :: KeyError > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | * o , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: KeyError >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < bool , dash_spv_crypto :: keys :: KeyError > > for Result_ok_bool_err_dash_spv_crypto_keys_KeyError { unsafe fn ffi_to_const (obj : Result < bool , dash_spv_crypto :: keys :: KeyError >) -> * const Result_ok_bool_err_dash_spv_crypto_keys_KeyError { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: boxed (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_bool_err_dash_spv_crypto_keys_KeyError { fn drop (& mut self) { unsafe { ferment :: destroy_opt_primitive (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_bool_err_dash_spv_crypto_keys_KeyError_ctor (ok : * mut bool , error : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError) -> * mut Result_ok_bool_err_dash_spv_crypto_keys_KeyError { ferment :: boxed (Result_ok_bool_err_dash_spv_crypto_keys_KeyError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_bool_err_dash_spv_crypto_keys_KeyError_destroy (ffi : * mut Result_ok_bool_err_dash_spv_crypto_keys_KeyError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { pub ok : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: block :: dash_spv_masternode_processor_common_block_Block , pub error : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: core_provider :: dash_spv_masternode_processor_processing_core_provider_CoreProviderError } impl ferment :: FFIConversionFrom < Result < dash_spv_masternode_processor :: common :: block :: Block , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > > for Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { unsafe fn ffi_from_const (ffi : * const Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> Result < dash_spv_masternode_processor :: common :: block :: Block , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | < crate :: fermented :: types :: dash_spv_masternode_processor :: common :: block :: dash_spv_masternode_processor_common_block_Block as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: common :: block :: Block >> :: ffi_from (o) , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: core_provider :: dash_spv_masternode_processor_processing_core_provider_CoreProviderError as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < dash_spv_masternode_processor :: common :: block :: Block , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > > for Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { unsafe fn ffi_to_const (obj : Result < dash_spv_masternode_processor :: common :: block :: Block , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError >) -> * const Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: FFIConversionTo :: ffi_to (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_ctor (ok : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: block :: dash_spv_masternode_processor_common_block_Block , error : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: core_provider :: dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> * mut Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed (Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_destroy (ffi : * mut Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_u32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { pub obj : * mut crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_u32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError } impl ferment :: FFIConversionFrom < std :: sync :: Arc < dyn Fn (* const std :: os :: raw :: c_void , u32) -> Result < dash_spv_masternode_processor :: common :: block :: Block , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > > > for std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_u32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_u32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> std :: sync :: Arc < dyn Fn (* const std :: os :: raw :: c_void , u32) -> Result < dash_spv_masternode_processor :: common :: block :: Block , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > > { let ffi_ref = & * ffi ; std :: sync :: Arc :: new (move | o_0 , o_1 | unsafe { (& * ffi_ref . obj) . call (o_0 , o_1) }) } } impl Drop for std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_u32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { fn drop (& mut self) { unsafe { ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_u32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_ctor (obj : * mut crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_u32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> * mut std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_u32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed (std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_u32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_u32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_destroy (ffi : * mut std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_u32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_Block_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_u8_arr_32_values_dash_spv_crypto_llmq_entry_LLMQEntry { pub count : usize , pub keys : * mut * mut crate :: fermented :: generics :: Arr_u8_32 , pub values : * mut * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry } impl ferment :: FFIConversionFrom < std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_crypto :: llmq :: entry :: LLMQEntry > > for std_collections_Map_keys_u8_arr_32_values_dash_spv_crypto_llmq_entry_LLMQEntry { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_u8_arr_32_values_dash_spv_crypto_llmq_entry_LLMQEntry) -> std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_crypto :: llmq :: entry :: LLMQEntry > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (o) , | o | < crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry as ferment :: FFIConversionFrom < dash_spv_crypto :: llmq :: entry :: LLMQEntry >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_crypto :: llmq :: entry :: LLMQEntry > > for std_collections_Map_keys_u8_arr_32_values_dash_spv_crypto_llmq_entry_LLMQEntry { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_crypto :: llmq :: entry :: LLMQEntry >) -> * const std_collections_Map_keys_u8_arr_32_values_dash_spv_crypto_llmq_entry_LLMQEntry { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_complex_group (obj . keys () . cloned ()) , values : ferment :: to_complex_group (obj . values () . cloned ()) }) } } impl Drop for std_collections_Map_keys_u8_arr_32_values_dash_spv_crypto_llmq_entry_LLMQEntry { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . keys , self . count) ; ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_u8_arr_32_values_dash_spv_crypto_llmq_entry_LLMQEntry_ctor (count : usize , keys : * mut * mut crate :: fermented :: generics :: Arr_u8_32 , values : * mut * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut std_collections_Map_keys_u8_arr_32_values_dash_spv_crypto_llmq_entry_LLMQEntry { ferment :: boxed (std_collections_Map_keys_u8_arr_32_values_dash_spv_crypto_llmq_entry_LLMQEntry { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_u8_arr_32_values_dash_spv_crypto_llmq_entry_LLMQEntry_destroy (ffi : * mut std_collections_Map_keys_u8_arr_32_values_dash_spv_crypto_llmq_entry_LLMQEntry) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_u8_arr_32 { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: block :: dash_spv_masternode_processor_common_block_Block , pub values : * mut * mut crate :: fermented :: generics :: Arr_u8_32 } impl ferment :: FFIConversionFrom < std :: collections :: BTreeMap < dash_spv_masternode_processor :: common :: block :: Block , [u8 ; 32] > > for std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_u8_arr_32 { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_u8_arr_32) -> std :: collections :: BTreeMap < dash_spv_masternode_processor :: common :: block :: Block , [u8 ; 32] > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < crate :: fermented :: types :: dash_spv_masternode_processor :: common :: block :: dash_spv_masternode_processor_common_block_Block as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: common :: block :: Block >> :: ffi_from (o) , | o | < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < std :: collections :: BTreeMap < dash_spv_masternode_processor :: common :: block :: Block , [u8 ; 32] > > for std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_u8_arr_32 { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < dash_spv_masternode_processor :: common :: block :: Block , [u8 ; 32] >) -> * const std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_u8_arr_32 { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_complex_group (obj . keys () . cloned ()) , values : ferment :: to_complex_group (obj . values () . cloned ()) }) } } impl Drop for std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_u8_arr_32 { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . keys , self . count) ; ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_u8_arr_32_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: block :: dash_spv_masternode_processor_common_block_Block , values : * mut * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_u8_arr_32 { ferment :: boxed (std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_u8_arr_32 { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_u8_arr_32_destroy (ffi : * mut std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_u8_arr_32) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_platform_value_types_binary_data_BinaryData_err_dpp_errors_protocol_error_ProtocolError { pub ok : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData , pub error : * mut crate :: fermented :: types :: dpp :: errors :: protocol_error :: dpp_errors_protocol_error_ProtocolError } impl ferment :: FFIConversionFrom < Result < platform_value :: types :: binary_data :: BinaryData , dpp :: errors :: protocol_error :: ProtocolError > > for Result_ok_platform_value_types_binary_data_BinaryData_err_dpp_errors_protocol_error_ProtocolError { unsafe fn ffi_from_const (ffi : * const Result_ok_platform_value_types_binary_data_BinaryData_err_dpp_errors_protocol_error_ProtocolError) -> Result < platform_value :: types :: binary_data :: BinaryData , dpp :: errors :: protocol_error :: ProtocolError > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | < crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData as ferment :: FFIConversionFrom < platform_value :: types :: binary_data :: BinaryData >> :: ffi_from (o) , ffi_ref . error , | o | < crate :: fermented :: types :: dpp :: errors :: protocol_error :: dpp_errors_protocol_error_ProtocolError as ferment :: FFIConversionFrom < dpp :: errors :: protocol_error :: ProtocolError >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < platform_value :: types :: binary_data :: BinaryData , dpp :: errors :: protocol_error :: ProtocolError > > for Result_ok_platform_value_types_binary_data_BinaryData_err_dpp_errors_protocol_error_ProtocolError { unsafe fn ffi_to_const (obj : Result < platform_value :: types :: binary_data :: BinaryData , dpp :: errors :: protocol_error :: ProtocolError >) -> * const Result_ok_platform_value_types_binary_data_BinaryData_err_dpp_errors_protocol_error_ProtocolError { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: FFIConversionTo :: ffi_to (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_platform_value_types_binary_data_BinaryData_err_dpp_errors_protocol_error_ProtocolError { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_platform_value_types_binary_data_BinaryData_err_dpp_errors_protocol_error_ProtocolError_ctor (ok : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData , error : * mut crate :: fermented :: types :: dpp :: errors :: protocol_error :: dpp_errors_protocol_error_ProtocolError) -> * mut Result_ok_platform_value_types_binary_data_BinaryData_err_dpp_errors_protocol_error_ProtocolError { ferment :: boxed (Result_ok_platform_value_types_binary_data_BinaryData_err_dpp_errors_protocol_error_ProtocolError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_platform_value_types_binary_data_BinaryData_err_dpp_errors_protocol_error_ProtocolError_destroy (ffi : * mut Result_ok_platform_value_types_binary_data_BinaryData_err_dpp_errors_protocol_error_ProtocolError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError { pub ok : * mut dash_spv_crypto :: util :: sec_vec :: SecVec , pub error : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError } impl ferment :: FFIConversionFrom < Result < dash_spv_crypto :: util :: sec_vec :: SecVec , dash_spv_crypto :: keys :: KeyError > > for Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError { unsafe fn ffi_from_const (ffi : * const Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError) -> Result < dash_spv_crypto :: util :: sec_vec :: SecVec , dash_spv_crypto :: keys :: KeyError > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | (& * o) . clone () , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: KeyError >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < dash_spv_crypto :: util :: sec_vec :: SecVec , dash_spv_crypto :: keys :: KeyError > > for Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError { unsafe fn ffi_to_const (obj : Result < dash_spv_crypto :: util :: sec_vec :: SecVec , dash_spv_crypto :: keys :: KeyError >) -> * const Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: boxed (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError_ctor (ok : * mut dash_spv_crypto :: util :: sec_vec :: SecVec , error : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError) -> * mut Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError { ferment :: boxed (Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError_destroy (ffi : * mut Result_ok_dash_spv_crypto_util_sec_vec_SecVec_err_dash_spv_crypto_keys_KeyError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Fn_ARGS_std_os_raw_c_void_platform_value_types_identifier_Identifier_RTRN_Result_ok_Option_std_sync_Arc_dpp_data_contract_DataContract_err_drive_proof_verifier_error_ContextProviderError { caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut crate :: fermented :: generics :: Result_ok_Option_std_sync_Arc_dpp_data_contract_DataContract_err_drive_proof_verifier_error_ContextProviderError , destructor : unsafe extern "C" fn (* mut crate :: fermented :: generics :: Result_ok_Option_std_sync_Arc_dpp_data_contract_DataContract_err_drive_proof_verifier_error_ContextProviderError) } impl Fn_ARGS_std_os_raw_c_void_platform_value_types_identifier_Identifier_RTRN_Result_ok_Option_std_sync_Arc_dpp_data_contract_DataContract_err_drive_proof_verifier_error_ContextProviderError { pub unsafe fn call (& self , o_0 : * const std :: os :: raw :: c_void , o_1 : platform_value :: types :: identifier :: Identifier) -> Result < Option < std :: sync :: Arc < dpp :: data_contract :: DataContract > > , drive_proof_verifier :: error :: ContextProviderError > { let ffi_result = (self . caller) (o_0 , < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionTo < platform_value :: types :: identifier :: Identifier >> :: ffi_to (o_1)) ; let result = < crate :: fermented :: generics :: Result_ok_Option_std_sync_Arc_dpp_data_contract_DataContract_err_drive_proof_verifier_error_ContextProviderError as ferment :: FFIConversionFrom < Result < Option < std :: sync :: Arc < dpp :: data_contract :: DataContract > > , drive_proof_verifier :: error :: ContextProviderError > >> :: ffi_from (ffi_result) ; (self . destructor) (ffi_result) ; result } } unsafe impl Send for Fn_ARGS_std_os_raw_c_void_platform_value_types_identifier_Identifier_RTRN_Result_ok_Option_std_sync_Arc_dpp_data_contract_DataContract_err_drive_proof_verifier_error_ContextProviderError { } unsafe impl Sync for Fn_ARGS_std_os_raw_c_void_platform_value_types_identifier_Identifier_RTRN_Result_ok_Option_std_sync_Arc_dpp_data_contract_DataContract_err_drive_proof_verifier_error_ContextProviderError { } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_platform_value_types_identifier_Identifier_RTRN_Result_ok_Option_std_sync_Arc_dpp_data_contract_DataContract_err_drive_proof_verifier_error_ContextProviderError_ctor (caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut crate :: fermented :: generics :: Result_ok_Option_std_sync_Arc_dpp_data_contract_DataContract_err_drive_proof_verifier_error_ContextProviderError , destructor : unsafe extern "C" fn (* mut crate :: fermented :: generics :: Result_ok_Option_std_sync_Arc_dpp_data_contract_DataContract_err_drive_proof_verifier_error_ContextProviderError)) -> * mut Fn_ARGS_std_os_raw_c_void_platform_value_types_identifier_Identifier_RTRN_Result_ok_Option_std_sync_Arc_dpp_data_contract_DataContract_err_drive_proof_verifier_error_ContextProviderError { ferment :: boxed (Fn_ARGS_std_os_raw_c_void_platform_value_types_identifier_Identifier_RTRN_Result_ok_Option_std_sync_Arc_dpp_data_contract_DataContract_err_drive_proof_verifier_error_ContextProviderError { caller , destructor }) } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_platform_value_types_identifier_Identifier_RTRN_Result_ok_Option_std_sync_Arc_dpp_data_contract_DataContract_err_drive_proof_verifier_error_ContextProviderError_destroy (ffi : * mut Fn_ARGS_std_os_raw_c_void_platform_value_types_identifier_Identifier_RTRN_Result_ok_Option_std_sync_Arc_dpp_data_contract_DataContract_err_drive_proof_verifier_error_ContextProviderError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_String_values_platform_value_Value { pub count : usize , pub keys : * mut * mut std :: os :: raw :: c_char , pub values : * mut * mut crate :: fermented :: types :: platform_value :: platform_value_Value } impl ferment :: FFIConversionFrom < std :: collections :: BTreeMap < String , platform_value :: Value > > for std_collections_Map_keys_String_values_platform_value_Value { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_String_values_platform_value_Value) -> std :: collections :: BTreeMap < String , platform_value :: Value > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (o) , | o | < crate :: fermented :: types :: platform_value :: platform_value_Value as ferment :: FFIConversionFrom < platform_value :: Value >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < std :: collections :: BTreeMap < String , platform_value :: Value > > for std_collections_Map_keys_String_values_platform_value_Value { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < String , platform_value :: Value >) -> * const std_collections_Map_keys_String_values_platform_value_Value { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_complex_group (obj . keys () . cloned ()) , values : ferment :: to_complex_group (obj . values () . cloned ()) }) } } impl Drop for std_collections_Map_keys_String_values_platform_value_Value { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr_composer (self . keys , self . count , ferment :: unbox_string) ; ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_String_values_platform_value_Value_ctor (count : usize , keys : * mut * mut std :: os :: raw :: c_char , values : * mut * mut crate :: fermented :: types :: platform_value :: platform_value_Value) -> * mut std_collections_Map_keys_String_values_platform_value_Value { ferment :: boxed (std_collections_Map_keys_String_values_platform_value_Value { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_String_values_platform_value_Value_destroy (ffi : * mut std_collections_Map_keys_String_values_platform_value_Value) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Tuple_Arr_u8_32_Arr_u8_32 { pub o_0 : * mut crate :: fermented :: generics :: Arr_u8_32 , pub o_1 : * mut crate :: fermented :: generics :: Arr_u8_32 } impl ferment :: FFIConversionFrom < ([u8 ; 32] , [u8 ; 32]) > for Tuple_Arr_u8_32_Arr_u8_32 { unsafe fn ffi_from_const (ffi : * const Tuple_Arr_u8_32_Arr_u8_32) -> ([u8 ; 32] , [u8 ; 32]) { let ffi_ref = & * ffi ; (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . o_0) , ferment :: FFIConversionFrom :: ffi_from (ffi_ref . o_1)) } } impl ferment :: FFIConversionTo < ([u8 ; 32] , [u8 ; 32]) > for Tuple_Arr_u8_32_Arr_u8_32 { unsafe fn ffi_to_const (obj : ([u8 ; 32] , [u8 ; 32])) -> * const Tuple_Arr_u8_32_Arr_u8_32 { ferment :: boxed (Self { o_0 : ferment :: FFIConversionTo :: ffi_to (obj . 0) , o_1 : ferment :: FFIConversionTo :: ffi_to (obj . 1) }) } } impl Drop for Tuple_Arr_u8_32_Arr_u8_32 { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . o_0) ; ferment :: unbox_any (self . o_1) ; } } } # [no_mangle] pub unsafe extern "C" fn Tuple_Arr_u8_32_Arr_u8_32_ctor (o_0 : * mut crate :: fermented :: generics :: Arr_u8_32 , o_1 : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut Tuple_Arr_u8_32_Arr_u8_32 { ferment :: boxed (Tuple_Arr_u8_32_Arr_u8_32 { o_0 , o_1 }) } # [no_mangle] pub unsafe extern "C" fn Tuple_Arr_u8_32_Arr_u8_32_destroy (ffi : * mut Tuple_Arr_u8_32_Arr_u8_32) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_dash_spv_platform_cache_PlatformCache { pub obj : * mut dash_spv_platform :: cache :: PlatformCache } impl ferment :: FFIConversionFrom < std :: sync :: Arc < dash_spv_platform :: cache :: PlatformCache > > for std_sync_Arc_dash_spv_platform_cache_PlatformCache { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_dash_spv_platform_cache_PlatformCache) -> std :: sync :: Arc < dash_spv_platform :: cache :: PlatformCache > { let ffi_ref = & * ffi ; std :: sync :: Arc :: from_raw (ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < dash_spv_platform :: cache :: PlatformCache > > for std_sync_Arc_dash_spv_platform_cache_PlatformCache { unsafe fn ffi_to_const (obj : std :: sync :: Arc < dash_spv_platform :: cache :: PlatformCache >) -> * const std_sync_Arc_dash_spv_platform_cache_PlatformCache { ferment :: boxed (Self { obj : std :: sync :: Arc :: into_raw (obj) . cast_mut () }) } } impl Drop for std_sync_Arc_dash_spv_platform_cache_PlatformCache { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dash_spv_platform_cache_PlatformCache_ctor (obj : * mut dash_spv_platform :: cache :: PlatformCache) -> * mut std_sync_Arc_dash_spv_platform_cache_PlatformCache { ferment :: boxed (std_sync_Arc_dash_spv_platform_cache_PlatformCache { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dash_spv_platform_cache_PlatformCache_destroy (ffi : * mut std_sync_Arc_dash_spv_platform_cache_PlatformCache) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_u8_16 { pub count : usize , pub values : * mut * mut crate :: fermented :: generics :: Arr_u8_16 } impl ferment :: FFIConversionFrom < Vec < [u8 ; 16] > > for Vec_u8_16 { unsafe fn ffi_from_const (ffi : * const Vec_u8_16) -> Vec < [u8 ; 16] > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < [u8 ; 16] > > for Vec_u8_16 { unsafe fn ffi_to_const (obj : Vec < [u8 ; 16] >) -> * const Vec_u8_16 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_u8_16 { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_u8_16_ctor (count : usize , values : * mut * mut crate :: fermented :: generics :: Arr_u8_16) -> * mut Vec_u8_16 { ferment :: boxed (Vec_u8_16 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_u8_16_destroy (ffi : * mut Vec_u8_16) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList { pub obj : * mut crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList } impl ferment :: FFIConversionFrom < std :: sync :: RwLock < std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList > > > for std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList { unsafe fn ffi_from_const (ffi : * const std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> std :: sync :: RwLock < std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList > > { let ffi_ref = & * ffi ; std :: sync :: RwLock :: new (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . obj)) } } impl ferment :: FFIConversionTo < std :: sync :: RwLock < std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList > > > for std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList { unsafe fn ffi_to_const (obj : std :: sync :: RwLock < std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList > >) -> * const std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList { ferment :: boxed (Self { obj : ferment :: FFIConversionTo :: ffi_to (obj . into_inner () . expect ("Err")) }) } } impl Drop for std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList_ctor (obj : * mut crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> * mut std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList { ferment :: boxed (std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList_destroy (ffi : * mut std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry } impl ferment :: FFIConversionFrom < std :: collections :: HashSet < dash_spv_crypto :: llmq :: entry :: LLMQEntry > > for std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry { unsafe fn ffi_from_const (ffi : * const std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry) -> std :: collections :: HashSet < dash_spv_crypto :: llmq :: entry :: LLMQEntry > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < std :: collections :: HashSet < dash_spv_crypto :: llmq :: entry :: LLMQEntry > > for std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry { unsafe fn ffi_to_const (obj : std :: collections :: HashSet < dash_spv_crypto :: llmq :: entry :: LLMQEntry >) -> * const std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dash_spv_crypto :: llmq :: entry :: dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry { ferment :: boxed (std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry { count , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry_destroy (ffi : * mut std_collections_HashSet_dash_spv_crypto_llmq_entry_LLMQEntry) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { pub count : usize , pub keys : * mut * mut crate :: fermented :: generics :: Arr_u8_32 , pub values : * mut * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry } impl ferment :: FFIConversionFrom < std :: collections :: BTreeMap < [u8 ; 32] , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > > for std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> std :: collections :: BTreeMap < [u8 ; 32] , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (o) , | o | < crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry as ferment :: FFIConversionFrom < Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < std :: collections :: BTreeMap < [u8 ; 32] , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > > for std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < [u8 ; 32] , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > >) -> * const std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_complex_group (obj . keys () . cloned ()) , values : ferment :: to_complex_group (obj . values () . cloned ()) }) } } impl Drop for std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . keys , self . count) ; ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_ctor (count : usize , keys : * mut * mut crate :: fermented :: generics :: Arr_u8_32 , values : * mut * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment :: boxed (std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_destroy (ffi : * mut std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Arr_u8_96 { pub count : usize , pub values : * mut u8 } impl ferment :: FFIConversionFrom < [u8 ; 96] > for Arr_u8_96 { unsafe fn ffi_from_const (ffi : * const Arr_u8_96) -> [u8 ; 96] { let ffi_ref = & * ffi ; let vec : Vec < u8 > = ferment :: from_primitive_group (ffi_ref . values , ffi_ref . count) ; vec . try_into () . unwrap () } } impl ferment :: FFIConversionTo < [u8 ; 96] > for Arr_u8_96 { unsafe fn ffi_to_const (obj : [u8 ; 96]) -> * const Arr_u8_96 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_primitive_group (obj . into_iter ()) }) } } impl Drop for Arr_u8_96 { fn drop (& mut self) { unsafe { ferment :: unbox_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Arr_u8_96_ctor (count : usize , values : * mut u8) -> * mut Arr_u8_96 { ferment :: boxed (Arr_u8_96 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Arr_u8_96_destroy (ffi : * mut Arr_u8_96) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Slice_u8 { pub count : usize , pub values : * mut u8 } impl ferment :: FFIConversionFrom < Vec < u8 > > for Slice_u8 { unsafe fn ffi_from_const (ffi : * const Slice_u8) -> Vec < u8 > { let ffi_ref = & * ffi ; ferment :: from_primitive_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < u8 > > for Slice_u8 { unsafe fn ffi_to_const (obj : Vec < u8 >) -> * const Slice_u8 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_primitive_group (obj . into_iter ()) }) } } impl Drop for Slice_u8 { fn drop (& mut self) { unsafe { ferment :: unbox_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Slice_u8_ctor (count : usize , values : * mut u8) -> * mut Slice_u8 { ferment :: boxed (Slice_u8 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Slice_u8_destroy (ffi : * mut Slice_u8) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_dash_spv_masternode_processor_models_sync_state_CacheState_RTRN_ { pub obj : * mut crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_dash_spv_masternode_processor_models_sync_state_CacheState_RTRN_ } impl ferment :: FFIConversionFrom < std :: sync :: Arc < dyn Fn (* const std :: os :: raw :: c_void , dash_spv_masternode_processor :: models :: sync_state :: CacheState) > > for std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_dash_spv_masternode_processor_models_sync_state_CacheState_RTRN_ { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_dash_spv_masternode_processor_models_sync_state_CacheState_RTRN_) -> std :: sync :: Arc < dyn Fn (* const std :: os :: raw :: c_void , dash_spv_masternode_processor :: models :: sync_state :: CacheState) > { let ffi_ref = & * ffi ; std :: sync :: Arc :: new (move | o_0 , o_1 | unsafe { (& * ffi_ref . obj) . call (o_0 , o_1) }) } } impl Drop for std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_dash_spv_masternode_processor_models_sync_state_CacheState_RTRN_ { fn drop (& mut self) { unsafe { ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_dash_spv_masternode_processor_models_sync_state_CacheState_RTRN__ctor (obj : * mut crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_dash_spv_masternode_processor_models_sync_state_CacheState_RTRN_) -> * mut std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_dash_spv_masternode_processor_models_sync_state_CacheState_RTRN_ { ferment :: boxed (std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_dash_spv_masternode_processor_models_sync_state_CacheState_RTRN_ { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_dash_spv_masternode_processor_models_sync_state_CacheState_RTRN__destroy (ffi : * mut std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_dash_spv_masternode_processor_models_sync_state_CacheState_RTRN_) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Fn_ARGS_std_os_raw_c_void_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_ { caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) } impl Fn_ARGS_std_os_raw_c_void_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_ { pub unsafe fn call (& self , o_0 : * const std :: os :: raw :: c_void , o_1 : Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry >) { let ffi_result = (self . caller) (o_0 , < crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry as ferment :: FFIConversionTo < Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > >> :: ffi_to (o_1)) ; ffi_result } } unsafe impl Send for Fn_ARGS_std_os_raw_c_void_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_ { } unsafe impl Sync for Fn_ARGS_std_os_raw_c_void_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_ { } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN__ctor (caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry)) -> * mut Fn_ARGS_std_os_raw_c_void_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_ { ferment :: boxed (Fn_ARGS_std_os_raw_c_void_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_ { caller }) } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN__destroy (ffi : * mut Fn_ARGS_std_os_raw_c_void_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { pub ok : * mut bool , pub error : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: core_provider :: dash_spv_masternode_processor_processing_core_provider_CoreProviderError } impl ferment :: FFIConversionFrom < Result < bool , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > > for Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { unsafe fn ffi_from_const (ffi : * const Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> Result < bool , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | * o , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: core_provider :: dash_spv_masternode_processor_processing_core_provider_CoreProviderError as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < bool , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > > for Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { unsafe fn ffi_to_const (obj : Result < bool , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError >) -> * const Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: boxed (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { fn drop (& mut self) { unsafe { ferment :: destroy_opt_primitive (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_ctor (ok : * mut bool , error : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: core_provider :: dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> * mut Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed (Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_destroy (ffi : * mut Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_Option_u64_err_dash_spv_platform_error_Error { pub ok : * mut u64 , pub error : * mut crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error } impl ferment :: FFIConversionFrom < Result < Option < u64 > , dash_spv_platform :: error :: Error > > for Result_ok_Option_u64_err_dash_spv_platform_error_Error { unsafe fn ffi_from_const (ffi : * const Result_ok_Option_u64_err_dash_spv_platform_error_Error) -> Result < Option < u64 > , dash_spv_platform :: error :: Error > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | ferment :: from_opt_primitive (o) , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error as ferment :: FFIConversionFrom < dash_spv_platform :: error :: Error >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < Option < u64 > , dash_spv_platform :: error :: Error > > for Result_ok_Option_u64_err_dash_spv_platform_error_Error { unsafe fn ffi_to_const (obj : Result < Option < u64 > , dash_spv_platform :: error :: Error >) -> * const Result_ok_Option_u64_err_dash_spv_platform_error_Error { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: to_opt_primitive (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_Option_u64_err_dash_spv_platform_error_Error { fn drop (& mut self) { unsafe { ferment :: destroy_opt_primitive (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_Option_u64_err_dash_spv_platform_error_Error_ctor (ok : * mut u64 , error : * mut crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error) -> * mut Result_ok_Option_u64_err_dash_spv_platform_error_Error { ferment :: boxed (Result_ok_Option_u64_err_dash_spv_platform_error_Error { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_Option_u64_err_dash_spv_platform_error_Error_destroy (ffi : * mut Result_ok_Option_u64_err_dash_spv_platform_error_Error) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_u32 { pub count : usize , pub values : * mut u32 } impl ferment :: FFIConversionFrom < Vec < u32 > > for Vec_u32 { unsafe fn ffi_from_const (ffi : * const Vec_u32) -> Vec < u32 > { let ffi_ref = & * ffi ; ferment :: from_primitive_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < u32 > > for Vec_u32 { unsafe fn ffi_to_const (obj : Vec < u32 >) -> * const Vec_u32 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_primitive_group (obj . into_iter ()) }) } } impl Drop for Vec_u32 { fn drop (& mut self) { unsafe { ferment :: unbox_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_u32_ctor (count : usize , values : * mut u32) -> * mut Vec_u32 { ferment :: boxed (Vec_u32 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_u32_destroy (ffi : * mut Vec_u32) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { pub obj : * mut crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError } impl ferment :: FFIConversionFrom < std :: sync :: Arc < dyn Fn (* const std :: os :: raw :: c_void , [u8 ; 32] , std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry >) -> Result < bool , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > > > for std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> std :: sync :: Arc < dyn Fn (* const std :: os :: raw :: c_void , [u8 ; 32] , std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry >) -> Result < bool , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > > { let ffi_ref = & * ffi ; std :: sync :: Arc :: new (move | o_0 , o_1 , o_2 | unsafe { (& * ffi_ref . obj) . call (o_0 , o_1 , o_2) }) } } impl Drop for std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { fn drop (& mut self) { unsafe { ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_ctor (obj : * mut crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> * mut std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed (std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_destroy (ffi : * mut std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_BTreeSet_String { pub count : usize , pub values : * mut * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < std :: collections :: BTreeSet < String > > for std_collections_BTreeSet_String { unsafe fn ffi_from_const (ffi : * const std_collections_BTreeSet_String) -> std :: collections :: BTreeSet < String > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < std :: collections :: BTreeSet < String > > for std_collections_BTreeSet_String { unsafe fn ffi_to_const (obj : std :: collections :: BTreeSet < String >) -> * const std_collections_BTreeSet_String { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for std_collections_BTreeSet_String { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr_composer (self . values , self . count , ferment :: unbox_string) ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_BTreeSet_String_ctor (count : usize , values : * mut * mut std :: os :: raw :: c_char) -> * mut std_collections_BTreeSet_String { ferment :: boxed (std_collections_BTreeSet_String { count , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_BTreeSet_String_destroy (ffi : * mut std_collections_BTreeSet_String) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub values : * mut * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document } impl ferment :: FFIConversionFrom < indexmap :: IndexMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > > for indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document { unsafe fn ffi_from_const (ffi : * const indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document) -> indexmap :: IndexMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (o) , | o | < crate :: fermented :: types :: dpp :: document :: dpp_document_Document as ferment :: FFIConversionFrom < dpp :: document :: Document >> :: ffi_from_opt (o)) } } impl ferment :: FFIConversionTo < indexmap :: IndexMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > > for indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document { unsafe fn ffi_to_const (obj : indexmap :: IndexMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > >) -> * const indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_complex_group (obj . keys () . cloned ()) , values : ferment :: to_opt_complex_group (obj . values () . cloned ()) }) } } impl Drop for indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . keys , self . count) ; ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , values : * mut * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document) -> * mut indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document { ferment :: boxed (indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document_destroy (ffi : * mut indexmap_IndexMap_platform_value_types_identifier_Identifier_Option_dpp_document_Document) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dpp_data_contract_document_type_index_IndexProperty { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_IndexProperty } impl ferment :: FFIConversionFrom < Vec < dpp :: data_contract :: document_type :: index :: IndexProperty > > for Vec_dpp_data_contract_document_type_index_IndexProperty { unsafe fn ffi_from_const (ffi : * const Vec_dpp_data_contract_document_type_index_IndexProperty) -> Vec < dpp :: data_contract :: document_type :: index :: IndexProperty > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < dpp :: data_contract :: document_type :: index :: IndexProperty > > for Vec_dpp_data_contract_document_type_index_IndexProperty { unsafe fn ffi_to_const (obj : Vec < dpp :: data_contract :: document_type :: index :: IndexProperty >) -> * const Vec_dpp_data_contract_document_type_index_IndexProperty { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dpp_data_contract_document_type_index_IndexProperty { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_data_contract_document_type_index_IndexProperty_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index :: dpp_data_contract_document_type_index_IndexProperty) -> * mut Vec_dpp_data_contract_document_type_index_IndexProperty { ferment :: boxed (Vec_dpp_data_contract_document_type_index_IndexProperty { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_data_contract_document_type_index_IndexProperty_destroy (ffi : * mut Vec_dpp_data_contract_document_type_index_IndexProperty) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_dash_spv_platform_PlatformSDK { pub obj : * mut dash_spv_platform :: PlatformSDK } impl ferment :: FFIConversionFrom < std :: sync :: Arc < dash_spv_platform :: PlatformSDK > > for std_sync_Arc_dash_spv_platform_PlatformSDK { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_dash_spv_platform_PlatformSDK) -> std :: sync :: Arc < dash_spv_platform :: PlatformSDK > { let ffi_ref = & * ffi ; std :: sync :: Arc :: from_raw (ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < dash_spv_platform :: PlatformSDK > > for std_sync_Arc_dash_spv_platform_PlatformSDK { unsafe fn ffi_to_const (obj : std :: sync :: Arc < dash_spv_platform :: PlatformSDK >) -> * const std_sync_Arc_dash_spv_platform_PlatformSDK { ferment :: boxed (Self { obj : std :: sync :: Arc :: into_raw (obj) . cast_mut () }) } } impl Drop for std_sync_Arc_dash_spv_platform_PlatformSDK { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dash_spv_platform_PlatformSDK_ctor (obj : * mut dash_spv_platform :: PlatformSDK) -> * mut std_sync_Arc_dash_spv_platform_PlatformSDK { ferment :: boxed (std_sync_Arc_dash_spv_platform_PlatformSDK { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dash_spv_platform_PlatformSDK_destroy (ffi : * mut std_sync_Arc_dash_spv_platform_PlatformSDK) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dashcore_blockdata_transaction_txin_TxIn { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: txin :: dashcore_blockdata_transaction_txin_TxIn } impl ferment :: FFIConversionFrom < Vec < dashcore :: blockdata :: transaction :: txin :: TxIn > > for Vec_dashcore_blockdata_transaction_txin_TxIn { unsafe fn ffi_from_const (ffi : * const Vec_dashcore_blockdata_transaction_txin_TxIn) -> Vec < dashcore :: blockdata :: transaction :: txin :: TxIn > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < dashcore :: blockdata :: transaction :: txin :: TxIn > > for Vec_dashcore_blockdata_transaction_txin_TxIn { unsafe fn ffi_to_const (obj : Vec < dashcore :: blockdata :: transaction :: txin :: TxIn >) -> * const Vec_dashcore_blockdata_transaction_txin_TxIn { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dashcore_blockdata_transaction_txin_TxIn { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dashcore_blockdata_transaction_txin_TxIn_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: txin :: dashcore_blockdata_transaction_txin_TxIn) -> * mut Vec_dashcore_blockdata_transaction_txin_TxIn { ferment :: boxed (Vec_dashcore_blockdata_transaction_txin_TxIn { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dashcore_blockdata_transaction_txin_TxIn_destroy (ffi : * mut Vec_dashcore_blockdata_transaction_txin_TxIn) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_u8_32 { pub count : usize , pub values : * mut * mut crate :: fermented :: generics :: Arr_u8_32 } impl ferment :: FFIConversionFrom < Vec < [u8 ; 32] > > for Vec_u8_32 { unsafe fn ffi_from_const (ffi : * const Vec_u8_32) -> Vec < [u8 ; 32] > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < [u8 ; 32] > > for Vec_u8_32 { unsafe fn ffi_to_const (obj : Vec < [u8 ; 32] >) -> * const Vec_u8_32 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_u8_32 { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_u8_32_ctor (count : usize , values : * mut * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut Vec_u8_32 { ferment :: boxed (Vec_u8_32 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_u8_32_destroy (ffi : * mut Vec_u8_32) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_bool { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: block :: dash_spv_masternode_processor_common_block_Block , pub values : * mut bool } impl ferment :: FFIConversionFrom < std :: collections :: BTreeMap < dash_spv_masternode_processor :: common :: block :: Block , bool > > for std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_bool { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_bool) -> std :: collections :: BTreeMap < dash_spv_masternode_processor :: common :: block :: Block , bool > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < crate :: fermented :: types :: dash_spv_masternode_processor :: common :: block :: dash_spv_masternode_processor_common_block_Block as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: common :: block :: Block >> :: ffi_from (o) , | o | o) } } impl ferment :: FFIConversionTo < std :: collections :: BTreeMap < dash_spv_masternode_processor :: common :: block :: Block , bool > > for std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_bool { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < dash_spv_masternode_processor :: common :: block :: Block , bool >) -> * const std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_bool { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_complex_group (obj . keys () . cloned ()) , values : ferment :: to_primitive_group (obj . values () . cloned ()) }) } } impl Drop for std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_bool { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . keys , self . count) ; ferment :: unbox_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_bool_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: block :: dash_spv_masternode_processor_common_block_Block , values : * mut bool) -> * mut std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_bool { ferment :: boxed (std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_bool { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_bool_destroy (ffi : * mut std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_bool) { ferment :: unbox_any (ffi) ; } # [cfg (any (any (feature = "state-transitions")))] # [repr (C)] # [derive (Clone)] # [cfg (any (any (feature = "state-transitions")))] pub struct Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition } # [cfg (any (any (feature = "state-transitions")))] # [cfg (any (any (feature = "state-transitions")))] impl ferment :: FFIConversionFrom < Vec < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition > > for Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { unsafe fn ffi_from_const (ffi : * const Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition) -> Vec < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } # [cfg (any (any (feature = "state-transitions")))] # [cfg (any (any (feature = "state-transitions")))] impl ferment :: FFIConversionTo < Vec < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition > > for Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { unsafe fn ffi_to_const (obj : Vec < dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: DocumentTransition >) -> * const Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } # [cfg (any (any (feature = "state-transitions")))] # [cfg (any (any (feature = "state-transitions")))] impl Drop for Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [cfg (any (any (feature = "state-transitions")))] # [no_mangle] pub unsafe extern "C" fn Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: document :: documents_batch_transition :: document_transition :: dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition) -> * mut Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { ferment :: boxed (Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition { count , values }) } # [cfg (any (any (feature = "state-transitions")))] # [no_mangle] pub unsafe extern "C" fn Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition_destroy (ffi : * mut Vec_dpp_state_transition_state_transitions_document_documents_batch_transition_document_transition_DocumentTransition) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Fn_ARGS_std_os_raw_c_void_dpp_identity_identity_public_key_IdentityPublicKey_Vec_u8_RTRN_Result_ok_platform_value_types_binary_data_BinaryData_err_dpp_errors_protocol_error_ProtocolError { caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey , * mut crate :: fermented :: generics :: Vec_u8) -> * mut crate :: fermented :: generics :: Result_ok_platform_value_types_binary_data_BinaryData_err_dpp_errors_protocol_error_ProtocolError , destructor : unsafe extern "C" fn (* mut crate :: fermented :: generics :: Result_ok_platform_value_types_binary_data_BinaryData_err_dpp_errors_protocol_error_ProtocolError) } impl Fn_ARGS_std_os_raw_c_void_dpp_identity_identity_public_key_IdentityPublicKey_Vec_u8_RTRN_Result_ok_platform_value_types_binary_data_BinaryData_err_dpp_errors_protocol_error_ProtocolError { pub unsafe fn call (& self , o_0 : * const std :: os :: raw :: c_void , o_1 : & dpp :: identity :: identity_public_key :: IdentityPublicKey , o_2 : Vec < u8 >) -> Result < platform_value :: types :: binary_data :: BinaryData , dpp :: errors :: protocol_error :: ProtocolError > { let ffi_result = (self . caller) (o_0 , < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: IdentityPublicKey >> :: ffi_to (o_1 . clone ()) , < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (o_2)) ; let result = < crate :: fermented :: generics :: Result_ok_platform_value_types_binary_data_BinaryData_err_dpp_errors_protocol_error_ProtocolError as ferment :: FFIConversionFrom < Result < platform_value :: types :: binary_data :: BinaryData , dpp :: errors :: protocol_error :: ProtocolError > >> :: ffi_from (ffi_result) ; (self . destructor) (ffi_result) ; result } } unsafe impl Send for Fn_ARGS_std_os_raw_c_void_dpp_identity_identity_public_key_IdentityPublicKey_Vec_u8_RTRN_Result_ok_platform_value_types_binary_data_BinaryData_err_dpp_errors_protocol_error_ProtocolError { } unsafe impl Sync for Fn_ARGS_std_os_raw_c_void_dpp_identity_identity_public_key_IdentityPublicKey_Vec_u8_RTRN_Result_ok_platform_value_types_binary_data_BinaryData_err_dpp_errors_protocol_error_ProtocolError { } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_dpp_identity_identity_public_key_IdentityPublicKey_Vec_u8_RTRN_Result_ok_platform_value_types_binary_data_BinaryData_err_dpp_errors_protocol_error_ProtocolError_ctor (caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey , * mut crate :: fermented :: generics :: Vec_u8) -> * mut crate :: fermented :: generics :: Result_ok_platform_value_types_binary_data_BinaryData_err_dpp_errors_protocol_error_ProtocolError , destructor : unsafe extern "C" fn (* mut crate :: fermented :: generics :: Result_ok_platform_value_types_binary_data_BinaryData_err_dpp_errors_protocol_error_ProtocolError)) -> * mut Fn_ARGS_std_os_raw_c_void_dpp_identity_identity_public_key_IdentityPublicKey_Vec_u8_RTRN_Result_ok_platform_value_types_binary_data_BinaryData_err_dpp_errors_protocol_error_ProtocolError { ferment :: boxed (Fn_ARGS_std_os_raw_c_void_dpp_identity_identity_public_key_IdentityPublicKey_Vec_u8_RTRN_Result_ok_platform_value_types_binary_data_BinaryData_err_dpp_errors_protocol_error_ProtocolError { caller , destructor }) } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_dpp_identity_identity_public_key_IdentityPublicKey_Vec_u8_RTRN_Result_ok_platform_value_types_binary_data_BinaryData_err_dpp_errors_protocol_error_ProtocolError_destroy (ffi : * mut Fn_ARGS_std_os_raw_c_void_dpp_identity_identity_public_key_IdentityPublicKey_Vec_u8_RTRN_Result_ok_platform_value_types_binary_data_BinaryData_err_dpp_errors_protocol_error_ProtocolError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_Vec_u32 { pub count : usize , pub values : * mut * mut crate :: fermented :: generics :: Vec_u32 } impl ferment :: FFIConversionFrom < Vec < Vec < u32 > > > for Vec_Vec_u32 { unsafe fn ffi_from_const (ffi : * const Vec_Vec_u32) -> Vec < Vec < u32 > > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < Vec < u32 > > > for Vec_Vec_u32 { unsafe fn ffi_to_const (obj : Vec < Vec < u32 > >) -> * const Vec_Vec_u32 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_Vec_u32 { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_Vec_u32_ctor (count : usize , values : * mut * mut crate :: fermented :: generics :: Vec_u32) -> * mut Vec_Vec_u32 { ferment :: boxed (Vec_Vec_u32 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_Vec_u32_destroy (ffi : * mut Vec_Vec_u32) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Fn_ARGS_std_os_raw_c_void_u32_RTRN_Arr_u8_32 { caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , u32) -> * mut crate :: fermented :: generics :: Arr_u8_32 , destructor : unsafe extern "C" fn (* mut crate :: fermented :: generics :: Arr_u8_32) } impl Fn_ARGS_std_os_raw_c_void_u32_RTRN_Arr_u8_32 { pub unsafe fn call (& self , o_0 : * const std :: os :: raw :: c_void , o_1 : u32) -> [u8 ; 32] { let ffi_result = (self . caller) (o_0 , o_1) ; let result = < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (ffi_result) ; (self . destructor) (ffi_result) ; result } } unsafe impl Send for Fn_ARGS_std_os_raw_c_void_u32_RTRN_Arr_u8_32 { } unsafe impl Sync for Fn_ARGS_std_os_raw_c_void_u32_RTRN_Arr_u8_32 { } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_u32_RTRN_Arr_u8_32_ctor (caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , u32) -> * mut crate :: fermented :: generics :: Arr_u8_32 , destructor : unsafe extern "C" fn (* mut crate :: fermented :: generics :: Arr_u8_32)) -> * mut Fn_ARGS_std_os_raw_c_void_u32_RTRN_Arr_u8_32 { ferment :: boxed (Fn_ARGS_std_os_raw_c_void_u32_RTRN_Arr_u8_32 { caller , destructor }) } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_u32_RTRN_Arr_u8_32_destroy (ffi : * mut Fn_ARGS_std_os_raw_c_void_u32_RTRN_Arr_u8_32) { ferment :: unbox_any (ffi) ; } # [cfg (any (any (feature = "state-transitions")))] # [repr (C)] # [derive (Clone)] # [cfg (any (any (feature = "state-transitions")))] pub struct std_collections_Map_keys_platform_value_types_identifier_Identifier_values_Option_dpp_document_Document { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub values : * mut * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document } # [cfg (any (any (feature = "state-transitions")))] # [cfg (any (any (feature = "state-transitions")))] impl ferment :: FFIConversionFrom < std :: collections :: BTreeMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > > for std_collections_Map_keys_platform_value_types_identifier_Identifier_values_Option_dpp_document_Document { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_platform_value_types_identifier_Identifier_values_Option_dpp_document_Document) -> std :: collections :: BTreeMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (o) , | o | < crate :: fermented :: types :: dpp :: document :: dpp_document_Document as ferment :: FFIConversionFrom < dpp :: document :: Document >> :: ffi_from_opt (o)) } } # [cfg (any (any (feature = "state-transitions")))] # [cfg (any (any (feature = "state-transitions")))] impl ferment :: FFIConversionTo < std :: collections :: BTreeMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > > > for std_collections_Map_keys_platform_value_types_identifier_Identifier_values_Option_dpp_document_Document { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < platform_value :: types :: identifier :: Identifier , Option < dpp :: document :: Document > >) -> * const std_collections_Map_keys_platform_value_types_identifier_Identifier_values_Option_dpp_document_Document { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_complex_group (obj . keys () . cloned ()) , values : ferment :: to_opt_complex_group (obj . values () . cloned ()) }) } } # [cfg (any (any (feature = "state-transitions")))] # [cfg (any (any (feature = "state-transitions")))] impl Drop for std_collections_Map_keys_platform_value_types_identifier_Identifier_values_Option_dpp_document_Document { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . keys , self . count) ; ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [cfg (any (any (feature = "state-transitions")))] # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_platform_value_types_identifier_Identifier_values_Option_dpp_document_Document_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , values : * mut * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document) -> * mut std_collections_Map_keys_platform_value_types_identifier_Identifier_values_Option_dpp_document_Document { ferment :: boxed (std_collections_Map_keys_platform_value_types_identifier_Identifier_values_Option_dpp_document_Document { count , keys , values }) } # [cfg (any (any (feature = "state-transitions")))] # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_platform_value_types_identifier_Identifier_values_Option_dpp_document_Document_destroy (ffi : * mut std_collections_Map_keys_platform_value_types_identifier_Identifier_values_Option_dpp_document_Document) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct indexmap_IndexSet_u8_32 { pub count : usize , pub values : * mut * mut crate :: fermented :: generics :: Arr_u8_32 } impl ferment :: FFIConversionFrom < indexmap :: IndexSet < [u8 ; 32] > > for indexmap_IndexSet_u8_32 { unsafe fn ffi_from_const (ffi : * const indexmap_IndexSet_u8_32) -> indexmap :: IndexSet < [u8 ; 32] > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < indexmap :: IndexSet < [u8 ; 32] > > for indexmap_IndexSet_u8_32 { unsafe fn ffi_to_const (obj : indexmap :: IndexSet < [u8 ; 32] >) -> * const indexmap_IndexSet_u8_32 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for indexmap_IndexSet_u8_32 { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn indexmap_IndexSet_u8_32_ctor (count : usize , values : * mut * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut indexmap_IndexSet_u8_32 { ferment :: boxed (indexmap_IndexSet_u8_32 { count , values }) } # [no_mangle] pub unsafe extern "C" fn indexmap_IndexSet_u8_32_destroy (ffi : * mut indexmap_IndexSet_u8_32) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dashcore_blockdata_transaction_txout_TxOut { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: txout :: dashcore_blockdata_transaction_txout_TxOut } impl ferment :: FFIConversionFrom < Vec < dashcore :: blockdata :: transaction :: txout :: TxOut > > for Vec_dashcore_blockdata_transaction_txout_TxOut { unsafe fn ffi_from_const (ffi : * const Vec_dashcore_blockdata_transaction_txout_TxOut) -> Vec < dashcore :: blockdata :: transaction :: txout :: TxOut > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < dashcore :: blockdata :: transaction :: txout :: TxOut > > for Vec_dashcore_blockdata_transaction_txout_TxOut { unsafe fn ffi_to_const (obj : Vec < dashcore :: blockdata :: transaction :: txout :: TxOut >) -> * const Vec_dashcore_blockdata_transaction_txout_TxOut { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dashcore_blockdata_transaction_txout_TxOut { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dashcore_blockdata_transaction_txout_TxOut_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: txout :: dashcore_blockdata_transaction_txout_TxOut) -> * mut Vec_dashcore_blockdata_transaction_txout_TxOut { ferment :: boxed (Vec_dashcore_blockdata_transaction_txout_TxOut { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dashcore_blockdata_transaction_txout_TxOut_destroy (ffi : * mut Vec_dashcore_blockdata_transaction_txout_TxOut) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dpp :: voting :: contender_structs :: dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo } impl ferment :: FFIConversionFrom < Vec < dpp :: voting :: contender_structs :: FinalizedResourceVoteChoicesWithVoterInfo > > for Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { unsafe fn ffi_from_const (ffi : * const Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo) -> Vec < dpp :: voting :: contender_structs :: FinalizedResourceVoteChoicesWithVoterInfo > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < dpp :: voting :: contender_structs :: FinalizedResourceVoteChoicesWithVoterInfo > > for Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { unsafe fn ffi_to_const (obj : Vec < dpp :: voting :: contender_structs :: FinalizedResourceVoteChoicesWithVoterInfo >) -> * const Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dpp :: voting :: contender_structs :: dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo) -> * mut Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { ferment :: boxed (Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo_destroy (ffi : * mut Vec_dpp_voting_contender_structs_FinalizedResourceVoteChoicesWithVoterInfo) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_Option_dpp_document_Document_err_dash_spv_platform_error_Error { pub ok : * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document , pub error : * mut crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error } impl ferment :: FFIConversionFrom < Result < Option < dpp :: document :: Document > , dash_spv_platform :: error :: Error > > for Result_ok_Option_dpp_document_Document_err_dash_spv_platform_error_Error { unsafe fn ffi_from_const (ffi : * const Result_ok_Option_dpp_document_Document_err_dash_spv_platform_error_Error) -> Result < Option < dpp :: document :: Document > , dash_spv_platform :: error :: Error > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | < crate :: fermented :: types :: dpp :: document :: dpp_document_Document as ferment :: FFIConversionFrom < dpp :: document :: Document >> :: ffi_from_opt (o) , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error as ferment :: FFIConversionFrom < dash_spv_platform :: error :: Error >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < Option < dpp :: document :: Document > , dash_spv_platform :: error :: Error > > for Result_ok_Option_dpp_document_Document_err_dash_spv_platform_error_Error { unsafe fn ffi_to_const (obj : Result < Option < dpp :: document :: Document > , dash_spv_platform :: error :: Error >) -> * const Result_ok_Option_dpp_document_Document_err_dash_spv_platform_error_Error { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: FFIConversionTo :: ffi_to_opt (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_Option_dpp_document_Document_err_dash_spv_platform_error_Error { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_Option_dpp_document_Document_err_dash_spv_platform_error_Error_ctor (ok : * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document , error : * mut crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error) -> * mut Result_ok_Option_dpp_document_Document_err_dash_spv_platform_error_Error { ferment :: boxed (Result_ok_Option_dpp_document_Document_err_dash_spv_platform_error_Error { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_Option_dpp_document_Document_err_dash_spv_platform_error_Error_destroy (ffi : * mut Result_ok_Option_dpp_document_Document_err_dash_spv_platform_error_Error) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition_err_dash_spv_platform_error_Error { pub ok : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition , pub error : * mut crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error } impl ferment :: FFIConversionFrom < Result < dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: DataContractCreateTransition , dash_spv_platform :: error :: Error > > for Result_ok_dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition_err_dash_spv_platform_error_Error { unsafe fn ffi_from_const (ffi : * const Result_ok_dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition_err_dash_spv_platform_error_Error) -> Result < dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: DataContractCreateTransition , dash_spv_platform :: error :: Error > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | < crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition as ferment :: FFIConversionFrom < dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: DataContractCreateTransition >> :: ffi_from (o) , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error as ferment :: FFIConversionFrom < dash_spv_platform :: error :: Error >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: DataContractCreateTransition , dash_spv_platform :: error :: Error > > for Result_ok_dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition_err_dash_spv_platform_error_Error { unsafe fn ffi_to_const (obj : Result < dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: DataContractCreateTransition , dash_spv_platform :: error :: Error >) -> * const Result_ok_dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition_err_dash_spv_platform_error_Error { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: FFIConversionTo :: ffi_to (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition_err_dash_spv_platform_error_Error { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition_err_dash_spv_platform_error_Error_ctor (ok : * mut crate :: fermented :: types :: dpp :: state_transition :: state_transitions :: contract :: data_contract_create_transition :: dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition , error : * mut crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error) -> * mut Result_ok_dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition_err_dash_spv_platform_error_Error { ferment :: boxed (Result_ok_dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition_err_dash_spv_platform_error_Error { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition_err_dash_spv_platform_error_Error_destroy (ffi : * mut Result_ok_dpp_state_transition_state_transitions_contract_data_contract_create_transition_DataContractCreateTransition_err_dash_spv_platform_error_Error) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_Tuple_platform_value_Value_platform_value_Value { pub count : usize , pub values : * mut * mut crate :: fermented :: generics :: Tuple_platform_value_Value_platform_value_Value } impl ferment :: FFIConversionFrom < Vec < (platform_value :: Value , platform_value :: Value) > > for Vec_Tuple_platform_value_Value_platform_value_Value { unsafe fn ffi_from_const (ffi : * const Vec_Tuple_platform_value_Value_platform_value_Value) -> Vec < (platform_value :: Value , platform_value :: Value) > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < (platform_value :: Value , platform_value :: Value) > > for Vec_Tuple_platform_value_Value_platform_value_Value { unsafe fn ffi_to_const (obj : Vec < (platform_value :: Value , platform_value :: Value) >) -> * const Vec_Tuple_platform_value_Value_platform_value_Value { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_Tuple_platform_value_Value_platform_value_Value { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_Tuple_platform_value_Value_platform_value_Value_ctor (count : usize , values : * mut * mut crate :: fermented :: generics :: Tuple_platform_value_Value_platform_value_Value) -> * mut Vec_Tuple_platform_value_Value_platform_value_Value { ferment :: boxed (Vec_Tuple_platform_value_Value_platform_value_Value { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_Tuple_platform_value_Value_platform_value_Value_destroy (ffi : * mut Vec_Tuple_platform_value_Value_platform_value_Value) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashesManager { pub obj : * mut dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashesManager } impl ferment :: FFIConversionFrom < std :: sync :: Arc < dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashesManager > > for std_sync_Arc_dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashesManager { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashesManager) -> std :: sync :: Arc < dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashesManager > { let ffi_ref = & * ffi ; std :: sync :: Arc :: from_raw (ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashesManager > > for std_sync_Arc_dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashesManager { unsafe fn ffi_to_const (obj : std :: sync :: Arc < dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashesManager >) -> * const std_sync_Arc_dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashesManager { ferment :: boxed (Self { obj : std :: sync :: Arc :: into_raw (obj) . cast_mut () }) } } impl Drop for std_sync_Arc_dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashesManager { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashesManager_ctor (obj : * mut dash_spv_platform :: document :: salted_domain_hashes :: SaltedDomainHashesManager) -> * mut std_sync_Arc_dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashesManager { ferment :: boxed (std_sync_Arc_dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashesManager { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashesManager_destroy (ffi : * mut std_sync_Arc_dash_spv_platform_document_salted_domain_hashes_SaltedDomainHashesManager) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_u8_68 { pub count : usize , pub values : * mut * mut crate :: fermented :: generics :: Arr_u8_68 } impl ferment :: FFIConversionFrom < Vec < [u8 ; 68] > > for Vec_u8_68 { unsafe fn ffi_from_const (ffi : * const Vec_u8_68) -> Vec < [u8 ; 68] > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < [u8 ; 68] > > for Vec_u8_68 { unsafe fn ffi_to_const (obj : Vec < [u8 ; 68] >) -> * const Vec_u8_68 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_u8_68 { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_u8_68_ctor (count : usize , values : * mut * mut crate :: fermented :: generics :: Arr_u8_68) -> * mut Vec_u8_68 { ferment :: boxed (Vec_u8_68 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_u8_68_destroy (ffi : * mut Vec_u8_68) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_HashSet_u8_32 { pub count : usize , pub values : * mut * mut crate :: fermented :: generics :: Arr_u8_32 } impl ferment :: FFIConversionFrom < std :: collections :: HashSet < [u8 ; 32] > > for std_collections_HashSet_u8_32 { unsafe fn ffi_from_const (ffi : * const std_collections_HashSet_u8_32) -> std :: collections :: HashSet < [u8 ; 32] > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < std :: collections :: HashSet < [u8 ; 32] > > for std_collections_HashSet_u8_32 { unsafe fn ffi_to_const (obj : std :: collections :: HashSet < [u8 ; 32] >) -> * const std_collections_HashSet_u8_32 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for std_collections_HashSet_u8_32 { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_HashSet_u8_32_ctor (count : usize , values : * mut * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut std_collections_HashSet_u8_32 { ferment :: boxed (std_collections_HashSet_u8_32 { count , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_HashSet_u8_32_destroy (ffi : * mut std_collections_HashSet_u8_32) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Arr_u8_36 { pub count : usize , pub values : * mut u8 } impl ferment :: FFIConversionFrom < [u8 ; 36] > for Arr_u8_36 { unsafe fn ffi_from_const (ffi : * const Arr_u8_36) -> [u8 ; 36] { let ffi_ref = & * ffi ; let vec : Vec < u8 > = ferment :: from_primitive_group (ffi_ref . values , ffi_ref . count) ; vec . try_into () . unwrap () } } impl ferment :: FFIConversionTo < [u8 ; 36] > for Arr_u8_36 { unsafe fn ffi_to_const (obj : [u8 ; 36]) -> * const Arr_u8_36 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_primitive_group (obj . into_iter ()) }) } } impl Drop for Arr_u8_36 { fn drop (& mut self) { unsafe { ferment :: unbox_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Arr_u8_36_ctor (count : usize , values : * mut u8) -> * mut Arr_u8_36 { ferment :: boxed (Arr_u8_36 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Arr_u8_36_destroy (ffi : * mut Arr_u8_36) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID } impl ferment :: FFIConversionFrom < std :: collections :: BTreeSet < dpp :: identity :: identity_public_key :: KeyID > > for std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID { unsafe fn ffi_from_const (ffi : * const std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID) -> std :: collections :: BTreeSet < dpp :: identity :: identity_public_key :: KeyID > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < std :: collections :: BTreeSet < dpp :: identity :: identity_public_key :: KeyID > > for std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID { unsafe fn ffi_to_const (obj : std :: collections :: BTreeSet < dpp :: identity :: identity_public_key :: KeyID >) -> * const std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID { ferment :: boxed (std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID { count , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID_destroy (ffi : * mut std_collections_BTreeSet_dpp_identity_identity_public_key_KeyID) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Arr_u8_16 { pub count : usize , pub values : * mut u8 } impl ferment :: FFIConversionFrom < [u8 ; 16] > for Arr_u8_16 { unsafe fn ffi_from_const (ffi : * const Arr_u8_16) -> [u8 ; 16] { let ffi_ref = & * ffi ; let vec : Vec < u8 > = ferment :: from_primitive_group (ffi_ref . values , ffi_ref . count) ; vec . try_into () . unwrap () } } impl ferment :: FFIConversionTo < [u8 ; 16] > for Arr_u8_16 { unsafe fn ffi_to_const (obj : [u8 ; 16]) -> * const Arr_u8_16 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_primitive_group (obj . into_iter ()) }) } } impl Drop for Arr_u8_16 { fn drop (& mut self) { unsafe { ferment :: unbox_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Arr_u8_16_ctor (count : usize , values : * mut u8) -> * mut Arr_u8_16 { ferment :: boxed (Arr_u8_16 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Arr_u8_16_destroy (ffi : * mut Arr_u8_16) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError , destructor : unsafe extern "C" fn (* mut crate :: fermented :: generics :: Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) } impl Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { pub unsafe fn call (& self , o_0 : * const std :: os :: raw :: c_void , o_1 : [u8 ; 32]) -> Result < [u8 ; 96] , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > { let ffi_result = (self . caller) (o_0 , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (o_1)) ; let result = < crate :: fermented :: generics :: Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError as ferment :: FFIConversionFrom < Result < [u8 ; 96] , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > >> :: ffi_from (ffi_result) ; (self . destructor) (ffi_result) ; result } } unsafe impl Send for Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { } unsafe impl Sync for Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_ctor (caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError , destructor : unsafe extern "C" fn (* mut crate :: fermented :: generics :: Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError)) -> * mut Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed (Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { caller , destructor }) } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_destroy (ffi : * mut Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_dpp_data_contract_DataContract { pub obj : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract } impl ferment :: FFIConversionFrom < std :: sync :: Arc < dpp :: data_contract :: DataContract > > for std_sync_Arc_dpp_data_contract_DataContract { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_dpp_data_contract_DataContract) -> std :: sync :: Arc < dpp :: data_contract :: DataContract > { let ffi_ref = & * ffi ; std :: sync :: Arc :: new (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . obj)) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < dpp :: data_contract :: DataContract > > for std_sync_Arc_dpp_data_contract_DataContract { unsafe fn ffi_to_const (obj : std :: sync :: Arc < dpp :: data_contract :: DataContract >) -> * const std_sync_Arc_dpp_data_contract_DataContract { ferment :: boxed (Self { obj : ferment :: FFIConversionTo :: ffi_to ((* obj) . clone ()) }) } } impl Drop for std_sync_Arc_dpp_data_contract_DataContract { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dpp_data_contract_DataContract_ctor (obj : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract) -> * mut std_sync_Arc_dpp_data_contract_DataContract { ferment :: boxed (std_sync_Arc_dpp_data_contract_DataContract { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dpp_data_contract_DataContract_destroy (ffi : * mut std_sync_Arc_dpp_data_contract_DataContract) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dpp_document_Document { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document } impl ferment :: FFIConversionFrom < Vec < dpp :: document :: Document > > for Vec_dpp_document_Document { unsafe fn ffi_from_const (ffi : * const Vec_dpp_document_Document) -> Vec < dpp :: document :: Document > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < dpp :: document :: Document > > for Vec_dpp_document_Document { unsafe fn ffi_to_const (obj : Vec < dpp :: document :: Document >) -> * const Vec_dpp_document_Document { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dpp_document_Document { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_document_Document_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document) -> * mut Vec_dpp_document_Document { ferment :: boxed (Vec_dpp_document_Document { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_document_Document_destroy (ffi : * mut Vec_dpp_document_Document) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity { pub count : usize , pub keys : * mut * mut std :: os :: raw :: c_char , pub values : * mut * mut crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity } impl ferment :: FFIConversionFrom < std :: collections :: BTreeMap < String , std :: collections :: BTreeMap < [u8 ; 20] , dpp :: identity :: identity :: Identity > > > for std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity) -> std :: collections :: BTreeMap < String , std :: collections :: BTreeMap < [u8 ; 20] , dpp :: identity :: identity :: Identity > > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (o) , | o | < crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < [u8 ; 20] , dpp :: identity :: identity :: Identity > >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < std :: collections :: BTreeMap < String , std :: collections :: BTreeMap < [u8 ; 20] , dpp :: identity :: identity :: Identity > > > for std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < String , std :: collections :: BTreeMap < [u8 ; 20] , dpp :: identity :: identity :: Identity > >) -> * const std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_complex_group (obj . keys () . cloned ()) , values : ferment :: to_complex_group (obj . values () . cloned ()) }) } } impl Drop for std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr_composer (self . keys , self . count , ferment :: unbox_string) ; ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_ctor (count : usize , keys : * mut * mut std :: os :: raw :: c_char , values : * mut * mut crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity) -> * mut std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity { ferment :: boxed (std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_destroy (ffi : * mut std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dpp_identity_identity_public_key_purpose_Purpose { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose } impl ferment :: FFIConversionFrom < Vec < dpp :: identity :: identity_public_key :: purpose :: Purpose > > for Vec_dpp_identity_identity_public_key_purpose_Purpose { unsafe fn ffi_from_const (ffi : * const Vec_dpp_identity_identity_public_key_purpose_Purpose) -> Vec < dpp :: identity :: identity_public_key :: purpose :: Purpose > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < dpp :: identity :: identity_public_key :: purpose :: Purpose > > for Vec_dpp_identity_identity_public_key_purpose_Purpose { unsafe fn ffi_to_const (obj : Vec < dpp :: identity :: identity_public_key :: purpose :: Purpose >) -> * const Vec_dpp_identity_identity_public_key_purpose_Purpose { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dpp_identity_identity_public_key_purpose_Purpose { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_identity_identity_public_key_purpose_Purpose_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose) -> * mut Vec_dpp_identity_identity_public_key_purpose_Purpose { ferment :: boxed (Vec_dpp_identity_identity_public_key_purpose_Purpose { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_identity_identity_public_key_purpose_Purpose_destroy (ffi : * mut Vec_dpp_identity_identity_public_key_purpose_Purpose) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_ { pub obj : * mut crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_ } impl ferment :: FFIConversionFrom < std :: sync :: Arc < dyn Fn (* const std :: os :: raw :: c_void , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry >) > > for std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_ { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_) -> std :: sync :: Arc < dyn Fn (* const std :: os :: raw :: c_void , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry >) > { let ffi_ref = & * ffi ; std :: sync :: Arc :: new (move | o_0 , o_1 | unsafe { (& * ffi_ref . obj) . call (o_0 , o_1) }) } } impl Drop for std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_ { fn drop (& mut self) { unsafe { ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN__ctor (obj : * mut crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_) -> * mut std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_ { ferment :: boxed (std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_ { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN__destroy (ffi : * mut std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_std_sync_RwLock_Option_u8_32 { pub obj : * mut crate :: fermented :: generics :: std_sync_RwLock_Option_u8_32 } impl ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: RwLock < Option < [u8 ; 32] > > > > for std_sync_Arc_std_sync_RwLock_Option_u8_32 { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_std_sync_RwLock_Option_u8_32) -> std :: sync :: Arc < std :: sync :: RwLock < Option < [u8 ; 32] > > > { let ffi_ref = & * ffi ; std :: sync :: Arc :: new (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . obj)) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < std :: sync :: RwLock < Option < [u8 ; 32] > > > > for std_sync_Arc_std_sync_RwLock_Option_u8_32 { unsafe fn ffi_to_const (obj : std :: sync :: Arc < std :: sync :: RwLock < Option < [u8 ; 32] > > >) -> * const std_sync_Arc_std_sync_RwLock_Option_u8_32 { ferment :: boxed (Self { obj : ferment :: FFIConversionTo :: ffi_to (std :: sync :: RwLock :: new (obj . read () . expect ("Poisoned") . clone ())) }) } } impl Drop for std_sync_Arc_std_sync_RwLock_Option_u8_32 { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_Option_u8_32_ctor (obj : * mut crate :: fermented :: generics :: std_sync_RwLock_Option_u8_32) -> * mut std_sync_Arc_std_sync_RwLock_Option_u8_32 { ferment :: boxed (std_sync_Arc_std_sync_RwLock_Option_u8_32 { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_Option_u8_32_destroy (ffi : * mut std_sync_Arc_std_sync_RwLock_Option_u8_32) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dpp_data_contract_document_type_property_array_ArrayItemType { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: array :: dpp_data_contract_document_type_property_array_ArrayItemType } impl ferment :: FFIConversionFrom < Vec < dpp :: data_contract :: document_type :: property :: array :: ArrayItemType > > for Vec_dpp_data_contract_document_type_property_array_ArrayItemType { unsafe fn ffi_from_const (ffi : * const Vec_dpp_data_contract_document_type_property_array_ArrayItemType) -> Vec < dpp :: data_contract :: document_type :: property :: array :: ArrayItemType > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < dpp :: data_contract :: document_type :: property :: array :: ArrayItemType > > for Vec_dpp_data_contract_document_type_property_array_ArrayItemType { unsafe fn ffi_to_const (obj : Vec < dpp :: data_contract :: document_type :: property :: array :: ArrayItemType >) -> * const Vec_dpp_data_contract_document_type_property_array_ArrayItemType { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dpp_data_contract_document_type_property_array_ArrayItemType { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_data_contract_document_type_property_array_ArrayItemType_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: property :: array :: dpp_data_contract_document_type_property_array_ArrayItemType) -> * mut Vec_dpp_data_contract_document_type_property_array_ArrayItemType { ferment :: boxed (Vec_dpp_data_contract_document_type_property_array_ArrayItemType { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dpp_data_contract_document_type_property_array_ArrayItemType_destroy (ffi : * mut Vec_dpp_data_contract_document_type_property_array_ArrayItemType) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { pub ok : * mut crate :: fermented :: generics :: Vec_u8 , pub error : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError } impl ferment :: FFIConversionFrom < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > > for Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { unsafe fn ffi_from_const (ffi : * const Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError) -> Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (o) , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: KeyError >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError > > for Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { unsafe fn ffi_to_const (obj : Result < Vec < u8 > , dash_spv_crypto :: keys :: KeyError >) -> * const Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: FFIConversionTo :: ffi_to (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError_ctor (ok : * mut crate :: fermented :: generics :: Vec_u8 , error : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError) -> * mut Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { ferment :: boxed (Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError_destroy (ffi : * mut Result_ok_Vec_u8_err_dash_spv_crypto_keys_KeyError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError , destructor : unsafe extern "C" fn (* mut crate :: fermented :: generics :: Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) } impl Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { pub unsafe fn call (& self , o_0 : * const std :: os :: raw :: c_void , o_1 : [u8 ; 32]) -> Result < dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > { let ffi_result = (self . caller) (o_0 , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (o_1)) ; let result = < crate :: fermented :: generics :: Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError as ferment :: FFIConversionFrom < Result < dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > >> :: ffi_from (ffi_result) ; (self . destructor) (ffi_result) ; result } } unsafe impl Send for Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { } unsafe impl Sync for Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_ctor (caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError , destructor : unsafe extern "C" fn (* mut crate :: fermented :: generics :: Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError)) -> * mut Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed (Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { caller , destructor }) } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_destroy (ffi : * mut Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { pub ok : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot , pub error : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: core_provider :: dash_spv_masternode_processor_processing_core_provider_CoreProviderError } impl ferment :: FFIConversionFrom < Result < dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > > for Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { unsafe fn ffi_from_const (ffi : * const Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> Result < dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot >> :: ffi_from (o) , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: core_provider :: dash_spv_masternode_processor_processing_core_provider_CoreProviderError as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > > for Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { unsafe fn ffi_to_const (obj : Result < dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError >) -> * const Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: FFIConversionTo :: ffi_to (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_ctor (ok : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot , error : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: core_provider :: dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> * mut Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed (Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_destroy (ffi : * mut Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Fn_ARGS_std_os_raw_c_void_bool_RTRN_ { caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , bool) } impl Fn_ARGS_std_os_raw_c_void_bool_RTRN_ { pub unsafe fn call (& self , o_0 : * const std :: os :: raw :: c_void , o_1 : bool) { let ffi_result = (self . caller) (o_0 , o_1) ; ffi_result } } unsafe impl Send for Fn_ARGS_std_os_raw_c_void_bool_RTRN_ { } unsafe impl Sync for Fn_ARGS_std_os_raw_c_void_bool_RTRN_ { } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_bool_RTRN__ctor (caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , bool)) -> * mut Fn_ARGS_std_os_raw_c_void_bool_RTRN_ { ferment :: boxed (Fn_ARGS_std_os_raw_c_void_bool_RTRN_ { caller }) } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_bool_RTRN__destroy (ffi : * mut Fn_ARGS_std_os_raw_c_void_bool_RTRN_) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_Vec_String_err_dash_spv_crypto_keys_KeyError { pub ok : * mut crate :: fermented :: generics :: Vec_String , pub error : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError } impl ferment :: FFIConversionFrom < Result < Vec < String > , dash_spv_crypto :: keys :: KeyError > > for Result_ok_Vec_String_err_dash_spv_crypto_keys_KeyError { unsafe fn ffi_from_const (ffi : * const Result_ok_Vec_String_err_dash_spv_crypto_keys_KeyError) -> Result < Vec < String > , dash_spv_crypto :: keys :: KeyError > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | < crate :: fermented :: generics :: Vec_String as ferment :: FFIConversionFrom < Vec < String > >> :: ffi_from (o) , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: KeyError >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < Vec < String > , dash_spv_crypto :: keys :: KeyError > > for Result_ok_Vec_String_err_dash_spv_crypto_keys_KeyError { unsafe fn ffi_to_const (obj : Result < Vec < String > , dash_spv_crypto :: keys :: KeyError >) -> * const Result_ok_Vec_String_err_dash_spv_crypto_keys_KeyError { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: FFIConversionTo :: ffi_to (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_Vec_String_err_dash_spv_crypto_keys_KeyError { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_Vec_String_err_dash_spv_crypto_keys_KeyError_ctor (ok : * mut crate :: fermented :: generics :: Vec_String , error : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError) -> * mut Result_ok_Vec_String_err_dash_spv_crypto_keys_KeyError { ferment :: boxed (Result_ok_Vec_String_err_dash_spv_crypto_keys_KeyError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_Vec_String_err_dash_spv_crypto_keys_KeyError_destroy (ffi : * mut Result_ok_Vec_String_err_dash_spv_crypto_keys_KeyError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_ { pub count : usize , pub values : * mut * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < Vec < & 'static str > > for Vec_ { unsafe fn ffi_from_const (ffi : * const Vec_) -> Vec < & 'static str > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < & 'static str > > for Vec_ { unsafe fn ffi_to_const (obj : Vec < & 'static str >) -> * const Vec_ { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_ { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr_composer (self . values , self . count , ferment :: unbox_string) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec__ctor (count : usize , values : * mut * mut std :: os :: raw :: c_char) -> * mut Vec_ { ferment :: boxed (Vec_ { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec__destroy (ffi : * mut Vec_) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Arr_u8_64 { pub count : usize , pub values : * mut u8 } impl ferment :: FFIConversionFrom < [u8 ; 64] > for Arr_u8_64 { unsafe fn ffi_from_const (ffi : * const Arr_u8_64) -> [u8 ; 64] { let ffi_ref = & * ffi ; let vec : Vec < u8 > = ferment :: from_primitive_group (ffi_ref . values , ffi_ref . count) ; vec . try_into () . unwrap () } } impl ferment :: FFIConversionTo < [u8 ; 64] > for Arr_u8_64 { unsafe fn ffi_to_const (obj : [u8 ; 64]) -> * const Arr_u8_64 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_primitive_group (obj . into_iter ()) }) } } impl Drop for Arr_u8_64 { fn drop (& mut self) { unsafe { ferment :: unbox_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Arr_u8_64_ctor (count : usize , values : * mut u8) -> * mut Arr_u8_64 { ferment :: boxed (Arr_u8_64 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Arr_u8_64_destroy (ffi : * mut Arr_u8_64) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_hashes_hex_Error { pub ok : * mut dash_spv_crypto :: keys :: bls_key :: BLSKey , pub error : * mut dash_spv_apple_bindings :: custom :: bitcoin_hashes :: hashes_hex_Error_FFI } impl ferment :: FFIConversionFrom < Result < dash_spv_crypto :: keys :: bls_key :: BLSKey , hashes :: hex :: Error > > for Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_hashes_hex_Error { unsafe fn ffi_from_const (ffi : * const Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_hashes_hex_Error) -> Result < dash_spv_crypto :: keys :: bls_key :: BLSKey , hashes :: hex :: Error > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | (& * o) . clone () , ffi_ref . error , | o | < dash_spv_apple_bindings :: custom :: bitcoin_hashes :: hashes_hex_Error_FFI as ferment :: FFIConversionFrom < hashes :: hex :: Error >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: bls_key :: BLSKey , hashes :: hex :: Error > > for Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_hashes_hex_Error { unsafe fn ffi_to_const (obj : Result < dash_spv_crypto :: keys :: bls_key :: BLSKey , hashes :: hex :: Error >) -> * const Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_hashes_hex_Error { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: boxed (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_hashes_hex_Error { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_hashes_hex_Error_ctor (ok : * mut dash_spv_crypto :: keys :: bls_key :: BLSKey , error : * mut dash_spv_apple_bindings :: custom :: bitcoin_hashes :: hashes_hex_Error_FFI) -> * mut Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_hashes_hex_Error { ferment :: boxed (Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_hashes_hex_Error { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_hashes_hex_Error_destroy (ffi : * mut Result_ok_dash_spv_crypto_keys_bls_key_BLSKey_err_hashes_hex_Error) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dashcore_blockdata_transaction_outpoint_OutPoint { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: outpoint :: dashcore_blockdata_transaction_outpoint_OutPoint } impl ferment :: FFIConversionFrom < Vec < dashcore :: blockdata :: transaction :: outpoint :: OutPoint > > for Vec_dashcore_blockdata_transaction_outpoint_OutPoint { unsafe fn ffi_from_const (ffi : * const Vec_dashcore_blockdata_transaction_outpoint_OutPoint) -> Vec < dashcore :: blockdata :: transaction :: outpoint :: OutPoint > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < dashcore :: blockdata :: transaction :: outpoint :: OutPoint > > for Vec_dashcore_blockdata_transaction_outpoint_OutPoint { unsafe fn ffi_to_const (obj : Vec < dashcore :: blockdata :: transaction :: outpoint :: OutPoint >) -> * const Vec_dashcore_blockdata_transaction_outpoint_OutPoint { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dashcore_blockdata_transaction_outpoint_OutPoint { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dashcore_blockdata_transaction_outpoint_OutPoint_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: outpoint :: dashcore_blockdata_transaction_outpoint_OutPoint) -> * mut Vec_dashcore_blockdata_transaction_outpoint_OutPoint { ferment :: boxed (Vec_dashcore_blockdata_transaction_outpoint_OutPoint { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dashcore_blockdata_transaction_outpoint_OutPoint_destroy (ffi : * mut Vec_dashcore_blockdata_transaction_outpoint_OutPoint) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_dash_spv_crypto_llmq_entry_LLMQEntry { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType , pub values : * mut * mut crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_dash_spv_crypto_llmq_entry_LLMQEntry } impl ferment :: FFIConversionFrom < std :: collections :: BTreeMap < dash_spv_crypto :: network :: llmq_type :: LLMQType , std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_crypto :: llmq :: entry :: LLMQEntry > > > for std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_dash_spv_crypto_llmq_entry_LLMQEntry { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_dash_spv_crypto_llmq_entry_LLMQEntry) -> std :: collections :: BTreeMap < dash_spv_crypto :: network :: llmq_type :: LLMQType , std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_crypto :: llmq :: entry :: LLMQEntry > > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType as ferment :: FFIConversionFrom < dash_spv_crypto :: network :: llmq_type :: LLMQType >> :: ffi_from (o) , | o | < crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_dash_spv_crypto_llmq_entry_LLMQEntry as ferment :: FFIConversionFrom < std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_crypto :: llmq :: entry :: LLMQEntry > >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < std :: collections :: BTreeMap < dash_spv_crypto :: network :: llmq_type :: LLMQType , std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_crypto :: llmq :: entry :: LLMQEntry > > > for std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_dash_spv_crypto_llmq_entry_LLMQEntry { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < dash_spv_crypto :: network :: llmq_type :: LLMQType , std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_crypto :: llmq :: entry :: LLMQEntry > >) -> * const std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_dash_spv_crypto_llmq_entry_LLMQEntry { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_complex_group (obj . keys () . cloned ()) , values : ferment :: to_complex_group (obj . values () . cloned ()) }) } } impl Drop for std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_dash_spv_crypto_llmq_entry_LLMQEntry { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . keys , self . count) ; ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_dash_spv_crypto_llmq_entry_LLMQEntry_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dash_spv_crypto :: network :: llmq_type :: dash_spv_crypto_network_llmq_type_LLMQType , values : * mut * mut crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_dash_spv_crypto_llmq_entry_LLMQEntry) -> * mut std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_dash_spv_crypto_llmq_entry_LLMQEntry { ferment :: boxed (std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_dash_spv_crypto_llmq_entry_LLMQEntry { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_dash_spv_crypto_llmq_entry_LLMQEntry_destroy (ffi : * mut std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_dash_spv_crypto_llmq_entry_LLMQEntry) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity { pub obj : * mut crate :: fermented :: generics :: std_sync_RwLock_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity } impl ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: BTreeMap < String , std :: collections :: BTreeMap < [u8 ; 20] , dpp :: identity :: identity :: Identity > > > > > for std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity) -> std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: BTreeMap < String , std :: collections :: BTreeMap < [u8 ; 20] , dpp :: identity :: identity :: Identity > > > > { let ffi_ref = & * ffi ; std :: sync :: Arc :: new (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . obj)) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: BTreeMap < String , std :: collections :: BTreeMap < [u8 ; 20] , dpp :: identity :: identity :: Identity > > > > > for std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity { unsafe fn ffi_to_const (obj : std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: BTreeMap < String , std :: collections :: BTreeMap < [u8 ; 20] , dpp :: identity :: identity :: Identity > > > >) -> * const std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity { ferment :: boxed (Self { obj : ferment :: FFIConversionTo :: ffi_to (std :: sync :: RwLock :: new (obj . read () . expect ("Poisoned") . clone ())) }) } } impl Drop for std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_ctor (obj : * mut crate :: fermented :: generics :: std_sync_RwLock_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity) -> * mut std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity { ferment :: boxed (std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity_destroy (ffi : * mut std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_String_values_std_collections_Map_keys_u8_arr_20_values_dpp_identity_identity_Identity) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser { pub obj : * mut crate :: fermented :: generics :: std_sync_RwLock_std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser } impl ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: BTreeMap < platform_value :: types :: identifier :: Identifier , dash_spv_platform :: models :: transient_dashpay_user :: TransientDashPayUser > > > > for std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser) -> std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: BTreeMap < platform_value :: types :: identifier :: Identifier , dash_spv_platform :: models :: transient_dashpay_user :: TransientDashPayUser > > > { let ffi_ref = & * ffi ; std :: sync :: Arc :: new (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . obj)) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: BTreeMap < platform_value :: types :: identifier :: Identifier , dash_spv_platform :: models :: transient_dashpay_user :: TransientDashPayUser > > > > for std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser { unsafe fn ffi_to_const (obj : std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: BTreeMap < platform_value :: types :: identifier :: Identifier , dash_spv_platform :: models :: transient_dashpay_user :: TransientDashPayUser > > >) -> * const std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser { ferment :: boxed (Self { obj : ferment :: FFIConversionTo :: ffi_to (std :: sync :: RwLock :: new (obj . read () . expect ("Poisoned") . clone ())) }) } } impl Drop for std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser_ctor (obj : * mut crate :: fermented :: generics :: std_sync_RwLock_std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser) -> * mut std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser { ferment :: boxed (std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser_destroy (ffi : * mut std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dash_spv_platform_models_transient_dashpay_user_TransientDashPayUser) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_RwLock_dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue { pub obj : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: processor_cache :: dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue } impl ferment :: FFIConversionFrom < std :: sync :: RwLock < dash_spv_masternode_processor :: processing :: processor_cache :: RetrievalQueue > > for std_sync_RwLock_dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue { unsafe fn ffi_from_const (ffi : * const std_sync_RwLock_dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue) -> std :: sync :: RwLock < dash_spv_masternode_processor :: processing :: processor_cache :: RetrievalQueue > { let ffi_ref = & * ffi ; std :: sync :: RwLock :: new (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . obj)) } } impl ferment :: FFIConversionTo < std :: sync :: RwLock < dash_spv_masternode_processor :: processing :: processor_cache :: RetrievalQueue > > for std_sync_RwLock_dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue { unsafe fn ffi_to_const (obj : std :: sync :: RwLock < dash_spv_masternode_processor :: processing :: processor_cache :: RetrievalQueue >) -> * const std_sync_RwLock_dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue { ferment :: boxed (Self { obj : ferment :: FFIConversionTo :: ffi_to (obj . into_inner () . expect ("Err")) }) } } impl Drop for std_sync_RwLock_dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue_ctor (obj : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: processor_cache :: dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue) -> * mut std_sync_RwLock_dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue { ferment :: boxed (std_sync_RwLock_dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue_destroy (ffi : * mut std_sync_RwLock_dash_spv_masternode_processor_processing_processor_cache_RetrievalQueue) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList { pub obj : * mut crate :: fermented :: generics :: std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList } impl ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList > > > > for std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList > > > { let ffi_ref = & * ffi ; std :: sync :: Arc :: new (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . obj)) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList > > > > for std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList { unsafe fn ffi_to_const (obj : std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList > > >) -> * const std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList { ferment :: boxed (Self { obj : ferment :: FFIConversionTo :: ffi_to (std :: sync :: RwLock :: new (obj . read () . expect ("Poisoned") . clone ())) }) } } impl Drop for std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList_ctor (obj : * mut crate :: fermented :: generics :: std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> * mut std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList { ferment :: boxed (std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList_destroy (ffi : * mut std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_u32 { caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , * mut crate :: fermented :: generics :: Arr_u8_32) -> u32 , destructor : unsafe extern "C" fn (u32) } impl Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_u32 { pub unsafe fn call (& self , o_0 : * const std :: os :: raw :: c_void , o_1 : [u8 ; 32]) -> u32 { let ffi_result = (self . caller) (o_0 , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (o_1)) ; ffi_result } } unsafe impl Send for Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_u32 { } unsafe impl Sync for Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_u32 { } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_u32_ctor (caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , * mut crate :: fermented :: generics :: Arr_u8_32) -> u32 , destructor : unsafe extern "C" fn (u32)) -> * mut Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_u32 { ferment :: boxed (Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_u32 { caller , destructor }) } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_u32_destroy (ffi : * mut Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_u32) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u32 { pub obj : * mut crate :: fermented :: generics :: std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u32 } impl ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: BTreeMap < [u8 ; 32] , u32 > > > > for std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u32 { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u32) -> std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: BTreeMap < [u8 ; 32] , u32 > > > { let ffi_ref = & * ffi ; std :: sync :: Arc :: new (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . obj)) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: BTreeMap < [u8 ; 32] , u32 > > > > for std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u32 { unsafe fn ffi_to_const (obj : std :: sync :: Arc < std :: sync :: RwLock < std :: collections :: BTreeMap < [u8 ; 32] , u32 > > >) -> * const std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u32 { ferment :: boxed (Self { obj : ferment :: FFIConversionTo :: ffi_to (std :: sync :: RwLock :: new (obj . read () . expect ("Poisoned") . clone ())) }) } } impl Drop for std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u32 { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u32_ctor (obj : * mut crate :: fermented :: generics :: std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u32) -> * mut std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u32 { ferment :: boxed (std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u32 { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u32_destroy (ffi : * mut std_sync_Arc_std_sync_RwLock_std_collections_Map_keys_u8_arr_32_values_u32) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { pub ok : * mut crate :: fermented :: generics :: Arr_u8_96 , pub error : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: core_provider :: dash_spv_masternode_processor_processing_core_provider_CoreProviderError } impl ferment :: FFIConversionFrom < Result < [u8 ; 96] , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > > for Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { unsafe fn ffi_from_const (ffi : * const Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> Result < [u8 ; 96] , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | < crate :: fermented :: generics :: Arr_u8_96 as ferment :: FFIConversionFrom < [u8 ; 96] >> :: ffi_from (o) , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: core_provider :: dash_spv_masternode_processor_processing_core_provider_CoreProviderError as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < [u8 ; 96] , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > > for Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { unsafe fn ffi_to_const (obj : Result < [u8 ; 96] , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError >) -> * const Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: FFIConversionTo :: ffi_to (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_ctor (ok : * mut crate :: fermented :: generics :: Arr_u8_96 , error : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: core_provider :: dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> * mut Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed (Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_destroy (ffi : * mut Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dpp_identity_identity_Identity { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity } impl ferment :: FFIConversionFrom < std :: collections :: HashMap < platform_value :: types :: identifier :: Identifier , dpp :: identity :: identity :: Identity > > for std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dpp_identity_identity_Identity { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dpp_identity_identity_Identity) -> std :: collections :: HashMap < platform_value :: types :: identifier :: Identifier , dpp :: identity :: identity :: Identity > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier as ferment :: FFIConversionFrom < platform_value :: types :: identifier :: Identifier >> :: ffi_from (o) , | o | < crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity as ferment :: FFIConversionFrom < dpp :: identity :: identity :: Identity >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < std :: collections :: HashMap < platform_value :: types :: identifier :: Identifier , dpp :: identity :: identity :: Identity > > for std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dpp_identity_identity_Identity { unsafe fn ffi_to_const (obj : std :: collections :: HashMap < platform_value :: types :: identifier :: Identifier , dpp :: identity :: identity :: Identity >) -> * const std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dpp_identity_identity_Identity { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_complex_group (obj . keys () . cloned ()) , values : ferment :: to_complex_group (obj . values () . cloned ()) }) } } impl Drop for std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dpp_identity_identity_Identity { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . keys , self . count) ; ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dpp_identity_identity_Identity_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity) -> * mut std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dpp_identity_identity_Identity { ferment :: boxed (std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dpp_identity_identity_Identity { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dpp_identity_identity_Identity_destroy (ffi : * mut std_collections_Map_keys_platform_value_types_identifier_Identifier_values_dpp_identity_identity_Identity) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Fn_ARGS_std_os_raw_c_void_dash_spv_masternode_processor_models_sync_state_CacheState_RTRN_ { caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: sync_state :: dash_spv_masternode_processor_models_sync_state_CacheState) } impl Fn_ARGS_std_os_raw_c_void_dash_spv_masternode_processor_models_sync_state_CacheState_RTRN_ { pub unsafe fn call (& self , o_0 : * const std :: os :: raw :: c_void , o_1 : dash_spv_masternode_processor :: models :: sync_state :: CacheState) { let ffi_result = (self . caller) (o_0 , < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: sync_state :: dash_spv_masternode_processor_models_sync_state_CacheState as ferment :: FFIConversionTo < dash_spv_masternode_processor :: models :: sync_state :: CacheState >> :: ffi_to (o_1)) ; ffi_result } } unsafe impl Send for Fn_ARGS_std_os_raw_c_void_dash_spv_masternode_processor_models_sync_state_CacheState_RTRN_ { } unsafe impl Sync for Fn_ARGS_std_os_raw_c_void_dash_spv_masternode_processor_models_sync_state_CacheState_RTRN_ { } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_dash_spv_masternode_processor_models_sync_state_CacheState_RTRN__ctor (caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: sync_state :: dash_spv_masternode_processor_models_sync_state_CacheState)) -> * mut Fn_ARGS_std_os_raw_c_void_dash_spv_masternode_processor_models_sync_state_CacheState_RTRN_ { ferment :: boxed (Fn_ARGS_std_os_raw_c_void_dash_spv_masternode_processor_models_sync_state_CacheState_RTRN_ { caller }) } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_dash_spv_masternode_processor_models_sync_state_CacheState_RTRN__destroy (ffi : * mut Fn_ARGS_std_os_raw_c_void_dash_spv_masternode_processor_models_sync_state_CacheState_RTRN_) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , * mut crate :: fermented :: generics :: Arr_u8_32 , * mut crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError , destructor : unsafe extern "C" fn (* mut crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) } impl Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { pub unsafe fn call (& self , o_0 : * const std :: os :: raw :: c_void , o_1 : [u8 ; 32] , o_2 : std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry >) -> Result < bool , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > { let ffi_result = (self . caller) (o_0 , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (o_1) , < crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry as ferment :: FFIConversionTo < std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > >> :: ffi_to (o_2)) ; let result = < crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError as ferment :: FFIConversionFrom < Result < bool , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > >> :: ffi_from (ffi_result) ; (self . destructor) (ffi_result) ; result } } unsafe impl Send for Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { } unsafe impl Sync for Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_ctor (caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , * mut crate :: fermented :: generics :: Arr_u8_32 , * mut crate :: fermented :: generics :: std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError , destructor : unsafe extern "C" fn (* mut crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError)) -> * mut Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed (Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { caller , destructor }) } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_destroy (ffi : * mut Fn_ARGS_std_os_raw_c_void_Arr_u8_32_std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel { pub count : usize , pub keys : * mut * mut std :: os :: raw :: c_char , pub values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexLevel } impl ferment :: FFIConversionFrom < std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index_level :: IndexLevel > > for std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel) -> std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index_level :: IndexLevel > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (o) , | o | < crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexLevel as ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: index_level :: IndexLevel >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index_level :: IndexLevel > > for std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < String , dpp :: data_contract :: document_type :: index_level :: IndexLevel >) -> * const std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_complex_group (obj . keys () . cloned ()) , values : ferment :: to_complex_group (obj . values () . cloned ()) }) } } impl Drop for std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr_composer (self . keys , self . count , ferment :: unbox_string) ; ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel_ctor (count : usize , keys : * mut * mut std :: os :: raw :: c_char , values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: index_level :: dpp_data_contract_document_type_index_level_IndexLevel) -> * mut std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel { ferment :: boxed (std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel_destroy (ffi : * mut std_collections_Map_keys_String_values_dpp_data_contract_document_type_index_level_IndexLevel) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { pub obj : * mut crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError } impl ferment :: FFIConversionFrom < std :: sync :: Arc < dyn Fn (* const std :: os :: raw :: c_void , [u8 ; 32]) -> Result < [u8 ; 96] , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > > > for std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> std :: sync :: Arc < dyn Fn (* const std :: os :: raw :: c_void , [u8 ; 32]) -> Result < [u8 ; 96] , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > > { let ffi_ref = & * ffi ; std :: sync :: Arc :: new (move | o_0 , o_1 | unsafe { (& * ffi_ref . obj) . call (o_0 , o_1) }) } } impl Drop for std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { fn drop (& mut self) { unsafe { ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_ctor (obj : * mut crate :: fermented :: generics :: Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> * mut std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed (std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_destroy (ffi : * mut std_sync_Arc_dyn_trait_Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_u8_arr_96_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) { ferment :: unbox_any (ffi) ; } # [cfg (any (any (feature = "state-transitions")))] # [repr (C)] # [derive (Clone)] # [cfg (any (any (feature = "state-transitions")))] pub struct Vec_Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32 { pub count : usize , pub values : * mut * mut crate :: fermented :: generics :: Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32 } # [cfg (any (any (feature = "state-transitions")))] # [cfg (any (any (feature = "state-transitions")))] impl < 'a > ferment :: FFIConversionFrom < Vec < (dpp :: document :: Document , dpp :: data_contract :: document_type :: DocumentTypeRef < 'a > , platform_value :: types :: bytes_32 :: Bytes32) > > for Vec_Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32 { unsafe fn ffi_from_const (ffi : * const Vec_Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32) -> Vec < (dpp :: document :: Document , dpp :: data_contract :: document_type :: DocumentTypeRef < 'a > , platform_value :: types :: bytes_32 :: Bytes32) > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } # [cfg (any (any (feature = "state-transitions")))] # [cfg (any (any (feature = "state-transitions")))] impl < 'a > ferment :: FFIConversionTo < Vec < (dpp :: document :: Document , dpp :: data_contract :: document_type :: DocumentTypeRef < 'a > , platform_value :: types :: bytes_32 :: Bytes32) > > for Vec_Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32 { unsafe fn ffi_to_const (obj : Vec < (dpp :: document :: Document , dpp :: data_contract :: document_type :: DocumentTypeRef < 'a > , platform_value :: types :: bytes_32 :: Bytes32) >) -> * const Vec_Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } # [cfg (any (any (feature = "state-transitions")))] # [cfg (any (any (feature = "state-transitions")))] impl Drop for Vec_Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32 { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [cfg (any (any (feature = "state-transitions")))] # [no_mangle] pub unsafe extern "C" fn Vec_Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32_ctor (count : usize , values : * mut * mut crate :: fermented :: generics :: Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32) -> * mut Vec_Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32 { ferment :: boxed (Vec_Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32 { count , values }) } # [cfg (any (any (feature = "state-transitions")))] # [no_mangle] pub unsafe extern "C" fn Vec_Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32_destroy (ffi : * mut Vec_Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_dash_spv_crypto_keys_ed25519_key_ED25519Key_err_dash_spv_crypto_keys_KeyError { pub ok : * mut dash_spv_crypto :: keys :: ed25519_key :: ED25519Key , pub error : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError } impl ferment :: FFIConversionFrom < Result < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key , dash_spv_crypto :: keys :: KeyError > > for Result_ok_dash_spv_crypto_keys_ed25519_key_ED25519Key_err_dash_spv_crypto_keys_KeyError { unsafe fn ffi_from_const (ffi : * const Result_ok_dash_spv_crypto_keys_ed25519_key_ED25519Key_err_dash_spv_crypto_keys_KeyError) -> Result < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key , dash_spv_crypto :: keys :: KeyError > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | (& * o) . clone () , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: KeyError >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key , dash_spv_crypto :: keys :: KeyError > > for Result_ok_dash_spv_crypto_keys_ed25519_key_ED25519Key_err_dash_spv_crypto_keys_KeyError { unsafe fn ffi_to_const (obj : Result < dash_spv_crypto :: keys :: ed25519_key :: ED25519Key , dash_spv_crypto :: keys :: KeyError >) -> * const Result_ok_dash_spv_crypto_keys_ed25519_key_ED25519Key_err_dash_spv_crypto_keys_KeyError { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: boxed (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_dash_spv_crypto_keys_ed25519_key_ED25519Key_err_dash_spv_crypto_keys_KeyError { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_dash_spv_crypto_keys_ed25519_key_ED25519Key_err_dash_spv_crypto_keys_KeyError_ctor (ok : * mut dash_spv_crypto :: keys :: ed25519_key :: ED25519Key , error : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError) -> * mut Result_ok_dash_spv_crypto_keys_ed25519_key_ED25519Key_err_dash_spv_crypto_keys_KeyError { ferment :: boxed (Result_ok_dash_spv_crypto_keys_ed25519_key_ED25519Key_err_dash_spv_crypto_keys_KeyError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_dash_spv_crypto_keys_ed25519_key_ED25519Key_err_dash_spv_crypto_keys_KeyError_destroy (ffi : * mut Result_ok_dash_spv_crypto_keys_ed25519_key_ED25519Key_err_dash_spv_crypto_keys_KeyError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_dash_spv_platform_document_usernames_UsernamesManager { pub obj : * mut dash_spv_platform :: document :: usernames :: UsernamesManager } impl ferment :: FFIConversionFrom < std :: sync :: Arc < dash_spv_platform :: document :: usernames :: UsernamesManager > > for std_sync_Arc_dash_spv_platform_document_usernames_UsernamesManager { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_dash_spv_platform_document_usernames_UsernamesManager) -> std :: sync :: Arc < dash_spv_platform :: document :: usernames :: UsernamesManager > { let ffi_ref = & * ffi ; std :: sync :: Arc :: from_raw (ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < dash_spv_platform :: document :: usernames :: UsernamesManager > > for std_sync_Arc_dash_spv_platform_document_usernames_UsernamesManager { unsafe fn ffi_to_const (obj : std :: sync :: Arc < dash_spv_platform :: document :: usernames :: UsernamesManager >) -> * const std_sync_Arc_dash_spv_platform_document_usernames_UsernamesManager { ferment :: boxed (Self { obj : std :: sync :: Arc :: into_raw (obj) . cast_mut () }) } } impl Drop for std_sync_Arc_dash_spv_platform_document_usernames_UsernamesManager { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dash_spv_platform_document_usernames_UsernamesManager_ctor (obj : * mut dash_spv_platform :: document :: usernames :: UsernamesManager) -> * mut std_sync_Arc_dash_spv_platform_document_usernames_UsernamesManager { ferment :: boxed (std_sync_Arc_dash_spv_platform_document_usernames_UsernamesManager { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dash_spv_platform_document_usernames_UsernamesManager_destroy (ffi : * mut std_sync_Arc_dash_spv_platform_document_usernames_UsernamesManager) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey } impl ferment :: FFIConversionFrom < std :: collections :: BTreeMap < dpp :: identity :: identity_public_key :: KeyID , dpp :: identity :: identity_public_key :: IdentityPublicKey > > for std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey) -> std :: collections :: BTreeMap < dpp :: identity :: identity_public_key :: KeyID , dpp :: identity :: identity_public_key :: IdentityPublicKey > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: KeyID >> :: ffi_from (o) , | o | < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey as ferment :: FFIConversionFrom < dpp :: identity :: identity_public_key :: IdentityPublicKey >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < std :: collections :: BTreeMap < dpp :: identity :: identity_public_key :: KeyID , dpp :: identity :: identity_public_key :: IdentityPublicKey > > for std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < dpp :: identity :: identity_public_key :: KeyID , dpp :: identity :: identity_public_key :: IdentityPublicKey >) -> * const std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_complex_group (obj . keys () . cloned ()) , values : ferment :: to_complex_group (obj . values () . cloned ()) }) } } impl Drop for std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . keys , self . count) ; ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey) -> * mut std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { ferment :: boxed (std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey_destroy (ffi : * mut std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError , destructor : unsafe extern "C" fn (* mut crate :: fermented :: generics :: Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) } impl Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { pub unsafe fn call (& self , o_0 : * const std :: os :: raw :: c_void , o_1 : [u8 ; 32]) -> Result < dash_spv_masternode_processor :: common :: block :: MBlock , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > { let ffi_result = (self . caller) (o_0 , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (o_1)) ; let result = < crate :: fermented :: generics :: Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError as ferment :: FFIConversionFrom < Result < dash_spv_masternode_processor :: common :: block :: MBlock , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > >> :: ffi_from (ffi_result) ; (self . destructor) (ffi_result) ; result } } unsafe impl Send for Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { } unsafe impl Sync for Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_ctor (caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut crate :: fermented :: generics :: Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError , destructor : unsafe extern "C" fn (* mut crate :: fermented :: generics :: Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError)) -> * mut Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed (Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { caller , destructor }) } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_destroy (ffi : * mut Fn_ARGS_std_os_raw_c_void_Arr_u8_32_RTRN_Result_ok_dash_spv_masternode_processor_common_block_MBlock_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_Vec_dash_spv_platform_models_contact_request_ContactRequestKind_err_dash_spv_platform_error_Error { pub ok : * mut crate :: fermented :: generics :: Vec_dash_spv_platform_models_contact_request_ContactRequestKind , pub error : * mut crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error } impl ferment :: FFIConversionFrom < Result < Vec < dash_spv_platform :: models :: contact_request :: ContactRequestKind > , dash_spv_platform :: error :: Error > > for Result_ok_Vec_dash_spv_platform_models_contact_request_ContactRequestKind_err_dash_spv_platform_error_Error { unsafe fn ffi_from_const (ffi : * const Result_ok_Vec_dash_spv_platform_models_contact_request_ContactRequestKind_err_dash_spv_platform_error_Error) -> Result < Vec < dash_spv_platform :: models :: contact_request :: ContactRequestKind > , dash_spv_platform :: error :: Error > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | < crate :: fermented :: generics :: Vec_dash_spv_platform_models_contact_request_ContactRequestKind as ferment :: FFIConversionFrom < Vec < dash_spv_platform :: models :: contact_request :: ContactRequestKind > >> :: ffi_from (o) , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error as ferment :: FFIConversionFrom < dash_spv_platform :: error :: Error >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < Vec < dash_spv_platform :: models :: contact_request :: ContactRequestKind > , dash_spv_platform :: error :: Error > > for Result_ok_Vec_dash_spv_platform_models_contact_request_ContactRequestKind_err_dash_spv_platform_error_Error { unsafe fn ffi_to_const (obj : Result < Vec < dash_spv_platform :: models :: contact_request :: ContactRequestKind > , dash_spv_platform :: error :: Error >) -> * const Result_ok_Vec_dash_spv_platform_models_contact_request_ContactRequestKind_err_dash_spv_platform_error_Error { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: FFIConversionTo :: ffi_to (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_Vec_dash_spv_platform_models_contact_request_ContactRequestKind_err_dash_spv_platform_error_Error { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_Vec_dash_spv_platform_models_contact_request_ContactRequestKind_err_dash_spv_platform_error_Error_ctor (ok : * mut crate :: fermented :: generics :: Vec_dash_spv_platform_models_contact_request_ContactRequestKind , error : * mut crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error) -> * mut Result_ok_Vec_dash_spv_platform_models_contact_request_ContactRequestKind_err_dash_spv_platform_error_Error { ferment :: boxed (Result_ok_Vec_dash_spv_platform_models_contact_request_ContactRequestKind_err_dash_spv_platform_error_Error { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_Vec_dash_spv_platform_models_contact_request_ContactRequestKind_err_dash_spv_platform_error_Error_destroy (ffi : * mut Result_ok_Vec_dash_spv_platform_models_contact_request_ContactRequestKind_err_dash_spv_platform_error_Error) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { pub obj : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry } impl ferment :: FFIConversionFrom < std :: sync :: RwLock < std :: collections :: BTreeMap < dash_spv_crypto :: network :: llmq_type :: LLMQType , std :: collections :: BTreeMap < [u8 ; 32] , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > > > > for std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { unsafe fn ffi_from_const (ffi : * const std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> std :: sync :: RwLock < std :: collections :: BTreeMap < dash_spv_crypto :: network :: llmq_type :: LLMQType , std :: collections :: BTreeMap < [u8 ; 32] , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > > > { let ffi_ref = & * ffi ; std :: sync :: RwLock :: new (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . obj)) } } impl ferment :: FFIConversionTo < std :: sync :: RwLock < std :: collections :: BTreeMap < dash_spv_crypto :: network :: llmq_type :: LLMQType , std :: collections :: BTreeMap < [u8 ; 32] , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > > > > for std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { unsafe fn ffi_to_const (obj : std :: sync :: RwLock < std :: collections :: BTreeMap < dash_spv_crypto :: network :: llmq_type :: LLMQType , std :: collections :: BTreeMap < [u8 ; 32] , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > > >) -> * const std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment :: boxed (Self { obj : ferment :: FFIConversionTo :: ffi_to (obj . into_inner () . expect ("Err")) }) } } impl Drop for std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_ctor (obj : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment :: boxed (std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_destroy (ffi : * mut std_sync_RwLock_std_collections_Map_keys_dash_spv_crypto_network_llmq_type_LLMQType_values_std_collections_Map_keys_u8_arr_32_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DocumentName , pub values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: dpp_data_contract_document_type_DocumentType } impl ferment :: FFIConversionFrom < std :: collections :: BTreeMap < dpp :: data_contract :: DocumentName , dpp :: data_contract :: document_type :: DocumentType > > for std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType) -> std :: collections :: BTreeMap < dpp :: data_contract :: DocumentName , dpp :: data_contract :: document_type :: DocumentType > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DocumentName as ferment :: FFIConversionFrom < dpp :: data_contract :: DocumentName >> :: ffi_from (o) , | o | < crate :: fermented :: types :: dpp :: data_contract :: document_type :: dpp_data_contract_document_type_DocumentType as ferment :: FFIConversionFrom < dpp :: data_contract :: document_type :: DocumentType >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < std :: collections :: BTreeMap < dpp :: data_contract :: DocumentName , dpp :: data_contract :: document_type :: DocumentType > > for std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < dpp :: data_contract :: DocumentName , dpp :: data_contract :: document_type :: DocumentType >) -> * const std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_complex_group (obj . keys () . cloned ()) , values : ferment :: to_complex_group (obj . values () . cloned ()) }) } } impl Drop for std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . keys , self . count) ; ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DocumentName , values : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: dpp_data_contract_document_type_DocumentType) -> * mut std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType { ferment :: boxed (std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType_destroy (ffi : * mut std_collections_Map_keys_dpp_data_contract_DocumentName_values_dpp_data_contract_document_type_DocumentType) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: llmq_indexed_hash :: dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash , pub values : * mut * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry } impl ferment :: FFIConversionFrom < std :: collections :: BTreeMap < dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > > for std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> std :: collections :: BTreeMap < dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: llmq_indexed_hash :: dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash >> :: ffi_from (o) , | o | < crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry as ferment :: FFIConversionFrom < Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < std :: collections :: BTreeMap < dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > > for std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > >) -> * const std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_complex_group (obj . keys () . cloned ()) , values : ferment :: to_complex_group (obj . values () . cloned ()) }) } } impl Drop for std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . keys , self . count) ; ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: llmq_indexed_hash :: dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash , values : * mut * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment :: boxed (std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_destroy (ffi : * mut std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_Vec_u8_err_dash_spv_platform_error_Error { pub ok : * mut crate :: fermented :: generics :: Vec_u8 , pub error : * mut crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error } impl ferment :: FFIConversionFrom < Result < Vec < u8 > , dash_spv_platform :: error :: Error > > for Result_ok_Vec_u8_err_dash_spv_platform_error_Error { unsafe fn ffi_from_const (ffi : * const Result_ok_Vec_u8_err_dash_spv_platform_error_Error) -> Result < Vec < u8 > , dash_spv_platform :: error :: Error > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | < crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (o) , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error as ferment :: FFIConversionFrom < dash_spv_platform :: error :: Error >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < Vec < u8 > , dash_spv_platform :: error :: Error > > for Result_ok_Vec_u8_err_dash_spv_platform_error_Error { unsafe fn ffi_to_const (obj : Result < Vec < u8 > , dash_spv_platform :: error :: Error >) -> * const Result_ok_Vec_u8_err_dash_spv_platform_error_Error { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: FFIConversionTo :: ffi_to (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_Vec_u8_err_dash_spv_platform_error_Error { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_Vec_u8_err_dash_spv_platform_error_Error_ctor (ok : * mut crate :: fermented :: generics :: Vec_u8 , error : * mut crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error) -> * mut Result_ok_Vec_u8_err_dash_spv_platform_error_Error { ferment :: boxed (Result_ok_Vec_u8_err_dash_spv_platform_error_Error { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_Vec_u8_err_dash_spv_platform_error_Error_destroy (ffi : * mut Result_ok_Vec_u8_err_dash_spv_platform_error_Error) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Arr_u8_86 { pub count : usize , pub values : * mut u8 } impl ferment :: FFIConversionFrom < [u8 ; 86] > for Arr_u8_86 { unsafe fn ffi_from_const (ffi : * const Arr_u8_86) -> [u8 ; 86] { let ffi_ref = & * ffi ; let vec : Vec < u8 > = ferment :: from_primitive_group (ffi_ref . values , ffi_ref . count) ; vec . try_into () . unwrap () } } impl ferment :: FFIConversionTo < [u8 ; 86] > for Arr_u8_86 { unsafe fn ffi_to_const (obj : [u8 ; 86]) -> * const Arr_u8_86 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_primitive_group (obj . into_iter ()) }) } } impl Drop for Arr_u8_86 { fn drop (& mut self) { unsafe { ferment :: unbox_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Arr_u8_86_ctor (count : usize , values : * mut u8) -> * mut Arr_u8_86 { ferment :: boxed (Arr_u8_86 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Arr_u8_86_destroy (ffi : * mut Arr_u8_86) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Fn_ARGS_std_os_raw_c_void_Arr_u8_32_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , * mut crate :: fermented :: generics :: Arr_u8_32 , * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) -> * mut crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError , destructor : unsafe extern "C" fn (* mut crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) } impl Fn_ARGS_std_os_raw_c_void_Arr_u8_32_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { pub unsafe fn call (& self , o_0 : * const std :: os :: raw :: c_void , o_1 : [u8 ; 32] , o_2 : dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot) -> Result < bool , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > { let ffi_result = (self . caller) (o_0 , < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionTo < [u8 ; 32] >> :: ffi_to (o_1) , < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot as ferment :: FFIConversionTo < dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot >> :: ffi_to (o_2)) ; let result = < crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError as ferment :: FFIConversionFrom < Result < bool , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > >> :: ffi_from (ffi_result) ; (self . destructor) (ffi_result) ; result } } unsafe impl Send for Fn_ARGS_std_os_raw_c_void_Arr_u8_32_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { } unsafe impl Sync for Fn_ARGS_std_os_raw_c_void_Arr_u8_32_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_Arr_u8_32_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_ctor (caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , * mut crate :: fermented :: generics :: Arr_u8_32 , * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) -> * mut crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError , destructor : unsafe extern "C" fn (* mut crate :: fermented :: generics :: Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError)) -> * mut Fn_ARGS_std_os_raw_c_void_Arr_u8_32_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment :: boxed (Fn_ARGS_std_os_raw_c_void_Arr_u8_32_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { caller , destructor }) } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_Arr_u8_32_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_destroy (ffi : * mut Fn_ARGS_std_os_raw_c_void_Arr_u8_32_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_RTRN_Result_ok_bool_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dash_spv_crypto_tx_output_TransactionOutput { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dash_spv_crypto :: tx :: output :: dash_spv_crypto_tx_output_TransactionOutput } impl ferment :: FFIConversionFrom < Vec < dash_spv_crypto :: tx :: output :: TransactionOutput > > for Vec_dash_spv_crypto_tx_output_TransactionOutput { unsafe fn ffi_from_const (ffi : * const Vec_dash_spv_crypto_tx_output_TransactionOutput) -> Vec < dash_spv_crypto :: tx :: output :: TransactionOutput > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < dash_spv_crypto :: tx :: output :: TransactionOutput > > for Vec_dash_spv_crypto_tx_output_TransactionOutput { unsafe fn ffi_to_const (obj : Vec < dash_spv_crypto :: tx :: output :: TransactionOutput >) -> * const Vec_dash_spv_crypto_tx_output_TransactionOutput { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dash_spv_crypto_tx_output_TransactionOutput { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_crypto_tx_output_TransactionOutput_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dash_spv_crypto :: tx :: output :: dash_spv_crypto_tx_output_TransactionOutput) -> * mut Vec_dash_spv_crypto_tx_output_TransactionOutput { ferment :: boxed (Vec_dash_spv_crypto_tx_output_TransactionOutput { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_crypto_tx_output_TransactionOutput_destroy (ffi : * mut Vec_dash_spv_crypto_tx_output_TransactionOutput) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dash_spv_crypto_keys_key_OpaqueKey { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey } impl ferment :: FFIConversionFrom < Vec < dash_spv_crypto :: keys :: key :: OpaqueKey > > for Vec_dash_spv_crypto_keys_key_OpaqueKey { unsafe fn ffi_from_const (ffi : * const Vec_dash_spv_crypto_keys_key_OpaqueKey) -> Vec < dash_spv_crypto :: keys :: key :: OpaqueKey > { let ffi_ref = & * ffi ; ferment :: from_complex_group (ffi_ref . values , ffi_ref . count) } } impl ferment :: FFIConversionTo < Vec < dash_spv_crypto :: keys :: key :: OpaqueKey > > for Vec_dash_spv_crypto_keys_key_OpaqueKey { unsafe fn ffi_to_const (obj : Vec < dash_spv_crypto :: keys :: key :: OpaqueKey >) -> * const Vec_dash_spv_crypto_keys_key_OpaqueKey { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dash_spv_crypto_keys_key_OpaqueKey { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_crypto_keys_key_OpaqueKey_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: key :: dash_spv_crypto_keys_key_OpaqueKey) -> * mut Vec_dash_spv_crypto_keys_key_OpaqueKey { ferment :: boxed (Vec_dash_spv_crypto_keys_key_OpaqueKey { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_crypto_keys_key_OpaqueKey_destroy (ffi : * mut Vec_dash_spv_crypto_keys_key_OpaqueKey) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_dashcore_blockdata_transaction_Transaction_err_dash_spv_platform_error_Error { pub ok : * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: dashcore_blockdata_transaction_Transaction , pub error : * mut crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error } impl ferment :: FFIConversionFrom < Result < dashcore :: blockdata :: transaction :: Transaction , dash_spv_platform :: error :: Error > > for Result_ok_dashcore_blockdata_transaction_Transaction_err_dash_spv_platform_error_Error { unsafe fn ffi_from_const (ffi : * const Result_ok_dashcore_blockdata_transaction_Transaction_err_dash_spv_platform_error_Error) -> Result < dashcore :: blockdata :: transaction :: Transaction , dash_spv_platform :: error :: Error > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | < crate :: fermented :: types :: dashcore :: blockdata :: transaction :: dashcore_blockdata_transaction_Transaction as ferment :: FFIConversionFrom < dashcore :: blockdata :: transaction :: Transaction >> :: ffi_from (o) , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error as ferment :: FFIConversionFrom < dash_spv_platform :: error :: Error >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < dashcore :: blockdata :: transaction :: Transaction , dash_spv_platform :: error :: Error > > for Result_ok_dashcore_blockdata_transaction_Transaction_err_dash_spv_platform_error_Error { unsafe fn ffi_to_const (obj : Result < dashcore :: blockdata :: transaction :: Transaction , dash_spv_platform :: error :: Error >) -> * const Result_ok_dashcore_blockdata_transaction_Transaction_err_dash_spv_platform_error_Error { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: FFIConversionTo :: ffi_to (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_dashcore_blockdata_transaction_Transaction_err_dash_spv_platform_error_Error { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_dashcore_blockdata_transaction_Transaction_err_dash_spv_platform_error_Error_ctor (ok : * mut crate :: fermented :: types :: dashcore :: blockdata :: transaction :: dashcore_blockdata_transaction_Transaction , error : * mut crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error) -> * mut Result_ok_dashcore_blockdata_transaction_Transaction_err_dash_spv_platform_error_Error { ferment :: boxed (Result_ok_dashcore_blockdata_transaction_Transaction_err_dash_spv_platform_error_Error { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_dashcore_blockdata_transaction_Transaction_err_dash_spv_platform_error_Error_destroy (ffi : * mut Result_ok_dashcore_blockdata_transaction_Transaction_err_dash_spv_platform_error_Error) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_dpp_document_Document_err_dash_spv_platform_error_Error { pub ok : * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document , pub error : * mut crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error } impl ferment :: FFIConversionFrom < Result < dpp :: document :: Document , dash_spv_platform :: error :: Error > > for Result_ok_dpp_document_Document_err_dash_spv_platform_error_Error { unsafe fn ffi_from_const (ffi : * const Result_ok_dpp_document_Document_err_dash_spv_platform_error_Error) -> Result < dpp :: document :: Document , dash_spv_platform :: error :: Error > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | < crate :: fermented :: types :: dpp :: document :: dpp_document_Document as ferment :: FFIConversionFrom < dpp :: document :: Document >> :: ffi_from (o) , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error as ferment :: FFIConversionFrom < dash_spv_platform :: error :: Error >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < dpp :: document :: Document , dash_spv_platform :: error :: Error > > for Result_ok_dpp_document_Document_err_dash_spv_platform_error_Error { unsafe fn ffi_to_const (obj : Result < dpp :: document :: Document , dash_spv_platform :: error :: Error >) -> * const Result_ok_dpp_document_Document_err_dash_spv_platform_error_Error { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: FFIConversionTo :: ffi_to (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_dpp_document_Document_err_dash_spv_platform_error_Error { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_dpp_document_Document_err_dash_spv_platform_error_Error_ctor (ok : * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document , error : * mut crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error) -> * mut Result_ok_dpp_document_Document_err_dash_spv_platform_error_Error { ferment :: boxed (Result_ok_dpp_document_Document_err_dash_spv_platform_error_Error { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_dpp_document_Document_err_dash_spv_platform_error_Error_destroy (ffi : * mut Result_ok_dpp_document_Document_err_dash_spv_platform_error_Error) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_RwLock_std_collections_HashSet_u8_32 { pub obj : * mut crate :: fermented :: generics :: std_collections_HashSet_u8_32 } impl ferment :: FFIConversionFrom < std :: sync :: RwLock < std :: collections :: HashSet < [u8 ; 32] > > > for std_sync_RwLock_std_collections_HashSet_u8_32 { unsafe fn ffi_from_const (ffi : * const std_sync_RwLock_std_collections_HashSet_u8_32) -> std :: sync :: RwLock < std :: collections :: HashSet < [u8 ; 32] > > { let ffi_ref = & * ffi ; std :: sync :: RwLock :: new (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . obj)) } } impl ferment :: FFIConversionTo < std :: sync :: RwLock < std :: collections :: HashSet < [u8 ; 32] > > > for std_sync_RwLock_std_collections_HashSet_u8_32 { unsafe fn ffi_to_const (obj : std :: sync :: RwLock < std :: collections :: HashSet < [u8 ; 32] > >) -> * const std_sync_RwLock_std_collections_HashSet_u8_32 { ferment :: boxed (Self { obj : ferment :: FFIConversionTo :: ffi_to (obj . into_inner () . expect ("Err")) }) } } impl Drop for std_sync_RwLock_std_collections_HashSet_u8_32 { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_std_collections_HashSet_u8_32_ctor (obj : * mut crate :: fermented :: generics :: std_collections_HashSet_u8_32) -> * mut std_sync_RwLock_std_collections_HashSet_u8_32 { ferment :: boxed (std_sync_RwLock_std_collections_HashSet_u8_32 { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_std_collections_HashSet_u8_32_destroy (ffi : * mut std_sync_RwLock_std_collections_HashSet_u8_32) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DefinitionName , pub values : * mut * mut crate :: fermented :: types :: platform_value :: platform_value_Value } impl ferment :: FFIConversionFrom < std :: collections :: BTreeMap < dpp :: data_contract :: DefinitionName , platform_value :: Value > > for std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value) -> std :: collections :: BTreeMap < dpp :: data_contract :: DefinitionName , platform_value :: Value > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DefinitionName as ferment :: FFIConversionFrom < dpp :: data_contract :: DefinitionName >> :: ffi_from (o) , | o | < crate :: fermented :: types :: platform_value :: platform_value_Value as ferment :: FFIConversionFrom < platform_value :: Value >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < std :: collections :: BTreeMap < dpp :: data_contract :: DefinitionName , platform_value :: Value > > for std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < dpp :: data_contract :: DefinitionName , platform_value :: Value >) -> * const std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_complex_group (obj . keys () . cloned ()) , values : ferment :: to_complex_group (obj . values () . cloned ()) }) } } impl Drop for std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . keys , self . count) ; ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DefinitionName , values : * mut * mut crate :: fermented :: types :: platform_value :: platform_value_Value) -> * mut std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value { ferment :: boxed (std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value_destroy (ffi : * mut std_collections_Map_keys_dpp_data_contract_DefinitionName_values_platform_value_Value) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { pub count : usize , pub keys : * mut * mut crate :: fermented :: generics :: Arr_u8_32 , pub values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot } impl ferment :: FFIConversionFrom < std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot > > for std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) -> std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < crate :: fermented :: generics :: Arr_u8_32 as ferment :: FFIConversionFrom < [u8 ; 32] >> :: ffi_from (o) , | o | < crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot as ferment :: FFIConversionFrom < dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot > > for std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < [u8 ; 32] , dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot >) -> * const std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { ferment :: boxed (Self { count : obj . len () , keys : ferment :: to_complex_group (obj . keys () . cloned ()) , values : ferment :: to_complex_group (obj . values () . cloned ()) }) } } impl Drop for std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { fn drop (& mut self) { unsafe { ferment :: unbox_any_vec_ptr (self . keys , self . count) ; ferment :: unbox_any_vec_ptr (self . values , self . count) ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_ctor (count : usize , keys : * mut * mut crate :: fermented :: generics :: Arr_u8_32 , values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) -> * mut std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { ferment :: boxed (std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_destroy (ffi : * mut std_collections_Map_keys_u8_arr_32_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError { pub ok : * mut dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , pub error : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError } impl ferment :: FFIConversionFrom < Result < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , dash_spv_crypto :: keys :: KeyError > > for Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError { unsafe fn ffi_from_const (ffi : * const Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError) -> Result < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , dash_spv_crypto :: keys :: KeyError > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | (& * o) . clone () , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError as ferment :: FFIConversionFrom < dash_spv_crypto :: keys :: KeyError >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , dash_spv_crypto :: keys :: KeyError > > for Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError { unsafe fn ffi_to_const (obj : Result < dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , dash_spv_crypto :: keys :: KeyError >) -> * const Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: boxed (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError_ctor (ok : * mut dash_spv_crypto :: keys :: ecdsa_key :: ECDSAKey , error : * mut crate :: fermented :: types :: dash_spv_crypto :: keys :: dash_spv_crypto_keys_KeyError) -> * mut Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError { ferment :: boxed (Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError_destroy (ffi : * mut Result_ok_dash_spv_crypto_keys_ecdsa_key_ECDSAKey_err_dash_spv_crypto_keys_KeyError) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Fn_ARGS_std_os_raw_c_void_RTRN_Result_ok_dpp_prelude_CoreBlockHeight_err_drive_proof_verifier_error_ContextProviderError { caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void) -> * mut crate :: fermented :: generics :: Result_ok_dpp_prelude_CoreBlockHeight_err_drive_proof_verifier_error_ContextProviderError , destructor : unsafe extern "C" fn (* mut crate :: fermented :: generics :: Result_ok_dpp_prelude_CoreBlockHeight_err_drive_proof_verifier_error_ContextProviderError) } impl Fn_ARGS_std_os_raw_c_void_RTRN_Result_ok_dpp_prelude_CoreBlockHeight_err_drive_proof_verifier_error_ContextProviderError { pub unsafe fn call (& self , o_0 : * const std :: os :: raw :: c_void) -> Result < dpp :: prelude :: CoreBlockHeight , drive_proof_verifier :: error :: ContextProviderError > { let ffi_result = (self . caller) (o_0) ; let result = < crate :: fermented :: generics :: Result_ok_dpp_prelude_CoreBlockHeight_err_drive_proof_verifier_error_ContextProviderError as ferment :: FFIConversionFrom < Result < dpp :: prelude :: CoreBlockHeight , drive_proof_verifier :: error :: ContextProviderError > >> :: ffi_from (ffi_result) ; (self . destructor) (ffi_result) ; result } } unsafe impl Send for Fn_ARGS_std_os_raw_c_void_RTRN_Result_ok_dpp_prelude_CoreBlockHeight_err_drive_proof_verifier_error_ContextProviderError { } unsafe impl Sync for Fn_ARGS_std_os_raw_c_void_RTRN_Result_ok_dpp_prelude_CoreBlockHeight_err_drive_proof_verifier_error_ContextProviderError { } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_RTRN_Result_ok_dpp_prelude_CoreBlockHeight_err_drive_proof_verifier_error_ContextProviderError_ctor (caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void) -> * mut crate :: fermented :: generics :: Result_ok_dpp_prelude_CoreBlockHeight_err_drive_proof_verifier_error_ContextProviderError , destructor : unsafe extern "C" fn (* mut crate :: fermented :: generics :: Result_ok_dpp_prelude_CoreBlockHeight_err_drive_proof_verifier_error_ContextProviderError)) -> * mut Fn_ARGS_std_os_raw_c_void_RTRN_Result_ok_dpp_prelude_CoreBlockHeight_err_drive_proof_verifier_error_ContextProviderError { ferment :: boxed (Fn_ARGS_std_os_raw_c_void_RTRN_Result_ok_dpp_prelude_CoreBlockHeight_err_drive_proof_verifier_error_ContextProviderError { caller , destructor }) } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_RTRN_Result_ok_dpp_prelude_CoreBlockHeight_err_drive_proof_verifier_error_ContextProviderError_destroy (ffi : * mut Fn_ARGS_std_os_raw_c_void_RTRN_Result_ok_dpp_prelude_CoreBlockHeight_err_drive_proof_verifier_error_ContextProviderError) { ferment :: unbox_any (ffi) ; } # [cfg (any (any (feature = "state-transitions")))] # [repr (C)] # [derive (Clone)] # [cfg (any (any (feature = "state-transitions")))] pub struct Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32 { pub o_0 : * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document , pub o_1 : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: dpp_data_contract_document_type_DocumentTypeRef , pub o_2 : * mut crate :: fermented :: types :: platform_value :: types :: bytes_32 :: platform_value_types_bytes_32_Bytes32 } # [cfg (any (any (feature = "state-transitions")))] # [cfg (any (any (feature = "state-transitions")))] impl < 'a > ferment :: FFIConversionFrom < (dpp :: document :: Document , dpp :: data_contract :: document_type :: DocumentTypeRef < 'a > , platform_value :: types :: bytes_32 :: Bytes32) > for Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32 { unsafe fn ffi_from_const (ffi : * const Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32) -> (dpp :: document :: Document , dpp :: data_contract :: document_type :: DocumentTypeRef < 'a > , platform_value :: types :: bytes_32 :: Bytes32) { let ffi_ref = & * ffi ; (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . o_0) , ferment :: FFIConversionFrom :: ffi_from (ffi_ref . o_1) , ferment :: FFIConversionFrom :: ffi_from (ffi_ref . o_2)) } } # [cfg (any (any (feature = "state-transitions")))] # [cfg (any (any (feature = "state-transitions")))] impl < 'a > ferment :: FFIConversionTo < (dpp :: document :: Document , dpp :: data_contract :: document_type :: DocumentTypeRef < 'a > , platform_value :: types :: bytes_32 :: Bytes32) > for Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32 { unsafe fn ffi_to_const (obj : (dpp :: document :: Document , dpp :: data_contract :: document_type :: DocumentTypeRef < 'a > , platform_value :: types :: bytes_32 :: Bytes32)) -> * const Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32 { ferment :: boxed (Self { o_0 : ferment :: FFIConversionTo :: ffi_to (obj . 0) , o_1 : ferment :: FFIConversionTo :: ffi_to (obj . 1) , o_2 : ferment :: FFIConversionTo :: ffi_to (obj . 2) }) } } # [cfg (any (any (feature = "state-transitions")))] # [cfg (any (any (feature = "state-transitions")))] impl Drop for Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32 { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . o_0) ; ferment :: unbox_any (self . o_1) ; ferment :: unbox_any (self . o_2) ; } } } # [cfg (any (any (feature = "state-transitions")))] # [no_mangle] pub unsafe extern "C" fn Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: document :: dpp_document_Document , o_1 : * mut crate :: fermented :: types :: dpp :: data_contract :: document_type :: dpp_data_contract_document_type_DocumentTypeRef , o_2 : * mut crate :: fermented :: types :: platform_value :: types :: bytes_32 :: platform_value_types_bytes_32_Bytes32) -> * mut Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32 { ferment :: boxed (Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32 { o_0 , o_1 , o_2 }) } # [cfg (any (any (feature = "state-transitions")))] # [no_mangle] pub unsafe extern "C" fn Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32_destroy (ffi : * mut Tuple_dpp_document_Document_dpp_data_contract_document_type_DocumentTypeRef_platform_value_types_bytes_32_Bytes32) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Tuple_String_Arr_u8_32 { pub o_0 : * mut std :: os :: raw :: c_char , pub o_1 : * mut crate :: fermented :: generics :: Arr_u8_32 } impl ferment :: FFIConversionFrom < (String , [u8 ; 32]) > for Tuple_String_Arr_u8_32 { unsafe fn ffi_from_const (ffi : * const Tuple_String_Arr_u8_32) -> (String , [u8 ; 32]) { let ffi_ref = & * ffi ; (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . o_0) , ferment :: FFIConversionFrom :: ffi_from (ffi_ref . o_1)) } } impl ferment :: FFIConversionTo < (String , [u8 ; 32]) > for Tuple_String_Arr_u8_32 { unsafe fn ffi_to_const (obj : (String , [u8 ; 32])) -> * const Tuple_String_Arr_u8_32 { ferment :: boxed (Self { o_0 : ferment :: FFIConversionTo :: ffi_to (obj . 0) , o_1 : ferment :: FFIConversionTo :: ffi_to (obj . 1) }) } } impl Drop for Tuple_String_Arr_u8_32 { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . o_0) ; ferment :: unbox_any (self . o_1) ; } } } # [no_mangle] pub unsafe extern "C" fn Tuple_String_Arr_u8_32_ctor (o_0 : * mut std :: os :: raw :: c_char , o_1 : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut Tuple_String_Arr_u8_32 { ferment :: boxed (Tuple_String_Arr_u8_32 { o_0 , o_1 }) } # [no_mangle] pub unsafe extern "C" fn Tuple_String_Arr_u8_32_destroy (ffi : * mut Tuple_String_Arr_u8_32) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error { pub ok : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract , pub error : * mut crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error } impl ferment :: FFIConversionFrom < Result < dpp :: data_contract :: DataContract , dash_spv_platform :: error :: Error > > for Result_ok_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error { unsafe fn ffi_from_const (ffi : * const Result_ok_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error) -> Result < dpp :: data_contract :: DataContract , dash_spv_platform :: error :: Error > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | < crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract as ferment :: FFIConversionFrom < dpp :: data_contract :: DataContract >> :: ffi_from (o) , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error as ferment :: FFIConversionFrom < dash_spv_platform :: error :: Error >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < dpp :: data_contract :: DataContract , dash_spv_platform :: error :: Error > > for Result_ok_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error { unsafe fn ffi_to_const (obj : Result < dpp :: data_contract :: DataContract , dash_spv_platform :: error :: Error >) -> * const Result_ok_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: FFIConversionTo :: ffi_to (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error_ctor (ok : * mut crate :: fermented :: types :: dpp :: data_contract :: dpp_data_contract_DataContract , error : * mut crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error) -> * mut Result_ok_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error { ferment :: boxed (Result_ok_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error_destroy (ffi : * mut Result_ok_dpp_data_contract_DataContract_err_dash_spv_platform_error_Error) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Fn_ARGS_std_os_raw_c_void_bool_std_os_raw_c_void_RTRN_ { caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , bool , * const std :: os :: raw :: c_void) } impl Fn_ARGS_std_os_raw_c_void_bool_std_os_raw_c_void_RTRN_ { pub unsafe fn call (& self , o_0 : * const std :: os :: raw :: c_void , o_1 : bool , o_2 : * const std :: os :: raw :: c_void) { let ffi_result = (self . caller) (o_0 , o_1 , o_2) ; ffi_result } } unsafe impl Send for Fn_ARGS_std_os_raw_c_void_bool_std_os_raw_c_void_RTRN_ { } unsafe impl Sync for Fn_ARGS_std_os_raw_c_void_bool_std_os_raw_c_void_RTRN_ { } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_bool_std_os_raw_c_void_RTRN__ctor (caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , bool , * const std :: os :: raw :: c_void)) -> * mut Fn_ARGS_std_os_raw_c_void_bool_std_os_raw_c_void_RTRN_ { ferment :: boxed (Fn_ARGS_std_os_raw_c_void_bool_std_os_raw_c_void_RTRN_ { caller }) } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_bool_std_os_raw_c_void_RTRN__destroy (ffi : * mut Fn_ARGS_std_os_raw_c_void_bool_std_os_raw_c_void_RTRN_) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Fn_ARGS_std_os_raw_c_void_dpp_identity_identity_public_key_IdentityPublicKey_RTRN_bool { caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey) -> bool , destructor : unsafe extern "C" fn (bool) } impl Fn_ARGS_std_os_raw_c_void_dpp_identity_identity_public_key_IdentityPublicKey_RTRN_bool { pub unsafe fn call (& self , o_0 : * const std :: os :: raw :: c_void , o_1 : & dpp :: identity :: identity_public_key :: IdentityPublicKey) -> bool { let ffi_result = (self . caller) (o_0 , < crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey as ferment :: FFIConversionTo < dpp :: identity :: identity_public_key :: IdentityPublicKey >> :: ffi_to (o_1 . clone ())) ; ffi_result } } unsafe impl Send for Fn_ARGS_std_os_raw_c_void_dpp_identity_identity_public_key_IdentityPublicKey_RTRN_bool { } unsafe impl Sync for Fn_ARGS_std_os_raw_c_void_dpp_identity_identity_public_key_IdentityPublicKey_RTRN_bool { } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_dpp_identity_identity_public_key_IdentityPublicKey_RTRN_bool_ctor (caller : unsafe extern "C" fn (* const std :: os :: raw :: c_void , * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey) -> bool , destructor : unsafe extern "C" fn (bool)) -> * mut Fn_ARGS_std_os_raw_c_void_dpp_identity_identity_public_key_IdentityPublicKey_RTRN_bool { ferment :: boxed (Fn_ARGS_std_os_raw_c_void_dpp_identity_identity_public_key_IdentityPublicKey_RTRN_bool { caller , destructor }) } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_std_os_raw_c_void_dpp_identity_identity_public_key_IdentityPublicKey_RTRN_bool_destroy (ffi : * mut Fn_ARGS_std_os_raw_c_void_dpp_identity_identity_public_key_IdentityPublicKey_RTRN_bool) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error { pub ok : * mut crate :: fermented :: types :: dpp :: state_transition :: proof_result :: dpp_state_transition_proof_result_StateTransitionProofResult , pub error : * mut crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error } impl ferment :: FFIConversionFrom < Result < dpp :: state_transition :: proof_result :: StateTransitionProofResult , dash_spv_platform :: error :: Error > > for Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error { unsafe fn ffi_from_const (ffi : * const Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error) -> Result < dpp :: state_transition :: proof_result :: StateTransitionProofResult , dash_spv_platform :: error :: Error > { let ffi_ref = & * ffi ; ferment :: fold_to_result (ffi_ref . ok , | o | < crate :: fermented :: types :: dpp :: state_transition :: proof_result :: dpp_state_transition_proof_result_StateTransitionProofResult as ferment :: FFIConversionFrom < dpp :: state_transition :: proof_result :: StateTransitionProofResult >> :: ffi_from (o) , ffi_ref . error , | o | < crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error as ferment :: FFIConversionFrom < dash_spv_platform :: error :: Error >> :: ffi_from (o)) } } impl ferment :: FFIConversionTo < Result < dpp :: state_transition :: proof_result :: StateTransitionProofResult , dash_spv_platform :: error :: Error > > for Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error { unsafe fn ffi_to_const (obj : Result < dpp :: state_transition :: proof_result :: StateTransitionProofResult , dash_spv_platform :: error :: Error >) -> * const Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error { ferment :: boxed ({ let (ok , error) = ferment :: to_result (obj , | o | ferment :: FFIConversionTo :: ffi_to (o) , | o | ferment :: FFIConversionTo :: ffi_to (o)) ; Self { ok , error } }) } } impl Drop for Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error { fn drop (& mut self) { unsafe { ferment :: unbox_any_opt (self . ok) ; ferment :: unbox_any_opt (self . error) ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error_ctor (ok : * mut crate :: fermented :: types :: dpp :: state_transition :: proof_result :: dpp_state_transition_proof_result_StateTransitionProofResult , error : * mut crate :: fermented :: types :: dash_spv_platform :: error :: dash_spv_platform_error_Error) -> * mut Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error { ferment :: boxed (Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error_destroy (ffi : * mut Result_ok_dpp_state_transition_proof_result_StateTransitionProofResult_err_dash_spv_platform_error_Error) { ferment :: unbox_any (ffi) ; } }