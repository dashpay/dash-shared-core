# [allow (clippy :: let_and_return , clippy :: suspicious_else_formatting , clippy :: redundant_field_names , dead_code , non_camel_case_types , non_snake_case , non_upper_case_globals , redundant_semicolons , unreachable_patterns , unused_braces , unused_imports , unused_parens , unused_qualifications , unused_unsafe , unused_variables)] pub mod types { pub mod dash_spv_masternode_processor { use crate as dash_spv_apple_bindings ; pub mod util { use crate as dash_spv_apple_bindings ; pub mod base58 { use crate as dash_spv_apple_bindings ; # [cfg (test)] pub mod tests { use crate as dash_spv_apple_bindings ; } } pub mod endian { use crate as dash_spv_apple_bindings ; # [cfg (test)] pub mod tests { use crate as dash_spv_apple_bindings ; } } pub mod psbt { use crate as dash_spv_apple_bindings ; } pub mod address { use crate as dash_spv_apple_bindings ; pub mod address { use crate as dash_spv_apple_bindings ; } } pub mod script { use crate as dash_spv_apple_bindings ; # [cfg (test)] pub mod tests { use crate as dash_spv_apple_bindings ; } } } # [cfg (test)] pub mod tests { use crate as dash_spv_apple_bindings ; pub mod listdiff { use crate as dash_spv_apple_bindings ; } pub mod indexes { use crate as dash_spv_apple_bindings ; } pub mod keys { use crate as dash_spv_apple_bindings ; } pub mod hashes { use crate as dash_spv_apple_bindings ; } } pub mod models { use crate as dash_spv_apple_bindings ; pub mod llmq_indexed_hash { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash { pub index : u32 , pub hash : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 } impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash > for dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash) -> dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash { index : ffi_ref . index , hash : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . hash) } } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash) -> * const dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash { ferment_interfaces :: boxed (dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash { index : obj . index , hash : ferment_interfaces :: FFIConversion :: ffi_to (obj . hash) }) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment_interfaces :: unbox_any (ffi_ref . hash) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_ctor < > (index : u32 , hash : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256) -> * mut dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash { ferment_interfaces :: boxed (dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash { index , hash }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_destroy < > (ffi : * mut dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_get_index < > (obj : * const dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash) -> u32 { (* obj) . index } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_get_hash < > (obj : * const dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 { (* obj) . hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_set_index < > (obj : * mut dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash , value : u32) { (* obj) . index = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_set_hash < > (obj : * mut dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256) { (* obj) . hash = value ; } } pub mod llmq_typed_hash { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: models :: llmq_typed_hash :: LLMQTypedHash`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash { pub llmq_type : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_LLMQType , pub hash : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 } impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: models :: llmq_typed_hash :: LLMQTypedHash > for dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash) -> dash_spv_masternode_processor :: models :: llmq_typed_hash :: LLMQTypedHash { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: models :: llmq_typed_hash :: LLMQTypedHash { llmq_type : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . llmq_type) , hash : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . hash) } } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: models :: llmq_typed_hash :: LLMQTypedHash) -> * const dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash { ferment_interfaces :: boxed (dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash { llmq_type : ferment_interfaces :: FFIConversion :: ffi_to (obj . llmq_type) , hash : ferment_interfaces :: FFIConversion :: ffi_to (obj . hash) }) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . llmq_type) ; ; ferment_interfaces :: unbox_any (ffi_ref . hash) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash_ctor < > (llmq_type : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_LLMQType , hash : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256) -> * mut dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash { ferment_interfaces :: boxed (dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash { llmq_type , hash }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash_destroy < > (ffi : * mut dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash_get_llmq_type < > (obj : * const dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_LLMQType { (* obj) . llmq_type } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash_get_hash < > (obj : * const dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 { (* obj) . hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash_set_llmq_type < > (obj : * mut dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_LLMQType) { (* obj) . llmq_type = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash_set_hash < > (obj : * mut dash_spv_masternode_processor_models_llmq_typed_hash_LLMQTypedHash , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256) { (* obj) . hash = value ; } } pub mod masternode_list { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_models_masternode_list_MasternodeList { pub block_hash : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , pub known_height : u32 , pub masternode_merkle_root : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , pub llmq_merkle_root : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , pub masternodes : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , pub quorums : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry } impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList > for dash_spv_masternode_processor_models_masternode_list_MasternodeList { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList { block_hash : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . block_hash) , known_height : ffi_ref . known_height , masternode_merkle_root : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . masternode_merkle_root) , llmq_merkle_root : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . llmq_merkle_root) , masternodes : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . masternodes) , quorums : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . quorums) } } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList) -> * const dash_spv_masternode_processor_models_masternode_list_MasternodeList { ferment_interfaces :: boxed (dash_spv_masternode_processor_models_masternode_list_MasternodeList { block_hash : ferment_interfaces :: FFIConversion :: ffi_to (obj . block_hash) , known_height : obj . known_height , masternode_merkle_root : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . masternode_merkle_root) , llmq_merkle_root : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . llmq_merkle_root) , masternodes : ferment_interfaces :: FFIConversion :: ffi_to (obj . masternodes) , quorums : ferment_interfaces :: FFIConversion :: ffi_to (obj . quorums) }) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_models_masternode_list_MasternodeList) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dash_spv_masternode_processor_models_masternode_list_MasternodeList { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . block_hash) ; ; ; if (! (ffi_ref . masternode_merkle_root) . is_null ()) { ferment_interfaces :: unbox_any (ffi_ref . masternode_merkle_root) ; } ; if (! (ffi_ref . llmq_merkle_root) . is_null ()) { ferment_interfaces :: unbox_any (ffi_ref . llmq_merkle_root) ; } ; ferment_interfaces :: unbox_any (ffi_ref . masternodes) ; ; ferment_interfaces :: unbox_any (ffi_ref . quorums) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_ctor < > (block_hash : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , known_height : u32 , masternode_merkle_root : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , llmq_merkle_root : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , masternodes : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , quorums : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry) -> * mut dash_spv_masternode_processor_models_masternode_list_MasternodeList { ferment_interfaces :: boxed (dash_spv_masternode_processor_models_masternode_list_MasternodeList { block_hash , known_height , masternode_merkle_root , llmq_merkle_root , masternodes , quorums }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_destroy < > (ffi : * mut dash_spv_masternode_processor_models_masternode_list_MasternodeList) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_get_block_hash < > (obj : * const dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 { (* obj) . block_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_get_known_height < > (obj : * const dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> u32 { (* obj) . known_height } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_get_masternode_merkle_root < > (obj : * const dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 { (* obj) . masternode_merkle_root } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_get_llmq_merkle_root < > (obj : * const dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 { (* obj) . llmq_merkle_root } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_get_masternodes < > (obj : * const dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { (* obj) . masternodes } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_get_quorums < > (obj : * const dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry { (* obj) . quorums } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_set_block_hash < > (obj : * mut dash_spv_masternode_processor_models_masternode_list_MasternodeList , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256) { (* obj) . block_hash = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_set_known_height < > (obj : * mut dash_spv_masternode_processor_models_masternode_list_MasternodeList , value : u32) { (* obj) . known_height = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_set_masternode_merkle_root < > (obj : * mut dash_spv_masternode_processor_models_masternode_list_MasternodeList , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256) { (* obj) . masternode_merkle_root = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_set_llmq_merkle_root < > (obj : * mut dash_spv_masternode_processor_models_masternode_list_MasternodeList , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256) { (* obj) . llmq_merkle_root = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_set_masternodes < > (obj : * mut dash_spv_masternode_processor_models_masternode_list_MasternodeList , value : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) { (* obj) . masternodes = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_list_MasternodeList_set_quorums < > (obj : * mut dash_spv_masternode_processor_models_masternode_list_MasternodeList , value : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry) { (* obj) . quorums = value ; } } pub mod operator_public_key { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: models :: operator_public_key :: OperatorPublicKey`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey { pub data : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt384 , pub version : u16 } impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: models :: operator_public_key :: OperatorPublicKey > for dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey) -> dash_spv_masternode_processor :: models :: operator_public_key :: OperatorPublicKey { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: models :: operator_public_key :: OperatorPublicKey { data : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . data) , version : ffi_ref . version } } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: models :: operator_public_key :: OperatorPublicKey) -> * const dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey { ferment_interfaces :: boxed (dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey { data : ferment_interfaces :: FFIConversion :: ffi_to (obj . data) , version : obj . version }) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . data) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey_ctor < > (data : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt384 , version : u16) -> * mut dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey { ferment_interfaces :: boxed (dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey { data , version }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey_destroy < > (ffi : * mut dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey_get_data < > (obj : * const dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt384 { (* obj) . data } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey_get_version < > (obj : * const dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey) -> u16 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey_set_data < > (obj : * mut dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt384) { (* obj) . data = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey_set_version < > (obj : * mut dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey , value : u16) { (* obj) . version = value ; } } pub mod llmq_entry { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: models :: llmq_entry :: LLMQEntry`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_models_llmq_entry_LLMQEntry { pub version : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: llmq_version :: dash_spv_masternode_processor_common_llmq_version_LLMQVersion , pub llmq_hash : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , pub index : * mut u16 , pub public_key : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt384 , pub threshold_signature : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt768 , pub verification_vector_hash : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , pub all_commitment_aggregated_signature : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt768 , pub llmq_type : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_LLMQType , pub signers : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: bitset :: dash_spv_masternode_processor_common_bitset_Bitset , pub valid_members : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: bitset :: dash_spv_masternode_processor_common_bitset_Bitset , pub entry_hash : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , pub verified : bool , pub saved : bool , pub commitment_hash : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 } impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: models :: llmq_entry :: LLMQEntry > for dash_spv_masternode_processor_models_llmq_entry_LLMQEntry { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_models_llmq_entry_LLMQEntry) -> dash_spv_masternode_processor :: models :: llmq_entry :: LLMQEntry { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: models :: llmq_entry :: LLMQEntry { version : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . version) , llmq_hash : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . llmq_hash) , index : ferment_interfaces :: from_opt_primitive (ffi_ref . index) , public_key : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . public_key) , threshold_signature : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . threshold_signature) , verification_vector_hash : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . verification_vector_hash) , all_commitment_aggregated_signature : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . all_commitment_aggregated_signature) , llmq_type : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . llmq_type) , signers : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . signers) , valid_members : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . valid_members) , entry_hash : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . entry_hash) , verified : ffi_ref . verified , saved : ffi_ref . saved , commitment_hash : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . commitment_hash) } } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: models :: llmq_entry :: LLMQEntry) -> * const dash_spv_masternode_processor_models_llmq_entry_LLMQEntry { ferment_interfaces :: boxed (dash_spv_masternode_processor_models_llmq_entry_LLMQEntry { version : ferment_interfaces :: FFIConversion :: ffi_to (obj . version) , llmq_hash : ferment_interfaces :: FFIConversion :: ffi_to (obj . llmq_hash) , index : ferment_interfaces :: to_opt_primitive (obj . index) , public_key : ferment_interfaces :: FFIConversion :: ffi_to (obj . public_key) , threshold_signature : ferment_interfaces :: FFIConversion :: ffi_to (obj . threshold_signature) , verification_vector_hash : ferment_interfaces :: FFIConversion :: ffi_to (obj . verification_vector_hash) , all_commitment_aggregated_signature : ferment_interfaces :: FFIConversion :: ffi_to (obj . all_commitment_aggregated_signature) , llmq_type : ferment_interfaces :: FFIConversion :: ffi_to (obj . llmq_type) , signers : ferment_interfaces :: FFIConversion :: ffi_to (obj . signers) , valid_members : ferment_interfaces :: FFIConversion :: ffi_to (obj . valid_members) , entry_hash : ferment_interfaces :: FFIConversion :: ffi_to (obj . entry_hash) , verified : obj . verified , saved : obj . saved , commitment_hash : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . commitment_hash) }) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_models_llmq_entry_LLMQEntry) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dash_spv_masternode_processor_models_llmq_entry_LLMQEntry { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . version) ; ; ferment_interfaces :: unbox_any (ffi_ref . llmq_hash) ; ; ; ferment_interfaces :: unbox_any (ffi_ref . public_key) ; ; ferment_interfaces :: unbox_any (ffi_ref . threshold_signature) ; ; ferment_interfaces :: unbox_any (ffi_ref . verification_vector_hash) ; ; ferment_interfaces :: unbox_any (ffi_ref . all_commitment_aggregated_signature) ; ; ferment_interfaces :: unbox_any (ffi_ref . llmq_type) ; ; ferment_interfaces :: unbox_any (ffi_ref . signers) ; ; ferment_interfaces :: unbox_any (ffi_ref . valid_members) ; ; ferment_interfaces :: unbox_any (ffi_ref . entry_hash) ; ; ; ; if (! (ffi_ref . commitment_hash) . is_null ()) { ferment_interfaces :: unbox_any (ffi_ref . commitment_hash) ; } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_ctor < > (version : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: llmq_version :: dash_spv_masternode_processor_common_llmq_version_LLMQVersion , llmq_hash : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , index : * mut u16 , public_key : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt384 , threshold_signature : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt768 , verification_vector_hash : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , all_commitment_aggregated_signature : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt768 , llmq_type : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_LLMQType , signers : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: bitset :: dash_spv_masternode_processor_common_bitset_Bitset , valid_members : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: bitset :: dash_spv_masternode_processor_common_bitset_Bitset , entry_hash : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , verified : bool , saved : bool , commitment_hash : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256) -> * mut dash_spv_masternode_processor_models_llmq_entry_LLMQEntry { ferment_interfaces :: boxed (dash_spv_masternode_processor_models_llmq_entry_LLMQEntry { version , llmq_hash , index , public_key , threshold_signature , verification_vector_hash , all_commitment_aggregated_signature , llmq_type , signers , valid_members , entry_hash , verified , saved , commitment_hash }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_destroy < > (ffi : * mut dash_spv_masternode_processor_models_llmq_entry_LLMQEntry) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_get_version < > (obj : * const dash_spv_masternode_processor_models_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: llmq_version :: dash_spv_masternode_processor_common_llmq_version_LLMQVersion { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_get_llmq_hash < > (obj : * const dash_spv_masternode_processor_models_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 { (* obj) . llmq_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_get_index < > (obj : * const dash_spv_masternode_processor_models_llmq_entry_LLMQEntry) -> * mut u16 { (* obj) . index } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_get_public_key < > (obj : * const dash_spv_masternode_processor_models_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt384 { (* obj) . public_key } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_get_threshold_signature < > (obj : * const dash_spv_masternode_processor_models_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt768 { (* obj) . threshold_signature } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_get_verification_vector_hash < > (obj : * const dash_spv_masternode_processor_models_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 { (* obj) . verification_vector_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_get_all_commitment_aggregated_signature < > (obj : * const dash_spv_masternode_processor_models_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt768 { (* obj) . all_commitment_aggregated_signature } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_get_llmq_type < > (obj : * const dash_spv_masternode_processor_models_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_LLMQType { (* obj) . llmq_type } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_get_signers < > (obj : * const dash_spv_masternode_processor_models_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: bitset :: dash_spv_masternode_processor_common_bitset_Bitset { (* obj) . signers } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_get_valid_members < > (obj : * const dash_spv_masternode_processor_models_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: bitset :: dash_spv_masternode_processor_common_bitset_Bitset { (* obj) . valid_members } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_get_entry_hash < > (obj : * const dash_spv_masternode_processor_models_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 { (* obj) . entry_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_get_verified < > (obj : * const dash_spv_masternode_processor_models_llmq_entry_LLMQEntry) -> bool { (* obj) . verified } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_get_saved < > (obj : * const dash_spv_masternode_processor_models_llmq_entry_LLMQEntry) -> bool { (* obj) . saved } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_get_commitment_hash < > (obj : * const dash_spv_masternode_processor_models_llmq_entry_LLMQEntry) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 { (* obj) . commitment_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_set_version < > (obj : * mut dash_spv_masternode_processor_models_llmq_entry_LLMQEntry , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: llmq_version :: dash_spv_masternode_processor_common_llmq_version_LLMQVersion) { (* obj) . version = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_set_llmq_hash < > (obj : * mut dash_spv_masternode_processor_models_llmq_entry_LLMQEntry , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256) { (* obj) . llmq_hash = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_set_index < > (obj : * mut dash_spv_masternode_processor_models_llmq_entry_LLMQEntry , value : * mut u16) { (* obj) . index = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_set_public_key < > (obj : * mut dash_spv_masternode_processor_models_llmq_entry_LLMQEntry , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt384) { (* obj) . public_key = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_set_threshold_signature < > (obj : * mut dash_spv_masternode_processor_models_llmq_entry_LLMQEntry , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt768) { (* obj) . threshold_signature = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_set_verification_vector_hash < > (obj : * mut dash_spv_masternode_processor_models_llmq_entry_LLMQEntry , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256) { (* obj) . verification_vector_hash = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_set_all_commitment_aggregated_signature < > (obj : * mut dash_spv_masternode_processor_models_llmq_entry_LLMQEntry , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt768) { (* obj) . all_commitment_aggregated_signature = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_set_llmq_type < > (obj : * mut dash_spv_masternode_processor_models_llmq_entry_LLMQEntry , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_LLMQType) { (* obj) . llmq_type = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_set_signers < > (obj : * mut dash_spv_masternode_processor_models_llmq_entry_LLMQEntry , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: bitset :: dash_spv_masternode_processor_common_bitset_Bitset) { (* obj) . signers = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_set_valid_members < > (obj : * mut dash_spv_masternode_processor_models_llmq_entry_LLMQEntry , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: bitset :: dash_spv_masternode_processor_common_bitset_Bitset) { (* obj) . valid_members = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_set_entry_hash < > (obj : * mut dash_spv_masternode_processor_models_llmq_entry_LLMQEntry , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256) { (* obj) . entry_hash = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_set_verified < > (obj : * mut dash_spv_masternode_processor_models_llmq_entry_LLMQEntry , value : bool) { (* obj) . verified = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_set_saved < > (obj : * mut dash_spv_masternode_processor_models_llmq_entry_LLMQEntry , value : bool) { (* obj) . saved = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_set_commitment_hash < > (obj : * mut dash_spv_masternode_processor_models_llmq_entry_LLMQEntry , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256) { (* obj) . commitment_hash = value ; } } pub mod masternode_entry { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { pub provider_registration_transaction_hash : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , pub confirmed_hash : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , pub confirmed_hash_hashed_with_provider_registration_transaction_hash : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , pub socket_address : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: socket_address :: dash_spv_masternode_processor_common_socket_address_SocketAddress , pub operator_public_key : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: operator_public_key :: dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey , pub previous_operator_public_keys : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey , pub previous_entry_hashes : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_masternode_processor_crypto_byte_util_UInt256 , pub previous_validity : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_bool , pub known_confirmed_at_height : * mut u32 , pub update_height : u32 , pub key_id_voting : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt160 , pub is_valid : bool , pub mn_type : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: masternode_type :: dash_spv_masternode_processor_common_masternode_type_MasternodeType , pub platform_http_port : u16 , pub platform_node_id : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt160 , pub entry_hash : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 } impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > for dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry { provider_registration_transaction_hash : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . provider_registration_transaction_hash) , confirmed_hash : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . confirmed_hash) , confirmed_hash_hashed_with_provider_registration_transaction_hash : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . confirmed_hash_hashed_with_provider_registration_transaction_hash) , socket_address : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . socket_address) , operator_public_key : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . operator_public_key) , previous_operator_public_keys : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . previous_operator_public_keys) , previous_entry_hashes : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . previous_entry_hashes) , previous_validity : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . previous_validity) , known_confirmed_at_height : ferment_interfaces :: from_opt_primitive (ffi_ref . known_confirmed_at_height) , update_height : ffi_ref . update_height , key_id_voting : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . key_id_voting) , is_valid : ffi_ref . is_valid , mn_type : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . mn_type) , platform_http_port : ffi_ref . platform_http_port , platform_node_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . platform_node_id) , entry_hash : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . entry_hash) } } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry) -> * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment_interfaces :: boxed (dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { provider_registration_transaction_hash : ferment_interfaces :: FFIConversion :: ffi_to (obj . provider_registration_transaction_hash) , confirmed_hash : ferment_interfaces :: FFIConversion :: ffi_to (obj . confirmed_hash) , confirmed_hash_hashed_with_provider_registration_transaction_hash : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . confirmed_hash_hashed_with_provider_registration_transaction_hash) , socket_address : ferment_interfaces :: FFIConversion :: ffi_to (obj . socket_address) , operator_public_key : ferment_interfaces :: FFIConversion :: ffi_to (obj . operator_public_key) , previous_operator_public_keys : ferment_interfaces :: FFIConversion :: ffi_to (obj . previous_operator_public_keys) , previous_entry_hashes : ferment_interfaces :: FFIConversion :: ffi_to (obj . previous_entry_hashes) , previous_validity : ferment_interfaces :: FFIConversion :: ffi_to (obj . previous_validity) , known_confirmed_at_height : ferment_interfaces :: to_opt_primitive (obj . known_confirmed_at_height) , update_height : obj . update_height , key_id_voting : ferment_interfaces :: FFIConversion :: ffi_to (obj . key_id_voting) , is_valid : obj . is_valid , mn_type : ferment_interfaces :: FFIConversion :: ffi_to (obj . mn_type) , platform_http_port : obj . platform_http_port , platform_node_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . platform_node_id) , entry_hash : ferment_interfaces :: FFIConversion :: ffi_to (obj . entry_hash) }) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . provider_registration_transaction_hash) ; ; ferment_interfaces :: unbox_any (ffi_ref . confirmed_hash) ; ; if (! (ffi_ref . confirmed_hash_hashed_with_provider_registration_transaction_hash) . is_null ()) { ferment_interfaces :: unbox_any (ffi_ref . confirmed_hash_hashed_with_provider_registration_transaction_hash) ; } ; ferment_interfaces :: unbox_any (ffi_ref . socket_address) ; ; ferment_interfaces :: unbox_any (ffi_ref . operator_public_key) ; ; ferment_interfaces :: unbox_any (ffi_ref . previous_operator_public_keys) ; ; ferment_interfaces :: unbox_any (ffi_ref . previous_entry_hashes) ; ; ferment_interfaces :: unbox_any (ffi_ref . previous_validity) ; ; ; ; ferment_interfaces :: unbox_any (ffi_ref . key_id_voting) ; ; ; ferment_interfaces :: unbox_any (ffi_ref . mn_type) ; ; ; ferment_interfaces :: unbox_any (ffi_ref . platform_node_id) ; ; ferment_interfaces :: unbox_any (ffi_ref . entry_hash) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_ctor < > (provider_registration_transaction_hash : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , confirmed_hash : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , confirmed_hash_hashed_with_provider_registration_transaction_hash : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , socket_address : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: socket_address :: dash_spv_masternode_processor_common_socket_address_SocketAddress , operator_public_key : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: operator_public_key :: dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey , previous_operator_public_keys : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey , previous_entry_hashes : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_masternode_processor_crypto_byte_util_UInt256 , previous_validity : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_bool , known_confirmed_at_height : * mut u32 , update_height : u32 , key_id_voting : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt160 , is_valid : bool , mn_type : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: masternode_type :: dash_spv_masternode_processor_common_masternode_type_MasternodeType , platform_http_port : u16 , platform_node_id : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt160 , entry_hash : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256) -> * mut dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment_interfaces :: boxed (dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { provider_registration_transaction_hash , confirmed_hash , confirmed_hash_hashed_with_provider_registration_transaction_hash , socket_address , operator_public_key , previous_operator_public_keys , previous_entry_hashes , previous_validity , known_confirmed_at_height , update_height , key_id_voting , is_valid , mn_type , platform_http_port , platform_node_id , entry_hash }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_destroy < > (ffi : * mut dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_get_provider_registration_transaction_hash < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 { (* obj) . provider_registration_transaction_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_get_confirmed_hash < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 { (* obj) . confirmed_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_get_confirmed_hash_hashed_with_provider_registration_transaction_hash < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 { (* obj) . confirmed_hash_hashed_with_provider_registration_transaction_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_get_socket_address < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: socket_address :: dash_spv_masternode_processor_common_socket_address_SocketAddress { (* obj) . socket_address } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_get_operator_public_key < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: operator_public_key :: dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey { (* obj) . operator_public_key } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_get_previous_operator_public_keys < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey { (* obj) . previous_operator_public_keys } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_get_previous_entry_hashes < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_masternode_processor_crypto_byte_util_UInt256 { (* obj) . previous_entry_hashes } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_get_previous_validity < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_bool { (* obj) . previous_validity } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_get_known_confirmed_at_height < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut u32 { (* obj) . known_confirmed_at_height } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_get_update_height < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> u32 { (* obj) . update_height } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_get_key_id_voting < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt160 { (* obj) . key_id_voting } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_get_is_valid < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> bool { (* obj) . is_valid } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_get_mn_type < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: masternode_type :: dash_spv_masternode_processor_common_masternode_type_MasternodeType { (* obj) . mn_type } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_get_platform_http_port < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> u16 { (* obj) . platform_http_port } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_get_platform_node_id < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt160 { (* obj) . platform_node_id } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_get_entry_hash < > (obj : * const dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 { (* obj) . entry_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_set_provider_registration_transaction_hash < > (obj : * mut dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256) { (* obj) . provider_registration_transaction_hash = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_set_confirmed_hash < > (obj : * mut dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256) { (* obj) . confirmed_hash = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_set_confirmed_hash_hashed_with_provider_registration_transaction_hash < > (obj : * mut dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256) { (* obj) . confirmed_hash_hashed_with_provider_registration_transaction_hash = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_set_socket_address < > (obj : * mut dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: socket_address :: dash_spv_masternode_processor_common_socket_address_SocketAddress) { (* obj) . socket_address = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_set_operator_public_key < > (obj : * mut dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: operator_public_key :: dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey) { (* obj) . operator_public_key = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_set_previous_operator_public_keys < > (obj : * mut dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , value : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey) { (* obj) . previous_operator_public_keys = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_set_previous_entry_hashes < > (obj : * mut dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , value : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_masternode_processor_crypto_byte_util_UInt256) { (* obj) . previous_entry_hashes = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_set_previous_validity < > (obj : * mut dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , value : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_bool) { (* obj) . previous_validity = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_set_known_confirmed_at_height < > (obj : * mut dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , value : * mut u32) { (* obj) . known_confirmed_at_height = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_set_update_height < > (obj : * mut dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , value : u32) { (* obj) . update_height = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_set_key_id_voting < > (obj : * mut dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt160) { (* obj) . key_id_voting = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_set_is_valid < > (obj : * mut dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , value : bool) { (* obj) . is_valid = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_set_mn_type < > (obj : * mut dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: masternode_type :: dash_spv_masternode_processor_common_masternode_type_MasternodeType) { (* obj) . mn_type = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_set_platform_http_port < > (obj : * mut dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , value : u16) { (* obj) . platform_http_port = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_set_platform_node_id < > (obj : * mut dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt160) { (* obj) . platform_node_id = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_set_entry_hash < > (obj : * mut dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256) { (* obj) . entry_hash = value ; } } pub mod snapshot { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { pub member_list : * mut crate :: fermented :: generics :: Vec_u8 , pub skip_list : * mut crate :: fermented :: generics :: Vec_i32 , pub skip_list_mode : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode } impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot > for dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) -> dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot { member_list : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . member_list) , skip_list : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . skip_list) , skip_list_mode : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . skip_list_mode) } } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot) -> * const dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { ferment_interfaces :: boxed (dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { member_list : ferment_interfaces :: FFIConversion :: ffi_to (obj . member_list) , skip_list : ferment_interfaces :: FFIConversion :: ffi_to (obj . skip_list) , skip_list_mode : ferment_interfaces :: FFIConversion :: ffi_to (obj . skip_list_mode) }) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . member_list) ; ; ferment_interfaces :: unbox_any (ffi_ref . skip_list) ; ; ferment_interfaces :: unbox_any (ffi_ref . skip_list_mode) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_ctor < > (member_list : * mut crate :: fermented :: generics :: Vec_u8 , skip_list : * mut crate :: fermented :: generics :: Vec_i32 , skip_list_mode : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode) -> * mut dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { ferment_interfaces :: boxed (dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { member_list , skip_list , skip_list_mode }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_destroy < > (ffi : * mut dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_get_member_list < > (obj : * const dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . member_list } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_get_skip_list < > (obj : * const dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) -> * mut crate :: fermented :: generics :: Vec_i32 { (* obj) . skip_list } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_get_skip_list_mode < > (obj : * const dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode { (* obj) . skip_list_mode } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_set_member_list < > (obj : * mut dash_spv_masternode_processor_models_snapshot_LLMQSnapshot , value : * mut crate :: fermented :: generics :: Vec_u8) { (* obj) . member_list = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_set_skip_list < > (obj : * mut dash_spv_masternode_processor_models_snapshot_LLMQSnapshot , value : * mut crate :: fermented :: generics :: Vec_i32) { (* obj) . skip_list = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_set_skip_list_mode < > (obj : * mut dash_spv_masternode_processor_models_snapshot_LLMQSnapshot , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode) { (* obj) . skip_list_mode = value ; } } } pub mod blockdata { use crate as dash_spv_apple_bindings ; pub mod opcodes { use crate as dash_spv_apple_bindings ; pub mod all { use crate as dash_spv_apple_bindings ; } # [cfg (test)] pub mod tests { use crate as dash_spv_apple_bindings ; } } } pub mod chain { use crate as dash_spv_apple_bindings ; pub mod tx { use crate as dash_spv_apple_bindings ; } pub mod derivation { use crate as dash_spv_apple_bindings ; } pub mod params { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: params :: DIP14ScriptMap`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_chain_params_DIP14ScriptMap { pub dps : * mut crate :: fermented :: generics :: Arr_u8_4 , pub dpp : * mut crate :: fermented :: generics :: Arr_u8_4 } impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: chain :: params :: DIP14ScriptMap > for dash_spv_masternode_processor_chain_params_DIP14ScriptMap { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_chain_params_DIP14ScriptMap) -> dash_spv_masternode_processor :: chain :: params :: DIP14ScriptMap { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: chain :: params :: DIP14ScriptMap { dps : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . dps) , dpp : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . dpp) } } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: chain :: params :: DIP14ScriptMap) -> * const dash_spv_masternode_processor_chain_params_DIP14ScriptMap { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_params_DIP14ScriptMap { dps : ferment_interfaces :: FFIConversion :: ffi_to (obj . dps) , dpp : ferment_interfaces :: FFIConversion :: ffi_to (obj . dpp) }) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_chain_params_DIP14ScriptMap) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dash_spv_masternode_processor_chain_params_DIP14ScriptMap { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . dps) ; ferment_interfaces :: unbox_any (ffi_ref . dpp) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_DIP14ScriptMap_ctor < > (dps : * mut crate :: fermented :: generics :: Arr_u8_4 , dpp : * mut crate :: fermented :: generics :: Arr_u8_4) -> * mut dash_spv_masternode_processor_chain_params_DIP14ScriptMap { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_params_DIP14ScriptMap { dps , dpp }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_DIP14ScriptMap_destroy < > (ffi : * mut dash_spv_masternode_processor_chain_params_DIP14ScriptMap) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_DIP14ScriptMap_get_dps < > (obj : * const dash_spv_masternode_processor_chain_params_DIP14ScriptMap) -> * mut crate :: fermented :: generics :: Arr_u8_4 { (* obj) . dps } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_DIP14ScriptMap_get_dpp < > (obj : * const dash_spv_masternode_processor_chain_params_DIP14ScriptMap) -> * mut crate :: fermented :: generics :: Arr_u8_4 { (* obj) . dpp } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_DIP14ScriptMap_set_dps < > (obj : * mut dash_spv_masternode_processor_chain_params_DIP14ScriptMap , value : * mut crate :: fermented :: generics :: Arr_u8_4) { (* obj) . dps = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_DIP14ScriptMap_set_dpp < > (obj : * mut dash_spv_masternode_processor_chain_params_DIP14ScriptMap , value : * mut crate :: fermented :: generics :: Arr_u8_4) { (* obj) . dpp = value ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: params :: Params`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_chain_params_Params { pub chain_type : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: chain_type :: dash_spv_masternode_processor_chain_common_chain_type_ChainType , pub max_proof_of_work : * mut std :: os :: raw :: c_char , pub max_proof_of_work_target : u32 , pub allow_min_difficulty_blocks : bool , pub base_reward : u64 , pub min_protocol_version : u32 , pub protocol_version : u32 , pub standard_port : u16 , pub standard_dapi_grpc_port : u32 , pub magic_number : u32 , pub headers_max_amount : u32 , pub peer_misbehaving_threshold : u32 , pub transaction_version : u16 , pub is_evolution_enabled : bool , pub fee_per_byte : u64 , pub platform_protocol_version : u32 , pub dpns_contract_id : * mut std :: os :: raw :: c_char , pub dashpay_contract_id : * mut std :: os :: raw :: c_char , pub minimum_difficulty_blocks : u32 , pub standard_dapi_jrpc_port : u32 } impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: chain :: params :: Params > for dash_spv_masternode_processor_chain_params_Params { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_chain_params_Params) -> dash_spv_masternode_processor :: chain :: params :: Params { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: chain :: params :: Params { chain_type : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . chain_type) , max_proof_of_work : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . max_proof_of_work) , max_proof_of_work_target : ffi_ref . max_proof_of_work_target , allow_min_difficulty_blocks : ffi_ref . allow_min_difficulty_blocks , base_reward : ffi_ref . base_reward , min_protocol_version : ffi_ref . min_protocol_version , protocol_version : ffi_ref . protocol_version , standard_port : ffi_ref . standard_port , standard_dapi_grpc_port : ffi_ref . standard_dapi_grpc_port , magic_number : ffi_ref . magic_number , headers_max_amount : ffi_ref . headers_max_amount , peer_misbehaving_threshold : ffi_ref . peer_misbehaving_threshold , transaction_version : ffi_ref . transaction_version , is_evolution_enabled : ffi_ref . is_evolution_enabled , fee_per_byte : ffi_ref . fee_per_byte , platform_protocol_version : ffi_ref . platform_protocol_version , dpns_contract_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . dpns_contract_id) , dashpay_contract_id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . dashpay_contract_id) , minimum_difficulty_blocks : ffi_ref . minimum_difficulty_blocks , standard_dapi_jrpc_port : ffi_ref . standard_dapi_jrpc_port } } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: chain :: params :: Params) -> * const dash_spv_masternode_processor_chain_params_Params { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_params_Params { chain_type : ferment_interfaces :: FFIConversion :: ffi_to (obj . chain_type) , max_proof_of_work : ferment_interfaces :: FFIConversion :: ffi_to (obj . max_proof_of_work) , max_proof_of_work_target : obj . max_proof_of_work_target , allow_min_difficulty_blocks : obj . allow_min_difficulty_blocks , base_reward : obj . base_reward , min_protocol_version : obj . min_protocol_version , protocol_version : obj . protocol_version , standard_port : obj . standard_port , standard_dapi_grpc_port : obj . standard_dapi_grpc_port , magic_number : obj . magic_number , headers_max_amount : obj . headers_max_amount , peer_misbehaving_threshold : obj . peer_misbehaving_threshold , transaction_version : obj . transaction_version , is_evolution_enabled : obj . is_evolution_enabled , fee_per_byte : obj . fee_per_byte , platform_protocol_version : obj . platform_protocol_version , dpns_contract_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . dpns_contract_id) , dashpay_contract_id : ferment_interfaces :: FFIConversion :: ffi_to (obj . dashpay_contract_id) , minimum_difficulty_blocks : obj . minimum_difficulty_blocks , standard_dapi_jrpc_port : obj . standard_dapi_jrpc_port }) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_chain_params_Params) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dash_spv_masternode_processor_chain_params_Params { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . chain_type) ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < & str >> :: destroy (ffi_ref . max_proof_of_work) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < & str >> :: destroy (ffi_ref . dpns_contract_id) ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < & str >> :: destroy (ffi_ref . dashpay_contract_id) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_ctor < > (chain_type : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: chain_type :: dash_spv_masternode_processor_chain_common_chain_type_ChainType , max_proof_of_work : * mut std :: os :: raw :: c_char , max_proof_of_work_target : u32 , allow_min_difficulty_blocks : bool , base_reward : u64 , min_protocol_version : u32 , protocol_version : u32 , standard_port : u16 , standard_dapi_grpc_port : u32 , magic_number : u32 , headers_max_amount : u32 , peer_misbehaving_threshold : u32 , transaction_version : u16 , is_evolution_enabled : bool , fee_per_byte : u64 , platform_protocol_version : u32 , dpns_contract_id : * mut std :: os :: raw :: c_char , dashpay_contract_id : * mut std :: os :: raw :: c_char , minimum_difficulty_blocks : u32 , standard_dapi_jrpc_port : u32) -> * mut dash_spv_masternode_processor_chain_params_Params { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_params_Params { chain_type , max_proof_of_work , max_proof_of_work_target , allow_min_difficulty_blocks , base_reward , min_protocol_version , protocol_version , standard_port , standard_dapi_grpc_port , magic_number , headers_max_amount , peer_misbehaving_threshold , transaction_version , is_evolution_enabled , fee_per_byte , platform_protocol_version , dpns_contract_id , dashpay_contract_id , minimum_difficulty_blocks , standard_dapi_jrpc_port }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_destroy < > (ffi : * mut dash_spv_masternode_processor_chain_params_Params) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_get_chain_type < > (obj : * const dash_spv_masternode_processor_chain_params_Params) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: chain_type :: dash_spv_masternode_processor_chain_common_chain_type_ChainType { (* obj) . chain_type } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_get_max_proof_of_work < > (obj : * const dash_spv_masternode_processor_chain_params_Params) -> * mut std :: os :: raw :: c_char { (* obj) . max_proof_of_work } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_get_max_proof_of_work_target < > (obj : * const dash_spv_masternode_processor_chain_params_Params) -> u32 { (* obj) . max_proof_of_work_target } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_get_allow_min_difficulty_blocks < > (obj : * const dash_spv_masternode_processor_chain_params_Params) -> bool { (* obj) . allow_min_difficulty_blocks } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_get_base_reward < > (obj : * const dash_spv_masternode_processor_chain_params_Params) -> u64 { (* obj) . base_reward } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_get_min_protocol_version < > (obj : * const dash_spv_masternode_processor_chain_params_Params) -> u32 { (* obj) . min_protocol_version } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_get_protocol_version < > (obj : * const dash_spv_masternode_processor_chain_params_Params) -> u32 { (* obj) . protocol_version } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_get_standard_port < > (obj : * const dash_spv_masternode_processor_chain_params_Params) -> u16 { (* obj) . standard_port } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_get_standard_dapi_grpc_port < > (obj : * const dash_spv_masternode_processor_chain_params_Params) -> u32 { (* obj) . standard_dapi_grpc_port } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_get_magic_number < > (obj : * const dash_spv_masternode_processor_chain_params_Params) -> u32 { (* obj) . magic_number } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_get_headers_max_amount < > (obj : * const dash_spv_masternode_processor_chain_params_Params) -> u32 { (* obj) . headers_max_amount } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_get_peer_misbehaving_threshold < > (obj : * const dash_spv_masternode_processor_chain_params_Params) -> u32 { (* obj) . peer_misbehaving_threshold } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_get_transaction_version < > (obj : * const dash_spv_masternode_processor_chain_params_Params) -> u16 { (* obj) . transaction_version } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_get_is_evolution_enabled < > (obj : * const dash_spv_masternode_processor_chain_params_Params) -> bool { (* obj) . is_evolution_enabled } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_get_fee_per_byte < > (obj : * const dash_spv_masternode_processor_chain_params_Params) -> u64 { (* obj) . fee_per_byte } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_get_platform_protocol_version < > (obj : * const dash_spv_masternode_processor_chain_params_Params) -> u32 { (* obj) . platform_protocol_version } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_get_dpns_contract_id < > (obj : * const dash_spv_masternode_processor_chain_params_Params) -> * mut std :: os :: raw :: c_char { (* obj) . dpns_contract_id } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_get_dashpay_contract_id < > (obj : * const dash_spv_masternode_processor_chain_params_Params) -> * mut std :: os :: raw :: c_char { (* obj) . dashpay_contract_id } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_get_minimum_difficulty_blocks < > (obj : * const dash_spv_masternode_processor_chain_params_Params) -> u32 { (* obj) . minimum_difficulty_blocks } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_get_standard_dapi_jrpc_port < > (obj : * const dash_spv_masternode_processor_chain_params_Params) -> u32 { (* obj) . standard_dapi_jrpc_port } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_set_chain_type < > (obj : * mut dash_spv_masternode_processor_chain_params_Params , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: chain_type :: dash_spv_masternode_processor_chain_common_chain_type_ChainType) { (* obj) . chain_type = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_set_max_proof_of_work < > (obj : * mut dash_spv_masternode_processor_chain_params_Params , value : * mut std :: os :: raw :: c_char) { (* obj) . max_proof_of_work = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_set_max_proof_of_work_target < > (obj : * mut dash_spv_masternode_processor_chain_params_Params , value : u32) { (* obj) . max_proof_of_work_target = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_set_allow_min_difficulty_blocks < > (obj : * mut dash_spv_masternode_processor_chain_params_Params , value : bool) { (* obj) . allow_min_difficulty_blocks = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_set_base_reward < > (obj : * mut dash_spv_masternode_processor_chain_params_Params , value : u64) { (* obj) . base_reward = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_set_min_protocol_version < > (obj : * mut dash_spv_masternode_processor_chain_params_Params , value : u32) { (* obj) . min_protocol_version = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_set_protocol_version < > (obj : * mut dash_spv_masternode_processor_chain_params_Params , value : u32) { (* obj) . protocol_version = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_set_standard_port < > (obj : * mut dash_spv_masternode_processor_chain_params_Params , value : u16) { (* obj) . standard_port = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_set_standard_dapi_grpc_port < > (obj : * mut dash_spv_masternode_processor_chain_params_Params , value : u32) { (* obj) . standard_dapi_grpc_port = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_set_magic_number < > (obj : * mut dash_spv_masternode_processor_chain_params_Params , value : u32) { (* obj) . magic_number = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_set_headers_max_amount < > (obj : * mut dash_spv_masternode_processor_chain_params_Params , value : u32) { (* obj) . headers_max_amount = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_set_peer_misbehaving_threshold < > (obj : * mut dash_spv_masternode_processor_chain_params_Params , value : u32) { (* obj) . peer_misbehaving_threshold = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_set_transaction_version < > (obj : * mut dash_spv_masternode_processor_chain_params_Params , value : u16) { (* obj) . transaction_version = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_set_is_evolution_enabled < > (obj : * mut dash_spv_masternode_processor_chain_params_Params , value : bool) { (* obj) . is_evolution_enabled = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_set_fee_per_byte < > (obj : * mut dash_spv_masternode_processor_chain_params_Params , value : u64) { (* obj) . fee_per_byte = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_set_platform_protocol_version < > (obj : * mut dash_spv_masternode_processor_chain_params_Params , value : u32) { (* obj) . platform_protocol_version = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_set_dpns_contract_id < > (obj : * mut dash_spv_masternode_processor_chain_params_Params , value : * mut std :: os :: raw :: c_char) { (* obj) . dpns_contract_id = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_set_dashpay_contract_id < > (obj : * mut dash_spv_masternode_processor_chain_params_Params , value : * mut std :: os :: raw :: c_char) { (* obj) . dashpay_contract_id = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_set_minimum_difficulty_blocks < > (obj : * mut dash_spv_masternode_processor_chain_params_Params , value : u32) { (* obj) . minimum_difficulty_blocks = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_Params_set_standard_dapi_jrpc_port < > (obj : * mut dash_spv_masternode_processor_chain_params_Params , value : u32) { (* obj) . standard_dapi_jrpc_port = value ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: params :: BIP32ScriptMap`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_chain_params_BIP32ScriptMap { pub xprv : * mut crate :: fermented :: generics :: Arr_u8_4 , pub xpub : * mut crate :: fermented :: generics :: Arr_u8_4 } impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: chain :: params :: BIP32ScriptMap > for dash_spv_masternode_processor_chain_params_BIP32ScriptMap { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_chain_params_BIP32ScriptMap) -> dash_spv_masternode_processor :: chain :: params :: BIP32ScriptMap { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: chain :: params :: BIP32ScriptMap { xprv : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . xprv) , xpub : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . xpub) } } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: chain :: params :: BIP32ScriptMap) -> * const dash_spv_masternode_processor_chain_params_BIP32ScriptMap { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_params_BIP32ScriptMap { xprv : ferment_interfaces :: FFIConversion :: ffi_to (obj . xprv) , xpub : ferment_interfaces :: FFIConversion :: ffi_to (obj . xpub) }) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_chain_params_BIP32ScriptMap) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dash_spv_masternode_processor_chain_params_BIP32ScriptMap { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . xprv) ; ferment_interfaces :: unbox_any (ffi_ref . xpub) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_BIP32ScriptMap_ctor < > (xprv : * mut crate :: fermented :: generics :: Arr_u8_4 , xpub : * mut crate :: fermented :: generics :: Arr_u8_4) -> * mut dash_spv_masternode_processor_chain_params_BIP32ScriptMap { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_params_BIP32ScriptMap { xprv , xpub }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_BIP32ScriptMap_destroy < > (ffi : * mut dash_spv_masternode_processor_chain_params_BIP32ScriptMap) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_BIP32ScriptMap_get_xprv < > (obj : * const dash_spv_masternode_processor_chain_params_BIP32ScriptMap) -> * mut crate :: fermented :: generics :: Arr_u8_4 { (* obj) . xprv } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_BIP32ScriptMap_get_xpub < > (obj : * const dash_spv_masternode_processor_chain_params_BIP32ScriptMap) -> * mut crate :: fermented :: generics :: Arr_u8_4 { (* obj) . xpub } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_BIP32ScriptMap_set_xprv < > (obj : * mut dash_spv_masternode_processor_chain_params_BIP32ScriptMap , value : * mut crate :: fermented :: generics :: Arr_u8_4) { (* obj) . xprv = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_BIP32ScriptMap_set_xpub < > (obj : * mut dash_spv_masternode_processor_chain_params_BIP32ScriptMap , value : * mut crate :: fermented :: generics :: Arr_u8_4) { (* obj) . xpub = value ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: params :: SporkParams`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_chain_params_SporkParams { pub public_key_hex_string : * mut std :: os :: raw :: c_char , pub private_key_base58_string : * mut std :: os :: raw :: c_char , pub address : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: chain :: params :: SporkParams > for dash_spv_masternode_processor_chain_params_SporkParams { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_chain_params_SporkParams) -> dash_spv_masternode_processor :: chain :: params :: SporkParams { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: chain :: params :: SporkParams { public_key_hex_string : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . public_key_hex_string) , private_key_base58_string : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . private_key_base58_string) , address : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . address) } } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: chain :: params :: SporkParams) -> * const dash_spv_masternode_processor_chain_params_SporkParams { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_params_SporkParams { public_key_hex_string : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . public_key_hex_string) , private_key_base58_string : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . private_key_base58_string) , address : ferment_interfaces :: FFIConversion :: ffi_to (obj . address) }) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_chain_params_SporkParams) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dash_spv_masternode_processor_chain_params_SporkParams { fn drop (& mut self) { unsafe { let ffi_ref = self ; if (! (ffi_ref . public_key_hex_string) . is_null ()) { ferment_interfaces :: unbox_any (ffi_ref . public_key_hex_string) ; } ; if (! (ffi_ref . private_key_base58_string) . is_null ()) { ferment_interfaces :: unbox_any (ffi_ref . private_key_base58_string) ; } ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . address) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_SporkParams_ctor < > (public_key_hex_string : * mut std :: os :: raw :: c_char , private_key_base58_string : * mut std :: os :: raw :: c_char , address : * mut std :: os :: raw :: c_char) -> * mut dash_spv_masternode_processor_chain_params_SporkParams { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_params_SporkParams { public_key_hex_string , private_key_base58_string , address }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_SporkParams_destroy < > (ffi : * mut dash_spv_masternode_processor_chain_params_SporkParams) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_SporkParams_get_public_key_hex_string < > (obj : * const dash_spv_masternode_processor_chain_params_SporkParams) -> * mut std :: os :: raw :: c_char { (* obj) . public_key_hex_string } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_SporkParams_get_private_key_base58_string < > (obj : * const dash_spv_masternode_processor_chain_params_SporkParams) -> * mut std :: os :: raw :: c_char { (* obj) . private_key_base58_string } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_SporkParams_get_address < > (obj : * const dash_spv_masternode_processor_chain_params_SporkParams) -> * mut std :: os :: raw :: c_char { (* obj) . address } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_SporkParams_set_public_key_hex_string < > (obj : * mut dash_spv_masternode_processor_chain_params_SporkParams , value : * mut std :: os :: raw :: c_char) { (* obj) . public_key_hex_string = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_SporkParams_set_private_key_base58_string < > (obj : * mut dash_spv_masternode_processor_chain_params_SporkParams , value : * mut std :: os :: raw :: c_char) { (* obj) . private_key_base58_string = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_params_SporkParams_set_address < > (obj : * mut dash_spv_masternode_processor_chain_params_SporkParams , value : * mut std :: os :: raw :: c_char) { (* obj) . address = value ; } } pub mod bip { use crate as dash_spv_apple_bindings ; } pub mod common { use crate as dash_spv_apple_bindings ; pub mod llmq_type { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_masternode_processor_chain_common_llmq_type_LLMQType { LlmqtypeUnknown = 0 , Llmqtype50_60 = 1 , Llmqtype400_60 = 2 , Llmqtype400_85 = 3 , Llmqtype100_67 = 4 , Llmqtype60_75 = 5 , Llmqtype25_67 = 6 , LlmqtypeTest = 100 , LlmqtypeDevnet = 101 , LlmqtypeTestV17 = 102 , LlmqtypeTestDIP0024 = 103 , LlmqtypeTestInstantSend = 104 , LlmqtypeDevnetDIP0024 = 105 , LlmqtypeTestnetPlatform = 106 , LlmqtypeDevnetPlatform = 107 } impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType > for dash_spv_masternode_processor_chain_common_llmq_type_LLMQType { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_chain_common_llmq_type_LLMQType) -> dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeUnknown => dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType :: LlmqtypeUnknown , dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: Llmqtype50_60 => dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType :: Llmqtype50_60 , dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: Llmqtype400_60 => dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType :: Llmqtype400_60 , dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: Llmqtype400_85 => dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType :: Llmqtype400_85 , dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: Llmqtype100_67 => dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType :: Llmqtype100_67 , dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: Llmqtype60_75 => dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType :: Llmqtype60_75 , dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: Llmqtype25_67 => dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType :: Llmqtype25_67 , dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeTest => dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType :: LlmqtypeTest , dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeDevnet => dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType :: LlmqtypeDevnet , dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeTestV17 => dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType :: LlmqtypeTestV17 , dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeTestDIP0024 => dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType :: LlmqtypeTestDIP0024 , dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeTestInstantSend => dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType :: LlmqtypeTestInstantSend , dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeDevnetDIP0024 => dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType :: LlmqtypeDevnetDIP0024 , dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeTestnetPlatform => dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType :: LlmqtypeTestnetPlatform , dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeDevnetPlatform => dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType :: LlmqtypeDevnetPlatform } } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType) -> * const dash_spv_masternode_processor_chain_common_llmq_type_LLMQType { ferment_interfaces :: boxed (match obj { dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType :: LlmqtypeUnknown => dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeUnknown , dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType :: Llmqtype50_60 => dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: Llmqtype50_60 , dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType :: Llmqtype400_60 => dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: Llmqtype400_60 , dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType :: Llmqtype400_85 => dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: Llmqtype400_85 , dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType :: Llmqtype100_67 => dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: Llmqtype100_67 , dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType :: Llmqtype60_75 => dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: Llmqtype60_75 , dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType :: Llmqtype25_67 => dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: Llmqtype25_67 , dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType :: LlmqtypeTest => dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeTest , dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType :: LlmqtypeDevnet => dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeDevnet , dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType :: LlmqtypeTestV17 => dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeTestV17 , dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType :: LlmqtypeTestDIP0024 => dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeTestDIP0024 , dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType :: LlmqtypeTestInstantSend => dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeTestInstantSend , dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType :: LlmqtypeDevnetDIP0024 => dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeDevnetDIP0024 , dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType :: LlmqtypeTestnetPlatform => dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeTestnetPlatform , dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType :: LlmqtypeDevnetPlatform => dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeDevnetPlatform , _ => unreachable ! ("Enum Variant unreachable") }) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_chain_common_llmq_type_LLMQType) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dash_spv_masternode_processor_chain_common_llmq_type_LLMQType { fn drop (& mut self) { unsafe { match self { dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeUnknown => { } , dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: Llmqtype50_60 => { } , dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: Llmqtype400_60 => { } , dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: Llmqtype400_85 => { } , dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: Llmqtype100_67 => { } , dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: Llmqtype60_75 => { } , dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: Llmqtype25_67 => { } , dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeTest => { } , dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeDevnet => { } , dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeTestV17 => { } , dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeTestDIP0024 => { } , dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeTestInstantSend => { } , dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeDevnetDIP0024 => { } , dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeTestnetPlatform => { } , dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeDevnetPlatform => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_LlmqtypeUnknown_ctor () -> * mut dash_spv_masternode_processor_chain_common_llmq_type_LLMQType { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeUnknown { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_Llmqtype50_60_ctor () -> * mut dash_spv_masternode_processor_chain_common_llmq_type_LLMQType { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: Llmqtype50_60 { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_Llmqtype400_60_ctor () -> * mut dash_spv_masternode_processor_chain_common_llmq_type_LLMQType { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: Llmqtype400_60 { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_Llmqtype400_85_ctor () -> * mut dash_spv_masternode_processor_chain_common_llmq_type_LLMQType { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: Llmqtype400_85 { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_Llmqtype100_67_ctor () -> * mut dash_spv_masternode_processor_chain_common_llmq_type_LLMQType { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: Llmqtype100_67 { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_Llmqtype60_75_ctor () -> * mut dash_spv_masternode_processor_chain_common_llmq_type_LLMQType { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: Llmqtype60_75 { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_Llmqtype25_67_ctor () -> * mut dash_spv_masternode_processor_chain_common_llmq_type_LLMQType { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: Llmqtype25_67 { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_LlmqtypeTest_ctor () -> * mut dash_spv_masternode_processor_chain_common_llmq_type_LLMQType { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeTest { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_LlmqtypeDevnet_ctor () -> * mut dash_spv_masternode_processor_chain_common_llmq_type_LLMQType { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeDevnet { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_LlmqtypeTestV17_ctor () -> * mut dash_spv_masternode_processor_chain_common_llmq_type_LLMQType { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeTestV17 { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_LlmqtypeTestDIP0024_ctor () -> * mut dash_spv_masternode_processor_chain_common_llmq_type_LLMQType { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeTestDIP0024 { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_LlmqtypeTestInstantSend_ctor () -> * mut dash_spv_masternode_processor_chain_common_llmq_type_LLMQType { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeTestInstantSend { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_LlmqtypeDevnetDIP0024_ctor () -> * mut dash_spv_masternode_processor_chain_common_llmq_type_LLMQType { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeDevnetDIP0024 { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_LlmqtypeTestnetPlatform_ctor () -> * mut dash_spv_masternode_processor_chain_common_llmq_type_LLMQType { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeTestnetPlatform { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_LlmqtypeDevnetPlatform_ctor () -> * mut dash_spv_masternode_processor_chain_common_llmq_type_LLMQType { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_common_llmq_type_LLMQType :: LlmqtypeDevnetPlatform { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_destroy < > (ffi : * mut dash_spv_masternode_processor_chain_common_llmq_type_LLMQType) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQParams`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams { pub r#type : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_LLMQType , pub name : * mut std :: os :: raw :: c_char , pub size : u32 , pub min_size : u32 , pub threshold : u32 , pub dkg_params : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_DKGParams , pub signing_active_quorum_count : u32 , pub keep_old_connections : u32 , pub recovery_members : u32 } impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQParams > for dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams) -> dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQParams { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQParams { r#type : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . r#type) , name : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . name) , size : ffi_ref . size , min_size : ffi_ref . min_size , threshold : ffi_ref . threshold , dkg_params : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . dkg_params) , signing_active_quorum_count : ffi_ref . signing_active_quorum_count , keep_old_connections : ffi_ref . keep_old_connections , recovery_members : ffi_ref . recovery_members } } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQParams) -> * const dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams { r#type : ferment_interfaces :: FFIConversion :: ffi_to (obj . r#type) , name : ferment_interfaces :: FFIConversion :: ffi_to (obj . name) , size : obj . size , min_size : obj . min_size , threshold : obj . threshold , dkg_params : ferment_interfaces :: FFIConversion :: ffi_to (obj . dkg_params) , signing_active_quorum_count : obj . signing_active_quorum_count , keep_old_connections : obj . keep_old_connections , recovery_members : obj . recovery_members }) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . r#type) ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < & str >> :: destroy (ffi_ref . name) ; ; ; ; ferment_interfaces :: unbox_any (ffi_ref . dkg_params) ; ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams_ctor < > (r#type : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_LLMQType , name : * mut std :: os :: raw :: c_char , size : u32 , min_size : u32 , threshold : u32 , dkg_params : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_DKGParams , signing_active_quorum_count : u32 , keep_old_connections : u32 , recovery_members : u32) -> * mut dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams { r#type , name , size , min_size , threshold , dkg_params , signing_active_quorum_count , keep_old_connections , recovery_members }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams_destroy < > (ffi : * mut dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams_get_type < > (obj : * const dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_LLMQType { (* obj) . r#type } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams_get_name < > (obj : * const dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams) -> * mut std :: os :: raw :: c_char { (* obj) . name } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams_get_size < > (obj : * const dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams) -> u32 { (* obj) . size } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams_get_min_size < > (obj : * const dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams) -> u32 { (* obj) . min_size } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams_get_threshold < > (obj : * const dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams) -> u32 { (* obj) . threshold } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams_get_dkg_params < > (obj : * const dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_DKGParams { (* obj) . dkg_params } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams_get_signing_active_quorum_count < > (obj : * const dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams) -> u32 { (* obj) . signing_active_quorum_count } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams_get_keep_old_connections < > (obj : * const dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams) -> u32 { (* obj) . keep_old_connections } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams_get_recovery_members < > (obj : * const dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams) -> u32 { (* obj) . recovery_members } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams_set_type < > (obj : * mut dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_LLMQType) { (* obj) . r#type = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams_set_name < > (obj : * mut dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams , value : * mut std :: os :: raw :: c_char) { (* obj) . name = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams_set_size < > (obj : * mut dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams , value : u32) { (* obj) . size = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams_set_min_size < > (obj : * mut dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams , value : u32) { (* obj) . min_size = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams_set_threshold < > (obj : * mut dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams , value : u32) { (* obj) . threshold = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams_set_dkg_params < > (obj : * mut dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_DKGParams) { (* obj) . dkg_params = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams_set_signing_active_quorum_count < > (obj : * mut dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams , value : u32) { (* obj) . signing_active_quorum_count = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams_set_keep_old_connections < > (obj : * mut dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams , value : u32) { (* obj) . keep_old_connections = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams_set_recovery_members < > (obj : * mut dash_spv_masternode_processor_chain_common_llmq_type_LLMQParams , value : u32) { (* obj) . recovery_members = value ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: llmq_type :: DKGParams`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_chain_common_llmq_type_DKGParams { pub interval : u32 , pub phase_blocks : u32 , pub mining_window_start : u32 , pub mining_window_end : u32 , pub bad_votes_threshold : u32 } impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: chain :: common :: llmq_type :: DKGParams > for dash_spv_masternode_processor_chain_common_llmq_type_DKGParams { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_chain_common_llmq_type_DKGParams) -> dash_spv_masternode_processor :: chain :: common :: llmq_type :: DKGParams { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: chain :: common :: llmq_type :: DKGParams { interval : ffi_ref . interval , phase_blocks : ffi_ref . phase_blocks , mining_window_start : ffi_ref . mining_window_start , mining_window_end : ffi_ref . mining_window_end , bad_votes_threshold : ffi_ref . bad_votes_threshold } } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: chain :: common :: llmq_type :: DKGParams) -> * const dash_spv_masternode_processor_chain_common_llmq_type_DKGParams { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_common_llmq_type_DKGParams { interval : obj . interval , phase_blocks : obj . phase_blocks , mining_window_start : obj . mining_window_start , mining_window_end : obj . mining_window_end , bad_votes_threshold : obj . bad_votes_threshold }) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_chain_common_llmq_type_DKGParams) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dash_spv_masternode_processor_chain_common_llmq_type_DKGParams { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_DKGParams_ctor < > (interval : u32 , phase_blocks : u32 , mining_window_start : u32 , mining_window_end : u32 , bad_votes_threshold : u32) -> * mut dash_spv_masternode_processor_chain_common_llmq_type_DKGParams { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_common_llmq_type_DKGParams { interval , phase_blocks , mining_window_start , mining_window_end , bad_votes_threshold }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_DKGParams_destroy < > (ffi : * mut dash_spv_masternode_processor_chain_common_llmq_type_DKGParams) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_DKGParams_get_interval < > (obj : * const dash_spv_masternode_processor_chain_common_llmq_type_DKGParams) -> u32 { (* obj) . interval } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_DKGParams_get_phase_blocks < > (obj : * const dash_spv_masternode_processor_chain_common_llmq_type_DKGParams) -> u32 { (* obj) . phase_blocks } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_DKGParams_get_mining_window_start < > (obj : * const dash_spv_masternode_processor_chain_common_llmq_type_DKGParams) -> u32 { (* obj) . mining_window_start } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_DKGParams_get_mining_window_end < > (obj : * const dash_spv_masternode_processor_chain_common_llmq_type_DKGParams) -> u32 { (* obj) . mining_window_end } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_DKGParams_get_bad_votes_threshold < > (obj : * const dash_spv_masternode_processor_chain_common_llmq_type_DKGParams) -> u32 { (* obj) . bad_votes_threshold } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_DKGParams_set_interval < > (obj : * mut dash_spv_masternode_processor_chain_common_llmq_type_DKGParams , value : u32) { (* obj) . interval = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_DKGParams_set_phase_blocks < > (obj : * mut dash_spv_masternode_processor_chain_common_llmq_type_DKGParams , value : u32) { (* obj) . phase_blocks = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_DKGParams_set_mining_window_start < > (obj : * mut dash_spv_masternode_processor_chain_common_llmq_type_DKGParams , value : u32) { (* obj) . mining_window_start = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_DKGParams_set_mining_window_end < > (obj : * mut dash_spv_masternode_processor_chain_common_llmq_type_DKGParams , value : u32) { (* obj) . mining_window_end = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_llmq_type_DKGParams_set_bad_votes_threshold < > (obj : * mut dash_spv_masternode_processor_chain_common_llmq_type_DKGParams , value : u32) { (* obj) . bad_votes_threshold = value ; } } pub mod chain_type { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: genesis_hash`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_ChainType_genesis_hash (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 { let obj = < dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType as dash_spv_masternode_processor :: chain :: common :: chain_type :: IHaveChainSettings > :: genesis_hash (& * ((* self_) . object as * const dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: genesis_height`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_ChainType_genesis_height (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_IHaveChainSettings) -> u32 { let obj = < dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType as dash_spv_masternode_processor :: chain :: common :: chain_type :: IHaveChainSettings > :: genesis_height (& * ((* self_) . object as * const dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: is_llmq_type`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_ChainType_is_llmq_type (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_LLMQType { let obj = < dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType as dash_spv_masternode_processor :: chain :: common :: chain_type :: IHaveChainSettings > :: is_llmq_type (& * ((* self_) . object as * const dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: isd_llmq_type`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_ChainType_isd_llmq_type (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_LLMQType { let obj = < dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType as dash_spv_masternode_processor :: chain :: common :: chain_type :: IHaveChainSettings > :: isd_llmq_type (& * ((* self_) . object as * const dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: chain_locks_type`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_ChainType_chain_locks_type (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_LLMQType { let obj = < dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType as dash_spv_masternode_processor :: chain :: common :: chain_type :: IHaveChainSettings > :: chain_locks_type (& * ((* self_) . object as * const dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: platform_type`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_ChainType_platform_type (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_LLMQType { let obj = < dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType as dash_spv_masternode_processor :: chain :: common :: chain_type :: IHaveChainSettings > :: platform_type (& * ((* self_) . object as * const dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: is_evolution_enabled`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_ChainType_is_evolution_enabled (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_IHaveChainSettings) -> bool { let obj = < dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType as dash_spv_masternode_processor :: chain :: common :: chain_type :: IHaveChainSettings > :: is_evolution_enabled (& * ((* self_) . object as * const dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: name`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_ChainType_name (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_IHaveChainSettings) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType as dash_spv_masternode_processor :: chain :: common :: chain_type :: IHaveChainSettings > :: name (& * ((* self_) . object as * const dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: identifier`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_DevnetType_identifier (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_DevnetType) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: identifier (& ferment_interfaces :: FFIConversion :: ffi_from (self_)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: version`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_DevnetType_version (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_DevnetType) -> u16 { let obj = dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: version (& ferment_interfaces :: FFIConversion :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_masternode_processor_chain_common_chain_type_DevnetType { JackDaniels = 0 , Devnet333 = 1 , Chacha = 2 , Mojito = 3 , WhiteRussian = 4 , MiningTest = 5 , Mobile2 = 6 , Zero = 7 , Screwdriver = 8 , Absinthe = 9 , Bintang = 10 } impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType > for dash_spv_masternode_processor_chain_common_chain_type_DevnetType { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_chain_common_chain_type_DevnetType) -> dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: JackDaniels => dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: JackDaniels , dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: Devnet333 => dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: Devnet333 , dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: Chacha => dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: Chacha , dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: Mojito => dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: Mojito , dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: WhiteRussian => dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: WhiteRussian , dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: MiningTest => dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: MiningTest , dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: Mobile2 => dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: Mobile2 , dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: Zero => dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: Zero , dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: Screwdriver => dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: Screwdriver , dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: Absinthe => dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: Absinthe , dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: Bintang => dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: Bintang } } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType) -> * const dash_spv_masternode_processor_chain_common_chain_type_DevnetType { ferment_interfaces :: boxed (match obj { dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: JackDaniels => dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: JackDaniels , dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: Devnet333 => dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: Devnet333 , dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: Chacha => dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: Chacha , dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: Mojito => dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: Mojito , dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: WhiteRussian => dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: WhiteRussian , dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: MiningTest => dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: MiningTest , dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: Mobile2 => dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: Mobile2 , dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: Zero => dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: Zero , dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: Screwdriver => dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: Screwdriver , dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: Absinthe => dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: Absinthe , dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: Bintang => dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: Bintang , _ => unreachable ! ("Enum Variant unreachable") }) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_chain_common_chain_type_DevnetType) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dash_spv_masternode_processor_chain_common_chain_type_DevnetType { fn drop (& mut self) { unsafe { match self { dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: JackDaniels => { } , dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: Devnet333 => { } , dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: Chacha => { } , dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: Mojito => { } , dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: WhiteRussian => { } , dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: MiningTest => { } , dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: Mobile2 => { } , dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: Zero => { } , dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: Screwdriver => { } , dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: Absinthe => { } , dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: Bintang => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_DevnetType_JackDaniels_ctor () -> * mut dash_spv_masternode_processor_chain_common_chain_type_DevnetType { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: JackDaniels { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_DevnetType_Devnet333_ctor () -> * mut dash_spv_masternode_processor_chain_common_chain_type_DevnetType { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: Devnet333 { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_DevnetType_Chacha_ctor () -> * mut dash_spv_masternode_processor_chain_common_chain_type_DevnetType { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: Chacha { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_DevnetType_Mojito_ctor () -> * mut dash_spv_masternode_processor_chain_common_chain_type_DevnetType { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: Mojito { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_DevnetType_WhiteRussian_ctor () -> * mut dash_spv_masternode_processor_chain_common_chain_type_DevnetType { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: WhiteRussian { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_DevnetType_MiningTest_ctor () -> * mut dash_spv_masternode_processor_chain_common_chain_type_DevnetType { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: MiningTest { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_DevnetType_Mobile2_ctor () -> * mut dash_spv_masternode_processor_chain_common_chain_type_DevnetType { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: Mobile2 { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_DevnetType_Zero_ctor () -> * mut dash_spv_masternode_processor_chain_common_chain_type_DevnetType { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: Zero { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_DevnetType_Screwdriver_ctor () -> * mut dash_spv_masternode_processor_chain_common_chain_type_DevnetType { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: Screwdriver { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_DevnetType_Absinthe_ctor () -> * mut dash_spv_masternode_processor_chain_common_chain_type_DevnetType { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: Absinthe { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_DevnetType_Bintang_ctor () -> * mut dash_spv_masternode_processor_chain_common_chain_type_DevnetType { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_common_chain_type_DevnetType :: Bintang { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_DevnetType_destroy < > (ffi : * mut dash_spv_masternode_processor_chain_common_chain_type_DevnetType) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: from_magic`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_ChainType_from_magic (magic : u32) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: chain_type :: dash_spv_masternode_processor_chain_common_chain_type_ChainType { let obj = dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: from_magic (magic) ; ferment_interfaces :: FFIConversion :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: magic`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_ChainType_magic (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_ChainType) -> u32 { let obj = dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: magic (& ferment_interfaces :: FFIConversion :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: allow_min_difficulty_blocks`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_ChainType_allow_min_difficulty_blocks (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_ChainType) -> bool { let obj = dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: allow_min_difficulty_blocks (& ferment_interfaces :: FFIConversion :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: max_proof_of_work`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_ChainType_max_proof_of_work (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_ChainType) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 { let obj = dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: max_proof_of_work (& ferment_interfaces :: FFIConversion :: ffi_from (self_)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: max_proof_of_work_target`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_ChainType_max_proof_of_work_target (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_ChainType) -> u32 { let obj = dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: max_proof_of_work_target (& ferment_interfaces :: FFIConversion :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: min_protocol_version`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_ChainType_min_protocol_version (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_ChainType) -> u32 { let obj = dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: min_protocol_version (& ferment_interfaces :: FFIConversion :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: protocol_version`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_ChainType_protocol_version (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_ChainType) -> u32 { let obj = dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: protocol_version (& ferment_interfaces :: FFIConversion :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: use_legacy_bls`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_ChainType_use_legacy_bls (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_ChainType) -> bool { let obj = dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: use_legacy_bls (& ferment_interfaces :: FFIConversion :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: standard_port`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_ChainType_standard_port (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_ChainType) -> u16 { let obj = dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: standard_port (& ferment_interfaces :: FFIConversion :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: standard_dapi_grpc_port`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_ChainType_standard_dapi_grpc_port (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_ChainType) -> u16 { let obj = dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: standard_dapi_grpc_port (& ferment_interfaces :: FFIConversion :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: standard_dapi_jrpc_port`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_ChainType_standard_dapi_jrpc_port (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_ChainType) -> u16 { let obj = dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: standard_dapi_jrpc_port (& ferment_interfaces :: FFIConversion :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: localhost`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_ChainType_localhost (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_ChainType) -> * mut dash_spv_apple_bindings :: custom_conversions :: SocketAddr { let obj = dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: localhost (& ferment_interfaces :: FFIConversion :: ffi_from (self_)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: transaction_version`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_ChainType_transaction_version (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_ChainType) -> u16 { let obj = dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: transaction_version (& ferment_interfaces :: FFIConversion :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: base_reward`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_ChainType_base_reward (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_ChainType) -> u64 { let obj = dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: base_reward (& ferment_interfaces :: FFIConversion :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: header_max_amount`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_ChainType_header_max_amount (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_ChainType) -> u64 { let obj = dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: header_max_amount (& ferment_interfaces :: FFIConversion :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: spork_params`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_ChainType_spork_params (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_ChainType) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: params :: dash_spv_masternode_processor_chain_params_SporkParams { let obj = dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: spork_params (& ferment_interfaces :: FFIConversion :: ffi_from (self_)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: peer_misbehaving_threshold`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_ChainType_peer_misbehaving_threshold (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_ChainType) -> usize { let obj = dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: peer_misbehaving_threshold (& ferment_interfaces :: FFIConversion :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: core19_activation_height`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_ChainType_core19_activation_height (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_ChainType) -> u32 { let obj = dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: core19_activation_height (& ferment_interfaces :: FFIConversion :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: core20_activation_height`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_ChainType_core20_activation_height (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_ChainType) -> u32 { let obj = dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: core20_activation_height (& ferment_interfaces :: FFIConversion :: ffi_from (self_)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: core20_is_active_at`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_ChainType_core20_is_active_at (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_ChainType , height : u32) -> bool { let obj = dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: core20_is_active_at (& ferment_interfaces :: FFIConversion :: ffi_from (self_) , height) ; obj } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_masternode_processor_chain_common_chain_type_ChainType { MainNet , TestNet , DevNet (* mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: chain_type :: dash_spv_masternode_processor_chain_common_chain_type_DevnetType) } impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType > for dash_spv_masternode_processor_chain_common_chain_type_ChainType { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_chain_common_chain_type_ChainType) -> dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_masternode_processor_chain_common_chain_type_ChainType :: MainNet => dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: MainNet , dash_spv_masternode_processor_chain_common_chain_type_ChainType :: TestNet => dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: TestNet , dash_spv_masternode_processor_chain_common_chain_type_ChainType :: DevNet (o_0) => dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: DevNet (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType) -> * const dash_spv_masternode_processor_chain_common_chain_type_ChainType { ferment_interfaces :: boxed (match obj { dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: MainNet => dash_spv_masternode_processor_chain_common_chain_type_ChainType :: MainNet , dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: TestNet => dash_spv_masternode_processor_chain_common_chain_type_ChainType :: TestNet , dash_spv_masternode_processor :: chain :: common :: chain_type :: ChainType :: DevNet (o_0) => dash_spv_masternode_processor_chain_common_chain_type_ChainType :: DevNet (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , _ => unreachable ! ("Enum Variant unreachable") }) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_chain_common_chain_type_ChainType) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dash_spv_masternode_processor_chain_common_chain_type_ChainType { fn drop (& mut self) { unsafe { match self { dash_spv_masternode_processor_chain_common_chain_type_ChainType :: MainNet => { } , dash_spv_masternode_processor_chain_common_chain_type_ChainType :: TestNet => { } , dash_spv_masternode_processor_chain_common_chain_type_ChainType :: DevNet (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_ChainType_MainNet_ctor () -> * mut dash_spv_masternode_processor_chain_common_chain_type_ChainType { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_common_chain_type_ChainType :: MainNet { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_ChainType_TestNet_ctor () -> * mut dash_spv_masternode_processor_chain_common_chain_type_ChainType { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_common_chain_type_ChainType :: TestNet { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_ChainType_DevNet_ctor (o_o_0 : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: chain_type :: dash_spv_masternode_processor_chain_common_chain_type_DevnetType) -> * mut dash_spv_masternode_processor_chain_common_chain_type_ChainType { ferment_interfaces :: boxed (dash_spv_masternode_processor_chain_common_chain_type_ChainType :: DevNet (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_ChainType_destroy < > (ffi : * mut dash_spv_masternode_processor_chain_common_chain_type_ChainType) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: genesis_hash`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_DevnetType_genesis_hash (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 { let obj = < dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType as dash_spv_masternode_processor :: chain :: common :: chain_type :: IHaveChainSettings > :: genesis_hash (& * ((* self_) . object as * const dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: genesis_height`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_DevnetType_genesis_height (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_IHaveChainSettings) -> u32 { let obj = < dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType as dash_spv_masternode_processor :: chain :: common :: chain_type :: IHaveChainSettings > :: genesis_height (& * ((* self_) . object as * const dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: is_llmq_type`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_DevnetType_is_llmq_type (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_LLMQType { let obj = < dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType as dash_spv_masternode_processor :: chain :: common :: chain_type :: IHaveChainSettings > :: is_llmq_type (& * ((* self_) . object as * const dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: isd_llmq_type`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_DevnetType_isd_llmq_type (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_LLMQType { let obj = < dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType as dash_spv_masternode_processor :: chain :: common :: chain_type :: IHaveChainSettings > :: isd_llmq_type (& * ((* self_) . object as * const dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: chain_locks_type`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_DevnetType_chain_locks_type (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_LLMQType { let obj = < dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType as dash_spv_masternode_processor :: chain :: common :: chain_type :: IHaveChainSettings > :: chain_locks_type (& * ((* self_) . object as * const dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: platform_type`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_DevnetType_platform_type (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_LLMQType { let obj = < dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType as dash_spv_masternode_processor :: chain :: common :: chain_type :: IHaveChainSettings > :: platform_type (& * ((* self_) . object as * const dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: is_evolution_enabled`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_DevnetType_is_evolution_enabled (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_IHaveChainSettings) -> bool { let obj = < dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType as dash_spv_masternode_processor :: chain :: common :: chain_type :: IHaveChainSettings > :: is_evolution_enabled (& * ((* self_) . object as * const dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType)) ; obj } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType :: name`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_chain_common_chain_type_DevnetType_name (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_IHaveChainSettings) -> * mut std :: os :: raw :: c_char { let obj = < dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType as dash_spv_masternode_processor :: chain :: common :: chain_type :: IHaveChainSettings > :: name (& * ((* self_) . object as * const dash_spv_masternode_processor :: chain :: common :: chain_type :: DevnetType)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_chain_common_chain_type_IHaveChainSettings_VTable { # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: IHaveChainSettings :: genesis_hash`]"] pub genesis_hash : unsafe extern "C" fn (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: IHaveChainSettings :: genesis_height`]"] pub genesis_height : unsafe extern "C" fn (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_IHaveChainSettings) -> u32 , # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: IHaveChainSettings :: is_llmq_type`]"] pub is_llmq_type : unsafe extern "C" fn (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_LLMQType , # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: IHaveChainSettings :: isd_llmq_type`]"] pub isd_llmq_type : unsafe extern "C" fn (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_LLMQType , # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: IHaveChainSettings :: chain_locks_type`]"] pub chain_locks_type : unsafe extern "C" fn (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_LLMQType , # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: IHaveChainSettings :: platform_type`]"] pub platform_type : unsafe extern "C" fn (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_IHaveChainSettings) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_LLMQType , # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: IHaveChainSettings :: should_process_llmq_of_type`]"] pub should_process_llmq_of_type : unsafe extern "C" fn (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_IHaveChainSettings , llmq_type : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_LLMQType) -> bool , # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: IHaveChainSettings :: is_evolution_enabled`]"] pub is_evolution_enabled : unsafe extern "C" fn (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_IHaveChainSettings) -> bool , # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: chain :: common :: chain_type :: IHaveChainSettings :: name`]"] pub name : unsafe extern "C" fn (self_ : * mut dash_spv_masternode_processor_chain_common_chain_type_IHaveChainSettings) -> * mut std :: os :: raw :: c_char } # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_chain_common_chain_type_IHaveChainSettings { object : * const () , vtable : * const dash_spv_masternode_processor_chain_common_chain_type_IHaveChainSettings_VTable } } } } pub mod keys { use crate as dash_spv_apple_bindings ; } pub mod tx { use crate as dash_spv_apple_bindings ; pub mod coinbase_transaction { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: tx :: coinbase_transaction :: CoinbaseTransaction`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction { pub base : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: tx :: transaction :: dash_spv_masternode_processor_tx_transaction_Transaction , pub coinbase_transaction_version : u16 , pub height : u32 , pub merkle_root_mn_list : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , pub merkle_root_llmq_list : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , pub best_cl_height_diff : u64 , pub best_cl_signature : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt768 , pub credit_pool_balance : * mut i64 } impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: tx :: coinbase_transaction :: CoinbaseTransaction > for dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction) -> dash_spv_masternode_processor :: tx :: coinbase_transaction :: CoinbaseTransaction { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: tx :: coinbase_transaction :: CoinbaseTransaction { base : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . base) , coinbase_transaction_version : ffi_ref . coinbase_transaction_version , height : ffi_ref . height , merkle_root_mn_list : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . merkle_root_mn_list) , merkle_root_llmq_list : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . merkle_root_llmq_list) , best_cl_height_diff : ffi_ref . best_cl_height_diff , best_cl_signature : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . best_cl_signature) , credit_pool_balance : ferment_interfaces :: from_opt_primitive (ffi_ref . credit_pool_balance) } } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: tx :: coinbase_transaction :: CoinbaseTransaction) -> * const dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction { ferment_interfaces :: boxed (dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction { base : ferment_interfaces :: FFIConversion :: ffi_to (obj . base) , coinbase_transaction_version : obj . coinbase_transaction_version , height : obj . height , merkle_root_mn_list : ferment_interfaces :: FFIConversion :: ffi_to (obj . merkle_root_mn_list) , merkle_root_llmq_list : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . merkle_root_llmq_list) , best_cl_height_diff : obj . best_cl_height_diff , best_cl_signature : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . best_cl_signature) , credit_pool_balance : ferment_interfaces :: to_opt_primitive (obj . credit_pool_balance) }) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . base) ; ; ; ; ferment_interfaces :: unbox_any (ffi_ref . merkle_root_mn_list) ; ; if (! (ffi_ref . merkle_root_llmq_list) . is_null ()) { ferment_interfaces :: unbox_any (ffi_ref . merkle_root_llmq_list) ; } ; ; if (! (ffi_ref . best_cl_signature) . is_null ()) { ferment_interfaces :: unbox_any (ffi_ref . best_cl_signature) ; } ; ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction_ctor < > (base : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: tx :: transaction :: dash_spv_masternode_processor_tx_transaction_Transaction , coinbase_transaction_version : u16 , height : u32 , merkle_root_mn_list : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , merkle_root_llmq_list : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , best_cl_height_diff : u64 , best_cl_signature : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt768 , credit_pool_balance : * mut i64) -> * mut dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction { ferment_interfaces :: boxed (dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction { base , coinbase_transaction_version , height , merkle_root_mn_list , merkle_root_llmq_list , best_cl_height_diff , best_cl_signature , credit_pool_balance }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction_destroy < > (ffi : * mut dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction_get_base < > (obj : * const dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: tx :: transaction :: dash_spv_masternode_processor_tx_transaction_Transaction { (* obj) . base } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction_get_coinbase_transaction_version < > (obj : * const dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction) -> u16 { (* obj) . coinbase_transaction_version } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction_get_height < > (obj : * const dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction) -> u32 { (* obj) . height } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction_get_merkle_root_mn_list < > (obj : * const dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 { (* obj) . merkle_root_mn_list } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction_get_merkle_root_llmq_list < > (obj : * const dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 { (* obj) . merkle_root_llmq_list } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction_get_best_cl_height_diff < > (obj : * const dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction) -> u64 { (* obj) . best_cl_height_diff } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction_get_best_cl_signature < > (obj : * const dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt768 { (* obj) . best_cl_signature } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction_get_credit_pool_balance < > (obj : * const dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction) -> * mut i64 { (* obj) . credit_pool_balance } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction_set_base < > (obj : * mut dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: tx :: transaction :: dash_spv_masternode_processor_tx_transaction_Transaction) { (* obj) . base = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction_set_coinbase_transaction_version < > (obj : * mut dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction , value : u16) { (* obj) . coinbase_transaction_version = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction_set_height < > (obj : * mut dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction , value : u32) { (* obj) . height = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction_set_merkle_root_mn_list < > (obj : * mut dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256) { (* obj) . merkle_root_mn_list = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction_set_merkle_root_llmq_list < > (obj : * mut dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256) { (* obj) . merkle_root_llmq_list = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction_set_best_cl_height_diff < > (obj : * mut dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction , value : u64) { (* obj) . best_cl_height_diff = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction_set_best_cl_signature < > (obj : * mut dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt768) { (* obj) . best_cl_signature = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction_set_credit_pool_balance < > (obj : * mut dash_spv_masternode_processor_tx_coinbase_transaction_CoinbaseTransaction , value : * mut i64) { (* obj) . credit_pool_balance = value ; } } pub mod transaction { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: tx :: transaction :: Transaction`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_tx_transaction_Transaction { pub inputs : * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_tx_transaction_TransactionInput , pub outputs : * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_tx_transaction_TransactionOutput , pub lock_time : u32 , pub version : u16 , pub tx_hash : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , pub tx_type : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: tx :: transaction :: dash_spv_masternode_processor_tx_transaction_TransactionType , pub payload_offset : usize , pub block_height : u32 } impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: tx :: transaction :: Transaction > for dash_spv_masternode_processor_tx_transaction_Transaction { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_tx_transaction_Transaction) -> dash_spv_masternode_processor :: tx :: transaction :: Transaction { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: tx :: transaction :: Transaction { inputs : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . inputs) , outputs : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . outputs) , lock_time : ffi_ref . lock_time , version : ffi_ref . version , tx_hash : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . tx_hash) , tx_type : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . tx_type) , payload_offset : ffi_ref . payload_offset , block_height : ffi_ref . block_height } } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: tx :: transaction :: Transaction) -> * const dash_spv_masternode_processor_tx_transaction_Transaction { ferment_interfaces :: boxed (dash_spv_masternode_processor_tx_transaction_Transaction { inputs : ferment_interfaces :: FFIConversion :: ffi_to (obj . inputs) , outputs : ferment_interfaces :: FFIConversion :: ffi_to (obj . outputs) , lock_time : obj . lock_time , version : obj . version , tx_hash : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . tx_hash) , tx_type : ferment_interfaces :: FFIConversion :: ffi_to (obj . tx_type) , payload_offset : obj . payload_offset , block_height : obj . block_height }) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_tx_transaction_Transaction) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dash_spv_masternode_processor_tx_transaction_Transaction { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . inputs) ; ; ferment_interfaces :: unbox_any (ffi_ref . outputs) ; ; ; ; if (! (ffi_ref . tx_hash) . is_null ()) { ferment_interfaces :: unbox_any (ffi_ref . tx_hash) ; } ; ferment_interfaces :: unbox_any (ffi_ref . tx_type) ; ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_Transaction_ctor < > (inputs : * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_tx_transaction_TransactionInput , outputs : * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_tx_transaction_TransactionOutput , lock_time : u32 , version : u16 , tx_hash : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , tx_type : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: tx :: transaction :: dash_spv_masternode_processor_tx_transaction_TransactionType , payload_offset : usize , block_height : u32) -> * mut dash_spv_masternode_processor_tx_transaction_Transaction { ferment_interfaces :: boxed (dash_spv_masternode_processor_tx_transaction_Transaction { inputs , outputs , lock_time , version , tx_hash , tx_type , payload_offset , block_height }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_Transaction_destroy < > (ffi : * mut dash_spv_masternode_processor_tx_transaction_Transaction) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_Transaction_get_inputs < > (obj : * const dash_spv_masternode_processor_tx_transaction_Transaction) -> * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_tx_transaction_TransactionInput { (* obj) . inputs } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_Transaction_get_outputs < > (obj : * const dash_spv_masternode_processor_tx_transaction_Transaction) -> * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_tx_transaction_TransactionOutput { (* obj) . outputs } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_Transaction_get_lock_time < > (obj : * const dash_spv_masternode_processor_tx_transaction_Transaction) -> u32 { (* obj) . lock_time } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_Transaction_get_version < > (obj : * const dash_spv_masternode_processor_tx_transaction_Transaction) -> u16 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_Transaction_get_tx_hash < > (obj : * const dash_spv_masternode_processor_tx_transaction_Transaction) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 { (* obj) . tx_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_Transaction_get_tx_type < > (obj : * const dash_spv_masternode_processor_tx_transaction_Transaction) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: tx :: transaction :: dash_spv_masternode_processor_tx_transaction_TransactionType { (* obj) . tx_type } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_Transaction_get_payload_offset < > (obj : * const dash_spv_masternode_processor_tx_transaction_Transaction) -> usize { (* obj) . payload_offset } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_Transaction_get_block_height < > (obj : * const dash_spv_masternode_processor_tx_transaction_Transaction) -> u32 { (* obj) . block_height } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_Transaction_set_inputs < > (obj : * mut dash_spv_masternode_processor_tx_transaction_Transaction , value : * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_tx_transaction_TransactionInput) { (* obj) . inputs = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_Transaction_set_outputs < > (obj : * mut dash_spv_masternode_processor_tx_transaction_Transaction , value : * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_tx_transaction_TransactionOutput) { (* obj) . outputs = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_Transaction_set_lock_time < > (obj : * mut dash_spv_masternode_processor_tx_transaction_Transaction , value : u32) { (* obj) . lock_time = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_Transaction_set_version < > (obj : * mut dash_spv_masternode_processor_tx_transaction_Transaction , value : u16) { (* obj) . version = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_Transaction_set_tx_hash < > (obj : * mut dash_spv_masternode_processor_tx_transaction_Transaction , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256) { (* obj) . tx_hash = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_Transaction_set_tx_type < > (obj : * mut dash_spv_masternode_processor_tx_transaction_Transaction , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: tx :: transaction :: dash_spv_masternode_processor_tx_transaction_TransactionType) { (* obj) . tx_type = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_Transaction_set_payload_offset < > (obj : * mut dash_spv_masternode_processor_tx_transaction_Transaction , value : usize) { (* obj) . payload_offset = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_Transaction_set_block_height < > (obj : * mut dash_spv_masternode_processor_tx_transaction_Transaction , value : u32) { (* obj) . block_height = value ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: tx :: transaction :: TransactionOutput`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_tx_transaction_TransactionOutput { pub amount : u64 , pub script : * mut crate :: fermented :: generics :: Vec_u8 , pub address : * mut crate :: fermented :: generics :: Vec_u8 } impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: tx :: transaction :: TransactionOutput > for dash_spv_masternode_processor_tx_transaction_TransactionOutput { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_tx_transaction_TransactionOutput) -> dash_spv_masternode_processor :: tx :: transaction :: TransactionOutput { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: tx :: transaction :: TransactionOutput { amount : ffi_ref . amount , script : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . script) , address : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . address) } } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: tx :: transaction :: TransactionOutput) -> * const dash_spv_masternode_processor_tx_transaction_TransactionOutput { ferment_interfaces :: boxed (dash_spv_masternode_processor_tx_transaction_TransactionOutput { amount : obj . amount , script : match obj . script { Some (vec) => ferment_interfaces :: FFIConversion :: ffi_to (vec) , None => std :: ptr :: null_mut () } , address : match obj . address { Some (vec) => ferment_interfaces :: FFIConversion :: ffi_to (vec) , None => std :: ptr :: null_mut () } }) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_tx_transaction_TransactionOutput) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dash_spv_masternode_processor_tx_transaction_TransactionOutput { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; if (! (ffi_ref . script) . is_null ()) { ferment_interfaces :: unbox_any (ffi_ref . script) ; } ; if (! (ffi_ref . address) . is_null ()) { ferment_interfaces :: unbox_any (ffi_ref . address) ; } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionOutput_ctor < > (amount : u64 , script : * mut crate :: fermented :: generics :: Vec_u8 , address : * mut crate :: fermented :: generics :: Vec_u8) -> * mut dash_spv_masternode_processor_tx_transaction_TransactionOutput { ferment_interfaces :: boxed (dash_spv_masternode_processor_tx_transaction_TransactionOutput { amount , script , address }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionOutput_destroy < > (ffi : * mut dash_spv_masternode_processor_tx_transaction_TransactionOutput) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionOutput_get_amount < > (obj : * const dash_spv_masternode_processor_tx_transaction_TransactionOutput) -> u64 { (* obj) . amount } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionOutput_get_script < > (obj : * const dash_spv_masternode_processor_tx_transaction_TransactionOutput) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . script } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionOutput_get_address < > (obj : * const dash_spv_masternode_processor_tx_transaction_TransactionOutput) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . address } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionOutput_set_amount < > (obj : * mut dash_spv_masternode_processor_tx_transaction_TransactionOutput , value : u64) { (* obj) . amount = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionOutput_set_script < > (obj : * mut dash_spv_masternode_processor_tx_transaction_TransactionOutput , value : * mut crate :: fermented :: generics :: Vec_u8) { (* obj) . script = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionOutput_set_address < > (obj : * mut dash_spv_masternode_processor_tx_transaction_TransactionOutput , value : * mut crate :: fermented :: generics :: Vec_u8) { (* obj) . address = value ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: tx :: transaction :: TransactionInput`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_tx_transaction_TransactionInput { pub input_hash : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , pub index : u32 , pub script : * mut crate :: fermented :: generics :: Vec_u8 , pub signature : * mut crate :: fermented :: generics :: Vec_u8 , pub sequence : u32 } impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: tx :: transaction :: TransactionInput > for dash_spv_masternode_processor_tx_transaction_TransactionInput { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_tx_transaction_TransactionInput) -> dash_spv_masternode_processor :: tx :: transaction :: TransactionInput { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: tx :: transaction :: TransactionInput { input_hash : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . input_hash) , index : ffi_ref . index , script : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . script) , signature : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . signature) , sequence : ffi_ref . sequence } } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: tx :: transaction :: TransactionInput) -> * const dash_spv_masternode_processor_tx_transaction_TransactionInput { ferment_interfaces :: boxed (dash_spv_masternode_processor_tx_transaction_TransactionInput { input_hash : ferment_interfaces :: FFIConversion :: ffi_to (obj . input_hash) , index : obj . index , script : match obj . script { Some (vec) => ferment_interfaces :: FFIConversion :: ffi_to (vec) , None => std :: ptr :: null_mut () } , signature : match obj . signature { Some (vec) => ferment_interfaces :: FFIConversion :: ffi_to (vec) , None => std :: ptr :: null_mut () } , sequence : obj . sequence }) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_tx_transaction_TransactionInput) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dash_spv_masternode_processor_tx_transaction_TransactionInput { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . input_hash) ; ; ; if (! (ffi_ref . script) . is_null ()) { ferment_interfaces :: unbox_any (ffi_ref . script) ; } ; if (! (ffi_ref . signature) . is_null ()) { ferment_interfaces :: unbox_any (ffi_ref . signature) ; } ; ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionInput_ctor < > (input_hash : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , index : u32 , script : * mut crate :: fermented :: generics :: Vec_u8 , signature : * mut crate :: fermented :: generics :: Vec_u8 , sequence : u32) -> * mut dash_spv_masternode_processor_tx_transaction_TransactionInput { ferment_interfaces :: boxed (dash_spv_masternode_processor_tx_transaction_TransactionInput { input_hash , index , script , signature , sequence }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionInput_destroy < > (ffi : * mut dash_spv_masternode_processor_tx_transaction_TransactionInput) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionInput_get_input_hash < > (obj : * const dash_spv_masternode_processor_tx_transaction_TransactionInput) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 { (* obj) . input_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionInput_get_index < > (obj : * const dash_spv_masternode_processor_tx_transaction_TransactionInput) -> u32 { (* obj) . index } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionInput_get_script < > (obj : * const dash_spv_masternode_processor_tx_transaction_TransactionInput) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . script } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionInput_get_signature < > (obj : * const dash_spv_masternode_processor_tx_transaction_TransactionInput) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . signature } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionInput_get_sequence < > (obj : * const dash_spv_masternode_processor_tx_transaction_TransactionInput) -> u32 { (* obj) . sequence } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionInput_set_input_hash < > (obj : * mut dash_spv_masternode_processor_tx_transaction_TransactionInput , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256) { (* obj) . input_hash = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionInput_set_index < > (obj : * mut dash_spv_masternode_processor_tx_transaction_TransactionInput , value : u32) { (* obj) . index = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionInput_set_script < > (obj : * mut dash_spv_masternode_processor_tx_transaction_TransactionInput , value : * mut crate :: fermented :: generics :: Vec_u8) { (* obj) . script = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionInput_set_signature < > (obj : * mut dash_spv_masternode_processor_tx_transaction_TransactionInput , value : * mut crate :: fermented :: generics :: Vec_u8) { (* obj) . signature = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionInput_set_sequence < > (obj : * mut dash_spv_masternode_processor_tx_transaction_TransactionInput , value : u32) { (* obj) . sequence = value ; } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dash_spv_masternode_processor :: tx :: transaction :: TransactionType`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_masternode_processor_tx_transaction_TransactionType { Classic = 0 , ProviderRegistration = 1 , ProviderUpdateService = 2 , ProviderUpdateRegistrar = 3 , ProviderUpdateRevocation = 4 , Coinbase = 5 , QuorumCommitment = 6 , AssetLock = 8 , AssetUnlock = 9 , TypeMax = 10 , SubscriptionCloseAccount = 11 , Transition = 12 , CreditFunding = 255 } impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: tx :: transaction :: TransactionType > for dash_spv_masternode_processor_tx_transaction_TransactionType { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_tx_transaction_TransactionType) -> dash_spv_masternode_processor :: tx :: transaction :: TransactionType { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_masternode_processor_tx_transaction_TransactionType :: Classic => dash_spv_masternode_processor :: tx :: transaction :: TransactionType :: Classic , dash_spv_masternode_processor_tx_transaction_TransactionType :: ProviderRegistration => dash_spv_masternode_processor :: tx :: transaction :: TransactionType :: ProviderRegistration , dash_spv_masternode_processor_tx_transaction_TransactionType :: ProviderUpdateService => dash_spv_masternode_processor :: tx :: transaction :: TransactionType :: ProviderUpdateService , dash_spv_masternode_processor_tx_transaction_TransactionType :: ProviderUpdateRegistrar => dash_spv_masternode_processor :: tx :: transaction :: TransactionType :: ProviderUpdateRegistrar , dash_spv_masternode_processor_tx_transaction_TransactionType :: ProviderUpdateRevocation => dash_spv_masternode_processor :: tx :: transaction :: TransactionType :: ProviderUpdateRevocation , dash_spv_masternode_processor_tx_transaction_TransactionType :: Coinbase => dash_spv_masternode_processor :: tx :: transaction :: TransactionType :: Coinbase , dash_spv_masternode_processor_tx_transaction_TransactionType :: QuorumCommitment => dash_spv_masternode_processor :: tx :: transaction :: TransactionType :: QuorumCommitment , dash_spv_masternode_processor_tx_transaction_TransactionType :: AssetLock => dash_spv_masternode_processor :: tx :: transaction :: TransactionType :: AssetLock , dash_spv_masternode_processor_tx_transaction_TransactionType :: AssetUnlock => dash_spv_masternode_processor :: tx :: transaction :: TransactionType :: AssetUnlock , dash_spv_masternode_processor_tx_transaction_TransactionType :: TypeMax => dash_spv_masternode_processor :: tx :: transaction :: TransactionType :: TypeMax , dash_spv_masternode_processor_tx_transaction_TransactionType :: SubscriptionCloseAccount => dash_spv_masternode_processor :: tx :: transaction :: TransactionType :: SubscriptionCloseAccount , dash_spv_masternode_processor_tx_transaction_TransactionType :: Transition => dash_spv_masternode_processor :: tx :: transaction :: TransactionType :: Transition , dash_spv_masternode_processor_tx_transaction_TransactionType :: CreditFunding => dash_spv_masternode_processor :: tx :: transaction :: TransactionType :: CreditFunding } } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: tx :: transaction :: TransactionType) -> * const dash_spv_masternode_processor_tx_transaction_TransactionType { ferment_interfaces :: boxed (match obj { dash_spv_masternode_processor :: tx :: transaction :: TransactionType :: Classic => dash_spv_masternode_processor_tx_transaction_TransactionType :: Classic , dash_spv_masternode_processor :: tx :: transaction :: TransactionType :: ProviderRegistration => dash_spv_masternode_processor_tx_transaction_TransactionType :: ProviderRegistration , dash_spv_masternode_processor :: tx :: transaction :: TransactionType :: ProviderUpdateService => dash_spv_masternode_processor_tx_transaction_TransactionType :: ProviderUpdateService , dash_spv_masternode_processor :: tx :: transaction :: TransactionType :: ProviderUpdateRegistrar => dash_spv_masternode_processor_tx_transaction_TransactionType :: ProviderUpdateRegistrar , dash_spv_masternode_processor :: tx :: transaction :: TransactionType :: ProviderUpdateRevocation => dash_spv_masternode_processor_tx_transaction_TransactionType :: ProviderUpdateRevocation , dash_spv_masternode_processor :: tx :: transaction :: TransactionType :: Coinbase => dash_spv_masternode_processor_tx_transaction_TransactionType :: Coinbase , dash_spv_masternode_processor :: tx :: transaction :: TransactionType :: QuorumCommitment => dash_spv_masternode_processor_tx_transaction_TransactionType :: QuorumCommitment , dash_spv_masternode_processor :: tx :: transaction :: TransactionType :: AssetLock => dash_spv_masternode_processor_tx_transaction_TransactionType :: AssetLock , dash_spv_masternode_processor :: tx :: transaction :: TransactionType :: AssetUnlock => dash_spv_masternode_processor_tx_transaction_TransactionType :: AssetUnlock , dash_spv_masternode_processor :: tx :: transaction :: TransactionType :: TypeMax => dash_spv_masternode_processor_tx_transaction_TransactionType :: TypeMax , dash_spv_masternode_processor :: tx :: transaction :: TransactionType :: SubscriptionCloseAccount => dash_spv_masternode_processor_tx_transaction_TransactionType :: SubscriptionCloseAccount , dash_spv_masternode_processor :: tx :: transaction :: TransactionType :: Transition => dash_spv_masternode_processor_tx_transaction_TransactionType :: Transition , dash_spv_masternode_processor :: tx :: transaction :: TransactionType :: CreditFunding => dash_spv_masternode_processor_tx_transaction_TransactionType :: CreditFunding , _ => unreachable ! ("Enum Variant unreachable") }) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_tx_transaction_TransactionType) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dash_spv_masternode_processor_tx_transaction_TransactionType { fn drop (& mut self) { unsafe { match self { dash_spv_masternode_processor_tx_transaction_TransactionType :: Classic => { } , dash_spv_masternode_processor_tx_transaction_TransactionType :: ProviderRegistration => { } , dash_spv_masternode_processor_tx_transaction_TransactionType :: ProviderUpdateService => { } , dash_spv_masternode_processor_tx_transaction_TransactionType :: ProviderUpdateRegistrar => { } , dash_spv_masternode_processor_tx_transaction_TransactionType :: ProviderUpdateRevocation => { } , dash_spv_masternode_processor_tx_transaction_TransactionType :: Coinbase => { } , dash_spv_masternode_processor_tx_transaction_TransactionType :: QuorumCommitment => { } , dash_spv_masternode_processor_tx_transaction_TransactionType :: AssetLock => { } , dash_spv_masternode_processor_tx_transaction_TransactionType :: AssetUnlock => { } , dash_spv_masternode_processor_tx_transaction_TransactionType :: TypeMax => { } , dash_spv_masternode_processor_tx_transaction_TransactionType :: SubscriptionCloseAccount => { } , dash_spv_masternode_processor_tx_transaction_TransactionType :: Transition => { } , dash_spv_masternode_processor_tx_transaction_TransactionType :: CreditFunding => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionType_Classic_ctor () -> * mut dash_spv_masternode_processor_tx_transaction_TransactionType { ferment_interfaces :: boxed (dash_spv_masternode_processor_tx_transaction_TransactionType :: Classic { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionType_ProviderRegistration_ctor () -> * mut dash_spv_masternode_processor_tx_transaction_TransactionType { ferment_interfaces :: boxed (dash_spv_masternode_processor_tx_transaction_TransactionType :: ProviderRegistration { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionType_ProviderUpdateService_ctor () -> * mut dash_spv_masternode_processor_tx_transaction_TransactionType { ferment_interfaces :: boxed (dash_spv_masternode_processor_tx_transaction_TransactionType :: ProviderUpdateService { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionType_ProviderUpdateRegistrar_ctor () -> * mut dash_spv_masternode_processor_tx_transaction_TransactionType { ferment_interfaces :: boxed (dash_spv_masternode_processor_tx_transaction_TransactionType :: ProviderUpdateRegistrar { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionType_ProviderUpdateRevocation_ctor () -> * mut dash_spv_masternode_processor_tx_transaction_TransactionType { ferment_interfaces :: boxed (dash_spv_masternode_processor_tx_transaction_TransactionType :: ProviderUpdateRevocation { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionType_Coinbase_ctor () -> * mut dash_spv_masternode_processor_tx_transaction_TransactionType { ferment_interfaces :: boxed (dash_spv_masternode_processor_tx_transaction_TransactionType :: Coinbase { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionType_QuorumCommitment_ctor () -> * mut dash_spv_masternode_processor_tx_transaction_TransactionType { ferment_interfaces :: boxed (dash_spv_masternode_processor_tx_transaction_TransactionType :: QuorumCommitment { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionType_AssetLock_ctor () -> * mut dash_spv_masternode_processor_tx_transaction_TransactionType { ferment_interfaces :: boxed (dash_spv_masternode_processor_tx_transaction_TransactionType :: AssetLock { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionType_AssetUnlock_ctor () -> * mut dash_spv_masternode_processor_tx_transaction_TransactionType { ferment_interfaces :: boxed (dash_spv_masternode_processor_tx_transaction_TransactionType :: AssetUnlock { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionType_TypeMax_ctor () -> * mut dash_spv_masternode_processor_tx_transaction_TransactionType { ferment_interfaces :: boxed (dash_spv_masternode_processor_tx_transaction_TransactionType :: TypeMax { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionType_SubscriptionCloseAccount_ctor () -> * mut dash_spv_masternode_processor_tx_transaction_TransactionType { ferment_interfaces :: boxed (dash_spv_masternode_processor_tx_transaction_TransactionType :: SubscriptionCloseAccount { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionType_Transition_ctor () -> * mut dash_spv_masternode_processor_tx_transaction_TransactionType { ferment_interfaces :: boxed (dash_spv_masternode_processor_tx_transaction_TransactionType :: Transition { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionType_CreditFunding_ctor () -> * mut dash_spv_masternode_processor_tx_transaction_TransactionType { ferment_interfaces :: boxed (dash_spv_masternode_processor_tx_transaction_TransactionType :: CreditFunding { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_tx_transaction_TransactionType_destroy < > (ffi : * mut dash_spv_masternode_processor_tx_transaction_TransactionType) { ferment_interfaces :: unbox_any (ffi) ; } } } pub mod common { use crate as dash_spv_apple_bindings ; pub mod block { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: common :: block :: Block`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_common_block_Block { pub height : u32 , pub hash : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 } impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: common :: block :: Block > for dash_spv_masternode_processor_common_block_Block { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_common_block_Block) -> dash_spv_masternode_processor :: common :: block :: Block { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: common :: block :: Block { height : ffi_ref . height , hash : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . hash) } } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: common :: block :: Block) -> * const dash_spv_masternode_processor_common_block_Block { ferment_interfaces :: boxed (dash_spv_masternode_processor_common_block_Block { height : obj . height , hash : ferment_interfaces :: FFIConversion :: ffi_to (obj . hash) }) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_common_block_Block) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dash_spv_masternode_processor_common_block_Block { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment_interfaces :: unbox_any (ffi_ref . hash) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_block_Block_ctor < > (height : u32 , hash : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256) -> * mut dash_spv_masternode_processor_common_block_Block { ferment_interfaces :: boxed (dash_spv_masternode_processor_common_block_Block { height , hash }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_block_Block_destroy < > (ffi : * mut dash_spv_masternode_processor_common_block_Block) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_block_Block_get_height < > (obj : * const dash_spv_masternode_processor_common_block_Block) -> u32 { (* obj) . height } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_block_Block_get_hash < > (obj : * const dash_spv_masternode_processor_common_block_Block) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 { (* obj) . hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_block_Block_set_height < > (obj : * mut dash_spv_masternode_processor_common_block_Block , value : u32) { (* obj) . height = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_block_Block_set_hash < > (obj : * mut dash_spv_masternode_processor_common_block_Block , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256) { (* obj) . hash = value ; } } pub mod bitset { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: common :: bitset :: Bitset`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_common_bitset_Bitset { pub count : usize , pub bitset : * mut crate :: fermented :: generics :: Vec_u8 } impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: common :: bitset :: Bitset > for dash_spv_masternode_processor_common_bitset_Bitset { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_common_bitset_Bitset) -> dash_spv_masternode_processor :: common :: bitset :: Bitset { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: common :: bitset :: Bitset { count : ffi_ref . count , bitset : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . bitset) } } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: common :: bitset :: Bitset) -> * const dash_spv_masternode_processor_common_bitset_Bitset { ferment_interfaces :: boxed (dash_spv_masternode_processor_common_bitset_Bitset { count : obj . count , bitset : ferment_interfaces :: FFIConversion :: ffi_to (obj . bitset) }) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_common_bitset_Bitset) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dash_spv_masternode_processor_common_bitset_Bitset { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment_interfaces :: unbox_any (ffi_ref . bitset) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_bitset_Bitset_ctor < > (count : usize , bitset : * mut crate :: fermented :: generics :: Vec_u8) -> * mut dash_spv_masternode_processor_common_bitset_Bitset { ferment_interfaces :: boxed (dash_spv_masternode_processor_common_bitset_Bitset { count , bitset }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_bitset_Bitset_destroy < > (ffi : * mut dash_spv_masternode_processor_common_bitset_Bitset) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_bitset_Bitset_get_count < > (obj : * const dash_spv_masternode_processor_common_bitset_Bitset) -> usize { (* obj) . count } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_bitset_Bitset_get_bitset < > (obj : * const dash_spv_masternode_processor_common_bitset_Bitset) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . bitset } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_bitset_Bitset_set_count < > (obj : * mut dash_spv_masternode_processor_common_bitset_Bitset , value : usize) { (* obj) . count = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_bitset_Bitset_set_bitset < > (obj : * mut dash_spv_masternode_processor_common_bitset_Bitset , value : * mut crate :: fermented :: generics :: Vec_u8) { (* obj) . bitset = value ; } } pub mod socket_address { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: common :: socket_address :: SocketAddress`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_common_socket_address_SocketAddress { pub ip_address : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt128 , pub port : u16 } impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: common :: socket_address :: SocketAddress > for dash_spv_masternode_processor_common_socket_address_SocketAddress { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_common_socket_address_SocketAddress) -> dash_spv_masternode_processor :: common :: socket_address :: SocketAddress { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: common :: socket_address :: SocketAddress { ip_address : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . ip_address) , port : ffi_ref . port } } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: common :: socket_address :: SocketAddress) -> * const dash_spv_masternode_processor_common_socket_address_SocketAddress { ferment_interfaces :: boxed (dash_spv_masternode_processor_common_socket_address_SocketAddress { ip_address : ferment_interfaces :: FFIConversion :: ffi_to (obj . ip_address) , port : obj . port }) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_common_socket_address_SocketAddress) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dash_spv_masternode_processor_common_socket_address_SocketAddress { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . ip_address) ; ; ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_socket_address_SocketAddress_ctor < > (ip_address : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt128 , port : u16) -> * mut dash_spv_masternode_processor_common_socket_address_SocketAddress { ferment_interfaces :: boxed (dash_spv_masternode_processor_common_socket_address_SocketAddress { ip_address , port }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_socket_address_SocketAddress_destroy < > (ffi : * mut dash_spv_masternode_processor_common_socket_address_SocketAddress) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_socket_address_SocketAddress_get_ip_address < > (obj : * const dash_spv_masternode_processor_common_socket_address_SocketAddress) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt128 { (* obj) . ip_address } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_socket_address_SocketAddress_get_port < > (obj : * const dash_spv_masternode_processor_common_socket_address_SocketAddress) -> u16 { (* obj) . port } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_socket_address_SocketAddress_set_ip_address < > (obj : * mut dash_spv_masternode_processor_common_socket_address_SocketAddress , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt128) { (* obj) . ip_address = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_socket_address_SocketAddress_set_port < > (obj : * mut dash_spv_masternode_processor_common_socket_address_SocketAddress , value : u16) { (* obj) . port = value ; } } pub mod llmq_snapshot_skip_mode { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: LLMQSnapshotSkipMode`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode { NoSkipping = 0 , SkipFirst = 1 , SkipExcept = 2 , SkipAll = 3 } impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: LLMQSnapshotSkipMode > for dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode) -> dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: LLMQSnapshotSkipMode { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode :: NoSkipping => dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: LLMQSnapshotSkipMode :: NoSkipping , dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode :: SkipFirst => dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: LLMQSnapshotSkipMode :: SkipFirst , dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode :: SkipExcept => dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: LLMQSnapshotSkipMode :: SkipExcept , dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode :: SkipAll => dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: LLMQSnapshotSkipMode :: SkipAll } } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: LLMQSnapshotSkipMode) -> * const dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode { ferment_interfaces :: boxed (match obj { dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: LLMQSnapshotSkipMode :: NoSkipping => dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode :: NoSkipping , dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: LLMQSnapshotSkipMode :: SkipFirst => dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode :: SkipFirst , dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: LLMQSnapshotSkipMode :: SkipExcept => dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode :: SkipExcept , dash_spv_masternode_processor :: common :: llmq_snapshot_skip_mode :: LLMQSnapshotSkipMode :: SkipAll => dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode :: SkipAll , _ => unreachable ! ("Enum Variant unreachable") }) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode { fn drop (& mut self) { unsafe { match self { dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode :: NoSkipping => { } , dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode :: SkipFirst => { } , dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode :: SkipExcept => { } , dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode :: SkipAll => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode_NoSkipping_ctor () -> * mut dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode { ferment_interfaces :: boxed (dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode :: NoSkipping { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode_SkipFirst_ctor () -> * mut dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode { ferment_interfaces :: boxed (dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode :: SkipFirst { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode_SkipExcept_ctor () -> * mut dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode { ferment_interfaces :: boxed (dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode :: SkipExcept { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode_SkipAll_ctor () -> * mut dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode { ferment_interfaces :: boxed (dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode :: SkipAll { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode_destroy < > (ffi : * mut dash_spv_masternode_processor_common_llmq_snapshot_skip_mode_LLMQSnapshotSkipMode) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod llmq_version { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dash_spv_masternode_processor :: common :: llmq_version :: LLMQVersion`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_masternode_processor_common_llmq_version_LLMQVersion { Default = 1 , Indexed = 2 , BLSBasicDefault = 3 , BLSBasicIndexed = 4 } impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: common :: llmq_version :: LLMQVersion > for dash_spv_masternode_processor_common_llmq_version_LLMQVersion { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_common_llmq_version_LLMQVersion) -> dash_spv_masternode_processor :: common :: llmq_version :: LLMQVersion { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_masternode_processor_common_llmq_version_LLMQVersion :: Default => dash_spv_masternode_processor :: common :: llmq_version :: LLMQVersion :: Default , dash_spv_masternode_processor_common_llmq_version_LLMQVersion :: Indexed => dash_spv_masternode_processor :: common :: llmq_version :: LLMQVersion :: Indexed , dash_spv_masternode_processor_common_llmq_version_LLMQVersion :: BLSBasicDefault => dash_spv_masternode_processor :: common :: llmq_version :: LLMQVersion :: BLSBasicDefault , dash_spv_masternode_processor_common_llmq_version_LLMQVersion :: BLSBasicIndexed => dash_spv_masternode_processor :: common :: llmq_version :: LLMQVersion :: BLSBasicIndexed } } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: common :: llmq_version :: LLMQVersion) -> * const dash_spv_masternode_processor_common_llmq_version_LLMQVersion { ferment_interfaces :: boxed (match obj { dash_spv_masternode_processor :: common :: llmq_version :: LLMQVersion :: Default => dash_spv_masternode_processor_common_llmq_version_LLMQVersion :: Default , dash_spv_masternode_processor :: common :: llmq_version :: LLMQVersion :: Indexed => dash_spv_masternode_processor_common_llmq_version_LLMQVersion :: Indexed , dash_spv_masternode_processor :: common :: llmq_version :: LLMQVersion :: BLSBasicDefault => dash_spv_masternode_processor_common_llmq_version_LLMQVersion :: BLSBasicDefault , dash_spv_masternode_processor :: common :: llmq_version :: LLMQVersion :: BLSBasicIndexed => dash_spv_masternode_processor_common_llmq_version_LLMQVersion :: BLSBasicIndexed , _ => unreachable ! ("Enum Variant unreachable") }) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_common_llmq_version_LLMQVersion) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dash_spv_masternode_processor_common_llmq_version_LLMQVersion { fn drop (& mut self) { unsafe { match self { dash_spv_masternode_processor_common_llmq_version_LLMQVersion :: Default => { } , dash_spv_masternode_processor_common_llmq_version_LLMQVersion :: Indexed => { } , dash_spv_masternode_processor_common_llmq_version_LLMQVersion :: BLSBasicDefault => { } , dash_spv_masternode_processor_common_llmq_version_LLMQVersion :: BLSBasicIndexed => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_llmq_version_LLMQVersion_Default_ctor () -> * mut dash_spv_masternode_processor_common_llmq_version_LLMQVersion { ferment_interfaces :: boxed (dash_spv_masternode_processor_common_llmq_version_LLMQVersion :: Default { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_llmq_version_LLMQVersion_Indexed_ctor () -> * mut dash_spv_masternode_processor_common_llmq_version_LLMQVersion { ferment_interfaces :: boxed (dash_spv_masternode_processor_common_llmq_version_LLMQVersion :: Indexed { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_llmq_version_LLMQVersion_BLSBasicDefault_ctor () -> * mut dash_spv_masternode_processor_common_llmq_version_LLMQVersion { ferment_interfaces :: boxed (dash_spv_masternode_processor_common_llmq_version_LLMQVersion :: BLSBasicDefault { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_llmq_version_LLMQVersion_BLSBasicIndexed_ctor () -> * mut dash_spv_masternode_processor_common_llmq_version_LLMQVersion { ferment_interfaces :: boxed (dash_spv_masternode_processor_common_llmq_version_LLMQVersion :: BLSBasicIndexed { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_llmq_version_LLMQVersion_destroy < > (ffi : * mut dash_spv_masternode_processor_common_llmq_version_LLMQVersion) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod masternode_type { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dash_spv_masternode_processor :: common :: masternode_type :: MasternodeType`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_masternode_processor_common_masternode_type_MasternodeType { Regular = 0 , HighPerformance = 1 } impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: common :: masternode_type :: MasternodeType > for dash_spv_masternode_processor_common_masternode_type_MasternodeType { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_common_masternode_type_MasternodeType) -> dash_spv_masternode_processor :: common :: masternode_type :: MasternodeType { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_masternode_processor_common_masternode_type_MasternodeType :: Regular => dash_spv_masternode_processor :: common :: masternode_type :: MasternodeType :: Regular , dash_spv_masternode_processor_common_masternode_type_MasternodeType :: HighPerformance => dash_spv_masternode_processor :: common :: masternode_type :: MasternodeType :: HighPerformance } } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: common :: masternode_type :: MasternodeType) -> * const dash_spv_masternode_processor_common_masternode_type_MasternodeType { ferment_interfaces :: boxed (match obj { dash_spv_masternode_processor :: common :: masternode_type :: MasternodeType :: Regular => dash_spv_masternode_processor_common_masternode_type_MasternodeType :: Regular , dash_spv_masternode_processor :: common :: masternode_type :: MasternodeType :: HighPerformance => dash_spv_masternode_processor_common_masternode_type_MasternodeType :: HighPerformance , _ => unreachable ! ("Enum Variant unreachable") }) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_common_masternode_type_MasternodeType) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dash_spv_masternode_processor_common_masternode_type_MasternodeType { fn drop (& mut self) { unsafe { match self { dash_spv_masternode_processor_common_masternode_type_MasternodeType :: Regular => { } , dash_spv_masternode_processor_common_masternode_type_MasternodeType :: HighPerformance => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_masternode_type_MasternodeType_Regular_ctor () -> * mut dash_spv_masternode_processor_common_masternode_type_MasternodeType { ferment_interfaces :: boxed (dash_spv_masternode_processor_common_masternode_type_MasternodeType :: Regular { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_masternode_type_MasternodeType_HighPerformance_ctor () -> * mut dash_spv_masternode_processor_common_masternode_type_MasternodeType { ferment_interfaces :: boxed (dash_spv_masternode_processor_common_masternode_type_MasternodeType :: HighPerformance { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_common_masternode_type_MasternodeType_destroy < > (ffi : * mut dash_spv_masternode_processor_common_masternode_type_MasternodeType) { ferment_interfaces :: unbox_any (ffi) ; } } } pub mod consensus { use crate as dash_spv_apple_bindings ; } pub mod crypto { use crate as dash_spv_apple_bindings ; pub mod byte_util { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: crypto :: byte_util :: UInt256`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_crypto_byte_util_UInt256 (* mut crate :: fermented :: generics :: Arr_u8_32) ; impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 > for dash_spv_masternode_processor_crypto_byte_util_UInt256 { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_crypto_byte_util_UInt256) -> dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 (ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . 0)) } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: crypto :: byte_util :: UInt256) -> * const dash_spv_masternode_processor_crypto_byte_util_UInt256 { ferment_interfaces :: boxed (dash_spv_masternode_processor_crypto_byte_util_UInt256 (ferment_interfaces :: FFIConversion :: ffi_to (obj . 0))) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_crypto_byte_util_UInt256) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dash_spv_masternode_processor_crypto_byte_util_UInt256 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_crypto_byte_util_UInt256_ctor < > (o_0 : * mut crate :: fermented :: generics :: Arr_u8_32) -> * mut dash_spv_masternode_processor_crypto_byte_util_UInt256 { ferment_interfaces :: boxed (dash_spv_masternode_processor_crypto_byte_util_UInt256 (o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_crypto_byte_util_UInt256_destroy < > (ffi : * mut dash_spv_masternode_processor_crypto_byte_util_UInt256) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_crypto_byte_util_UInt256_get_0 < > (obj : * const dash_spv_masternode_processor_crypto_byte_util_UInt256) -> * mut crate :: fermented :: generics :: Arr_u8_32 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_crypto_byte_util_UInt256_set_0 < > (obj : * mut dash_spv_masternode_processor_crypto_byte_util_UInt256 , value : * mut crate :: fermented :: generics :: Arr_u8_32) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: crypto :: byte_util :: UInt160`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_crypto_byte_util_UInt160 (* mut crate :: fermented :: generics :: Arr_u8_20) ; impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: crypto :: byte_util :: UInt160 > for dash_spv_masternode_processor_crypto_byte_util_UInt160 { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_crypto_byte_util_UInt160) -> dash_spv_masternode_processor :: crypto :: byte_util :: UInt160 { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: crypto :: byte_util :: UInt160 (ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . 0)) } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: crypto :: byte_util :: UInt160) -> * const dash_spv_masternode_processor_crypto_byte_util_UInt160 { ferment_interfaces :: boxed (dash_spv_masternode_processor_crypto_byte_util_UInt160 (ferment_interfaces :: FFIConversion :: ffi_to (obj . 0))) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_crypto_byte_util_UInt160) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dash_spv_masternode_processor_crypto_byte_util_UInt160 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_crypto_byte_util_UInt160_ctor < > (o_0 : * mut crate :: fermented :: generics :: Arr_u8_20) -> * mut dash_spv_masternode_processor_crypto_byte_util_UInt160 { ferment_interfaces :: boxed (dash_spv_masternode_processor_crypto_byte_util_UInt160 (o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_crypto_byte_util_UInt160_destroy < > (ffi : * mut dash_spv_masternode_processor_crypto_byte_util_UInt160) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_crypto_byte_util_UInt160_get_0 < > (obj : * const dash_spv_masternode_processor_crypto_byte_util_UInt160) -> * mut crate :: fermented :: generics :: Arr_u8_20 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_crypto_byte_util_UInt160_set_0 < > (obj : * mut dash_spv_masternode_processor_crypto_byte_util_UInt160 , value : * mut crate :: fermented :: generics :: Arr_u8_20) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: crypto :: byte_util :: UInt768`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_crypto_byte_util_UInt768 (* mut crate :: fermented :: generics :: Arr_u8_96) ; impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: crypto :: byte_util :: UInt768 > for dash_spv_masternode_processor_crypto_byte_util_UInt768 { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_crypto_byte_util_UInt768) -> dash_spv_masternode_processor :: crypto :: byte_util :: UInt768 { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: crypto :: byte_util :: UInt768 (ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . 0)) } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: crypto :: byte_util :: UInt768) -> * const dash_spv_masternode_processor_crypto_byte_util_UInt768 { ferment_interfaces :: boxed (dash_spv_masternode_processor_crypto_byte_util_UInt768 (ferment_interfaces :: FFIConversion :: ffi_to (obj . 0))) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_crypto_byte_util_UInt768) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dash_spv_masternode_processor_crypto_byte_util_UInt768 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_crypto_byte_util_UInt768_ctor < > (o_0 : * mut crate :: fermented :: generics :: Arr_u8_96) -> * mut dash_spv_masternode_processor_crypto_byte_util_UInt768 { ferment_interfaces :: boxed (dash_spv_masternode_processor_crypto_byte_util_UInt768 (o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_crypto_byte_util_UInt768_destroy < > (ffi : * mut dash_spv_masternode_processor_crypto_byte_util_UInt768) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_crypto_byte_util_UInt768_get_0 < > (obj : * const dash_spv_masternode_processor_crypto_byte_util_UInt768) -> * mut crate :: fermented :: generics :: Arr_u8_96 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_crypto_byte_util_UInt768_set_0 < > (obj : * mut dash_spv_masternode_processor_crypto_byte_util_UInt768 , value : * mut crate :: fermented :: generics :: Arr_u8_96) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: crypto :: byte_util :: UInt512`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_crypto_byte_util_UInt512 (* mut crate :: fermented :: generics :: Arr_u8_64) ; impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: crypto :: byte_util :: UInt512 > for dash_spv_masternode_processor_crypto_byte_util_UInt512 { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_crypto_byte_util_UInt512) -> dash_spv_masternode_processor :: crypto :: byte_util :: UInt512 { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: crypto :: byte_util :: UInt512 (ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . 0)) } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: crypto :: byte_util :: UInt512) -> * const dash_spv_masternode_processor_crypto_byte_util_UInt512 { ferment_interfaces :: boxed (dash_spv_masternode_processor_crypto_byte_util_UInt512 (ferment_interfaces :: FFIConversion :: ffi_to (obj . 0))) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_crypto_byte_util_UInt512) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dash_spv_masternode_processor_crypto_byte_util_UInt512 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_crypto_byte_util_UInt512_ctor < > (o_0 : * mut crate :: fermented :: generics :: Arr_u8_64) -> * mut dash_spv_masternode_processor_crypto_byte_util_UInt512 { ferment_interfaces :: boxed (dash_spv_masternode_processor_crypto_byte_util_UInt512 (o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_crypto_byte_util_UInt512_destroy < > (ffi : * mut dash_spv_masternode_processor_crypto_byte_util_UInt512) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_crypto_byte_util_UInt512_get_0 < > (obj : * const dash_spv_masternode_processor_crypto_byte_util_UInt512) -> * mut crate :: fermented :: generics :: Arr_u8_64 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_crypto_byte_util_UInt512_set_0 < > (obj : * mut dash_spv_masternode_processor_crypto_byte_util_UInt512 , value : * mut crate :: fermented :: generics :: Arr_u8_64) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: crypto :: byte_util :: UInt384`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_crypto_byte_util_UInt384 (* mut crate :: fermented :: generics :: Arr_u8_48) ; impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: crypto :: byte_util :: UInt384 > for dash_spv_masternode_processor_crypto_byte_util_UInt384 { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_crypto_byte_util_UInt384) -> dash_spv_masternode_processor :: crypto :: byte_util :: UInt384 { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: crypto :: byte_util :: UInt384 (ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . 0)) } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: crypto :: byte_util :: UInt384) -> * const dash_spv_masternode_processor_crypto_byte_util_UInt384 { ferment_interfaces :: boxed (dash_spv_masternode_processor_crypto_byte_util_UInt384 (ferment_interfaces :: FFIConversion :: ffi_to (obj . 0))) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_crypto_byte_util_UInt384) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dash_spv_masternode_processor_crypto_byte_util_UInt384 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_crypto_byte_util_UInt384_ctor < > (o_0 : * mut crate :: fermented :: generics :: Arr_u8_48) -> * mut dash_spv_masternode_processor_crypto_byte_util_UInt384 { ferment_interfaces :: boxed (dash_spv_masternode_processor_crypto_byte_util_UInt384 (o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_crypto_byte_util_UInt384_destroy < > (ffi : * mut dash_spv_masternode_processor_crypto_byte_util_UInt384) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_crypto_byte_util_UInt384_get_0 < > (obj : * const dash_spv_masternode_processor_crypto_byte_util_UInt384) -> * mut crate :: fermented :: generics :: Arr_u8_48 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_crypto_byte_util_UInt384_set_0 < > (obj : * mut dash_spv_masternode_processor_crypto_byte_util_UInt384 , value : * mut crate :: fermented :: generics :: Arr_u8_48) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: crypto :: byte_util :: UInt128`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_crypto_byte_util_UInt128 (* mut crate :: fermented :: generics :: Arr_u8_16) ; impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: crypto :: byte_util :: UInt128 > for dash_spv_masternode_processor_crypto_byte_util_UInt128 { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_crypto_byte_util_UInt128) -> dash_spv_masternode_processor :: crypto :: byte_util :: UInt128 { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: crypto :: byte_util :: UInt128 (ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . 0)) } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: crypto :: byte_util :: UInt128) -> * const dash_spv_masternode_processor_crypto_byte_util_UInt128 { ferment_interfaces :: boxed (dash_spv_masternode_processor_crypto_byte_util_UInt128 (ferment_interfaces :: FFIConversion :: ffi_to (obj . 0))) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_crypto_byte_util_UInt128) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dash_spv_masternode_processor_crypto_byte_util_UInt128 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . 0) ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_crypto_byte_util_UInt128_ctor < > (o_0 : * mut crate :: fermented :: generics :: Arr_u8_16) -> * mut dash_spv_masternode_processor_crypto_byte_util_UInt128 { ferment_interfaces :: boxed (dash_spv_masternode_processor_crypto_byte_util_UInt128 (o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_crypto_byte_util_UInt128_destroy < > (ffi : * mut dash_spv_masternode_processor_crypto_byte_util_UInt128) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_crypto_byte_util_UInt128_get_0 < > (obj : * const dash_spv_masternode_processor_crypto_byte_util_UInt128) -> * mut crate :: fermented :: generics :: Arr_u8_16 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_crypto_byte_util_UInt128_set_0 < > (obj : * mut dash_spv_masternode_processor_crypto_byte_util_UInt128 , value : * mut crate :: fermented :: generics :: Arr_u8_16) { (* obj) . 0 = value ; } } } pub mod network { use crate as dash_spv_apple_bindings ; pub mod constants { use crate as dash_spv_apple_bindings ; # [cfg (test)] pub mod tests { use crate as dash_spv_apple_bindings ; } } } pub mod processing { use crate as dash_spv_apple_bindings ; pub mod processing_error { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_masternode_processor_processing_processing_error_ProcessingError { None = 0 , PersistInRetrieval = 1 , LocallyStored = 2 , ParseError = 3 , HasNoBaseBlockHash = 4 , UnknownBlockHash = 5 } impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError > for dash_spv_masternode_processor_processing_processing_error_ProcessingError { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_processing_processing_error_ProcessingError) -> dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_masternode_processor_processing_processing_error_ProcessingError :: None => dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError :: None , dash_spv_masternode_processor_processing_processing_error_ProcessingError :: PersistInRetrieval => dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError :: PersistInRetrieval , dash_spv_masternode_processor_processing_processing_error_ProcessingError :: LocallyStored => dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError :: LocallyStored , dash_spv_masternode_processor_processing_processing_error_ProcessingError :: ParseError => dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError :: ParseError , dash_spv_masternode_processor_processing_processing_error_ProcessingError :: HasNoBaseBlockHash => dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError :: HasNoBaseBlockHash , dash_spv_masternode_processor_processing_processing_error_ProcessingError :: UnknownBlockHash => dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError :: UnknownBlockHash } } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError) -> * const dash_spv_masternode_processor_processing_processing_error_ProcessingError { ferment_interfaces :: boxed (match obj { dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError :: None => dash_spv_masternode_processor_processing_processing_error_ProcessingError :: None , dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError :: PersistInRetrieval => dash_spv_masternode_processor_processing_processing_error_ProcessingError :: PersistInRetrieval , dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError :: LocallyStored => dash_spv_masternode_processor_processing_processing_error_ProcessingError :: LocallyStored , dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError :: ParseError => dash_spv_masternode_processor_processing_processing_error_ProcessingError :: ParseError , dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError :: HasNoBaseBlockHash => dash_spv_masternode_processor_processing_processing_error_ProcessingError :: HasNoBaseBlockHash , dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError :: UnknownBlockHash => dash_spv_masternode_processor_processing_processing_error_ProcessingError :: UnknownBlockHash , _ => unreachable ! ("Enum Variant unreachable") }) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_processing_processing_error_ProcessingError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dash_spv_masternode_processor_processing_processing_error_ProcessingError { fn drop (& mut self) { unsafe { match self { dash_spv_masternode_processor_processing_processing_error_ProcessingError :: None => { } , dash_spv_masternode_processor_processing_processing_error_ProcessingError :: PersistInRetrieval => { } , dash_spv_masternode_processor_processing_processing_error_ProcessingError :: LocallyStored => { } , dash_spv_masternode_processor_processing_processing_error_ProcessingError :: ParseError => { } , dash_spv_masternode_processor_processing_processing_error_ProcessingError :: HasNoBaseBlockHash => { } , dash_spv_masternode_processor_processing_processing_error_ProcessingError :: UnknownBlockHash => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processing_error_ProcessingError_None_ctor () -> * mut dash_spv_masternode_processor_processing_processing_error_ProcessingError { ferment_interfaces :: boxed (dash_spv_masternode_processor_processing_processing_error_ProcessingError :: None { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processing_error_ProcessingError_PersistInRetrieval_ctor () -> * mut dash_spv_masternode_processor_processing_processing_error_ProcessingError { ferment_interfaces :: boxed (dash_spv_masternode_processor_processing_processing_error_ProcessingError :: PersistInRetrieval { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processing_error_ProcessingError_LocallyStored_ctor () -> * mut dash_spv_masternode_processor_processing_processing_error_ProcessingError { ferment_interfaces :: boxed (dash_spv_masternode_processor_processing_processing_error_ProcessingError :: LocallyStored { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processing_error_ProcessingError_ParseError_ctor () -> * mut dash_spv_masternode_processor_processing_processing_error_ProcessingError { ferment_interfaces :: boxed (dash_spv_masternode_processor_processing_processing_error_ProcessingError :: ParseError { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processing_error_ProcessingError_HasNoBaseBlockHash_ctor () -> * mut dash_spv_masternode_processor_processing_processing_error_ProcessingError { ferment_interfaces :: boxed (dash_spv_masternode_processor_processing_processing_error_ProcessingError :: HasNoBaseBlockHash { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processing_error_ProcessingError_UnknownBlockHash_ctor () -> * mut dash_spv_masternode_processor_processing_processing_error_ProcessingError { ferment_interfaces :: boxed (dash_spv_masternode_processor_processing_processing_error_ProcessingError :: UnknownBlockHash { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processing_error_ProcessingError_destroy < > (ffi : * mut dash_spv_masternode_processor_processing_processing_error_ProcessingError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod processor { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_ctor < > (provider : * mut dyn dash_spv_masternode_processor :: processing :: core_provider :: CoreProvider) -> * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor { ferment_interfaces :: boxed (dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor { provider : Box :: from_raw (provider) }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_MasternodeProcessor_destroy < > (ffi : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod processor_cache { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_ctor < > (llmq_members : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , llmq_indexed_members : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , mn_lists : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList , llmq_snapshots : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot , cl_signatures : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_crypto_byte_util_UInt768 , needed_masternode_lists : * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_crypto_byte_util_UInt256) -> * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache { ferment_interfaces :: boxed (dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache { llmq_members : ferment_interfaces :: FFIConversion :: ffi_from (llmq_members) , llmq_indexed_members : ferment_interfaces :: FFIConversion :: ffi_from (llmq_indexed_members) , mn_lists : ferment_interfaces :: FFIConversion :: ffi_from (mn_lists) , llmq_snapshots : ferment_interfaces :: FFIConversion :: ffi_from (llmq_snapshots) , cl_signatures : ferment_interfaces :: FFIConversion :: ffi_from (cl_signatures) , needed_masternode_lists : ferment_interfaces :: FFIConversion :: ffi_from (needed_masternode_lists) }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_processor_cache_MasternodeProcessorCache_destroy < > (ffi : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod core_provider { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum dash_spv_masternode_processor_processing_core_provider_CoreProviderError { NullResult , ByteError (* mut dash_spv_masternode_processor :: processing :: core_provider :: byte_Error_FFI) , BadBlockHash (* mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256) , BlockHashNotFoundAt (u32) , NoMasternodeList } impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > for dash_spv_masternode_processor_processing_core_provider_CoreProviderError { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError { let ffi_ref = & * ffi ; match ffi_ref { dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: NullResult => dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError :: NullResult , dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: ByteError (o_0) => dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError :: ByteError (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: BadBlockHash (o_0) => dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError :: BadBlockHash (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) , dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: BlockHashNotFoundAt (o_0) => dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError :: BlockHashNotFoundAt (* o_0) , dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: NoMasternodeList => dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError :: NoMasternodeList } } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError) -> * const dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment_interfaces :: boxed (match obj { dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError :: NullResult => dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: NullResult , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError :: ByteError (o_0) => dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: ByteError (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError :: BadBlockHash (o_0) => dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: BadBlockHash (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError :: BlockHashNotFoundAt (o_0) => dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: BlockHashNotFoundAt (o_0) , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError :: NoMasternodeList => dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: NoMasternodeList , _ => unreachable ! ("Enum Variant unreachable") }) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_processing_core_provider_CoreProviderError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dash_spv_masternode_processor_processing_core_provider_CoreProviderError { fn drop (& mut self) { unsafe { match self { dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: NullResult => { } , dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: ByteError (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: BadBlockHash (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; ; } , dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: BlockHashNotFoundAt (o_0) => { ; } , dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: NoMasternodeList => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_core_provider_CoreProviderError_NullResult_ctor () -> * mut dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment_interfaces :: boxed (dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: NullResult { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_core_provider_CoreProviderError_ByteError_ctor (o_o_0 : * mut dash_spv_masternode_processor :: processing :: core_provider :: byte_Error_FFI) -> * mut dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment_interfaces :: boxed (dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: ByteError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_core_provider_CoreProviderError_BadBlockHash_ctor (o_o_0 : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256) -> * mut dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment_interfaces :: boxed (dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: BadBlockHash (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_core_provider_CoreProviderError_BlockHashNotFoundAt_ctor (o_o_0 : u32) -> * mut dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment_interfaces :: boxed (dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: BlockHashNotFoundAt (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_core_provider_CoreProviderError_NoMasternodeList_ctor () -> * mut dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment_interfaces :: boxed (dash_spv_masternode_processor_processing_core_provider_CoreProviderError :: NoMasternodeList { }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_core_provider_CoreProviderError_destroy < > (ffi : * mut dash_spv_masternode_processor_processing_core_provider_CoreProviderError) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod mn_listdiff_result { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { pub base_block_hash : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , pub block_hash : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , pub has_found_coinbase : bool , pub has_valid_coinbase : bool , pub has_valid_mn_list_root : bool , pub has_valid_llmq_list_root : bool , pub has_valid_quorums : bool , pub masternode_list : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList , pub added_masternodes : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , pub modified_masternodes : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , pub added_quorums : * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry , pub needed_masternode_lists : * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_crypto_byte_util_UInt256 } impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult > for dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult { base_block_hash : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . base_block_hash) , block_hash : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . block_hash) , has_found_coinbase : ffi_ref . has_found_coinbase , has_valid_coinbase : ffi_ref . has_valid_coinbase , has_valid_mn_list_root : ffi_ref . has_valid_mn_list_root , has_valid_llmq_list_root : ffi_ref . has_valid_llmq_list_root , has_valid_quorums : ffi_ref . has_valid_quorums , masternode_list : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . masternode_list) , added_masternodes : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . added_masternodes) , modified_masternodes : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . modified_masternodes) , added_quorums : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . added_quorums) , needed_masternode_lists : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . needed_masternode_lists) } } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult) -> * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { ferment_interfaces :: boxed (dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { base_block_hash : ferment_interfaces :: FFIConversion :: ffi_to (obj . base_block_hash) , block_hash : ferment_interfaces :: FFIConversion :: ffi_to (obj . block_hash) , has_found_coinbase : obj . has_found_coinbase , has_valid_coinbase : obj . has_valid_coinbase , has_valid_mn_list_root : obj . has_valid_mn_list_root , has_valid_llmq_list_root : obj . has_valid_llmq_list_root , has_valid_quorums : obj . has_valid_quorums , masternode_list : ferment_interfaces :: FFIConversion :: ffi_to (obj . masternode_list) , added_masternodes : ferment_interfaces :: FFIConversion :: ffi_to (obj . added_masternodes) , modified_masternodes : ferment_interfaces :: FFIConversion :: ffi_to (obj . modified_masternodes) , added_quorums : ferment_interfaces :: FFIConversion :: ffi_to (obj . added_quorums) , needed_masternode_lists : ferment_interfaces :: FFIConversion :: ffi_to (obj . needed_masternode_lists) }) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . base_block_hash) ; ; ferment_interfaces :: unbox_any (ffi_ref . block_hash) ; ; ; ; ; ; ; ferment_interfaces :: unbox_any (ffi_ref . masternode_list) ; ; ferment_interfaces :: unbox_any (ffi_ref . added_masternodes) ; ; ferment_interfaces :: unbox_any (ffi_ref . modified_masternodes) ; ; ferment_interfaces :: unbox_any (ffi_ref . added_quorums) ; ; ferment_interfaces :: unbox_any (ffi_ref . needed_masternode_lists) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_ctor < > (base_block_hash : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , block_hash : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , has_found_coinbase : bool , has_valid_coinbase : bool , has_valid_mn_list_root : bool , has_valid_llmq_list_root : bool , has_valid_quorums : bool , masternode_list : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList , added_masternodes : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , modified_masternodes : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry , added_quorums : * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry , needed_masternode_lists : * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_crypto_byte_util_UInt256) -> * mut dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { ferment_interfaces :: boxed (dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { base_block_hash , block_hash , has_found_coinbase , has_valid_coinbase , has_valid_mn_list_root , has_valid_llmq_list_root , has_valid_quorums , masternode_list , added_masternodes , modified_masternodes , added_quorums , needed_masternode_lists }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_destroy < > (ffi : * mut dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_get_base_block_hash < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 { (* obj) . base_block_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_get_block_hash < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 { (* obj) . block_hash } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_get_has_found_coinbase < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> bool { (* obj) . has_found_coinbase } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_get_has_valid_coinbase < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> bool { (* obj) . has_valid_coinbase } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_get_has_valid_mn_list_root < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> bool { (* obj) . has_valid_mn_list_root } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_get_has_valid_llmq_list_root < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> bool { (* obj) . has_valid_llmq_list_root } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_get_has_valid_quorums < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> bool { (* obj) . has_valid_quorums } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_get_masternode_list < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList { (* obj) . masternode_list } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_get_added_masternodes < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { (* obj) . added_masternodes } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_get_modified_masternodes < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { (* obj) . modified_masternodes } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_get_added_quorums < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry { (* obj) . added_quorums } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_get_needed_masternode_lists < > (obj : * const dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_crypto_byte_util_UInt256 { (* obj) . needed_masternode_lists } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_set_base_block_hash < > (obj : * mut dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256) { (* obj) . base_block_hash = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_set_block_hash < > (obj : * mut dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256) { (* obj) . block_hash = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_set_has_found_coinbase < > (obj : * mut dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , value : bool) { (* obj) . has_found_coinbase = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_set_has_valid_coinbase < > (obj : * mut dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , value : bool) { (* obj) . has_valid_coinbase = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_set_has_valid_mn_list_root < > (obj : * mut dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , value : bool) { (* obj) . has_valid_mn_list_root = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_set_has_valid_llmq_list_root < > (obj : * mut dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , value : bool) { (* obj) . has_valid_llmq_list_root = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_set_has_valid_quorums < > (obj : * mut dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , value : bool) { (* obj) . has_valid_quorums = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_set_masternode_list < > (obj : * mut dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList) { (* obj) . masternode_list = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_set_added_masternodes < > (obj : * mut dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , value : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) { (* obj) . added_masternodes = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_set_modified_masternodes < > (obj : * mut dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , value : * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) { (* obj) . modified_masternodes = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_set_added_quorums < > (obj : * mut dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , value : * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry) { (* obj) . added_quorums = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_set_needed_masternode_lists < > (obj : * mut dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , value : * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_crypto_byte_util_UInt256) { (* obj) . needed_masternode_lists = value ; } } pub mod qr_info_result { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_masternode_processor :: processing :: qr_info_result :: QRInfoResult`]"] # [repr (C)] # [derive (Clone)] pub struct dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult { pub result_at_tip : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , pub result_at_h : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , pub result_at_h_c : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , pub result_at_h_2c : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , pub result_at_h_3c : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , pub result_at_h_4c : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , pub snapshot_at_h_c : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot , pub snapshot_at_h_2c : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot , pub snapshot_at_h_3c : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot , pub snapshot_at_h_4c : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot , pub extra_share : bool , pub last_quorum_per_index : * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry , pub quorum_snapshot_list : * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot , pub mn_list_diff_list : * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult } impl ferment_interfaces :: FFIConversion < dash_spv_masternode_processor :: processing :: qr_info_result :: QRInfoResult > for dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult { unsafe fn ffi_from_const (ffi : * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) -> dash_spv_masternode_processor :: processing :: qr_info_result :: QRInfoResult { let ffi_ref = & * ffi ; dash_spv_masternode_processor :: processing :: qr_info_result :: QRInfoResult { result_at_tip : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . result_at_tip) , result_at_h : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . result_at_h) , result_at_h_c : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . result_at_h_c) , result_at_h_2c : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . result_at_h_2c) , result_at_h_3c : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . result_at_h_3c) , result_at_h_4c : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . result_at_h_4c) , snapshot_at_h_c : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . snapshot_at_h_c) , snapshot_at_h_2c : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . snapshot_at_h_2c) , snapshot_at_h_3c : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . snapshot_at_h_3c) , snapshot_at_h_4c : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . snapshot_at_h_4c) , extra_share : ffi_ref . extra_share , last_quorum_per_index : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . last_quorum_per_index) , quorum_snapshot_list : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . quorum_snapshot_list) , mn_list_diff_list : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . mn_list_diff_list) } } unsafe fn ffi_to_const (obj : dash_spv_masternode_processor :: processing :: qr_info_result :: QRInfoResult) -> * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult { ferment_interfaces :: boxed (dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult { result_at_tip : ferment_interfaces :: FFIConversion :: ffi_to (obj . result_at_tip) , result_at_h : ferment_interfaces :: FFIConversion :: ffi_to (obj . result_at_h) , result_at_h_c : ferment_interfaces :: FFIConversion :: ffi_to (obj . result_at_h_c) , result_at_h_2c : ferment_interfaces :: FFIConversion :: ffi_to (obj . result_at_h_2c) , result_at_h_3c : ferment_interfaces :: FFIConversion :: ffi_to (obj . result_at_h_3c) , result_at_h_4c : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . result_at_h_4c) , snapshot_at_h_c : ferment_interfaces :: FFIConversion :: ffi_to (obj . snapshot_at_h_c) , snapshot_at_h_2c : ferment_interfaces :: FFIConversion :: ffi_to (obj . snapshot_at_h_2c) , snapshot_at_h_3c : ferment_interfaces :: FFIConversion :: ffi_to (obj . snapshot_at_h_3c) , snapshot_at_h_4c : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . snapshot_at_h_4c) , extra_share : obj . extra_share , last_quorum_per_index : ferment_interfaces :: FFIConversion :: ffi_to (obj . last_quorum_per_index) , quorum_snapshot_list : ferment_interfaces :: FFIConversion :: ffi_to (obj . quorum_snapshot_list) , mn_list_diff_list : ferment_interfaces :: FFIConversion :: ffi_to (obj . mn_list_diff_list) }) } unsafe fn destroy (ffi : * mut dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . result_at_tip) ; ; ferment_interfaces :: unbox_any (ffi_ref . result_at_h) ; ; ferment_interfaces :: unbox_any (ffi_ref . result_at_h_c) ; ; ferment_interfaces :: unbox_any (ffi_ref . result_at_h_2c) ; ; ferment_interfaces :: unbox_any (ffi_ref . result_at_h_3c) ; ; if (! (ffi_ref . result_at_h_4c) . is_null ()) { ferment_interfaces :: unbox_any (ffi_ref . result_at_h_4c) ; } ; ferment_interfaces :: unbox_any (ffi_ref . snapshot_at_h_c) ; ; ferment_interfaces :: unbox_any (ffi_ref . snapshot_at_h_2c) ; ; ferment_interfaces :: unbox_any (ffi_ref . snapshot_at_h_3c) ; ; if (! (ffi_ref . snapshot_at_h_4c) . is_null ()) { ferment_interfaces :: unbox_any (ffi_ref . snapshot_at_h_4c) ; } ; ; ferment_interfaces :: unbox_any (ffi_ref . last_quorum_per_index) ; ; ferment_interfaces :: unbox_any (ffi_ref . quorum_snapshot_list) ; ; ferment_interfaces :: unbox_any (ffi_ref . mn_list_diff_list) ; ; } } } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_ctor < > (result_at_tip : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , result_at_h : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , result_at_h_c : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , result_at_h_2c : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , result_at_h_3c : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , result_at_h_4c : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult , snapshot_at_h_c : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot , snapshot_at_h_2c : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot , snapshot_at_h_3c : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot , snapshot_at_h_4c : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot , extra_share : bool , last_quorum_per_index : * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry , quorum_snapshot_list : * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot , mn_list_diff_list : * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> * mut dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult { ferment_interfaces :: boxed (dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult { result_at_tip , result_at_h , result_at_h_c , result_at_h_2c , result_at_h_3c , result_at_h_4c , snapshot_at_h_c , snapshot_at_h_2c , snapshot_at_h_3c , snapshot_at_h_4c , extra_share , last_quorum_per_index , quorum_snapshot_list , mn_list_diff_list }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_destroy < > (ffi : * mut dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) { ferment_interfaces :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_get_result_at_tip < > (obj : * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { (* obj) . result_at_tip } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_get_result_at_h < > (obj : * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { (* obj) . result_at_h } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_get_result_at_h_c < > (obj : * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { (* obj) . result_at_h_c } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_get_result_at_h_2c < > (obj : * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { (* obj) . result_at_h_2c } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_get_result_at_h_3c < > (obj : * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { (* obj) . result_at_h_3c } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_get_result_at_h_4c < > (obj : * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { (* obj) . result_at_h_4c } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_get_snapshot_at_h_c < > (obj : * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { (* obj) . snapshot_at_h_c } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_get_snapshot_at_h_2c < > (obj : * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { (* obj) . snapshot_at_h_2c } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_get_snapshot_at_h_3c < > (obj : * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { (* obj) . snapshot_at_h_3c } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_get_snapshot_at_h_4c < > (obj : * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) -> * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { (* obj) . snapshot_at_h_4c } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_get_extra_share < > (obj : * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) -> bool { (* obj) . extra_share } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_get_last_quorum_per_index < > (obj : * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) -> * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry { (* obj) . last_quorum_per_index } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_get_quorum_snapshot_list < > (obj : * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) -> * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { (* obj) . quorum_snapshot_list } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_get_mn_list_diff_list < > (obj : * const dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult) -> * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { (* obj) . mn_list_diff_list } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_set_result_at_tip < > (obj : * mut dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) { (* obj) . result_at_tip = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_set_result_at_h < > (obj : * mut dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) { (* obj) . result_at_h = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_set_result_at_h_c < > (obj : * mut dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) { (* obj) . result_at_h_c = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_set_result_at_h_2c < > (obj : * mut dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) { (* obj) . result_at_h_2c = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_set_result_at_h_3c < > (obj : * mut dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) { (* obj) . result_at_h_3c = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_set_result_at_h_4c < > (obj : * mut dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) { (* obj) . result_at_h_4c = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_set_snapshot_at_h_c < > (obj : * mut dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) { (* obj) . snapshot_at_h_c = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_set_snapshot_at_h_2c < > (obj : * mut dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) { (* obj) . snapshot_at_h_2c = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_set_snapshot_at_h_3c < > (obj : * mut dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) { (* obj) . snapshot_at_h_3c = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_set_snapshot_at_h_4c < > (obj : * mut dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult , value : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) { (* obj) . snapshot_at_h_4c = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_set_extra_share < > (obj : * mut dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult , value : bool) { (* obj) . extra_share = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_set_last_quorum_per_index < > (obj : * mut dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult , value : * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry) { (* obj) . last_quorum_per_index = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_set_quorum_snapshot_list < > (obj : * mut dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult , value : * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) { (* obj) . quorum_snapshot_list = value ; } # [no_mangle] pub unsafe extern "C" fn dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult_set_mn_list_diff_list < > (obj : * mut dash_spv_masternode_processor_processing_qr_info_result_QRInfoResult , value : * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) { (* obj) . mn_list_diff_list = value ; } } } } pub mod dash_spv_apple_bindings { use crate as dash_spv_apple_bindings ; pub mod address { use crate as dash_spv_apple_bindings ; pub mod addresses { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_apple_bindings :: address :: addresses :: script_pubkey_for_address`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_apple_bindings_address_addresses_script_pubkey_for_address (address : * mut std :: os :: raw :: c_char , chain_type : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: chain_type :: dash_spv_masternode_processor_chain_common_chain_type_ChainType) -> * mut crate :: fermented :: generics :: Vec_u8 { let obj = dash_spv_apple_bindings :: address :: addresses :: script_pubkey_for_address (ferment_interfaces :: FFIConversion :: ffi_from_opt (address) , ferment_interfaces :: FFIConversion :: ffi_from (chain_type)) ; ferment_interfaces :: FFIConversion :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_apple_bindings :: address :: addresses :: address_with_script_sig`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_apple_bindings_address_addresses_address_with_script_sig (script : * mut crate :: fermented :: generics :: Vec_u8 , chain_type : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: chain_type :: dash_spv_masternode_processor_chain_common_chain_type_ChainType) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_apple_bindings :: address :: addresses :: address_with_script_sig (ferment_interfaces :: FFIConversion :: ffi_from (script) , ferment_interfaces :: FFIConversion :: ffi_from (chain_type)) ; ferment_interfaces :: FFIConversion :: ffi_to_opt (obj) } # [doc = "FFI-representation of the [`dash_spv_apple_bindings :: address :: addresses :: address_from_hash160`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_apple_bindings_address_addresses_address_from_hash160 (hash : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt160 , chain_type : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: chain_type :: dash_spv_masternode_processor_chain_common_chain_type_ChainType) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_apple_bindings :: address :: addresses :: address_from_hash160 (ferment_interfaces :: FFIConversion :: ffi_from (hash) , ferment_interfaces :: FFIConversion :: ffi_from (chain_type)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`dash_spv_apple_bindings :: address :: addresses :: is_valid_dash_address_for_chain`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_apple_bindings_address_addresses_is_valid_dash_address_for_chain (address : * mut std :: os :: raw :: c_char , chain_type : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: chain_type :: dash_spv_masternode_processor_chain_common_chain_type_ChainType) -> bool { let obj = dash_spv_apple_bindings :: address :: addresses :: is_valid_dash_address_for_chain (ferment_interfaces :: FFIConversion :: ffi_from_opt (address) , ferment_interfaces :: FFIConversion :: ffi_from (chain_type)) ; obj } # [doc = "FFI-representation of the [`dash_spv_apple_bindings :: address :: addresses :: address_with_script_pubkey`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_apple_bindings_address_addresses_address_with_script_pubkey (script : * mut crate :: fermented :: generics :: Vec_u8 , chain_type : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: chain_type :: dash_spv_masternode_processor_chain_common_chain_type_ChainType) -> * mut std :: os :: raw :: c_char { let obj = dash_spv_apple_bindings :: address :: addresses :: address_with_script_pubkey (ferment_interfaces :: FFIConversion :: ffi_from (script) , ferment_interfaces :: FFIConversion :: ffi_from (chain_type)) ; ferment_interfaces :: FFIConversion :: ffi_to_opt (obj) } } } pub mod ffi { use crate as dash_spv_apple_bindings ; pub mod callbacks { use crate as dash_spv_apple_bindings ; } } # [cfg (test)] pub mod tests { use crate as dash_spv_apple_bindings ; pub mod listdiff { use crate as dash_spv_apple_bindings ; } } # [doc = "FFI-representation of the [`dash_spv_apple_bindings :: DashSharedCore`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_apple_bindings_DashSharedCore_ctor < > (processor : * mut dash_spv_masternode_processor :: processing :: processor :: MasternodeProcessor , cache : * mut dash_spv_masternode_processor :: processing :: processor_cache :: MasternodeProcessorCache , context : * mut std :: os :: raw :: c_void) -> * mut dash_spv_apple_bindings :: DashSharedCore { ferment_interfaces :: boxed (dash_spv_apple_bindings :: DashSharedCore { processor : processor , cache : cache , context : context }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_apple_bindings_DashSharedCore_destroy < > (ffi : * mut dash_spv_apple_bindings :: DashSharedCore) { ferment_interfaces :: unbox_any (ffi) ; } pub mod types { use crate as dash_spv_apple_bindings ; } pub mod ffi_core_provider { use crate as dash_spv_apple_bindings ; # [doc = "FFI-representation of the [`dash_spv_apple_bindings :: ffi_core_provider :: FFICoreProvider`]"] # [no_mangle] pub unsafe extern "C" fn dash_spv_apple_bindings_ffi_core_provider_FFICoreProvider_ctor < > (opaque_context : * mut std :: os :: raw :: c_void , chain_type : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: chain_type :: dash_spv_masternode_processor_chain_common_chain_type_ChainType , get_block_height_by_hash : dash_spv_apple_bindings :: ffi :: callbacks :: GetBlockHeightByHash , get_merkle_root_by_hash : dash_spv_apple_bindings :: ffi :: callbacks :: MerkleRootLookup , get_block_hash_by_height : dash_spv_apple_bindings :: ffi :: callbacks :: GetBlockHashByHeight , get_llmq_snapshot_by_block_hash : dash_spv_apple_bindings :: ffi :: callbacks :: GetLLMQSnapshotByBlockHash , get_cl_signature_by_block_hash : dash_spv_apple_bindings :: ffi :: callbacks :: GetCLSignatureByBlockHash , save_llmq_snapshot : dash_spv_apple_bindings :: ffi :: callbacks :: SaveLLMQSnapshot , save_cl_signature : dash_spv_apple_bindings :: ffi :: callbacks :: SaveCLSignature , get_masternode_list_by_block_hash : dash_spv_apple_bindings :: ffi :: callbacks :: MasternodeListLookup , save_masternode_list : dash_spv_apple_bindings :: ffi :: callbacks :: MasternodeListSave , destroy_masternode_list : dash_spv_apple_bindings :: ffi :: callbacks :: MasternodeListDestroy , add_insight : dash_spv_apple_bindings :: ffi :: callbacks :: AddInsightBlockingLookup , destroy_hash : dash_spv_apple_bindings :: ffi :: callbacks :: HashDestroy , destroy_snapshot : dash_spv_apple_bindings :: ffi :: callbacks :: LLMQSnapshotDestroy , should_process_diff_with_range : dash_spv_apple_bindings :: ffi :: callbacks :: ShouldProcessDiffWithRange) -> * mut dash_spv_apple_bindings :: ffi_core_provider :: FFICoreProvider { ferment_interfaces :: boxed (dash_spv_apple_bindings :: ffi_core_provider :: FFICoreProvider { opaque_context : opaque_context , chain_type : ferment_interfaces :: FFIConversion :: ffi_from (chain_type) , get_block_height_by_hash : get_block_height_by_hash , get_merkle_root_by_hash : get_merkle_root_by_hash , get_block_hash_by_height : get_block_hash_by_height , get_llmq_snapshot_by_block_hash : get_llmq_snapshot_by_block_hash , get_cl_signature_by_block_hash : get_cl_signature_by_block_hash , save_llmq_snapshot : save_llmq_snapshot , save_cl_signature : save_cl_signature , get_masternode_list_by_block_hash : get_masternode_list_by_block_hash , save_masternode_list : save_masternode_list , destroy_masternode_list : destroy_masternode_list , add_insight : add_insight , destroy_hash : destroy_hash , destroy_snapshot : destroy_snapshot , should_process_diff_with_range : should_process_diff_with_range }) } # [no_mangle] pub unsafe extern "C" fn dash_spv_apple_bindings_ffi_core_provider_FFICoreProvider_destroy < > (ffi : * mut dash_spv_apple_bindings :: ffi_core_provider :: FFICoreProvider) { ferment_interfaces :: unbox_any (ffi) ; } } } } # [allow (clippy :: let_and_return , clippy :: suspicious_else_formatting , clippy :: redundant_field_names , dead_code , non_camel_case_types , non_snake_case , non_upper_case_globals , redundant_semicolons , unreachable_patterns , unused_braces , unused_imports , unused_parens , unused_qualifications , unused_unsafe , unused_variables)] pub mod generics { use crate as dash_spv_apple_bindings ; # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: llmq_indexed_hash :: dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash , pub values : * mut * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry } impl ferment_interfaces :: FFIConversion < std :: collections :: BTreeMap < dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > > for std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> std :: collections :: BTreeMap < dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversion :: ffi_from (o) , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > >) -> * const std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_group (obj . keys () . cloned ()) , values : ferment_interfaces :: to_complex_group (obj . values () . cloned ()) }) } unsafe fn destroy (ffi : * mut std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: llmq_indexed_hash :: dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash , values : * mut * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment_interfaces :: boxed (std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_destroy (ffi : * mut std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , pub values : * mut * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry } impl ferment_interfaces :: FFIConversion < std :: collections :: BTreeMap < dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > > for std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> std :: collections :: BTreeMap < dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversion :: ffi_from (o) , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > >) -> * const std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_group (obj . keys () . cloned ()) , values : ferment_interfaces :: to_complex_group (obj . values () . cloned ()) }) } unsafe fn destroy (ffi : * mut std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , values : * mut * mut crate :: fermented :: generics :: Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment_interfaces :: boxed (std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_destroy (ffi : * mut std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_LLMQType , pub values : * mut * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry } impl ferment_interfaces :: FFIConversion < std :: collections :: BTreeMap < dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType , std :: collections :: BTreeMap < dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > > > for std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> std :: collections :: BTreeMap < dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType , std :: collections :: BTreeMap < dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversion :: ffi_from (o) , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType , std :: collections :: BTreeMap < dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > >) -> * const std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_group (obj . keys () . cloned ()) , values : ferment_interfaces :: to_complex_group (obj . values () . cloned ()) }) } unsafe fn destroy (ffi : * mut std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_LLMQType , values : * mut * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment_interfaces :: boxed (std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_destroy (ffi : * mut std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Arr_u8_20 { pub count : usize , pub values : * mut u8 } impl ferment_interfaces :: FFIConversion < [u8 ; 20] > for Arr_u8_20 { unsafe fn ffi_from_const (ffi : * const Arr_u8_20) -> [u8 ; 20] { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) . try_into () . unwrap () } unsafe fn ffi_to_const (obj : [u8 ; 20]) -> * const Arr_u8_20 { ferment_interfaces :: FFIVecConversion :: encode (obj . to_vec ()) } unsafe fn destroy (ffi : * mut Arr_u8_20) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Arr_u8_20 { type Value = Vec < u8 > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_primitive_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_primitive_group (obj . into_iter ()) }) } } impl Drop for Arr_u8_20 { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Arr_u8_20_ctor (count : usize , values : * mut u8) -> * mut Arr_u8_20 { ferment_interfaces :: boxed (Arr_u8_20 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Arr_u8_20_destroy (ffi : * mut Arr_u8_20) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult } impl ferment_interfaces :: FFIConversion < Vec < dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult > > for Vec_dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { unsafe fn ffi_from_const (ffi : * const Vec_dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> Vec < dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult >) -> * const Vec_dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { type Value = Vec < dash_spv_masternode_processor :: processing :: mn_listdiff_result :: MNListDiffResult > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: mn_listdiff_result :: dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) -> * mut Vec_dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { ferment_interfaces :: boxed (Vec_dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult_destroy (ffi : * mut Vec_dash_spv_masternode_processor_processing_mn_listdiff_result_MNListDiffResult) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_String { pub count : usize , pub values : * mut * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < Vec < String > > for Vec_String { unsafe fn ffi_from_const (ffi : * const Vec_String) -> Vec < String > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < String >) -> * const Vec_String { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_String) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_String { type Value = Vec < String > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_String { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_String_ctor (count : usize , values : * mut * mut std :: os :: raw :: c_char) -> * mut Vec_String { ferment_interfaces :: boxed (Vec_String { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_String_destroy (ffi : * mut Vec_String) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry } impl ferment_interfaces :: FFIConversion < Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > for Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { unsafe fn ffi_from_const (ffi : * const Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry >) -> * const Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { type Value = Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment_interfaces :: boxed (Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_destroy (ffi : * mut Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { pub ok : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot , pub error : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: core_provider :: dash_spv_masternode_processor_processing_core_provider_CoreProviderError } impl ferment_interfaces :: FFIConversion < Result < dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > > for Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { unsafe fn ffi_from_const (ffi : * const Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> Result < dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_result (ffi_ref . ok , ffi_ref . error , | o | ferment_interfaces :: FFIConversion :: ffi_from (o) , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : Result < dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError >) -> * const Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment_interfaces :: boxed ({ let (ok , error) = match obj { Ok (o) => (ferment_interfaces :: FFIConversion :: ffi_to (o) , std :: ptr :: null_mut ()) , Err (o) => (std :: ptr :: null_mut () , ferment_interfaces :: FFIConversion :: ffi_to (o)) } ; Self { ok , error } }) } unsafe fn destroy (ffi : * mut Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_opt (self . ok) ; ferment_interfaces :: unbox_any_opt (self . error) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_ctor (ok : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot , error : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: core_provider :: dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> * mut Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment_interfaces :: boxed (Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_destroy (ffi : * mut Result_ok_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_u8_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError { pub ok : * mut u8 , pub error : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: processing_error :: dash_spv_masternode_processor_processing_processing_error_ProcessingError } impl ferment_interfaces :: FFIConversion < Result < u8 , dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError > > for Result_ok_u8_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError { unsafe fn ffi_from_const (ffi : * const Result_ok_u8_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError) -> Result < u8 , dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_result (ffi_ref . ok , ffi_ref . error , | o | * o , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : Result < u8 , dash_spv_masternode_processor :: processing :: processing_error :: ProcessingError >) -> * const Result_ok_u8_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError { ferment_interfaces :: boxed ({ let (ok , error) = match obj { Ok (o) => (ferment_interfaces :: boxed (o) , std :: ptr :: null_mut ()) , Err (o) => (std :: ptr :: null_mut () , ferment_interfaces :: FFIConversion :: ffi_to (o)) } ; Self { ok , error } }) } unsafe fn destroy (ffi : * mut Result_ok_u8_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for Result_ok_u8_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError { fn drop (& mut self) { unsafe { ferment_interfaces :: destroy_opt_primitive (self . ok) ; ferment_interfaces :: unbox_any_opt (self . error) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_u8_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError_ctor (ok : * mut u8 , error : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: processing_error :: dash_spv_masternode_processor_processing_processing_error_ProcessingError) -> * mut Result_ok_u8_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError { ferment_interfaces :: boxed (Result_ok_u8_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_u8_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError_destroy (ffi : * mut Result_ok_u8_err_dash_spv_masternode_processor_processing_processing_error_ProcessingError) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Arr_u8_96 { pub count : usize , pub values : * mut u8 } impl ferment_interfaces :: FFIConversion < [u8 ; 96] > for Arr_u8_96 { unsafe fn ffi_from_const (ffi : * const Arr_u8_96) -> [u8 ; 96] { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) . try_into () . unwrap () } unsafe fn ffi_to_const (obj : [u8 ; 96]) -> * const Arr_u8_96 { ferment_interfaces :: FFIVecConversion :: encode (obj . to_vec ()) } unsafe fn destroy (ffi : * mut Arr_u8_96) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Arr_u8_96 { type Value = Vec < u8 > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_primitive_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_primitive_group (obj . into_iter ()) }) } } impl Drop for Arr_u8_96 { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Arr_u8_96_ctor (count : usize , values : * mut u8) -> * mut Arr_u8_96 { ferment_interfaces :: boxed (Arr_u8_96 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Arr_u8_96_destroy (ffi : * mut Arr_u8_96) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_crypto_byte_util_UInt768 { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , pub values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt768 } impl ferment_interfaces :: FFIConversion < std :: collections :: BTreeMap < dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 , dash_spv_masternode_processor :: crypto :: byte_util :: UInt768 > > for std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_crypto_byte_util_UInt768 { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_crypto_byte_util_UInt768) -> std :: collections :: BTreeMap < dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 , dash_spv_masternode_processor :: crypto :: byte_util :: UInt768 > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversion :: ffi_from (o) , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 , dash_spv_masternode_processor :: crypto :: byte_util :: UInt768 >) -> * const std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_crypto_byte_util_UInt768 { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_group (obj . keys () . cloned ()) , values : ferment_interfaces :: to_complex_group (obj . values () . cloned ()) }) } unsafe fn destroy (ffi : * mut std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_crypto_byte_util_UInt768) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_crypto_byte_util_UInt768 { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_crypto_byte_util_UInt768_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt768) -> * mut std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_crypto_byte_util_UInt768 { ferment_interfaces :: boxed (std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_crypto_byte_util_UInt768 { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_crypto_byte_util_UInt768_destroy (ffi : * mut std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_crypto_byte_util_UInt768) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dash_spv_masternode_processor_crypto_byte_util_UInt256 { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 } impl ferment_interfaces :: FFIConversion < Vec < dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 > > for Vec_dash_spv_masternode_processor_crypto_byte_util_UInt256 { unsafe fn ffi_from_const (ffi : * const Vec_dash_spv_masternode_processor_crypto_byte_util_UInt256) -> Vec < dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 >) -> * const Vec_dash_spv_masternode_processor_crypto_byte_util_UInt256 { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_dash_spv_masternode_processor_crypto_byte_util_UInt256) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_dash_spv_masternode_processor_crypto_byte_util_UInt256 { type Value = Vec < dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dash_spv_masternode_processor_crypto_byte_util_UInt256 { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_masternode_processor_crypto_byte_util_UInt256_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256) -> * mut Vec_dash_spv_masternode_processor_crypto_byte_util_UInt256 { ferment_interfaces :: boxed (Vec_dash_spv_masternode_processor_crypto_byte_util_UInt256 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_masternode_processor_crypto_byte_util_UInt256_destroy (ffi : * mut Vec_dash_spv_masternode_processor_crypto_byte_util_UInt256) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: block :: dash_spv_masternode_processor_common_block_Block , pub values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: operator_public_key :: dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey } impl ferment_interfaces :: FFIConversion < std :: collections :: BTreeMap < dash_spv_masternode_processor :: common :: block :: Block , dash_spv_masternode_processor :: models :: operator_public_key :: OperatorPublicKey > > for std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey) -> std :: collections :: BTreeMap < dash_spv_masternode_processor :: common :: block :: Block , dash_spv_masternode_processor :: models :: operator_public_key :: OperatorPublicKey > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversion :: ffi_from (o) , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < dash_spv_masternode_processor :: common :: block :: Block , dash_spv_masternode_processor :: models :: operator_public_key :: OperatorPublicKey >) -> * const std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_group (obj . keys () . cloned ()) , values : ferment_interfaces :: to_complex_group (obj . values () . cloned ()) }) } unsafe fn destroy (ffi : * mut std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: block :: dash_spv_masternode_processor_common_block_Block , values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: operator_public_key :: dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey) -> * mut std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey { ferment_interfaces :: boxed (std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey_destroy (ffi : * mut std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_masternode_processor_models_operator_public_key_OperatorPublicKey) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_i32 { pub count : usize , pub values : * mut i32 } impl ferment_interfaces :: FFIConversion < Vec < i32 > > for Vec_i32 { unsafe fn ffi_from_const (ffi : * const Vec_i32) -> Vec < i32 > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < i32 >) -> * const Vec_i32 { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_i32) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_i32 { type Value = Vec < i32 > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_primitive_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_primitive_group (obj . into_iter ()) }) } } impl Drop for Vec_i32 { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_i32_ctor (count : usize , values : * mut i32) -> * mut Vec_i32 { ferment_interfaces :: boxed (Vec_i32 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_i32_destroy (ffi : * mut Vec_i32) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dash_spv_masternode_processor_tx_transaction_TransactionInput { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: tx :: transaction :: dash_spv_masternode_processor_tx_transaction_TransactionInput } impl ferment_interfaces :: FFIConversion < Vec < dash_spv_masternode_processor :: tx :: transaction :: TransactionInput > > for Vec_dash_spv_masternode_processor_tx_transaction_TransactionInput { unsafe fn ffi_from_const (ffi : * const Vec_dash_spv_masternode_processor_tx_transaction_TransactionInput) -> Vec < dash_spv_masternode_processor :: tx :: transaction :: TransactionInput > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < dash_spv_masternode_processor :: tx :: transaction :: TransactionInput >) -> * const Vec_dash_spv_masternode_processor_tx_transaction_TransactionInput { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_dash_spv_masternode_processor_tx_transaction_TransactionInput) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_dash_spv_masternode_processor_tx_transaction_TransactionInput { type Value = Vec < dash_spv_masternode_processor :: tx :: transaction :: TransactionInput > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dash_spv_masternode_processor_tx_transaction_TransactionInput { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_masternode_processor_tx_transaction_TransactionInput_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: tx :: transaction :: dash_spv_masternode_processor_tx_transaction_TransactionInput) -> * mut Vec_dash_spv_masternode_processor_tx_transaction_TransactionInput { ferment_interfaces :: boxed (Vec_dash_spv_masternode_processor_tx_transaction_TransactionInput { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_masternode_processor_tx_transaction_TransactionInput_destroy (ffi : * mut Vec_dash_spv_masternode_processor_tx_transaction_TransactionInput) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , pub values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList } impl ferment_interfaces :: FFIConversion < std :: collections :: BTreeMap < dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 , dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList > > for std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> std :: collections :: BTreeMap < dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 , dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversion :: ffi_from (o) , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 , dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList >) -> * const std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_group (obj . keys () . cloned ()) , values : ferment_interfaces :: to_complex_group (obj . values () . cloned ()) }) } unsafe fn destroy (ffi : * mut std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList) -> * mut std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList { ferment_interfaces :: boxed (std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList_destroy (ffi : * mut std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_list_MasternodeList) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Arr_u8_32 { pub count : usize , pub values : * mut u8 } impl ferment_interfaces :: FFIConversion < [u8 ; 32] > for Arr_u8_32 { unsafe fn ffi_from_const (ffi : * const Arr_u8_32) -> [u8 ; 32] { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) . try_into () . unwrap () } unsafe fn ffi_to_const (obj : [u8 ; 32]) -> * const Arr_u8_32 { ferment_interfaces :: FFIVecConversion :: encode (obj . to_vec ()) } unsafe fn destroy (ffi : * mut Arr_u8_32) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Arr_u8_32 { type Value = Vec < u8 > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_primitive_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_primitive_group (obj . into_iter ()) }) } } impl Drop for Arr_u8_32 { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Arr_u8_32_ctor (count : usize , values : * mut u8) -> * mut Arr_u8_32 { ferment_interfaces :: boxed (Arr_u8_32 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Arr_u8_32_destroy (ffi : * mut Arr_u8_32) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_u8 { pub count : usize , pub values : * mut u8 } impl ferment_interfaces :: FFIConversion < Vec < u8 > > for Vec_u8 { unsafe fn ffi_from_const (ffi : * const Vec_u8) -> Vec < u8 > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < u8 >) -> * const Vec_u8 { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_u8) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_u8 { type Value = Vec < u8 > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_primitive_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_primitive_group (obj . into_iter ()) }) } } impl Drop for Vec_u8 { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_u8_ctor (count : usize , values : * mut u8) -> * mut Vec_u8 { ferment_interfaces :: boxed (Vec_u8 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_u8_destroy (ffi : * mut Vec_u8) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Arr_u8_48 { pub count : usize , pub values : * mut u8 } impl ferment_interfaces :: FFIConversion < [u8 ; 48] > for Arr_u8_48 { unsafe fn ffi_from_const (ffi : * const Arr_u8_48) -> [u8 ; 48] { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) . try_into () . unwrap () } unsafe fn ffi_to_const (obj : [u8 ; 48]) -> * const Arr_u8_48 { ferment_interfaces :: FFIVecConversion :: encode (obj . to_vec ()) } unsafe fn destroy (ffi : * mut Arr_u8_48) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Arr_u8_48 { type Value = Vec < u8 > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_primitive_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_primitive_group (obj . into_iter ()) }) } } impl Drop for Arr_u8_48 { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Arr_u8_48_ctor (count : usize , values : * mut u8) -> * mut Arr_u8_48 { ferment_interfaces :: boxed (Arr_u8_48 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Arr_u8_48_destroy (ffi : * mut Arr_u8_48) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_dash_spv_masternode_processor_crypto_byte_util_UInt768_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { pub ok : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt768 , pub error : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: core_provider :: dash_spv_masternode_processor_processing_core_provider_CoreProviderError } impl ferment_interfaces :: FFIConversion < Result < dash_spv_masternode_processor :: crypto :: byte_util :: UInt768 , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > > for Result_ok_dash_spv_masternode_processor_crypto_byte_util_UInt768_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { unsafe fn ffi_from_const (ffi : * const Result_ok_dash_spv_masternode_processor_crypto_byte_util_UInt768_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> Result < dash_spv_masternode_processor :: crypto :: byte_util :: UInt768 , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_result (ffi_ref . ok , ffi_ref . error , | o | ferment_interfaces :: FFIConversion :: ffi_from (o) , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : Result < dash_spv_masternode_processor :: crypto :: byte_util :: UInt768 , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError >) -> * const Result_ok_dash_spv_masternode_processor_crypto_byte_util_UInt768_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment_interfaces :: boxed ({ let (ok , error) = match obj { Ok (o) => (ferment_interfaces :: FFIConversion :: ffi_to (o) , std :: ptr :: null_mut ()) , Err (o) => (std :: ptr :: null_mut () , ferment_interfaces :: FFIConversion :: ffi_to (o)) } ; Self { ok , error } }) } unsafe fn destroy (ffi : * mut Result_ok_dash_spv_masternode_processor_crypto_byte_util_UInt768_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for Result_ok_dash_spv_masternode_processor_crypto_byte_util_UInt768_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_opt (self . ok) ; ferment_interfaces :: unbox_any_opt (self . error) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_dash_spv_masternode_processor_crypto_byte_util_UInt768_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_ctor (ok : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt768 , error : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: core_provider :: dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> * mut Result_ok_dash_spv_masternode_processor_crypto_byte_util_UInt768_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment_interfaces :: boxed (Result_ok_dash_spv_masternode_processor_crypto_byte_util_UInt768_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_dash_spv_masternode_processor_crypto_byte_util_UInt768_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_destroy (ffi : * mut Result_ok_dash_spv_masternode_processor_crypto_byte_util_UInt768_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dash_spv_masternode_processor_tx_transaction_TransactionOutput { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: tx :: transaction :: dash_spv_masternode_processor_tx_transaction_TransactionOutput } impl ferment_interfaces :: FFIConversion < Vec < dash_spv_masternode_processor :: tx :: transaction :: TransactionOutput > > for Vec_dash_spv_masternode_processor_tx_transaction_TransactionOutput { unsafe fn ffi_from_const (ffi : * const Vec_dash_spv_masternode_processor_tx_transaction_TransactionOutput) -> Vec < dash_spv_masternode_processor :: tx :: transaction :: TransactionOutput > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < dash_spv_masternode_processor :: tx :: transaction :: TransactionOutput >) -> * const Vec_dash_spv_masternode_processor_tx_transaction_TransactionOutput { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_dash_spv_masternode_processor_tx_transaction_TransactionOutput) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_dash_spv_masternode_processor_tx_transaction_TransactionOutput { type Value = Vec < dash_spv_masternode_processor :: tx :: transaction :: TransactionOutput > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dash_spv_masternode_processor_tx_transaction_TransactionOutput { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_masternode_processor_tx_transaction_TransactionOutput_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: tx :: transaction :: dash_spv_masternode_processor_tx_transaction_TransactionOutput) -> * mut Vec_dash_spv_masternode_processor_tx_transaction_TransactionOutput { ferment_interfaces :: boxed (Vec_dash_spv_masternode_processor_tx_transaction_TransactionOutput { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_masternode_processor_tx_transaction_TransactionOutput_destroy (ffi : * mut Vec_dash_spv_masternode_processor_tx_transaction_TransactionOutput) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_LLMQType , pub values : * mut * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry } impl ferment_interfaces :: FFIConversion < std :: collections :: BTreeMap < dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType , std :: collections :: BTreeMap < dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > > > for std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> std :: collections :: BTreeMap < dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType , std :: collections :: BTreeMap < dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversion :: ffi_from (o) , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType , std :: collections :: BTreeMap < dash_spv_masternode_processor :: models :: llmq_indexed_hash :: LLMQIndexedHash , Vec < dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > >) -> * const std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_group (obj . keys () . cloned ()) , values : ferment_interfaces :: to_complex_group (obj . values () . cloned ()) }) } unsafe fn destroy (ffi : * mut std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_LLMQType , values : * mut * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment_interfaces :: boxed (std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_destroy (ffi : * mut std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_models_llmq_indexed_hash_LLMQIndexedHash_values_Vec_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Arr_u8_64 { pub count : usize , pub values : * mut u8 } impl ferment_interfaces :: FFIConversion < [u8 ; 64] > for Arr_u8_64 { unsafe fn ffi_from_const (ffi : * const Arr_u8_64) -> [u8 ; 64] { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) . try_into () . unwrap () } unsafe fn ffi_to_const (obj : [u8 ; 64]) -> * const Arr_u8_64 { ferment_interfaces :: FFIVecConversion :: encode (obj . to_vec ()) } unsafe fn destroy (ffi : * mut Arr_u8_64) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Arr_u8_64 { type Value = Vec < u8 > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_primitive_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_primitive_group (obj . into_iter ()) }) } } impl Drop for Arr_u8_64 { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Arr_u8_64_ctor (count : usize , values : * mut u8) -> * mut Arr_u8_64 { ferment_interfaces :: boxed (Arr_u8_64 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Arr_u8_64_destroy (ffi : * mut Arr_u8_64) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { pub ok : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList , pub error : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: core_provider :: dash_spv_masternode_processor_processing_core_provider_CoreProviderError } impl ferment_interfaces :: FFIConversion < Result < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > > for Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { unsafe fn ffi_from_const (ffi : * const Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> Result < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_result (ffi_ref . ok , ffi_ref . error , | o | ferment_interfaces :: FFIConversion :: ffi_from (o) , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : Result < dash_spv_masternode_processor :: models :: masternode_list :: MasternodeList , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError >) -> * const Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment_interfaces :: boxed ({ let (ok , error) = match obj { Ok (o) => (ferment_interfaces :: FFIConversion :: ffi_to (o) , std :: ptr :: null_mut ()) , Err (o) => (std :: ptr :: null_mut () , ferment_interfaces :: FFIConversion :: ffi_to (o)) } ; Self { ok , error } }) } unsafe fn destroy (ffi : * mut Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_opt (self . ok) ; ferment_interfaces :: unbox_any_opt (self . error) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_ctor (ok : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_list :: dash_spv_masternode_processor_models_masternode_list_MasternodeList , error : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: core_provider :: dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> * mut Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment_interfaces :: boxed (Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_destroy (ffi : * mut Result_ok_dash_spv_masternode_processor_models_masternode_list_MasternodeList_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Result_ok_dash_spv_masternode_processor_crypto_byte_util_UInt256_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { pub ok : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , pub error : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: core_provider :: dash_spv_masternode_processor_processing_core_provider_CoreProviderError } impl ferment_interfaces :: FFIConversion < Result < dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > > for Result_ok_dash_spv_masternode_processor_crypto_byte_util_UInt256_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { unsafe fn ffi_from_const (ffi : * const Result_ok_dash_spv_masternode_processor_crypto_byte_util_UInt256_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> Result < dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_result (ffi_ref . ok , ffi_ref . error , | o | ferment_interfaces :: FFIConversion :: ffi_from (o) , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : Result < dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 , dash_spv_masternode_processor :: processing :: core_provider :: CoreProviderError >) -> * const Result_ok_dash_spv_masternode_processor_crypto_byte_util_UInt256_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment_interfaces :: boxed ({ let (ok , error) = match obj { Ok (o) => (ferment_interfaces :: FFIConversion :: ffi_to (o) , std :: ptr :: null_mut ()) , Err (o) => (std :: ptr :: null_mut () , ferment_interfaces :: FFIConversion :: ffi_to (o)) } ; Self { ok , error } }) } unsafe fn destroy (ffi : * mut Result_ok_dash_spv_masternode_processor_crypto_byte_util_UInt256_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for Result_ok_dash_spv_masternode_processor_crypto_byte_util_UInt256_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_opt (self . ok) ; ferment_interfaces :: unbox_any_opt (self . error) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Result_ok_dash_spv_masternode_processor_crypto_byte_util_UInt256_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_ctor (ok : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , error : * mut crate :: fermented :: types :: dash_spv_masternode_processor :: processing :: core_provider :: dash_spv_masternode_processor_processing_core_provider_CoreProviderError) -> * mut Result_ok_dash_spv_masternode_processor_crypto_byte_util_UInt256_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ferment_interfaces :: boxed (Result_ok_dash_spv_masternode_processor_crypto_byte_util_UInt256_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError { ok , error }) } # [no_mangle] pub unsafe extern "C" fn Result_ok_dash_spv_masternode_processor_crypto_byte_util_UInt256_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError_destroy (ffi : * mut Result_ok_dash_spv_masternode_processor_crypto_byte_util_UInt256_err_dash_spv_masternode_processor_processing_core_provider_CoreProviderError) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: llmq_entry :: dash_spv_masternode_processor_models_llmq_entry_LLMQEntry } impl ferment_interfaces :: FFIConversion < Vec < dash_spv_masternode_processor :: models :: llmq_entry :: LLMQEntry > > for Vec_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry { unsafe fn ffi_from_const (ffi : * const Vec_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry) -> Vec < dash_spv_masternode_processor :: models :: llmq_entry :: LLMQEntry > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < dash_spv_masternode_processor :: models :: llmq_entry :: LLMQEntry >) -> * const Vec_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry { type Value = Vec < dash_spv_masternode_processor :: models :: llmq_entry :: LLMQEntry > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: llmq_entry :: dash_spv_masternode_processor_models_llmq_entry_LLMQEntry) -> * mut Vec_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry { ferment_interfaces :: boxed (Vec_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_destroy (ffi : * mut Vec_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_masternode_processor_crypto_byte_util_UInt256 { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: block :: dash_spv_masternode_processor_common_block_Block , pub values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 } impl ferment_interfaces :: FFIConversion < std :: collections :: BTreeMap < dash_spv_masternode_processor :: common :: block :: Block , dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 > > for std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_masternode_processor_crypto_byte_util_UInt256 { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_masternode_processor_crypto_byte_util_UInt256) -> std :: collections :: BTreeMap < dash_spv_masternode_processor :: common :: block :: Block , dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversion :: ffi_from (o) , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < dash_spv_masternode_processor :: common :: block :: Block , dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 >) -> * const std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_masternode_processor_crypto_byte_util_UInt256 { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_group (obj . keys () . cloned ()) , values : ferment_interfaces :: to_complex_group (obj . values () . cloned ()) }) } unsafe fn destroy (ffi : * mut std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_masternode_processor_crypto_byte_util_UInt256) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_masternode_processor_crypto_byte_util_UInt256 { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_masternode_processor_crypto_byte_util_UInt256_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: block :: dash_spv_masternode_processor_common_block_Block , values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256) -> * mut std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_masternode_processor_crypto_byte_util_UInt256 { ferment_interfaces :: boxed (std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_masternode_processor_crypto_byte_util_UInt256 { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_masternode_processor_crypto_byte_util_UInt256_destroy (ffi : * mut std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_dash_spv_masternode_processor_crypto_byte_util_UInt256) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_bool { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: block :: dash_spv_masternode_processor_common_block_Block , pub values : * mut bool } impl ferment_interfaces :: FFIConversion < std :: collections :: BTreeMap < dash_spv_masternode_processor :: common :: block :: Block , bool > > for std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_bool { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_bool) -> std :: collections :: BTreeMap < dash_spv_masternode_processor :: common :: block :: Block , bool > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversion :: ffi_from (o) , | o | o) } unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < dash_spv_masternode_processor :: common :: block :: Block , bool >) -> * const std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_bool { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_group (obj . keys () . cloned ()) , values : ferment_interfaces :: to_primitive_group (obj . values () . cloned ()) }) } unsafe fn destroy (ffi : * mut std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_bool) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_bool { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_bool_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: common :: block :: dash_spv_masternode_processor_common_block_Block , values : * mut bool) -> * mut std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_bool { ferment_interfaces :: boxed (std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_bool { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_bool_destroy (ffi : * mut std_collections_Map_keys_dash_spv_masternode_processor_common_block_Block_values_bool) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , pub values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry } impl ferment_interfaces :: FFIConversion < std :: collections :: BTreeMap < dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 , dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > > for std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> std :: collections :: BTreeMap < dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 , dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversion :: ffi_from (o) , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 , dash_spv_masternode_processor :: models :: masternode_entry :: MasternodeEntry >) -> * const std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_group (obj . keys () . cloned ()) , values : ferment_interfaces :: to_complex_group (obj . values () . cloned ()) }) } unsafe fn destroy (ffi : * mut std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: masternode_entry :: dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) -> * mut std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { ferment_interfaces :: boxed (std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry_destroy (ffi : * mut std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_masternode_entry_MasternodeEntry) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , pub values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: llmq_entry :: dash_spv_masternode_processor_models_llmq_entry_LLMQEntry } impl ferment_interfaces :: FFIConversion < std :: collections :: BTreeMap < dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 , dash_spv_masternode_processor :: models :: llmq_entry :: LLMQEntry > > for std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry) -> std :: collections :: BTreeMap < dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 , dash_spv_masternode_processor :: models :: llmq_entry :: LLMQEntry > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversion :: ffi_from (o) , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 , dash_spv_masternode_processor :: models :: llmq_entry :: LLMQEntry >) -> * const std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_group (obj . keys () . cloned ()) , values : ferment_interfaces :: to_complex_group (obj . values () . cloned ()) }) } unsafe fn destroy (ffi : * mut std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: llmq_entry :: dash_spv_masternode_processor_models_llmq_entry_LLMQEntry) -> * mut std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry { ferment_interfaces :: boxed (std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_destroy (ffi : * mut std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_LLMQType , pub values : * mut * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry } impl ferment_interfaces :: FFIConversion < std :: collections :: BTreeMap < dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType , std :: collections :: BTreeMap < dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 , dash_spv_masternode_processor :: models :: llmq_entry :: LLMQEntry > > > for std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry) -> std :: collections :: BTreeMap < dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType , std :: collections :: BTreeMap < dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 , dash_spv_masternode_processor :: models :: llmq_entry :: LLMQEntry > > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversion :: ffi_from (o) , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < dash_spv_masternode_processor :: chain :: common :: llmq_type :: LLMQType , std :: collections :: BTreeMap < dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 , dash_spv_masternode_processor :: models :: llmq_entry :: LLMQEntry > >) -> * const std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_group (obj . keys () . cloned ()) , values : ferment_interfaces :: to_complex_group (obj . values () . cloned ()) }) } unsafe fn destroy (ffi : * mut std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: chain :: common :: llmq_type :: dash_spv_masternode_processor_chain_common_llmq_type_LLMQType , values : * mut * mut crate :: fermented :: generics :: std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry) -> * mut std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry { ferment_interfaces :: boxed (std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry_destroy (ffi : * mut std_collections_Map_keys_dash_spv_masternode_processor_chain_common_llmq_type_LLMQType_values_std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_llmq_entry_LLMQEntry) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , pub values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot } impl ferment_interfaces :: FFIConversion < std :: collections :: BTreeMap < dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 , dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot > > for std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) -> std :: collections :: BTreeMap < dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 , dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversion :: ffi_from (o) , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < dash_spv_masternode_processor :: crypto :: byte_util :: UInt256 , dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot >) -> * const std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_group (obj . keys () . cloned ()) , values : ferment_interfaces :: to_complex_group (obj . values () . cloned ()) }) } unsafe fn destroy (ffi : * mut std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: crypto :: byte_util :: dash_spv_masternode_processor_crypto_byte_util_UInt256 , values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) -> * mut std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { ferment_interfaces :: boxed (std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_destroy (ffi : * mut std_collections_Map_keys_dash_spv_masternode_processor_crypto_byte_util_UInt256_values_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Arr_u8_4 { pub count : usize , pub values : * mut u8 } impl ferment_interfaces :: FFIConversion < [u8 ; 4] > for Arr_u8_4 { unsafe fn ffi_from_const (ffi : * const Arr_u8_4) -> [u8 ; 4] { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) . try_into () . unwrap () } unsafe fn ffi_to_const (obj : [u8 ; 4]) -> * const Arr_u8_4 { ferment_interfaces :: FFIVecConversion :: encode (obj . to_vec ()) } unsafe fn destroy (ffi : * mut Arr_u8_4) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Arr_u8_4 { type Value = Vec < u8 > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_primitive_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_primitive_group (obj . into_iter ()) }) } } impl Drop for Arr_u8_4 { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Arr_u8_4_ctor (count : usize , values : * mut u8) -> * mut Arr_u8_4 { ferment_interfaces :: boxed (Arr_u8_4 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Arr_u8_4_destroy (ffi : * mut Arr_u8_4) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot } impl ferment_interfaces :: FFIConversion < Vec < dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot > > for Vec_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { unsafe fn ffi_from_const (ffi : * const Vec_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) -> Vec < dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot >) -> * const Vec_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { type Value = Vec < dash_spv_masternode_processor :: models :: snapshot :: LLMQSnapshot > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_complex_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_complex_group (obj . into_iter ()) }) } } impl Drop for Vec_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: dash_spv_masternode_processor :: models :: snapshot :: dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) -> * mut Vec_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { ferment_interfaces :: boxed (Vec_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot_destroy (ffi : * mut Vec_dash_spv_masternode_processor_models_snapshot_LLMQSnapshot) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Arr_u8_16 { pub count : usize , pub values : * mut u8 } impl ferment_interfaces :: FFIConversion < [u8 ; 16] > for Arr_u8_16 { unsafe fn ffi_from_const (ffi : * const Arr_u8_16) -> [u8 ; 16] { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) . try_into () . unwrap () } unsafe fn ffi_to_const (obj : [u8 ; 16]) -> * const Arr_u8_16 { ferment_interfaces :: FFIVecConversion :: encode (obj . to_vec ()) } unsafe fn destroy (ffi : * mut Arr_u8_16) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Arr_u8_16 { type Value = Vec < u8 > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_primitive_group (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: to_primitive_group (obj . into_iter ()) }) } } impl Drop for Arr_u8_16 { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_vec_ptr (self . values , self . count) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Arr_u8_16_ctor (count : usize , values : * mut u8) -> * mut Arr_u8_16 { ferment_interfaces :: boxed (Arr_u8_16 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Arr_u8_16_destroy (ffi : * mut Arr_u8_16) { ferment_interfaces :: unbox_any (ffi) ; } }